var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from3, except, desc) => {
  if (from3 && typeof from3 === "object" || typeof from3 === "function") {
    for (let key of __getOwnPropNames(from3))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from3[key], enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@nanostores/lit/lib/StoreController.js
var require_StoreController = __commonJS({
  "node_modules/@nanostores/lit/lib/StoreController.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StoreController = void 0;
    var StoreController2 = class {
      constructor(host, atom2) {
        this.host = host;
        this.atom = atom2;
        host.addController(this);
      }
      // Subscribe to the atom when the host connects
      hostConnected() {
        this.unsubscribe = this.atom.subscribe(() => {
          this.host.requestUpdate();
        });
      }
      // Unsubscribe from the atom when the host disconnects
      hostDisconnected() {
        var _a;
        (_a = this.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(this);
      }
      /**
       * The current value of the atom.
       * @readonly
       */
      get value() {
        return this.atom.get();
      }
    };
    exports.StoreController = StoreController2;
  }
});

// node_modules/@nanostores/lit/lib/MultiStoreController.js
var require_MultiStoreController = __commonJS({
  "node_modules/@nanostores/lit/lib/MultiStoreController.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MultiStoreController = void 0;
    var MultiStoreController = class {
      constructor(host, atoms) {
        this.host = host;
        this.atoms = atoms;
        host.addController(this);
      }
      // Subscribe to the atom when the host connects
      hostConnected() {
        this.unsubscribes = this.atoms.map((atom2) => atom2.subscribe(() => this.host.requestUpdate()));
      }
      // Unsubscribe from the atom when the host disconnects
      hostDisconnected() {
        var _a;
        (_a = this.unsubscribes) === null || _a === void 0 ? void 0 : _a.forEach((unsubscribe) => unsubscribe());
      }
      /**
       * The current values of the atoms.
       * @readonly
       */
      get values() {
        return this.atoms.map((atom2) => atom2.get());
      }
    };
    exports.MultiStoreController = MultiStoreController;
  }
});

// node_modules/@nanostores/lit/lib/useStores.js
var require_useStores = __commonJS({
  "node_modules/@nanostores/lit/lib/useStores.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useStores = void 0;
    var MultiStoreController_1 = require_MultiStoreController();
    function useStores(...atoms) {
      return (constructor) => {
        return class extends constructor {
          constructor(...args) {
            super(...args);
            new MultiStoreController_1.MultiStoreController(this, atoms);
          }
        };
      };
    }
    exports.useStores = useStores;
  }
});

// node_modules/@nanostores/lit/lib/withStores.js
var require_withStores = __commonJS({
  "node_modules/@nanostores/lit/lib/withStores.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withStores = void 0;
    var MultiStoreController_1 = require_MultiStoreController();
    var withStores = (LitElementClass, atoms) => {
      return class LitElementWithStores extends LitElementClass {
        constructor(...args) {
          super(...args);
          new MultiStoreController_1.MultiStoreController(this, atoms);
        }
      };
    };
    exports.withStores = withStores;
  }
});

// node_modules/@nanostores/lit/lib/index.js
var require_lib = __commonJS({
  "node_modules/@nanostores/lit/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.withStores = exports.useStores = exports.MultiStoreController = exports.StoreController = void 0;
    var StoreController_1 = require_StoreController();
    Object.defineProperty(exports, "StoreController", { enumerable: true, get: function() {
      return StoreController_1.StoreController;
    } });
    var MultiStoreController_1 = require_MultiStoreController();
    Object.defineProperty(exports, "MultiStoreController", { enumerable: true, get: function() {
      return MultiStoreController_1.MultiStoreController;
    } });
    var useStores_1 = require_useStores();
    Object.defineProperty(exports, "useStores", { enumerable: true, get: function() {
      return useStores_1.useStores;
    } });
    var withStores_1 = require_withStores();
    Object.defineProperty(exports, "withStores", { enumerable: true, get: function() {
      return withStores_1.withStores;
    } });
  }
});

// node_modules/@atproto/oauth-client-browser/dist/disposable-polyfill/index.js
var require_disposable_polyfill = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/disposable-polyfill/index.js"() {
    "use strict";
    Symbol.dispose ?? (Symbol.dispose = Symbol("@@dispose"));
    Symbol.asyncDispose ?? (Symbol.asyncDispose = Symbol("@@asyncDispose"));
  }
});

// node_modules/zod/lib/helpers/util.js
var require_util = __commonJS({
  "node_modules/zod/lib/helpers/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getParsedType = exports.ZodParsedType = exports.objectUtil = exports.util = void 0;
    var util;
    (function(util2) {
      util2.assertEqual = (val) => val;
      function assertIs(_arg) {
      }
      util2.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      util2.assertNever = assertNever;
      util2.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util2.getValidEnumValues = (obj) => {
        const validKeys = util2.objectKeys(obj).filter((k2) => typeof obj[obj[k2]] !== "number");
        const filtered = {};
        for (const k2 of validKeys) {
          filtered[k2] = obj[k2];
        }
        return util2.objectValues(filtered);
      };
      util2.objectValues = (obj) => {
        return util2.objectKeys(obj).map(function(e12) {
          return obj[e12];
        });
      };
      util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
        const keys = [];
        for (const key in object) {
          if (Object.prototype.hasOwnProperty.call(object, key)) {
            keys.push(key);
          }
        }
        return keys;
      };
      util2.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item))
            return item;
        }
        return void 0;
      };
      util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
      function joinValues(array, separator = " | ") {
        return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      util2.joinValues = joinValues;
      util2.jsonStringifyReplacer = (_2, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util || (exports.util = util = {}));
    var objectUtil;
    (function(objectUtil2) {
      objectUtil2.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second
          // second overwrites first
        };
      };
    })(objectUtil || (exports.objectUtil = objectUtil = {}));
    exports.ZodParsedType = util.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    var getParsedType = (data) => {
      const t6 = typeof data;
      switch (t6) {
        case "undefined":
          return exports.ZodParsedType.undefined;
        case "string":
          return exports.ZodParsedType.string;
        case "number":
          return isNaN(data) ? exports.ZodParsedType.nan : exports.ZodParsedType.number;
        case "boolean":
          return exports.ZodParsedType.boolean;
        case "function":
          return exports.ZodParsedType.function;
        case "bigint":
          return exports.ZodParsedType.bigint;
        case "symbol":
          return exports.ZodParsedType.symbol;
        case "object":
          if (Array.isArray(data)) {
            return exports.ZodParsedType.array;
          }
          if (data === null) {
            return exports.ZodParsedType.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return exports.ZodParsedType.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return exports.ZodParsedType.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return exports.ZodParsedType.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return exports.ZodParsedType.date;
          }
          return exports.ZodParsedType.object;
        default:
          return exports.ZodParsedType.unknown;
      }
    };
    exports.getParsedType = getParsedType;
  }
});

// node_modules/zod/lib/ZodError.js
var require_ZodError = __commonJS({
  "node_modules/zod/lib/ZodError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ZodError = exports.quotelessJson = exports.ZodIssueCode = void 0;
    var util_1 = require_util();
    exports.ZodIssueCode = util_1.util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite"
    ]);
    var quotelessJson = (obj) => {
      const json = JSON.stringify(obj, null, 2);
      return json.replace(/"([^"]+)":/g, "$1:");
    };
    exports.quotelessJson = quotelessJson;
    var ZodError = class _ZodError extends Error {
      get errors() {
        return this.issues;
      }
      constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto);
        } else {
          this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
      }
      format(_mapper) {
        const mapper = _mapper || function(issue) {
          return issue.message;
        };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
          for (const issue of error.issues) {
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue));
            } else {
              let curr = fieldErrors;
              let i9 = 0;
              while (i9 < issue.path.length) {
                const el = issue.path[i9];
                const terminal = i9 === issue.path.length - 1;
                if (!terminal) {
                  curr[el] = curr[el] || { _errors: [] };
                } else {
                  curr[el] = curr[el] || { _errors: [] };
                  curr[el]._errors.push(mapper(issue));
                }
                curr = curr[el];
                i9++;
              }
            }
          }
        };
        processError(this);
        return fieldErrors;
      }
      static assert(value) {
        if (!(value instanceof _ZodError)) {
          throw new Error(`Not a ZodError: ${value}`);
        }
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
          } else {
            formErrors.push(mapper(sub));
          }
        }
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    };
    exports.ZodError = ZodError;
    ZodError.create = (issues) => {
      const error = new ZodError(issues);
      return error;
    };
  }
});

// node_modules/zod/lib/locales/en.js
var require_en = __commonJS({
  "node_modules/zod/lib/locales/en.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var util_1 = require_util();
    var ZodError_1 = require_ZodError();
    var errorMap = (issue, _ctx) => {
      let message2;
      switch (issue.code) {
        case ZodError_1.ZodIssueCode.invalid_type:
          if (issue.received === util_1.ZodParsedType.undefined) {
            message2 = "Required";
          } else {
            message2 = `Expected ${issue.expected}, received ${issue.received}`;
          }
          break;
        case ZodError_1.ZodIssueCode.invalid_literal:
          message2 = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;
          break;
        case ZodError_1.ZodIssueCode.unrecognized_keys:
          message2 = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_union:
          message2 = `Invalid input`;
          break;
        case ZodError_1.ZodIssueCode.invalid_union_discriminator:
          message2 = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_enum_value:
          message2 = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodError_1.ZodIssueCode.invalid_arguments:
          message2 = `Invalid function arguments`;
          break;
        case ZodError_1.ZodIssueCode.invalid_return_type:
          message2 = `Invalid function return type`;
          break;
        case ZodError_1.ZodIssueCode.invalid_date:
          message2 = `Invalid date`;
          break;
        case ZodError_1.ZodIssueCode.invalid_string:
          if (typeof issue.validation === "object") {
            if ("includes" in issue.validation) {
              message2 = `Invalid input: must include "${issue.validation.includes}"`;
              if (typeof issue.validation.position === "number") {
                message2 = `${message2} at one or more positions greater than or equal to ${issue.validation.position}`;
              }
            } else if ("startsWith" in issue.validation) {
              message2 = `Invalid input: must start with "${issue.validation.startsWith}"`;
            } else if ("endsWith" in issue.validation) {
              message2 = `Invalid input: must end with "${issue.validation.endsWith}"`;
            } else {
              util_1.util.assertNever(issue.validation);
            }
          } else if (issue.validation !== "regex") {
            message2 = `Invalid ${issue.validation}`;
          } else {
            message2 = "Invalid";
          }
          break;
        case ZodError_1.ZodIssueCode.too_small:
          if (issue.type === "array")
            message2 = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
          else if (issue.type === "string")
            message2 = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
          else if (issue.type === "number")
            message2 = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
          else if (issue.type === "date")
            message2 = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
          else
            message2 = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.too_big:
          if (issue.type === "array")
            message2 = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
          else if (issue.type === "string")
            message2 = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
          else if (issue.type === "number")
            message2 = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "bigint")
            message2 = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "date")
            message2 = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
          else
            message2 = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.custom:
          message2 = `Invalid input`;
          break;
        case ZodError_1.ZodIssueCode.invalid_intersection_types:
          message2 = `Intersection results could not be merged`;
          break;
        case ZodError_1.ZodIssueCode.not_multiple_of:
          message2 = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        case ZodError_1.ZodIssueCode.not_finite:
          message2 = "Number must be finite";
          break;
        default:
          message2 = _ctx.defaultError;
          util_1.util.assertNever(issue);
      }
      return { message: message2 };
    };
    exports.default = errorMap;
  }
});

// node_modules/zod/lib/errors.js
var require_errors = __commonJS({
  "node_modules/zod/lib/errors.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getErrorMap = exports.setErrorMap = exports.defaultErrorMap = void 0;
    var en_1 = __importDefault(require_en());
    exports.defaultErrorMap = en_1.default;
    var overrideErrorMap = en_1.default;
    function setErrorMap(map) {
      overrideErrorMap = map;
    }
    exports.setErrorMap = setErrorMap;
    function getErrorMap() {
      return overrideErrorMap;
    }
    exports.getErrorMap = getErrorMap;
  }
});

// node_modules/zod/lib/helpers/parseUtil.js
var require_parseUtil = __commonJS({
  "node_modules/zod/lib/helpers/parseUtil.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isAsync = exports.isValid = exports.isDirty = exports.isAborted = exports.OK = exports.DIRTY = exports.INVALID = exports.ParseStatus = exports.addIssueToContext = exports.EMPTY_PATH = exports.makeIssue = void 0;
    var errors_1 = require_errors();
    var en_1 = __importDefault(require_en());
    var makeIssue = (params) => {
      const { data, path, errorMaps, issueData } = params;
      const fullPath = [...path, ...issueData.path || []];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== void 0) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter((m3) => !!m3).slice().reverse();
      for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    };
    exports.makeIssue = makeIssue;
    exports.EMPTY_PATH = [];
    function addIssueToContext(ctx, issueData) {
      const overrideMap = (0, errors_1.getErrorMap)();
      const issue = (0, exports.makeIssue)({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          // contextual error map is first priority
          ctx.schemaErrorMap,
          // then schema-bound map if available
          overrideMap,
          // then global override map
          overrideMap === en_1.default ? void 0 : en_1.default
          // then global default map
        ].filter((x2) => !!x2)
      });
      ctx.common.issues.push(issue);
    }
    exports.addIssueToContext = addIssueToContext;
    var ParseStatus = class _ParseStatus {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid")
          this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted")
          this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s4 of results) {
          if (s4.status === "aborted")
            return exports.INVALID;
          if (s4.status === "dirty")
            status.dirty();
          arrayValue.push(s4.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return _ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const { key, value } = pair;
          if (key.status === "aborted")
            return exports.INVALID;
          if (value.status === "aborted")
            return exports.INVALID;
          if (key.status === "dirty")
            status.dirty();
          if (value.status === "dirty")
            status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return { status: status.value, value: finalObject };
      }
    };
    exports.ParseStatus = ParseStatus;
    exports.INVALID = Object.freeze({
      status: "aborted"
    });
    var DIRTY = (value) => ({ status: "dirty", value });
    exports.DIRTY = DIRTY;
    var OK = (value) => ({ status: "valid", value });
    exports.OK = OK;
    var isAborted = (x2) => x2.status === "aborted";
    exports.isAborted = isAborted;
    var isDirty = (x2) => x2.status === "dirty";
    exports.isDirty = isDirty;
    var isValid = (x2) => x2.status === "valid";
    exports.isValid = isValid;
    var isAsync = (x2) => typeof Promise !== "undefined" && x2 instanceof Promise;
    exports.isAsync = isAsync;
  }
});

// node_modules/zod/lib/helpers/typeAliases.js
var require_typeAliases = __commonJS({
  "node_modules/zod/lib/helpers/typeAliases.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/zod/lib/helpers/errorUtil.js
var require_errorUtil = __commonJS({
  "node_modules/zod/lib/helpers/errorUtil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.errorUtil = void 0;
    var errorUtil;
    (function(errorUtil2) {
      errorUtil2.errToObj = (message2) => typeof message2 === "string" ? { message: message2 } : message2 || {};
      errorUtil2.toString = (message2) => typeof message2 === "string" ? message2 : message2 === null || message2 === void 0 ? void 0 : message2.message;
    })(errorUtil || (exports.errorUtil = errorUtil = {}));
  }
});

// node_modules/zod/lib/types.js
var require_types = __commonJS({
  "node_modules/zod/lib/types.js"(exports) {
    "use strict";
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f5) {
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f5 : kind === "a" ? f5.call(receiver) : f5 ? f5.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f5) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f5.call(receiver, value) : f5 ? f5.value = value : state.set(receiver, value), value;
    };
    var _ZodEnum_cache;
    var _ZodNativeEnum_cache;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.boolean = exports.bigint = exports.array = exports.any = exports.coerce = exports.ZodFirstPartyTypeKind = exports.late = exports.ZodSchema = exports.Schema = exports.custom = exports.ZodReadonly = exports.ZodPipeline = exports.ZodBranded = exports.BRAND = exports.ZodNaN = exports.ZodCatch = exports.ZodDefault = exports.ZodNullable = exports.ZodOptional = exports.ZodTransformer = exports.ZodEffects = exports.ZodPromise = exports.ZodNativeEnum = exports.ZodEnum = exports.ZodLiteral = exports.ZodLazy = exports.ZodFunction = exports.ZodSet = exports.ZodMap = exports.ZodRecord = exports.ZodTuple = exports.ZodIntersection = exports.ZodDiscriminatedUnion = exports.ZodUnion = exports.ZodObject = exports.ZodArray = exports.ZodVoid = exports.ZodNever = exports.ZodUnknown = exports.ZodAny = exports.ZodNull = exports.ZodUndefined = exports.ZodSymbol = exports.ZodDate = exports.ZodBoolean = exports.ZodBigInt = exports.ZodNumber = exports.ZodString = exports.datetimeRegex = exports.ZodType = void 0;
    exports.NEVER = exports.void = exports.unknown = exports.union = exports.undefined = exports.tuple = exports.transformer = exports.symbol = exports.string = exports.strictObject = exports.set = exports.record = exports.promise = exports.preprocess = exports.pipeline = exports.ostring = exports.optional = exports.onumber = exports.oboolean = exports.object = exports.number = exports.nullable = exports.null = exports.never = exports.nativeEnum = exports.nan = exports.map = exports.literal = exports.lazy = exports.intersection = exports.instanceof = exports.function = exports.enum = exports.effect = exports.discriminatedUnion = exports.date = void 0;
    var errors_1 = require_errors();
    var errorUtil_1 = require_errorUtil();
    var parseUtil_1 = require_parseUtil();
    var util_1 = require_util();
    var ZodError_1 = require_ZodError();
    var ParseInputLazyPath = class {
      constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
      }
      get path() {
        if (!this._cachedPath.length) {
          if (this._key instanceof Array) {
            this._cachedPath.push(...this._path, ...this._key);
          } else {
            this._cachedPath.push(...this._path, this._key);
          }
        }
        return this._cachedPath;
      }
    };
    var handleResult = (ctx, result) => {
      if ((0, parseUtil_1.isValid)(result)) {
        return { success: true, data: result.value };
      } else {
        if (!ctx.common.issues.length) {
          throw new Error("Validation failed but no issues detected.");
        }
        return {
          success: false,
          get error() {
            if (this._error)
              return this._error;
            const error = new ZodError_1.ZodError(ctx.common.issues);
            this._error = error;
            return this._error;
          }
        };
      }
    };
    function processCreateParams(params) {
      if (!params)
        return {};
      const { errorMap, invalid_type_error, required_error, description } = params;
      if (errorMap && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
      }
      if (errorMap)
        return { errorMap, description };
      const customMap = (iss, ctx) => {
        var _a, _b;
        const { message: message2 } = params;
        if (iss.code === "invalid_enum_value") {
          return { message: message2 !== null && message2 !== void 0 ? message2 : ctx.defaultError };
        }
        if (typeof ctx.data === "undefined") {
          return { message: (_a = message2 !== null && message2 !== void 0 ? message2 : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
        }
        if (iss.code !== "invalid_type")
          return { message: ctx.defaultError };
        return { message: (_b = message2 !== null && message2 !== void 0 ? message2 : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
      };
      return { errorMap: customMap, description };
    }
    var ZodType = class {
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return (0, util_1.getParsedType)(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: (0, util_1.getParsedType)(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new parseUtil_1.ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: (0, util_1.getParsedType)(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        const result = this._parse(input);
        if ((0, parseUtil_1.isAsync)(result)) {
          throw new Error("Synchronous parse encountered promise.");
        }
        return result;
      }
      _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        var _a;
        const ctx = {
          common: {
            issues: [],
            async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
      }
      "~validate"(data) {
        var _a, _b;
        const ctx = {
          common: {
            issues: [],
            async: !!this["~standard"].async
          },
          path: [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        if (!this["~standard"].async) {
          try {
            const result = this._parseSync({ data, path: [], parent: ctx });
            return (0, parseUtil_1.isValid)(result) ? {
              value: result.value
            } : {
              issues: ctx.common.issues
            };
          } catch (err) {
            if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes("encountered")) {
              this["~standard"].async = true;
            }
            ctx.common = {
              issues: [],
              async: true
            };
          }
        }
        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0, parseUtil_1.isValid)(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        });
      }
      async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            async: true
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await ((0, parseUtil_1.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
      }
      refine(check2, message2) {
        const getIssueProperties = (val) => {
          if (typeof message2 === "string" || typeof message2 === "undefined") {
            return { message: message2 };
          } else if (typeof message2 === "function") {
            return message2(val);
          } else {
            return message2;
          }
        };
        return this._refinement((val, ctx) => {
          const result = check2(val);
          const setError = () => ctx.addIssue({
            code: ZodError_1.ZodIssueCode.custom,
            ...getIssueProperties(val)
          });
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError();
                return false;
              } else {
                return true;
              }
            });
          }
          if (!result) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      refinement(check2, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check2(val)) {
            ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
            return false;
          } else {
            return true;
          }
        });
      }
      _refinement(refinement) {
        return new ZodEffects({
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      superRefine(refinement) {
        return this._refinement(refinement);
      }
      constructor(def) {
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
          version: 1,
          vendor: "zod",
          validate: (data) => this["~validate"](data)
        };
      }
      optional() {
        return ZodOptional.create(this, this._def);
      }
      nullable() {
        return ZodNullable.create(this, this._def);
      }
      nullish() {
        return this.nullable().optional();
      }
      array() {
        return ZodArray.create(this);
      }
      promise() {
        return ZodPromise.create(this, this._def);
      }
      or(option) {
        return ZodUnion.create([this, option], this._def);
      }
      and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
      }
      transform(transform) {
        return new ZodEffects({
          ...processCreateParams(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "transform", transform }
        });
      }
      default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
          ...processCreateParams(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodDefault
        });
      }
      brand() {
        return new ZodBranded({
          typeName: ZodFirstPartyTypeKind.ZodBranded,
          type: this,
          ...processCreateParams(this._def)
        });
      }
      catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
          ...processCreateParams(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodCatch
        });
      }
      describe(description) {
        const This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      pipe(target) {
        return ZodPipeline.create(this, target);
      }
      readonly() {
        return ZodReadonly.create(this);
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    };
    exports.ZodType = ZodType;
    exports.Schema = ZodType;
    exports.ZodSchema = ZodType;
    var cuidRegex = /^c[^\s-]{8,}$/i;
    var cuid2Regex = /^[0-9a-z]+$/;
    var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
    var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
    var nanoidRegex = /^[a-z0-9_-]{21}$/i;
    var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
    var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
    var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    var emojiRegex;
    var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
    var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
    var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
    var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
    var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
    var dateRegex = new RegExp(`^${dateRegexSource}$`);
    function timeRegexSource(args) {
      let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
      if (args.precision) {
        regex = `${regex}\\.\\d{${args.precision}}`;
      } else if (args.precision == null) {
        regex = `${regex}(\\.\\d+)?`;
      }
      return regex;
    }
    function timeRegex(args) {
      return new RegExp(`^${timeRegexSource(args)}$`);
    }
    function datetimeRegex(args) {
      let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
      const opts = [];
      opts.push(args.local ? `Z?` : `Z`);
      if (args.offset)
        opts.push(`([+-]\\d{2}:?\\d{2})`);
      regex = `${regex}(${opts.join("|")})`;
      return new RegExp(`^${regex}$`);
    }
    exports.datetimeRegex = datetimeRegex;
    function isValidIP(ip, version2) {
      if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
        return true;
      }
      if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
        return true;
      }
      return false;
    }
    function isValidJWT(jwt, alg) {
      if (!jwtRegex.test(jwt))
        return false;
      try {
        const [header] = jwt.split(".");
        const base642 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
        const decoded = JSON.parse(atob(base642));
        if (typeof decoded !== "object" || decoded === null)
          return false;
        if (!decoded.typ || !decoded.alg)
          return false;
        if (alg && decoded.alg !== alg)
          return false;
        return true;
      } catch (_a) {
        return false;
      }
    }
    function isValidCidr(ip, version2) {
      if ((version2 === "v4" || !version2) && ipv4CidrRegex.test(ip)) {
        return true;
      }
      if ((version2 === "v6" || !version2) && ipv6CidrRegex.test(ip)) {
        return true;
      }
      return false;
    }
    var ZodString = class _ZodString extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.string) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.string,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const status = new parseUtil_1.ParseStatus();
        let ctx = void 0;
        for (const check2 of this._def.checks) {
          if (check2.kind === "min") {
            if (input.data.length < check2.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: check2.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "max") {
            if (input.data.length > check2.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: check2.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "length") {
            const tooBig = input.data.length > check2.value;
            const tooSmall = input.data.length < check2.value;
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              if (tooBig) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  maximum: check2.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check2.message
                });
              } else if (tooSmall) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  minimum: check2.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check2.message
                });
              }
              status.dirty();
            }
          } else if (check2.kind === "email") {
            if (!emailRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "email",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "emoji") {
            if (!emojiRegex) {
              emojiRegex = new RegExp(_emojiRegex, "u");
            }
            if (!emojiRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "emoji",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "uuid") {
            if (!uuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "uuid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "nanoid") {
            if (!nanoidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "nanoid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "cuid") {
            if (!cuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cuid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "cuid2") {
            if (!cuid2Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cuid2",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "ulid") {
            if (!ulidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "ulid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "url") {
            try {
              new URL(input.data);
            } catch (_a) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "url",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "regex") {
            check2.regex.lastIndex = 0;
            const testResult = check2.regex.test(input.data);
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "regex",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "trim") {
            input.data = input.data.trim();
          } else if (check2.kind === "includes") {
            if (!input.data.includes(check2.value, check2.position)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { includes: check2.value, position: check2.position },
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "toLowerCase") {
            input.data = input.data.toLowerCase();
          } else if (check2.kind === "toUpperCase") {
            input.data = input.data.toUpperCase();
          } else if (check2.kind === "startsWith") {
            if (!input.data.startsWith(check2.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { startsWith: check2.value },
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "endsWith") {
            if (!input.data.endsWith(check2.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { endsWith: check2.value },
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "datetime") {
            const regex = datetimeRegex(check2);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "datetime",
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "date") {
            const regex = dateRegex;
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "date",
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "time") {
            const regex = timeRegex(check2);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "time",
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "duration") {
            if (!durationRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "duration",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "ip") {
            if (!isValidIP(input.data, check2.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "ip",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "jwt") {
            if (!isValidJWT(input.data, check2.alg)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "jwt",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "cidr") {
            if (!isValidCidr(input.data, check2.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cidr",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "base64") {
            if (!base64Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "base64",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "base64url") {
            if (!base64urlRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "base64url",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check2.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check2);
          }
        }
        return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message2) {
        return this.refinement((data) => regex.test(data), {
          validation,
          code: ZodError_1.ZodIssueCode.invalid_string,
          ...errorUtil_1.errorUtil.errToObj(message2)
        });
      }
      _addCheck(check2) {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, check2]
        });
      }
      email(message2) {
        return this._addCheck({ kind: "email", ...errorUtil_1.errorUtil.errToObj(message2) });
      }
      url(message2) {
        return this._addCheck({ kind: "url", ...errorUtil_1.errorUtil.errToObj(message2) });
      }
      emoji(message2) {
        return this._addCheck({ kind: "emoji", ...errorUtil_1.errorUtil.errToObj(message2) });
      }
      uuid(message2) {
        return this._addCheck({ kind: "uuid", ...errorUtil_1.errorUtil.errToObj(message2) });
      }
      nanoid(message2) {
        return this._addCheck({ kind: "nanoid", ...errorUtil_1.errorUtil.errToObj(message2) });
      }
      cuid(message2) {
        return this._addCheck({ kind: "cuid", ...errorUtil_1.errorUtil.errToObj(message2) });
      }
      cuid2(message2) {
        return this._addCheck({ kind: "cuid2", ...errorUtil_1.errorUtil.errToObj(message2) });
      }
      ulid(message2) {
        return this._addCheck({ kind: "ulid", ...errorUtil_1.errorUtil.errToObj(message2) });
      }
      base64(message2) {
        return this._addCheck({ kind: "base64", ...errorUtil_1.errorUtil.errToObj(message2) });
      }
      base64url(message2) {
        return this._addCheck({
          kind: "base64url",
          ...errorUtil_1.errorUtil.errToObj(message2)
        });
      }
      jwt(options) {
        return this._addCheck({ kind: "jwt", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      cidr(options) {
        return this._addCheck({ kind: "cidr", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      datetime(options) {
        var _a, _b;
        if (typeof options === "string") {
          return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options
          });
        }
        return this._addCheck({
          kind: "datetime",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
          local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      date(message2) {
        return this._addCheck({ kind: "date", message: message2 });
      }
      time(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "time",
            precision: null,
            message: options
          });
        }
        return this._addCheck({
          kind: "time",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      duration(message2) {
        return this._addCheck({ kind: "duration", ...errorUtil_1.errorUtil.errToObj(message2) });
      }
      regex(regex, message2) {
        return this._addCheck({
          kind: "regex",
          regex,
          ...errorUtil_1.errorUtil.errToObj(message2)
        });
      }
      includes(value, options) {
        return this._addCheck({
          kind: "includes",
          value,
          position: options === null || options === void 0 ? void 0 : options.position,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      startsWith(value, message2) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil_1.errorUtil.errToObj(message2)
        });
      }
      endsWith(value, message2) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil_1.errorUtil.errToObj(message2)
        });
      }
      min(minLength, message2) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil_1.errorUtil.errToObj(message2)
        });
      }
      max(maxLength, message2) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil_1.errorUtil.errToObj(message2)
        });
      }
      length(len, message2) {
        return this._addCheck({
          kind: "length",
          value: len,
          ...errorUtil_1.errorUtil.errToObj(message2)
        });
      }
      /**
       * Equivalent to `.min(1)`
       */
      nonempty(message2) {
        return this.min(1, errorUtil_1.errorUtil.errToObj(message2));
      }
      trim() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      toLowerCase() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toLowerCase" }]
        });
      }
      toUpperCase() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toUpperCase" }]
        });
      }
      get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
      }
      get isDate() {
        return !!this._def.checks.find((ch) => ch.kind === "date");
      }
      get isTime() {
        return !!this._def.checks.find((ch) => ch.kind === "time");
      }
      get isDuration() {
        return !!this._def.checks.find((ch) => ch.kind === "duration");
      }
      get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
      }
      get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
      }
      get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
      }
      get isNANOID() {
        return !!this._def.checks.find((ch) => ch.kind === "nanoid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
      }
      get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
      }
      get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
      }
      get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
      }
      get isCIDR() {
        return !!this._def.checks.find((ch) => ch.kind === "cidr");
      }
      get isBase64() {
        return !!this._def.checks.find((ch) => ch.kind === "base64");
      }
      get isBase64url() {
        return !!this._def.checks.find((ch) => ch.kind === "base64url");
      }
      get minLength() {
        let min2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min2 === null || ch.value > min2)
              min2 = ch.value;
          }
        }
        return min2;
      }
      get maxLength() {
        let max2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max2 === null || ch.value < max2)
              max2 = ch.value;
          }
        }
        return max2;
      }
    };
    exports.ZodString = ZodString;
    ZodString.create = (params) => {
      var _a;
      return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
      });
    };
    function floatSafeRemainder(val, step) {
      const valDecCount = (val.toString().split(".")[1] || "").length;
      const stepDecCount = (step.toString().split(".")[1] || "").length;
      const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
      const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
      const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
      return valInt % stepInt / Math.pow(10, decCount);
    }
    var ZodNumber = class _ZodNumber extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.number) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.number,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        let ctx = void 0;
        const status = new parseUtil_1.ParseStatus();
        for (const check2 of this._def.checks) {
          if (check2.kind === "int") {
            if (!util_1.util.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: "integer",
                received: "float",
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "min") {
            const tooSmall = check2.inclusive ? input.data < check2.value : input.data <= check2.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: check2.value,
                type: "number",
                inclusive: check2.inclusive,
                exact: false,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "max") {
            const tooBig = check2.inclusive ? input.data > check2.value : input.data >= check2.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: check2.value,
                type: "number",
                inclusive: check2.inclusive,
                exact: false,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "multipleOf") {
            if (floatSafeRemainder(input.data, check2.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_multiple_of,
                multipleOf: check2.value,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "finite") {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_finite,
                message: check2.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check2);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message2) {
        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message2));
      }
      gt(value, message2) {
        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message2));
      }
      lte(value, message2) {
        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message2));
      }
      lt(value, message2) {
        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message2));
      }
      setLimit(kind, value, inclusive, message2) {
        return new _ZodNumber({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil_1.errorUtil.toString(message2)
            }
          ]
        });
      }
      _addCheck(check2) {
        return new _ZodNumber({
          ...this._def,
          checks: [...this._def.checks, check2]
        });
      }
      int(message2) {
        return this._addCheck({
          kind: "int",
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      positive(message2) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      negative(message2) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      nonpositive(message2) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      nonnegative(message2) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      multipleOf(value, message2) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      finite(message2) {
        return this._addCheck({
          kind: "finite",
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      safe(message2) {
        return this._addCheck({
          kind: "min",
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil_1.errorUtil.toString(message2)
        })._addCheck({
          kind: "max",
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      get minValue() {
        let min2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min2 === null || ch.value > min2)
              min2 = ch.value;
          }
        }
        return min2;
      }
      get maxValue() {
        let max2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max2 === null || ch.value < max2)
              max2 = ch.value;
          }
        }
        return max2;
      }
      get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util_1.util.isInteger(ch.value));
      }
      get isFinite() {
        let max2 = null, min2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
            return true;
          } else if (ch.kind === "min") {
            if (min2 === null || ch.value > min2)
              min2 = ch.value;
          } else if (ch.kind === "max") {
            if (max2 === null || ch.value < max2)
              max2 = ch.value;
          }
        }
        return Number.isFinite(min2) && Number.isFinite(max2);
      }
    };
    exports.ZodNumber = ZodNumber;
    ZodNumber.create = (params) => {
      return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    var ZodBigInt = class _ZodBigInt extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
      }
      _parse(input) {
        if (this._def.coerce) {
          try {
            input.data = BigInt(input.data);
          } catch (_a) {
            return this._getInvalidInput(input);
          }
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.bigint) {
          return this._getInvalidInput(input);
        }
        let ctx = void 0;
        const status = new parseUtil_1.ParseStatus();
        for (const check2 of this._def.checks) {
          if (check2.kind === "min") {
            const tooSmall = check2.inclusive ? input.data < check2.value : input.data <= check2.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                type: "bigint",
                minimum: check2.value,
                inclusive: check2.inclusive,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "max") {
            const tooBig = check2.inclusive ? input.data > check2.value : input.data >= check2.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                type: "bigint",
                maximum: check2.value,
                inclusive: check2.inclusive,
                message: check2.message
              });
              status.dirty();
            }
          } else if (check2.kind === "multipleOf") {
            if (input.data % check2.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_multiple_of,
                multipleOf: check2.value,
                message: check2.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check2);
          }
        }
        return { status: status.value, value: input.data };
      }
      _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.bigint,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      gte(value, message2) {
        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message2));
      }
      gt(value, message2) {
        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message2));
      }
      lte(value, message2) {
        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message2));
      }
      lt(value, message2) {
        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message2));
      }
      setLimit(kind, value, inclusive, message2) {
        return new _ZodBigInt({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil_1.errorUtil.toString(message2)
            }
          ]
        });
      }
      _addCheck(check2) {
        return new _ZodBigInt({
          ...this._def,
          checks: [...this._def.checks, check2]
        });
      }
      positive(message2) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      negative(message2) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      nonpositive(message2) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      nonnegative(message2) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      multipleOf(value, message2) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      get minValue() {
        let min2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min2 === null || ch.value > min2)
              min2 = ch.value;
          }
        }
        return min2;
      }
      get maxValue() {
        let max2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max2 === null || ch.value < max2)
              max2 = ch.value;
          }
        }
        return max2;
      }
    };
    exports.ZodBigInt = ZodBigInt;
    ZodBigInt.create = (params) => {
      var _a;
      return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams(params)
      });
    };
    var ZodBoolean = class extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.boolean) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.boolean,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodBoolean = ZodBoolean;
    ZodBoolean.create = (params) => {
      return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    var ZodDate = class _ZodDate extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.date) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.date,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_date
          });
          return parseUtil_1.INVALID;
        }
        const status = new parseUtil_1.ParseStatus();
        let ctx = void 0;
        for (const check2 of this._def.checks) {
          if (check2.kind === "min") {
            if (input.data.getTime() < check2.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                message: check2.message,
                inclusive: true,
                exact: false,
                minimum: check2.value,
                type: "date"
              });
              status.dirty();
            }
          } else if (check2.kind === "max") {
            if (input.data.getTime() > check2.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                message: check2.message,
                inclusive: true,
                exact: false,
                maximum: check2.value,
                type: "date"
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check2);
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check2) {
        return new _ZodDate({
          ...this._def,
          checks: [...this._def.checks, check2]
        });
      }
      min(minDate, message2) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      max(maxDate, message2) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil_1.errorUtil.toString(message2)
        });
      }
      get minDate() {
        let min2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min2 === null || ch.value > min2)
              min2 = ch.value;
          }
        }
        return min2 != null ? new Date(min2) : null;
      }
      get maxDate() {
        let max2 = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max2 === null || ch.value < max2)
              max2 = ch.value;
          }
        }
        return max2 != null ? new Date(max2) : null;
      }
    };
    exports.ZodDate = ZodDate;
    ZodDate.create = (params) => {
      return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
      });
    };
    var ZodSymbol = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.symbol) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.symbol,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodSymbol = ZodSymbol;
    ZodSymbol.create = (params) => {
      return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
      });
    };
    var ZodUndefined = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.undefined,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodUndefined = ZodUndefined;
    ZodUndefined.create = (params) => {
      return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
      });
    };
    var ZodNull = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.null) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.null,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodNull = ZodNull;
    ZodNull.create = (params) => {
      return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
      });
    };
    var ZodAny = class extends ZodType {
      constructor() {
        super(...arguments);
        this._any = true;
      }
      _parse(input) {
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodAny = ZodAny;
    ZodAny.create = (params) => {
      return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
      });
    };
    var ZodUnknown = class extends ZodType {
      constructor() {
        super(...arguments);
        this._unknown = true;
      }
      _parse(input) {
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodUnknown = ZodUnknown;
    ZodUnknown.create = (params) => {
      return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
      });
    };
    var ZodNever = class extends ZodType {
      _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.never,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
    };
    exports.ZodNever = ZodNever;
    ZodNever.create = (params) => {
      return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
      });
    };
    var ZodVoid = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.void,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports.ZodVoid = ZodVoid;
    ZodVoid.create = (params) => {
      return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
      });
    };
    var ZodArray = class _ZodArray extends ZodType {
      _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== util_1.ZodParsedType.array) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.array,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (def.exactLength !== null) {
          const tooBig = ctx.data.length > def.exactLength.value;
          const tooSmall = ctx.data.length < def.exactLength.value;
          if (tooBig || tooSmall) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: tooBig ? ZodError_1.ZodIssueCode.too_big : ZodError_1.ZodIssueCode.too_small,
              minimum: tooSmall ? def.exactLength.value : void 0,
              maximum: tooBig ? def.exactLength.value : void 0,
              type: "array",
              inclusive: true,
              exact: true,
              message: def.exactLength.message
            });
            status.dirty();
          }
        }
        if (def.minLength !== null) {
          if (ctx.data.length < def.minLength.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: def.minLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.minLength.message
            });
            status.dirty();
          }
        }
        if (def.maxLength !== null) {
          if (ctx.data.length > def.maxLength.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: def.maxLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.maxLength.message
            });
            status.dirty();
          }
        }
        if (ctx.common.async) {
          return Promise.all([...ctx.data].map((item, i9) => {
            return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i9));
          })).then((result2) => {
            return parseUtil_1.ParseStatus.mergeArray(status, result2);
          });
        }
        const result = [...ctx.data].map((item, i9) => {
          return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i9));
        });
        return parseUtil_1.ParseStatus.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message2) {
        return new _ZodArray({
          ...this._def,
          minLength: { value: minLength, message: errorUtil_1.errorUtil.toString(message2) }
        });
      }
      max(maxLength, message2) {
        return new _ZodArray({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil_1.errorUtil.toString(message2) }
        });
      }
      length(len, message2) {
        return new _ZodArray({
          ...this._def,
          exactLength: { value: len, message: errorUtil_1.errorUtil.toString(message2) }
        });
      }
      nonempty(message2) {
        return this.min(1, message2);
      }
    };
    exports.ZodArray = ZodArray;
    ZodArray.create = (schema, params) => {
      return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
      });
    };
    function deepPartialify(schema) {
      if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
          const fieldSchema = schema.shape[key];
          newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
          ...schema._def,
          shape: () => newShape
        });
      } else if (schema instanceof ZodArray) {
        return new ZodArray({
          ...schema._def,
          type: deepPartialify(schema.element)
        });
      } else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
      } else {
        return schema;
      }
    }
    var ZodObject = class _ZodObject extends ZodType {
      constructor() {
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        const shape = this._def.shape();
        const keys = util_1.util.objectKeys(shape);
        return this._cached = { shape, keys };
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.object) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key);
            }
          }
        }
        const pairs = [];
        for (const key of shapeKeys) {
          const keyValidator = shape[key];
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever) {
          const unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough") {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
            }
          } else if (unknownKeys === "strict") {
            if (extraKeys.length > 0) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.unrecognized_keys,
                keys: extraKeys
              });
              status.dirty();
            }
          } else if (unknownKeys === "strip") {
          } else {
            throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
          }
        } else {
          const catchall = this._def.catchall;
          for (const key of extraKeys) {
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath(ctx, value, ctx.path, key)
                //, ctx.child(key), value, getParsedType(value)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        if (ctx.common.async) {
          return Promise.resolve().then(async () => {
            const syncPairs = [];
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                key,
                value,
                alwaysSet: pair.alwaysSet
              });
            }
            return syncPairs;
          }).then((syncPairs) => {
            return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
          });
        } else {
          return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get shape() {
        return this._def.shape();
      }
      strict(message2) {
        errorUtil_1.errorUtil.errToObj;
        return new _ZodObject({
          ...this._def,
          unknownKeys: "strict",
          ...message2 !== void 0 ? {
            errorMap: (issue, ctx) => {
              var _a, _b, _c, _d;
              const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: (_d = errorUtil_1.errorUtil.errToObj(message2).message) !== null && _d !== void 0 ? _d : defaultError
                };
              return {
                message: defaultError
              };
            }
          } : {}
        });
      }
      strip() {
        return new _ZodObject({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new _ZodObject({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
        return new _ZodObject({
          ...this._def,
          shape: () => ({
            ...this._def.shape(),
            ...augmentation
          })
        });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
        const merged = new _ZodObject({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: () => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }),
          typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema) {
        return this.augment({ [key]: schema });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index) {
        return new _ZodObject({
          ...this._def,
          catchall: index
        });
      }
      pick(mask) {
        const shape = {};
        util_1.util.objectKeys(mask).forEach((key) => {
          if (mask[key] && this.shape[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      omit(mask) {
        const shape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          if (!mask[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      /**
       * @deprecated
       */
      deepPartial() {
        return deepPartialify(this);
      }
      partial(mask) {
        const newShape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          const fieldSchema = this.shape[key];
          if (mask && !mask[key]) {
            newShape[key] = fieldSchema;
          } else {
            newShape[key] = fieldSchema.optional();
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      required(mask) {
        const newShape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          if (mask && !mask[key]) {
            newShape[key] = this.shape[key];
          } else {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      keyof() {
        return createZodEnum(util_1.util.objectKeys(this.shape));
      }
    };
    exports.ZodObject = ZodObject;
    ZodObject.create = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.strictCreate = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.lazycreate = (shape, params) => {
      return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    var ZodUnion = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === "valid") {
              return result.result;
            }
          }
          for (const result of results) {
            if (result.result.status === "dirty") {
              ctx.common.issues.push(...result.ctx.common.issues);
              return result.result;
            }
          }
          const unionErrors = results.map((result) => new ZodError_1.ZodError(result.ctx.common.issues));
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union,
            unionErrors
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.common.async) {
          return Promise.all(options.map(async (option) => {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        } else {
          let dirty = void 0;
          const issues = [];
          for (const option of options) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid") {
              return result;
            } else if (result.status === "dirty" && !dirty) {
              dirty = { result, ctx: childCtx };
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues);
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues);
            return dirty.result;
          }
          const unionErrors = issues.map((issues2) => new ZodError_1.ZodError(issues2));
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union,
            unionErrors
          });
          return parseUtil_1.INVALID;
        }
      }
      get options() {
        return this._def.options;
      }
    };
    exports.ZodUnion = ZodUnion;
    ZodUnion.create = (types2, params) => {
      return new ZodUnion({
        options: types2,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
      });
    };
    var getDiscriminator = (type) => {
      if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
      } else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
      } else if (type instanceof ZodLiteral) {
        return [type.value];
      } else if (type instanceof ZodEnum) {
        return type.options;
      } else if (type instanceof ZodNativeEnum) {
        return util_1.util.objectValues(type.enum);
      } else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
      } else if (type instanceof ZodUndefined) {
        return [void 0];
      } else if (type instanceof ZodNull) {
        return [null];
      } else if (type instanceof ZodOptional) {
        return [void 0, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodNullable) {
        return [null, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodBranded) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodReadonly) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodCatch) {
        return getDiscriminator(type._def.innerType);
      } else {
        return [];
      }
    };
    var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
            options: Array.from(this.optionsMap.keys()),
            path: [discriminator]
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.common.async) {
          return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        } else {
          return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      get discriminator() {
        return this._def.discriminator;
      }
      get options() {
        return this._def.options;
      }
      get optionsMap() {
        return this._def.optionsMap;
      }
      /**
       * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
       * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
       * have a different value for each object in the union.
       * @param discriminator the name of the discriminator property
       * @param types an array of object schemas
       * @param params
       */
      static create(discriminator, options, params) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options) {
          const discriminatorValues = getDiscriminator(type.shape[discriminator]);
          if (!discriminatorValues.length) {
            throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
          }
          for (const value of discriminatorValues) {
            if (optionsMap.has(value)) {
              throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
            }
            optionsMap.set(value, type);
          }
        }
        return new _ZodDiscriminatedUnion({
          typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
          discriminator,
          options,
          optionsMap,
          ...processCreateParams(params)
        });
      }
    };
    exports.ZodDiscriminatedUnion = ZodDiscriminatedUnion;
    function mergeValues(a4, b3) {
      const aType = (0, util_1.getParsedType)(a4);
      const bType = (0, util_1.getParsedType)(b3);
      if (a4 === b3) {
        return { valid: true, data: a4 };
      } else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
        const bKeys = util_1.util.objectKeys(b3);
        const sharedKeys = util_1.util.objectKeys(a4).filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a4, ...b3 };
        for (const key of sharedKeys) {
          const sharedValue = mergeValues(a4[key], b3[key]);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
      } else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
        if (a4.length !== b3.length) {
          return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a4.length; index++) {
          const itemA = a4[index];
          const itemB = b3[index];
          const sharedValue = mergeValues(itemA, itemB);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
      } else if (aType === util_1.ZodParsedType.date && bType === util_1.ZodParsedType.date && +a4 === +b3) {
        return { valid: true, data: a4 };
      } else {
        return { valid: false };
      }
    }
    var ZodIntersection = class extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
          if ((0, parseUtil_1.isAborted)(parsedLeft) || (0, parseUtil_1.isAborted)(parsedRight)) {
            return parseUtil_1.INVALID;
          }
          const merged = mergeValues(parsedLeft.value, parsedRight.value);
          if (!merged.valid) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_intersection_types
            });
            return parseUtil_1.INVALID;
          }
          if ((0, parseUtil_1.isDirty)(parsedLeft) || (0, parseUtil_1.isDirty)(parsedRight)) {
            status.dirty();
          }
          return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right));
        } else {
          return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }));
        }
      }
    };
    exports.ZodIntersection = ZodIntersection;
    ZodIntersection.create = (left, right, params) => {
      return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
      });
    };
    var ZodTuple = class _ZodTuple extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.array) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.array,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          return parseUtil_1.INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          status.dirty();
        }
        const items = [...ctx.data].map((item, itemIndex) => {
          const schema = this._def.items[itemIndex] || this._def.rest;
          if (!schema)
            return null;
          return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x2) => !!x2);
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return parseUtil_1.ParseStatus.mergeArray(status, results);
          });
        } else {
          return parseUtil_1.ParseStatus.mergeArray(status, items);
        }
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new _ZodTuple({
          ...this._def,
          rest
        });
      }
    };
    exports.ZodTuple = ZodTuple;
    ZodTuple.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
      });
    };
    var ZodRecord = class _ZodRecord extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
          pairs.push({
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (ctx.common.async) {
          return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
        } else {
          return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get element() {
        return this._def.valueType;
      }
      static create(first, second, third) {
        if (second instanceof ZodType) {
          return new _ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(third)
          });
        }
        return new _ZodRecord({
          keyType: ZodString.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(second)
        });
      }
    };
    exports.ZodRecord = ZodRecord;
    var ZodMap = class extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.map) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.map,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
          return {
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
            value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
          };
        });
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return parseUtil_1.INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          const finalMap = /* @__PURE__ */ new Map();
          for (const pair of pairs) {
            const key = pair.key;
            const value = pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return parseUtil_1.INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    };
    exports.ZodMap = ZodMap;
    ZodMap.create = (keyType, valueType, params) => {
      return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
      });
    };
    var ZodSet = class _ZodSet extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.set) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.set,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
          if (ctx.data.size < def.minSize.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: def.minSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.minSize.message
            });
            status.dirty();
          }
        }
        if (def.maxSize !== null) {
          if (ctx.data.size > def.maxSize.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: def.maxSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.maxSize.message
            });
            status.dirty();
          }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
          const parsedSet = /* @__PURE__ */ new Set();
          for (const element of elements2) {
            if (element.status === "aborted")
              return parseUtil_1.INVALID;
            if (element.status === "dirty")
              status.dirty();
            parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i9) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i9)));
        if (ctx.common.async) {
          return Promise.all(elements).then((elements2) => finalizeSet(elements2));
        } else {
          return finalizeSet(elements);
        }
      }
      min(minSize, message2) {
        return new _ZodSet({
          ...this._def,
          minSize: { value: minSize, message: errorUtil_1.errorUtil.toString(message2) }
        });
      }
      max(maxSize, message2) {
        return new _ZodSet({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil_1.errorUtil.toString(message2) }
        });
      }
      size(size3, message2) {
        return this.min(size3, message2).max(size3, message2);
      }
      nonempty(message2) {
        return this.min(1, message2);
      }
    };
    exports.ZodSet = ZodSet;
    ZodSet.create = (valueType, params) => {
      return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
      });
    };
    var ZodFunction = class _ZodFunction extends ZodType {
      constructor() {
        super(...arguments);
        this.validate = this.implement;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.function) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.function,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        function makeArgsIssue(args, error) {
          return (0, parseUtil_1.makeIssue)({
            data: args,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              (0, errors_1.getErrorMap)(),
              errors_1.defaultErrorMap
            ].filter((x2) => !!x2),
            issueData: {
              code: ZodError_1.ZodIssueCode.invalid_arguments,
              argumentsError: error
            }
          });
        }
        function makeReturnsIssue(returns, error) {
          return (0, parseUtil_1.makeIssue)({
            data: returns,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              (0, errors_1.getErrorMap)(),
              errors_1.defaultErrorMap
            ].filter((x2) => !!x2),
            issueData: {
              code: ZodError_1.ZodIssueCode.invalid_return_type,
              returnTypeError: error
            }
          });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
          const me = this;
          return (0, parseUtil_1.OK)(async function(...args) {
            const error = new ZodError_1.ZodError([]);
            const parsedArgs = await me._def.args.parseAsync(args, params).catch((e12) => {
              error.addIssue(makeArgsIssue(args, e12));
              throw error;
            });
            const result = await Reflect.apply(fn, this, parsedArgs);
            const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e12) => {
              error.addIssue(makeReturnsIssue(result, e12));
              throw error;
            });
            return parsedReturns;
          });
        } else {
          const me = this;
          return (0, parseUtil_1.OK)(function(...args) {
            const parsedArgs = me._def.args.safeParse(args, params);
            if (!parsedArgs.success) {
              throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
            }
            const result = Reflect.apply(fn, this, parsedArgs.data);
            const parsedReturns = me._def.returns.safeParse(result, params);
            if (!parsedReturns.success) {
              throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
            }
            return parsedReturns.data;
          });
        }
      }
      parameters() {
        return this._def.args;
      }
      returnType() {
        return this._def.returns;
      }
      args(...items) {
        return new _ZodFunction({
          ...this._def,
          args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
      }
      returns(returnType) {
        return new _ZodFunction({
          ...this._def,
          returns: returnType
        });
      }
      implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      static create(args, returns, params) {
        return new _ZodFunction({
          args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
          returns: returns || ZodUnknown.create(),
          typeName: ZodFirstPartyTypeKind.ZodFunction,
          ...processCreateParams(params)
        });
      }
    };
    exports.ZodFunction = ZodFunction;
    var ZodLazy = class extends ZodType {
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    };
    exports.ZodLazy = ZodLazy;
    ZodLazy.create = (getter, params) => {
      return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
      });
    };
    var ZodLiteral = class extends ZodType {
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_literal,
            expected: this._def.value
          });
          return parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    };
    exports.ZodLiteral = ZodLiteral;
    ZodLiteral.create = (value, params) => {
      return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
      });
    };
    function createZodEnum(values, params) {
      return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
      });
    }
    var ZodEnum = class _ZodEnum extends ZodType {
      constructor() {
        super(...arguments);
        _ZodEnum_cache.set(this, void 0);
      }
      _parse(input) {
        if (typeof input.data !== "string") {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          (0, parseUtil_1.addIssueToContext)(ctx, {
            expected: util_1.util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodError_1.ZodIssueCode.invalid_type
          });
          return parseUtil_1.INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      extract(values, newDef = this._def) {
        return _ZodEnum.create(values, {
          ...this._def,
          ...newDef
        });
      }
      exclude(values, newDef = this._def) {
        return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
          ...this._def,
          ...newDef
        });
      }
    };
    exports.ZodEnum = ZodEnum;
    _ZodEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodEnum.create = createZodEnum;
    var ZodNativeEnum = class extends ZodType {
      constructor() {
        super(...arguments);
        _ZodNativeEnum_cache.set(this, void 0);
      }
      _parse(input) {
        const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== util_1.ZodParsedType.string && ctx.parsedType !== util_1.ZodParsedType.number) {
          const expectedValues = util_1.util.objectValues(nativeEnumValues);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            expected: util_1.util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodError_1.ZodIssueCode.invalid_type
          });
          return parseUtil_1.INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
          __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util_1.util.getValidEnumValues(this._def.values)), "f");
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
          const expectedValues = util_1.util.objectValues(nativeEnumValues);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
      get enum() {
        return this._def.values;
      }
    };
    exports.ZodNativeEnum = ZodNativeEnum;
    _ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodNativeEnum.create = (values, params) => {
      return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
      });
    };
    var ZodPromise = class extends ZodType {
      unwrap() {
        return this._def.type;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.promise && ctx.common.async === false) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.promise,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const promisified = ctx.parsedType === util_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return (0, parseUtil_1.OK)(promisified.then((data) => {
          return this._def.type.parseAsync(data, {
            path: ctx.path,
            errorMap: ctx.common.contextualErrorMap
          });
        }));
      }
    };
    exports.ZodPromise = ZodPromise;
    ZodPromise.create = (schema, params) => {
      return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
      });
    };
    var ZodEffects = class extends ZodType {
      innerType() {
        return this._def.schema;
      }
      sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
          addIssue: (arg) => {
            (0, parseUtil_1.addIssueToContext)(ctx, arg);
            if (arg.fatal) {
              status.abort();
            } else {
              status.dirty();
            }
          },
          get path() {
            return ctx.path;
          }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
          const processed = effect.transform(ctx.data, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(processed).then(async (processed2) => {
              if (status.value === "aborted")
                return parseUtil_1.INVALID;
              const result = await this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return parseUtil_1.INVALID;
              if (result.status === "dirty")
                return (0, parseUtil_1.DIRTY)(result.value);
              if (status.value === "dirty")
                return (0, parseUtil_1.DIRTY)(result.value);
              return result;
            });
          } else {
            if (status.value === "aborted")
              return parseUtil_1.INVALID;
            const result = this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return parseUtil_1.INVALID;
            if (result.status === "dirty")
              return (0, parseUtil_1.DIRTY)(result.value);
            if (status.value === "dirty")
              return (0, parseUtil_1.DIRTY)(result.value);
            return result;
          }
        }
        if (effect.type === "refinement") {
          const executeRefinement = (acc) => {
            const result = effect.refinement(acc, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(result);
            }
            if (result instanceof Promise) {
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            }
            return acc;
          };
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inner.status === "aborted")
              return parseUtil_1.INVALID;
            if (inner.status === "dirty")
              status.dirty();
            executeRefinement(inner.value);
            return { status: status.value, value: inner.value };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
              if (inner.status === "aborted")
                return parseUtil_1.INVALID;
              if (inner.status === "dirty")
                status.dirty();
              return executeRefinement(inner.value).then(() => {
                return { status: status.value, value: inner.value };
              });
            });
          }
        }
        if (effect.type === "transform") {
          if (ctx.common.async === false) {
            const base3 = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!(0, parseUtil_1.isValid)(base3))
              return base3;
            const result = effect.transform(base3.value, checkCtx);
            if (result instanceof Promise) {
              throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
            }
            return { status: status.value, value: result };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base3) => {
              if (!(0, parseUtil_1.isValid)(base3))
                return base3;
              return Promise.resolve(effect.transform(base3.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
            });
          }
        }
        util_1.util.assertNever(effect);
      }
    };
    exports.ZodEffects = ZodEffects;
    exports.ZodTransformer = ZodEffects;
    ZodEffects.create = (schema, effect, params) => {
      return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
      });
    };
    ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
      return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
      });
    };
    var ZodOptional = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === util_1.ZodParsedType.undefined) {
          return (0, parseUtil_1.OK)(void 0);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodOptional = ZodOptional;
    ZodOptional.create = (type, params) => {
      return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
      });
    };
    var ZodNullable = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === util_1.ZodParsedType.null) {
          return (0, parseUtil_1.OK)(null);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodNullable = ZodNullable;
    ZodNullable.create = (type, params) => {
      return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
      });
    };
    var ZodDefault = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === util_1.ZodParsedType.undefined) {
          data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    };
    exports.ZodDefault = ZodDefault;
    ZodDefault.create = (type, params) => {
      return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : () => params.default,
        ...processCreateParams(params)
      });
    };
    var ZodCatch = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        };
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        });
        if ((0, parseUtil_1.isAsync)(result)) {
          return result.then((result2) => {
            return {
              status: "valid",
              value: result2.status === "valid" ? result2.value : this._def.catchValue({
                get error() {
                  return new ZodError_1.ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          });
        } else {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError_1.ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        }
      }
      removeCatch() {
        return this._def.innerType;
      }
    };
    exports.ZodCatch = ZodCatch;
    ZodCatch.create = (type, params) => {
      return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params)
      });
    };
    var ZodNaN = class extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.nan) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.nan,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
      }
    };
    exports.ZodNaN = ZodNaN;
    ZodNaN.create = (params) => {
      return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
      });
    };
    exports.BRAND = Symbol("zod_brand");
    var ZodBranded = class extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    };
    exports.ZodBranded = ZodBranded;
    var ZodPipeline = class _ZodPipeline extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
          const handleAsync = async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return parseUtil_1.INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return (0, parseUtil_1.DIRTY)(inResult.value);
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          };
          return handleAsync();
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return parseUtil_1.INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return {
              status: "dirty",
              value: inResult.value
            };
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }
      }
      static create(a4, b3) {
        return new _ZodPipeline({
          in: a4,
          out: b3,
          typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
      }
    };
    exports.ZodPipeline = ZodPipeline;
    var ZodReadonly = class extends ZodType {
      _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data) => {
          if ((0, parseUtil_1.isValid)(data)) {
            data.value = Object.freeze(data.value);
          }
          return data;
        };
        return (0, parseUtil_1.isAsync)(result) ? result.then((data) => freeze(data)) : freeze(result);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports.ZodReadonly = ZodReadonly;
    ZodReadonly.create = (type, params) => {
      return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
      });
    };
    function custom(check2, params = {}, fatal) {
      if (check2)
        return ZodAny.create().superRefine((data, ctx) => {
          var _a, _b;
          if (!check2(data)) {
            const p3 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
            const _fatal = (_b = (_a = p3.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
            const p22 = typeof p3 === "string" ? { message: p3 } : p3;
            ctx.addIssue({ code: "custom", ...p22, fatal: _fatal });
          }
        });
      return ZodAny.create();
    }
    exports.custom = custom;
    exports.late = {
      object: ZodObject.lazycreate
    };
    var ZodFirstPartyTypeKind;
    (function(ZodFirstPartyTypeKind2) {
      ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
    })(ZodFirstPartyTypeKind || (exports.ZodFirstPartyTypeKind = ZodFirstPartyTypeKind = {}));
    var instanceOfType = (cls, params = {
      message: `Input not instance of ${cls.name}`
    }) => custom((data) => data instanceof cls, params);
    exports.instanceof = instanceOfType;
    var stringType = ZodString.create;
    exports.string = stringType;
    var numberType = ZodNumber.create;
    exports.number = numberType;
    var nanType = ZodNaN.create;
    exports.nan = nanType;
    var bigIntType = ZodBigInt.create;
    exports.bigint = bigIntType;
    var booleanType = ZodBoolean.create;
    exports.boolean = booleanType;
    var dateType = ZodDate.create;
    exports.date = dateType;
    var symbolType = ZodSymbol.create;
    exports.symbol = symbolType;
    var undefinedType = ZodUndefined.create;
    exports.undefined = undefinedType;
    var nullType = ZodNull.create;
    exports.null = nullType;
    var anyType = ZodAny.create;
    exports.any = anyType;
    var unknownType = ZodUnknown.create;
    exports.unknown = unknownType;
    var neverType = ZodNever.create;
    exports.never = neverType;
    var voidType = ZodVoid.create;
    exports.void = voidType;
    var arrayType = ZodArray.create;
    exports.array = arrayType;
    var objectType = ZodObject.create;
    exports.object = objectType;
    var strictObjectType = ZodObject.strictCreate;
    exports.strictObject = strictObjectType;
    var unionType = ZodUnion.create;
    exports.union = unionType;
    var discriminatedUnionType = ZodDiscriminatedUnion.create;
    exports.discriminatedUnion = discriminatedUnionType;
    var intersectionType = ZodIntersection.create;
    exports.intersection = intersectionType;
    var tupleType = ZodTuple.create;
    exports.tuple = tupleType;
    var recordType = ZodRecord.create;
    exports.record = recordType;
    var mapType = ZodMap.create;
    exports.map = mapType;
    var setType = ZodSet.create;
    exports.set = setType;
    var functionType = ZodFunction.create;
    exports.function = functionType;
    var lazyType = ZodLazy.create;
    exports.lazy = lazyType;
    var literalType = ZodLiteral.create;
    exports.literal = literalType;
    var enumType = ZodEnum.create;
    exports.enum = enumType;
    var nativeEnumType = ZodNativeEnum.create;
    exports.nativeEnum = nativeEnumType;
    var promiseType = ZodPromise.create;
    exports.promise = promiseType;
    var effectsType = ZodEffects.create;
    exports.effect = effectsType;
    exports.transformer = effectsType;
    var optionalType = ZodOptional.create;
    exports.optional = optionalType;
    var nullableType = ZodNullable.create;
    exports.nullable = nullableType;
    var preprocessType = ZodEffects.createWithPreprocess;
    exports.preprocess = preprocessType;
    var pipelineType = ZodPipeline.create;
    exports.pipeline = pipelineType;
    var ostring = () => stringType().optional();
    exports.ostring = ostring;
    var onumber = () => numberType().optional();
    exports.onumber = onumber;
    var oboolean = () => booleanType().optional();
    exports.oboolean = oboolean;
    exports.coerce = {
      string: (arg) => ZodString.create({ ...arg, coerce: true }),
      number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
      boolean: (arg) => ZodBoolean.create({
        ...arg,
        coerce: true
      }),
      bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
      date: (arg) => ZodDate.create({ ...arg, coerce: true })
    };
    exports.NEVER = parseUtil_1.INVALID;
  }
});

// node_modules/zod/lib/external.js
var require_external = __commonJS({
  "node_modules/zod/lib/external.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_errors(), exports);
    __exportStar(require_parseUtil(), exports);
    __exportStar(require_typeAliases(), exports);
    __exportStar(require_util(), exports);
    __exportStar(require_types(), exports);
    __exportStar(require_ZodError(), exports);
  }
});

// node_modules/zod/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/zod/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o13, v2) {
      Object.defineProperty(o13, "default", { enumerable: true, value: v2 });
    } : function(o13, v2) {
      o13["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.z = void 0;
    var z2 = __importStar(require_external());
    exports.z = z2;
    __exportStar(require_external(), exports);
    exports.default = z2;
  }
});

// node_modules/@atproto/jwk/dist/errors.js
var require_errors2 = __commonJS({
  "node_modules/@atproto/jwk/dist/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JwtVerifyError = exports.JwtCreateError = exports.JwkError = exports.ERR_JWT_VERIFY = exports.ERR_JWT_CREATE = exports.ERR_JWT_INVALID = exports.ERR_JWK_NOT_FOUND = exports.ERR_JWK_INVALID = exports.ERR_JWKS_NO_MATCHING_KEY = void 0;
    exports.ERR_JWKS_NO_MATCHING_KEY = "ERR_JWKS_NO_MATCHING_KEY";
    exports.ERR_JWK_INVALID = "ERR_JWK_INVALID";
    exports.ERR_JWK_NOT_FOUND = "ERR_JWK_NOT_FOUND";
    exports.ERR_JWT_INVALID = "ERR_JWT_INVALID";
    exports.ERR_JWT_CREATE = "ERR_JWT_CREATE";
    exports.ERR_JWT_VERIFY = "ERR_JWT_VERIFY";
    var JwkError = class extends TypeError {
      constructor(message2 = "JWK error", code2 = exports.ERR_JWK_INVALID, options) {
        super(message2, options);
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: code2
        });
      }
    };
    exports.JwkError = JwkError;
    var JwtCreateError = class _JwtCreateError extends Error {
      constructor(message2 = "Unable to create JWT", code2 = exports.ERR_JWT_CREATE, options) {
        super(message2, options);
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: code2
        });
      }
      static from(cause, code2, message2) {
        if (cause instanceof _JwtCreateError)
          return cause;
        if (cause instanceof JwkError) {
          return new _JwtCreateError(message2, cause.code, { cause });
        }
        return new _JwtCreateError(message2, code2, { cause });
      }
    };
    exports.JwtCreateError = JwtCreateError;
    var JwtVerifyError = class _JwtVerifyError extends Error {
      constructor(message2 = "Invalid JWT", code2 = exports.ERR_JWT_VERIFY, options) {
        super(message2, options);
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: code2
        });
      }
      static from(cause, code2, message2) {
        if (cause instanceof _JwtVerifyError)
          return cause;
        if (cause instanceof JwkError) {
          return new _JwtVerifyError(message2, cause.code, { cause });
        }
        return new _JwtVerifyError(message2, code2, { cause });
      }
    };
    exports.JwtVerifyError = JwtVerifyError;
  }
});

// node_modules/@atproto/jwk/dist/alg.js
var require_alg = __commonJS({
  "node_modules/@atproto/jwk/dist/alg.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jwkAlgorithms = jwkAlgorithms;
    var errors_js_1 = require_errors2();
    var { process: process2 } = globalThis;
    var IS_NODE_RUNTIME = typeof process2 !== "undefined" && typeof process2?.versions?.node === "string";
    function* jwkAlgorithms(jwk) {
      if (jwk.alg) {
        yield jwk.alg;
        return;
      }
      switch (jwk.kty) {
        case "EC": {
          if (jwk.use === "enc" || jwk.use === void 0) {
            yield "ECDH-ES";
            yield "ECDH-ES+A128KW";
            yield "ECDH-ES+A192KW";
            yield "ECDH-ES+A256KW";
          }
          if (jwk.use === "sig" || jwk.use === void 0) {
            const crv = "crv" in jwk ? jwk.crv : void 0;
            switch (crv) {
              case "P-256":
              case "P-384":
                yield `ES${crv.slice(-3)}`;
                break;
              case "P-521":
                yield "ES512";
                break;
              case "secp256k1":
                if (IS_NODE_RUNTIME)
                  yield "ES256K";
                break;
              default:
                throw new errors_js_1.JwkError(`Unsupported crv "${crv}"`);
            }
          }
          return;
        }
        case "OKP": {
          if (!jwk.use)
            throw new errors_js_1.JwkError('Missing "use" Parameter value');
          yield "ECDH-ES";
          yield "ECDH-ES+A128KW";
          yield "ECDH-ES+A192KW";
          yield "ECDH-ES+A256KW";
          return;
        }
        case "RSA": {
          if (jwk.use === "enc" || jwk.use === void 0) {
            yield "RSA-OAEP";
            yield "RSA-OAEP-256";
            yield "RSA-OAEP-384";
            yield "RSA-OAEP-512";
            if (IS_NODE_RUNTIME)
              yield "RSA1_5";
          }
          if (jwk.use === "sig" || jwk.use === void 0) {
            yield "PS256";
            yield "PS384";
            yield "PS512";
            yield "RS256";
            yield "RS384";
            yield "RS512";
          }
          return;
        }
        case "oct": {
          if (jwk.use === "enc" || jwk.use === void 0) {
            yield "A128GCMKW";
            yield "A192GCMKW";
            yield "A256GCMKW";
            yield "A128KW";
            yield "A192KW";
            yield "A256KW";
          }
          if (jwk.use === "sig" || jwk.use === void 0) {
            yield "HS256";
            yield "HS384";
            yield "HS512";
          }
          return;
        }
        default:
          throw new errors_js_1.JwkError(`Unsupported kty "${jwk.kty}"`);
      }
    }
  }
});

// node_modules/@atproto/jwk/dist/jwk.js
var require_jwk = __commonJS({
  "node_modules/@atproto/jwk/dist/jwk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jwkPubSchema = exports.jwkValidator = exports.jwkSchema = exports.jwkUnknownKeySchema = exports.jwkSymKeySchema = exports.jwkOkpKeySchema = exports.jwkEcSecp256k1KeySchema = exports.jwkEcKeySchema = exports.jwkRsaKeySchema = exports.jwkBaseSchema = exports.keyUsageSchema = void 0;
    var zod_1 = require_lib2();
    exports.keyUsageSchema = zod_1.z.enum([
      "sign",
      "verify",
      "encrypt",
      "decrypt",
      "wrapKey",
      "unwrapKey",
      "deriveKey",
      "deriveBits"
    ]);
    exports.jwkBaseSchema = zod_1.z.object({
      kty: zod_1.z.string().min(1),
      alg: zod_1.z.string().min(1).optional(),
      kid: zod_1.z.string().min(1).optional(),
      ext: zod_1.z.boolean().optional(),
      use: zod_1.z.enum(["sig", "enc"]).optional(),
      key_ops: zod_1.z.array(exports.keyUsageSchema).optional(),
      x5c: zod_1.z.array(zod_1.z.string()).optional(),
      // X.509 Certificate Chain
      x5t: zod_1.z.string().min(1).optional(),
      // X.509 Certificate SHA-1 Thumbprint
      "x5t#S256": zod_1.z.string().min(1).optional(),
      // X.509 Certificate SHA-256 Thumbprint
      x5u: zod_1.z.string().url().optional()
      // X.509 URL
    });
    exports.jwkRsaKeySchema = exports.jwkBaseSchema.extend({
      kty: zod_1.z.literal("RSA"),
      alg: zod_1.z.enum(["RS256", "RS384", "RS512", "PS256", "PS384", "PS512"]).optional(),
      n: zod_1.z.string().min(1),
      // Modulus
      e: zod_1.z.string().min(1),
      // Exponent
      d: zod_1.z.string().min(1).optional(),
      // Private Exponent
      p: zod_1.z.string().min(1).optional(),
      // First Prime Factor
      q: zod_1.z.string().min(1).optional(),
      // Second Prime Factor
      dp: zod_1.z.string().min(1).optional(),
      // First Factor CRT Exponent
      dq: zod_1.z.string().min(1).optional(),
      // Second Factor CRT Exponent
      qi: zod_1.z.string().min(1).optional(),
      // First CRT Coefficient
      oth: zod_1.z.array(zod_1.z.object({
        r: zod_1.z.string().optional(),
        d: zod_1.z.string().optional(),
        t: zod_1.z.string().optional()
      })).nonempty().optional()
      // Other Primes Info
    });
    exports.jwkEcKeySchema = exports.jwkBaseSchema.extend({
      kty: zod_1.z.literal("EC"),
      alg: zod_1.z.enum(["ES256", "ES384", "ES512"]).optional(),
      crv: zod_1.z.enum(["P-256", "P-384", "P-521"]),
      x: zod_1.z.string().min(1),
      y: zod_1.z.string().min(1),
      d: zod_1.z.string().min(1).optional()
      // ECC Private Key
    });
    exports.jwkEcSecp256k1KeySchema = exports.jwkBaseSchema.extend({
      kty: zod_1.z.literal("EC"),
      alg: zod_1.z.enum(["ES256K"]).optional(),
      crv: zod_1.z.enum(["secp256k1"]),
      x: zod_1.z.string().min(1),
      y: zod_1.z.string().min(1),
      d: zod_1.z.string().min(1).optional()
      // ECC Private Key
    });
    exports.jwkOkpKeySchema = exports.jwkBaseSchema.extend({
      kty: zod_1.z.literal("OKP"),
      alg: zod_1.z.enum(["EdDSA"]).optional(),
      crv: zod_1.z.enum(["Ed25519", "Ed448"]),
      x: zod_1.z.string().min(1),
      d: zod_1.z.string().min(1).optional()
      // ECC Private Key
    });
    exports.jwkSymKeySchema = exports.jwkBaseSchema.extend({
      kty: zod_1.z.literal("oct"),
      // Octet Sequence (used to represent symmetric keys)
      alg: zod_1.z.enum(["HS256", "HS384", "HS512"]).optional(),
      k: zod_1.z.string()
      // Key Value (base64url encoded)
    });
    exports.jwkUnknownKeySchema = exports.jwkBaseSchema.extend({
      kty: zod_1.z.string().refine((v2) => v2 !== "RSA" && v2 !== "EC" && v2 !== "OKP" && v2 !== "oct")
    });
    exports.jwkSchema = zod_1.z.union([
      exports.jwkUnknownKeySchema,
      exports.jwkRsaKeySchema,
      exports.jwkEcKeySchema,
      exports.jwkEcSecp256k1KeySchema,
      exports.jwkOkpKeySchema,
      exports.jwkSymKeySchema
    ]);
    exports.jwkValidator = exports.jwkSchema.refine((k2) => k2.use != null || k2.key_ops != null, "use or key_ops required").refine((k2) => !k2.use || !k2.key_ops || k2.key_ops.every((o13) => k2.use === "sig" ? o13 === "sign" || o13 === "verify" : o13 === "encrypt" || o13 === "decrypt"), "use and key_ops must be consistent");
    exports.jwkPubSchema = exports.jwkValidator.refine((k2) => k2.kid != null, "kid is required").refine((k2) => !("k" in k2) && !("d" in k2), "private key not allowed");
  }
});

// node_modules/@atproto/jwk/dist/jwks.js
var require_jwks = __commonJS({
  "node_modules/@atproto/jwk/dist/jwks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jwksPubSchema = exports.jwksSchema = void 0;
    var zod_1 = require_lib2();
    var jwk_js_1 = require_jwk();
    exports.jwksSchema = zod_1.z.object({
      keys: zod_1.z.array(jwk_js_1.jwkSchema)
    });
    exports.jwksPubSchema = zod_1.z.object({
      keys: zod_1.z.array(jwk_js_1.jwkPubSchema)
    });
  }
});

// node_modules/multiformats/esm/vendor/base-x.js
function base(ALPHABET, name2) {
  if (ALPHABET.length >= 255) {
    throw new TypeError("Alphabet too long");
  }
  var BASE_MAP = new Uint8Array(256);
  for (var j2 = 0; j2 < BASE_MAP.length; j2++) {
    BASE_MAP[j2] = 255;
  }
  for (var i9 = 0; i9 < ALPHABET.length; i9++) {
    var x2 = ALPHABET.charAt(i9);
    var xc = x2.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) {
      throw new TypeError(x2 + " is ambiguous");
    }
    BASE_MAP[xc] = i9;
  }
  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256);
  var iFACTOR = Math.log(256) / Math.log(BASE);
  function encode7(source) {
    if (source instanceof Uint8Array) ;
    else if (ArrayBuffer.isView(source)) {
      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
    } else if (Array.isArray(source)) {
      source = Uint8Array.from(source);
    }
    if (!(source instanceof Uint8Array)) {
      throw new TypeError("Expected Uint8Array");
    }
    if (source.length === 0) {
      return "";
    }
    var zeroes = 0;
    var length2 = 0;
    var pbegin = 0;
    var pend = source.length;
    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    }
    var size3 = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size3);
    while (pbegin !== pend) {
      var carry = source[pbegin];
      var i10 = 0;
      for (var it1 = size3 - 1; (carry !== 0 || i10 < length2) && it1 !== -1; it1--, i10++) {
        carry += 256 * b58[it1] >>> 0;
        b58[it1] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i10;
      pbegin++;
    }
    var it2 = size3 - length2;
    while (it2 !== size3 && b58[it2] === 0) {
      it2++;
    }
    var str = LEADER.repeat(zeroes);
    for (; it2 < size3; ++it2) {
      str += ALPHABET.charAt(b58[it2]);
    }
    return str;
  }
  function decodeUnsafe(source) {
    if (typeof source !== "string") {
      throw new TypeError("Expected String");
    }
    if (source.length === 0) {
      return new Uint8Array();
    }
    var psz = 0;
    if (source[psz] === " ") {
      return;
    }
    var zeroes = 0;
    var length2 = 0;
    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    }
    var size3 = (source.length - psz) * FACTOR + 1 >>> 0;
    var b256 = new Uint8Array(size3);
    while (source[psz]) {
      var carry = BASE_MAP[source.charCodeAt(psz)];
      if (carry === 255) {
        return;
      }
      var i10 = 0;
      for (var it3 = size3 - 1; (carry !== 0 || i10 < length2) && it3 !== -1; it3--, i10++) {
        carry += BASE * b256[it3] >>> 0;
        b256[it3] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }
      if (carry !== 0) {
        throw new Error("Non-zero carry");
      }
      length2 = i10;
      psz++;
    }
    if (source[psz] === " ") {
      return;
    }
    var it4 = size3 - length2;
    while (it4 !== size3 && b256[it4] === 0) {
      it4++;
    }
    var vch = new Uint8Array(zeroes + (size3 - it4));
    var j3 = zeroes;
    while (it4 !== size3) {
      vch[j3++] = b256[it4++];
    }
    return vch;
  }
  function decode8(string2) {
    var buffer = decodeUnsafe(string2);
    if (buffer) {
      return buffer;
    }
    throw new Error(`Non-${name2} character`);
  }
  return {
    encode: encode7,
    decodeUnsafe,
    decode: decode8
  };
}
var src, _brrp__multiformats_scope_baseX, base_x_default;
var init_base_x = __esm({
  "node_modules/multiformats/esm/vendor/base-x.js"() {
    src = base;
    _brrp__multiformats_scope_baseX = src;
    base_x_default = _brrp__multiformats_scope_baseX;
  }
});

// node_modules/multiformats/esm/src/bytes.js
var empty, equals, coerce, fromString, toString;
var init_bytes = __esm({
  "node_modules/multiformats/esm/src/bytes.js"() {
    empty = new Uint8Array(0);
    equals = (aa, bb) => {
      if (aa === bb)
        return true;
      if (aa.byteLength !== bb.byteLength) {
        return false;
      }
      for (let ii = 0; ii < aa.byteLength; ii++) {
        if (aa[ii] !== bb[ii]) {
          return false;
        }
      }
      return true;
    };
    coerce = (o13) => {
      if (o13 instanceof Uint8Array && o13.constructor.name === "Uint8Array")
        return o13;
      if (o13 instanceof ArrayBuffer)
        return new Uint8Array(o13);
      if (ArrayBuffer.isView(o13)) {
        return new Uint8Array(o13.buffer, o13.byteOffset, o13.byteLength);
      }
      throw new Error("Unknown type, must be binary type");
    };
    fromString = (str) => new TextEncoder().encode(str);
    toString = (b3) => new TextDecoder().decode(b3);
  }
});

// node_modules/multiformats/esm/src/bases/base.js
var Encoder, Decoder, ComposedDecoder, or, Codec, from, baseX, decode, encode, rfc4648;
var init_base = __esm({
  "node_modules/multiformats/esm/src/bases/base.js"() {
    init_base_x();
    init_bytes();
    Encoder = class {
      constructor(name2, prefix, baseEncode) {
        this.name = name2;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
      }
      encode(bytes) {
        if (bytes instanceof Uint8Array) {
          return `${this.prefix}${this.baseEncode(bytes)}`;
        } else {
          throw Error("Unknown type, must be binary type");
        }
      }
    };
    Decoder = class {
      constructor(name2, prefix, baseDecode) {
        this.name = name2;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === void 0) {
          throw new Error("Invalid prefix character");
        }
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
      }
      decode(text) {
        if (typeof text === "string") {
          if (text.codePointAt(0) !== this.prefixCodePoint) {
            throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
          }
          return this.baseDecode(text.slice(this.prefix.length));
        } else {
          throw Error("Can only multibase decode strings");
        }
      }
      or(decoder2) {
        return or(this, decoder2);
      }
    };
    ComposedDecoder = class {
      constructor(decoders) {
        this.decoders = decoders;
      }
      or(decoder2) {
        return or(this, decoder2);
      }
      decode(input) {
        const prefix = input[0];
        const decoder2 = this.decoders[prefix];
        if (decoder2) {
          return decoder2.decode(input);
        } else {
          throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
        }
      }
    };
    or = (left, right) => new ComposedDecoder({
      ...left.decoders || { [left.prefix]: left },
      ...right.decoders || { [right.prefix]: right }
    });
    Codec = class {
      constructor(name2, prefix, baseEncode, baseDecode) {
        this.name = name2;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new Encoder(name2, prefix, baseEncode);
        this.decoder = new Decoder(name2, prefix, baseDecode);
      }
      encode(input) {
        return this.encoder.encode(input);
      }
      decode(input) {
        return this.decoder.decode(input);
      }
    };
    from = ({ name: name2, prefix, encode: encode7, decode: decode8 }) => new Codec(name2, prefix, encode7, decode8);
    baseX = ({ prefix, name: name2, alphabet: alphabet2 }) => {
      const { encode: encode7, decode: decode8 } = base_x_default(alphabet2, name2);
      return from({
        prefix,
        name: name2,
        encode: encode7,
        decode: (text) => coerce(decode8(text))
      });
    };
    decode = (string2, alphabet2, bitsPerChar, name2) => {
      const codes = {};
      for (let i9 = 0; i9 < alphabet2.length; ++i9) {
        codes[alphabet2[i9]] = i9;
      }
      let end = string2.length;
      while (string2[end - 1] === "=") {
        --end;
      }
      const out = new Uint8Array(end * bitsPerChar / 8 | 0);
      let bits = 0;
      let buffer = 0;
      let written = 0;
      for (let i9 = 0; i9 < end; ++i9) {
        const value = codes[string2[i9]];
        if (value === void 0) {
          throw new SyntaxError(`Non-${name2} character`);
        }
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
          bits -= 8;
          out[written++] = 255 & buffer >> bits;
        }
      }
      if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
        throw new SyntaxError("Unexpected end of data");
      }
      return out;
    };
    encode = (data, alphabet2, bitsPerChar) => {
      const pad = alphabet2[alphabet2.length - 1] === "=";
      const mask = (1 << bitsPerChar) - 1;
      let out = "";
      let bits = 0;
      let buffer = 0;
      for (let i9 = 0; i9 < data.length; ++i9) {
        buffer = buffer << 8 | data[i9];
        bits += 8;
        while (bits > bitsPerChar) {
          bits -= bitsPerChar;
          out += alphabet2[mask & buffer >> bits];
        }
      }
      if (bits) {
        out += alphabet2[mask & buffer << bitsPerChar - bits];
      }
      if (pad) {
        while (out.length * bitsPerChar & 7) {
          out += "=";
        }
      }
      return out;
    };
    rfc4648 = ({ name: name2, prefix, bitsPerChar, alphabet: alphabet2 }) => {
      return from({
        prefix,
        name: name2,
        encode(input) {
          return encode(input, alphabet2, bitsPerChar);
        },
        decode(input) {
          return decode(input, alphabet2, bitsPerChar, name2);
        }
      });
    };
  }
});

// node_modules/multiformats/esm/src/bases/base64.js
var base64_exports = {};
__export(base64_exports, {
  base64: () => base64,
  base64pad: () => base64pad,
  base64url: () => base64url,
  base64urlpad: () => base64urlpad
});
var base64, base64pad, base64url, base64urlpad;
var init_base64 = __esm({
  "node_modules/multiformats/esm/src/bases/base64.js"() {
    init_base();
    base64 = rfc4648({
      prefix: "m",
      name: "base64",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
      bitsPerChar: 6
    });
    base64pad = rfc4648({
      prefix: "M",
      name: "base64pad",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
      bitsPerChar: 6
    });
    base64url = rfc4648({
      prefix: "u",
      name: "base64url",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
      bitsPerChar: 6
    });
    base64urlpad = rfc4648({
      prefix: "U",
      name: "base64urlpad",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
      bitsPerChar: 6
    });
  }
});

// node_modules/@atproto/jwk/dist/util.js
var require_util2 = __commonJS({
  "node_modules/@atproto/jwk/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.segmentedStringRefinementFactory = exports.jwtCharsRefinement = exports.cachedGetter = exports.preferredOrderCmp = exports.isDefined = void 0;
    exports.matchesAny = matchesAny;
    exports.parseB64uJson = parseB64uJson;
    var base64_1 = (init_base64(), __toCommonJS(base64_exports));
    var zod_1 = require_lib2();
    var isDefined = (i9) => i9 !== void 0;
    exports.isDefined = isDefined;
    var preferredOrderCmp = (order) => (a4, b3) => {
      const aIdx = order.indexOf(a4);
      const bIdx = order.indexOf(b3);
      if (aIdx === bIdx)
        return 0;
      if (aIdx === -1)
        return 1;
      if (bIdx === -1)
        return -1;
      return aIdx - bIdx;
    };
    exports.preferredOrderCmp = preferredOrderCmp;
    function matchesAny(value) {
      return value == null ? (v2) => true : Array.isArray(value) ? (v2) => value.includes(v2) : (v2) => v2 === value;
    }
    var cachedGetter = (target, _context) => {
      return function() {
        const value = target.call(this);
        Object.defineProperty(this, target.name, {
          get: () => value,
          enumerable: true,
          configurable: true
        });
        return value;
      };
    };
    exports.cachedGetter = cachedGetter;
    var decoder2 = new TextDecoder();
    function parseB64uJson(input) {
      const inputBytes = base64_1.base64url.baseDecode(input);
      const json = decoder2.decode(inputBytes);
      return JSON.parse(json);
    }
    var jwtCharsRefinement = (data, ctx) => {
      let char;
      for (let i9 = 0; i9 < data.length; i9++) {
        char = data.charCodeAt(i9);
        if (
          // Base64 URL encoding (most frequent)
          65 <= char && char <= 90 || // A-Z
          97 <= char && char <= 122 || // a-z
          48 <= char && char <= 57 || // 0-9
          char === 45 || // -
          char === 95 || // _
          // Boundary (least frequent, check last)
          char === 46
        ) {
        } else {
          const invalidChar = String.fromCodePoint(data.codePointAt(i9));
          return ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: `Invalid character "${invalidChar}" in JWT at position ${i9}`
          });
        }
      }
    };
    exports.jwtCharsRefinement = jwtCharsRefinement;
    var segmentedStringRefinementFactory = (count, minPartLength = 2) => {
      if (!Number.isFinite(count) || count < 1 || (count | 0) !== count) {
        throw new TypeError(`Count must be a natural number (got ${count})`);
      }
      const minTotalLength = count * minPartLength + (count - 1);
      const errorPrefix = `Invalid JWT format`;
      return (data, ctx) => {
        if (data.length < minTotalLength) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: `${errorPrefix}: too short`
          });
          return false;
        }
        let currentStart = 0;
        for (let i9 = 0; i9 < count - 1; i9++) {
          const nextDot = data.indexOf(".", currentStart);
          if (nextDot === -1) {
            ctx.addIssue({
              code: zod_1.ZodIssueCode.custom,
              message: `${errorPrefix}: expected ${count} segments, got ${i9 + 1}`
            });
            return false;
          }
          if (nextDot - currentStart < minPartLength) {
            ctx.addIssue({
              code: zod_1.ZodIssueCode.custom,
              message: `${errorPrefix}: segment ${i9 + 1} is too short`
            });
            return false;
          }
          currentStart = nextDot + 1;
        }
        if (data.indexOf(".", currentStart) !== -1) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: `${errorPrefix}: too many segments`
          });
          return false;
        }
        if (data.length - currentStart < minPartLength) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: `${errorPrefix}: last segment is too short`
          });
          return false;
        }
        return true;
      };
    };
    exports.segmentedStringRefinementFactory = segmentedStringRefinementFactory;
  }
});

// node_modules/@atproto/jwk/dist/jwt.js
var require_jwt = __commonJS({
  "node_modules/@atproto/jwk/dist/jwt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jwtPayloadSchema = exports.jwtHeaderSchema = exports.isUnsignedJwt = exports.unsignedJwtSchema = exports.isSignedJwt = exports.signedJwtSchema = void 0;
    var zod_1 = require_lib2();
    var jwk_js_1 = require_jwk();
    var util_js_1 = require_util2();
    exports.signedJwtSchema = zod_1.z.string().superRefine(util_js_1.jwtCharsRefinement).superRefine((0, util_js_1.segmentedStringRefinementFactory)(3));
    var isSignedJwt = (data) => exports.signedJwtSchema.safeParse(data).success;
    exports.isSignedJwt = isSignedJwt;
    exports.unsignedJwtSchema = zod_1.z.string().superRefine(util_js_1.jwtCharsRefinement).superRefine((0, util_js_1.segmentedStringRefinementFactory)(2));
    var isUnsignedJwt = (data) => exports.unsignedJwtSchema.safeParse(data).success;
    exports.isUnsignedJwt = isUnsignedJwt;
    exports.jwtHeaderSchema = zod_1.z.object({
      /** "alg" (Algorithm) Header Parameter */
      alg: zod_1.z.string(),
      /** "jku" (JWK Set URL) Header Parameter */
      jku: zod_1.z.string().url().optional(),
      /** "jwk" (JSON Web Key) Header Parameter */
      jwk: zod_1.z.object({
        kty: zod_1.z.string(),
        crv: zod_1.z.string().optional(),
        x: zod_1.z.string().optional(),
        y: zod_1.z.string().optional(),
        e: zod_1.z.string().optional(),
        n: zod_1.z.string().optional()
      }).optional(),
      /** "kid" (Key ID) Header Parameter */
      kid: zod_1.z.string().optional(),
      /** "x5u" (X.509 URL) Header Parameter */
      x5u: zod_1.z.string().optional(),
      /** "x5c" (X.509 Certificate Chain) Header Parameter */
      x5c: zod_1.z.array(zod_1.z.string()).optional(),
      /** "x5t" (X.509 Certificate SHA-1 Thumbprint) Header Parameter */
      x5t: zod_1.z.string().optional(),
      /** "x5t#S256" (X.509 Certificate SHA-256 Thumbprint) Header Parameter */
      "x5t#S256": zod_1.z.string().optional(),
      /** "typ" (Type) Header Parameter */
      typ: zod_1.z.string().optional(),
      /** "cty" (Content Type) Header Parameter */
      cty: zod_1.z.string().optional(),
      /** "crit" (Critical) Header Parameter */
      crit: zod_1.z.array(zod_1.z.string()).optional()
    }).passthrough();
    exports.jwtPayloadSchema = zod_1.z.object({
      iss: zod_1.z.string().optional(),
      aud: zod_1.z.union([zod_1.z.string(), zod_1.z.array(zod_1.z.string()).nonempty()]).optional(),
      sub: zod_1.z.string().optional(),
      exp: zod_1.z.number().int().optional(),
      nbf: zod_1.z.number().int().optional(),
      iat: zod_1.z.number().int().optional(),
      jti: zod_1.z.string().optional(),
      htm: zod_1.z.string().optional(),
      htu: zod_1.z.string().optional(),
      ath: zod_1.z.string().optional(),
      acr: zod_1.z.string().optional(),
      azp: zod_1.z.string().optional(),
      amr: zod_1.z.array(zod_1.z.string()).optional(),
      // https://datatracker.ietf.org/doc/html/rfc7800
      cnf: zod_1.z.object({
        kid: zod_1.z.string().optional(),
        // Key ID
        jwk: jwk_js_1.jwkPubSchema.optional(),
        // JWK
        jwe: zod_1.z.string().optional(),
        // Encrypted key
        jku: zod_1.z.string().url().optional(),
        // JWK Set URI ("kid" should also be provided)
        // https://datatracker.ietf.org/doc/html/rfc9449#section-6.1
        jkt: zod_1.z.string().optional(),
        // https://datatracker.ietf.org/doc/html/rfc8705
        "x5t#S256": zod_1.z.string().optional(),
        // X.509 Certificate SHA-256 Thumbprint
        // https://datatracker.ietf.org/doc/html/rfc9203
        osc: zod_1.z.string().optional()
        // OSCORE_Input_Material carrying the parameters for using OSCORE per-message security with implicit key confirmation
      }).optional(),
      client_id: zod_1.z.string().optional(),
      scope: zod_1.z.string().optional(),
      nonce: zod_1.z.string().optional(),
      at_hash: zod_1.z.string().optional(),
      c_hash: zod_1.z.string().optional(),
      s_hash: zod_1.z.string().optional(),
      auth_time: zod_1.z.number().int().optional(),
      // https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
      // OpenID: "profile" scope
      name: zod_1.z.string().optional(),
      family_name: zod_1.z.string().optional(),
      given_name: zod_1.z.string().optional(),
      middle_name: zod_1.z.string().optional(),
      nickname: zod_1.z.string().optional(),
      preferred_username: zod_1.z.string().optional(),
      gender: zod_1.z.string().optional(),
      // OpenID only defines "male" and "female" without forbidding other values
      picture: zod_1.z.string().url().optional(),
      profile: zod_1.z.string().url().optional(),
      website: zod_1.z.string().url().optional(),
      birthdate: zod_1.z.string().regex(/\d{4}-\d{2}-\d{2}/).optional(),
      zoneinfo: zod_1.z.string().regex(/^[A-Za-z0-9_/]+$/).optional(),
      locale: zod_1.z.string().regex(/^[a-z]{2}(-[A-Z]{2})?$/).optional(),
      updated_at: zod_1.z.number().int().optional(),
      // OpenID: "email" scope
      email: zod_1.z.string().optional(),
      email_verified: zod_1.z.boolean().optional(),
      // OpenID: "phone" scope
      phone_number: zod_1.z.string().optional(),
      phone_number_verified: zod_1.z.boolean().optional(),
      // OpenID: "address" scope
      // https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim
      address: zod_1.z.object({
        formatted: zod_1.z.string().optional(),
        street_address: zod_1.z.string().optional(),
        locality: zod_1.z.string().optional(),
        region: zod_1.z.string().optional(),
        postal_code: zod_1.z.string().optional(),
        country: zod_1.z.string().optional()
      }).optional(),
      // https://datatracker.ietf.org/doc/html/rfc9396#section-14.2
      authorization_details: zod_1.z.array(zod_1.z.object({
        type: zod_1.z.string(),
        // https://datatracker.ietf.org/doc/html/rfc9396#section-2.2
        locations: zod_1.z.array(zod_1.z.string()).optional(),
        actions: zod_1.z.array(zod_1.z.string()).optional(),
        datatypes: zod_1.z.array(zod_1.z.string()).optional(),
        identifier: zod_1.z.string().optional(),
        privileges: zod_1.z.array(zod_1.z.string()).optional()
      }).passthrough()).optional()
    }).passthrough();
  }
});

// node_modules/@atproto/jwk/dist/jwt-decode.js
var require_jwt_decode = __commonJS({
  "node_modules/@atproto/jwk/dist/jwt-decode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unsafeDecodeJwt = unsafeDecodeJwt;
    var errors_js_1 = require_errors2();
    var jwt_js_1 = require_jwt();
    var util_js_1 = require_util2();
    function unsafeDecodeJwt(jwt) {
      const { 0: headerEnc, 1: payloadEnc, length: length2 } = jwt.split(".");
      if (length2 > 3 || length2 < 2) {
        throw new errors_js_1.JwtVerifyError(void 0, errors_js_1.ERR_JWT_INVALID);
      }
      const header = jwt_js_1.jwtHeaderSchema.parse((0, util_js_1.parseB64uJson)(headerEnc));
      if (length2 === 2 && header?.alg !== "none") {
        throw new errors_js_1.JwtVerifyError(void 0, errors_js_1.ERR_JWT_INVALID);
      }
      const payload = jwt_js_1.jwtPayloadSchema.parse((0, util_js_1.parseB64uJson)(payloadEnc));
      return { header, payload };
    }
  }
});

// node_modules/@atproto/jwk/dist/jwt-verify.js
var require_jwt_verify = __commonJS({
  "node_modules/@atproto/jwk/dist/jwt-verify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@atproto/jwk/dist/key.js
var require_key = __commonJS({
  "node_modules/@atproto/jwk/dist/key.js"(exports) {
    "use strict";
    var __runInitializers = exports && exports.__runInitializers || function(thisArg, initializers, value) {
      var useValue = arguments.length > 2;
      for (var i9 = 0; i9 < initializers.length; i9++) {
        value = useValue ? initializers[i9].call(thisArg, value) : initializers[i9].call(thisArg);
      }
      return useValue ? value : void 0;
    };
    var __esDecorate = exports && exports.__esDecorate || function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
      function accept(f5) {
        if (f5 !== void 0 && typeof f5 !== "function") throw new TypeError("Function expected");
        return f5;
      }
      var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
      var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
      var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
      var _2, done = false;
      for (var i9 = decorators.length - 1; i9 >= 0; i9--) {
        var context = {};
        for (var p3 in contextIn) context[p3] = p3 === "access" ? {} : contextIn[p3];
        for (var p3 in contextIn.access) context.access[p3] = contextIn.access[p3];
        context.addInitializer = function(f5) {
          if (done) throw new TypeError("Cannot add initializers after decoration has completed");
          extraInitializers.push(accept(f5 || null));
        };
        var result = (0, decorators[i9])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_2 = accept(result.get)) descriptor.get = _2;
          if (_2 = accept(result.set)) descriptor.set = _2;
          if (_2 = accept(result.init)) initializers.unshift(_2);
        } else if (_2 = accept(result)) {
          if (kind === "field") initializers.unshift(_2);
          else descriptor[key] = _2;
        }
      }
      if (target) Object.defineProperty(target, contextIn.name, descriptor);
      done = true;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Key = void 0;
    var alg_js_1 = require_alg();
    var errors_js_1 = require_errors2();
    var jwk_js_1 = require_jwk();
    var util_js_1 = require_util2();
    var jwkSchemaReadonly = jwk_js_1.jwkSchema.readonly();
    var Key = (() => {
      var _a;
      let _instanceExtraInitializers = [];
      let _get_publicJwk_decorators;
      let _get_bareJwk_decorators;
      let _get_algorithms_decorators;
      return _a = class Key {
        constructor(jwk) {
          Object.defineProperty(this, "jwk", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (__runInitializers(this, _instanceExtraInitializers), jwk)
          });
          if (!jwk.use)
            throw new errors_js_1.JwkError('Missing "use" Parameter value');
        }
        get isPrivate() {
          const { jwk } = this;
          if ("d" in jwk && jwk.d !== void 0)
            return true;
          if ("k" in jwk && jwk.k !== void 0)
            return true;
          return false;
        }
        get isSymetric() {
          const { jwk } = this;
          if ("k" in jwk && jwk.k !== void 0)
            return true;
          return false;
        }
        get privateJwk() {
          return this.isPrivate ? this.jwk : void 0;
        }
        get publicJwk() {
          if (this.isSymetric)
            return void 0;
          return jwkSchemaReadonly.parse({
            ...this.jwk,
            d: void 0,
            k: void 0
          });
        }
        get bareJwk() {
          if (this.isSymetric)
            return void 0;
          const { kty, crv, e: e12, n: n10, x: x2, y: y3 } = this.jwk;
          return jwkSchemaReadonly.parse({ crv, e: e12, kty, n: n10, x: x2, y: y3 });
        }
        get use() {
          return this.jwk.use;
        }
        /**
         * The (forced) algorithm to use. If not provided, the key will be usable with
         * any of the algorithms in {@link algorithms}.
         *
         * @see {@link https://datatracker.ietf.org/doc/html/rfc7518#section-3.1 | "alg" (Algorithm) Header Parameter Values for JWS}
         */
        get alg() {
          return this.jwk.alg;
        }
        get kid() {
          return this.jwk.kid;
        }
        get crv() {
          return this.jwk.crv;
        }
        /**
         * All the algorithms that this key can be used with. If `alg` is provided,
         * this set will only contain that algorithm.
         */
        get algorithms() {
          return Object.freeze(Array.from((0, alg_js_1.jwkAlgorithms)(this.jwk)));
        }
      }, (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
        _get_publicJwk_decorators = [util_js_1.cachedGetter];
        _get_bareJwk_decorators = [util_js_1.cachedGetter];
        _get_algorithms_decorators = [util_js_1.cachedGetter];
        __esDecorate(_a, null, _get_publicJwk_decorators, { kind: "getter", name: "publicJwk", static: false, private: false, access: { has: (obj) => "publicJwk" in obj, get: (obj) => obj.publicJwk }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_a, null, _get_bareJwk_decorators, { kind: "getter", name: "bareJwk", static: false, private: false, access: { has: (obj) => "bareJwk" in obj, get: (obj) => obj.bareJwk }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_a, null, _get_algorithms_decorators, { kind: "getter", name: "algorithms", static: false, private: false, access: { has: (obj) => "algorithms" in obj, get: (obj) => obj.algorithms }, metadata: _metadata }, null, _instanceExtraInitializers);
        if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
      })(), _a;
    })();
    exports.Key = Key;
  }
});

// node_modules/@atproto/jwk/dist/keyset.js
var require_keyset = __commonJS({
  "node_modules/@atproto/jwk/dist/keyset.js"(exports) {
    "use strict";
    var __runInitializers = exports && exports.__runInitializers || function(thisArg, initializers, value) {
      var useValue = arguments.length > 2;
      for (var i9 = 0; i9 < initializers.length; i9++) {
        value = useValue ? initializers[i9].call(thisArg, value) : initializers[i9].call(thisArg);
      }
      return useValue ? value : void 0;
    };
    var __esDecorate = exports && exports.__esDecorate || function(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
      function accept(f5) {
        if (f5 !== void 0 && typeof f5 !== "function") throw new TypeError("Function expected");
        return f5;
      }
      var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
      var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
      var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
      var _2, done = false;
      for (var i9 = decorators.length - 1; i9 >= 0; i9--) {
        var context = {};
        for (var p3 in contextIn) context[p3] = p3 === "access" ? {} : contextIn[p3];
        for (var p3 in contextIn.access) context.access[p3] = contextIn.access[p3];
        context.addInitializer = function(f5) {
          if (done) throw new TypeError("Cannot add initializers after decoration has completed");
          extraInitializers.push(accept(f5 || null));
        };
        var result = (0, decorators[i9])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_2 = accept(result.get)) descriptor.get = _2;
          if (_2 = accept(result.set)) descriptor.set = _2;
          if (_2 = accept(result.init)) initializers.unshift(_2);
        } else if (_2 = accept(result)) {
          if (kind === "field") initializers.unshift(_2);
          else descriptor[key] = _2;
        }
      }
      if (target) Object.defineProperty(target, contextIn.name, descriptor);
      done = true;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Keyset = void 0;
    var errors_js_1 = require_errors2();
    var jwt_decode_js_1 = require_jwt_decode();
    var util_js_1 = require_util2();
    var extractPrivateJwk = (key) => key.privateJwk;
    var extractPublicJwk = (key) => key.publicJwk;
    var Keyset = (() => {
      var _a;
      let _instanceExtraInitializers = [];
      let _get_signAlgorithms_decorators;
      let _get_publicJwks_decorators;
      let _get_privateJwks_decorators;
      return _a = class Keyset {
        constructor(iterable, preferredSigningAlgorithms = iterable instanceof _a ? [...iterable.preferredSigningAlgorithms] : [
          // Prefer elliptic curve algorithms
          "EdDSA",
          "ES256K",
          "ES256",
          // https://datatracker.ietf.org/doc/html/rfc7518#section-3.5
          "PS256",
          "PS384",
          "PS512",
          "HS256",
          "HS384",
          "HS512"
        ]) {
          Object.defineProperty(this, "preferredSigningAlgorithms", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (__runInitializers(this, _instanceExtraInitializers), preferredSigningAlgorithms)
          });
          Object.defineProperty(this, "keys", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
          });
          const keys = [];
          const kids = /* @__PURE__ */ new Set();
          for (const key of iterable) {
            if (!key)
              continue;
            keys.push(key);
            if (key.kid) {
              if (kids.has(key.kid))
                throw new errors_js_1.JwkError(`Duplicate key: ${key.kid}`);
              else
                kids.add(key.kid);
            }
          }
          this.keys = Object.freeze(keys);
        }
        get size() {
          return this.keys.length;
        }
        get signAlgorithms() {
          const algorithms = /* @__PURE__ */ new Set();
          for (const key of this) {
            if (key.use !== "sig")
              continue;
            for (const alg of key.algorithms) {
              algorithms.add(alg);
            }
          }
          return Object.freeze([...algorithms].sort((0, util_js_1.preferredOrderCmp)(this.preferredSigningAlgorithms)));
        }
        get publicJwks() {
          return {
            keys: Array.from(this, extractPublicJwk).filter(util_js_1.isDefined)
          };
        }
        get privateJwks() {
          return {
            keys: Array.from(this, extractPrivateJwk).filter(util_js_1.isDefined)
          };
        }
        has(kid) {
          return this.keys.some((key) => key.kid === kid);
        }
        get(search) {
          for (const key of this.list(search)) {
            return key;
          }
          throw new errors_js_1.JwkError(`Key not found ${search.kid || search.alg || "<unknown>"}`, errors_js_1.ERR_JWK_NOT_FOUND);
        }
        *list(search) {
          if (search.kid?.length === 0)
            return;
          if (search.alg?.length === 0)
            return;
          for (const key of this) {
            if (search.use && key.use !== search.use)
              continue;
            if (Array.isArray(search.kid)) {
              if (!key.kid || !search.kid.includes(key.kid))
                continue;
            } else if (search.kid) {
              if (key.kid !== search.kid)
                continue;
            }
            if (Array.isArray(search.alg)) {
              if (!search.alg.some((a4) => key.algorithms.includes(a4)))
                continue;
            } else if (typeof search.alg === "string") {
              if (!key.algorithms.includes(search.alg))
                continue;
            }
            yield key;
          }
        }
        findKey({ kid, alg, use }) {
          const matchingKeys = [];
          for (const key of this.list({ kid, alg, use })) {
            if (!key.isPrivate)
              continue;
            if (typeof alg === "string")
              return [key, alg];
            matchingKeys.push(key);
          }
          const isAllowedAlg = (0, util_js_1.matchesAny)(alg);
          const candidates = matchingKeys.map((key) => [key, key.algorithms.filter(isAllowedAlg)]);
          for (const prefAlg of this.preferredSigningAlgorithms) {
            for (const [matchingKey, matchingAlgs] of candidates) {
              if (matchingAlgs.includes(prefAlg))
                return [matchingKey, prefAlg];
            }
          }
          for (const [matchingKey, matchingAlgs] of candidates) {
            for (const alg2 of matchingAlgs) {
              return [matchingKey, alg2];
            }
          }
          throw new errors_js_1.JwkError(`No singing key found for ${kid || alg || use || "<unknown>"}`, errors_js_1.ERR_JWK_NOT_FOUND);
        }
        [(_get_signAlgorithms_decorators = [util_js_1.cachedGetter], _get_publicJwks_decorators = [util_js_1.cachedGetter], _get_privateJwks_decorators = [util_js_1.cachedGetter], Symbol.iterator)]() {
          return this.keys.values();
        }
        async createJwt({ alg: sAlg, kid: sKid, ...header }, payload) {
          try {
            const [key, alg] = this.findKey({ alg: sAlg, kid: sKid, use: "sig" });
            const protectedHeader = { ...header, alg, kid: key.kid };
            if (typeof payload === "function") {
              payload = await payload(protectedHeader, key);
            }
            return await key.createJwt(protectedHeader, payload);
          } catch (err) {
            throw errors_js_1.JwtCreateError.from(err);
          }
        }
        async verifyJwt(token, options) {
          const { header } = (0, jwt_decode_js_1.unsafeDecodeJwt)(token);
          const { kid, alg } = header;
          const errors = [];
          for (const key of this.list({ kid, alg })) {
            try {
              const result = await key.verifyJwt(token, options);
              return { ...result, key };
            } catch (err) {
              errors.push(err);
            }
          }
          switch (errors.length) {
            case 0:
              throw new errors_js_1.JwtVerifyError("No key matched", errors_js_1.ERR_JWKS_NO_MATCHING_KEY);
            case 1:
              throw errors_js_1.JwtVerifyError.from(errors[0], errors_js_1.ERR_JWT_INVALID);
            default:
              throw errors_js_1.JwtVerifyError.from(errors, errors_js_1.ERR_JWT_INVALID);
          }
        }
        toJSON() {
          return structuredClone(this.publicJwks);
        }
      }, (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
        __esDecorate(_a, null, _get_signAlgorithms_decorators, { kind: "getter", name: "signAlgorithms", static: false, private: false, access: { has: (obj) => "signAlgorithms" in obj, get: (obj) => obj.signAlgorithms }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_a, null, _get_publicJwks_decorators, { kind: "getter", name: "publicJwks", static: false, private: false, access: { has: (obj) => "publicJwks" in obj, get: (obj) => obj.publicJwks }, metadata: _metadata }, null, _instanceExtraInitializers);
        __esDecorate(_a, null, _get_privateJwks_decorators, { kind: "getter", name: "privateJwks", static: false, private: false, access: { has: (obj) => "privateJwks" in obj, get: (obj) => obj.privateJwks }, metadata: _metadata }, null, _instanceExtraInitializers);
        if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
      })(), _a;
    })();
    exports.Keyset = Keyset;
  }
});

// node_modules/@atproto/jwk/dist/index.js
var require_dist = __commonJS({
  "node_modules/@atproto/jwk/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationError = void 0;
    var zod_1 = require_lib2();
    Object.defineProperty(exports, "ValidationError", { enumerable: true, get: function() {
      return zod_1.ZodError;
    } });
    __exportStar(require_alg(), exports);
    __exportStar(require_errors2(), exports);
    __exportStar(require_jwk(), exports);
    __exportStar(require_jwks(), exports);
    __exportStar(require_jwt_decode(), exports);
    __exportStar(require_jwt_verify(), exports);
    __exportStar(require_jwt(), exports);
    __exportStar(require_key(), exports);
    __exportStar(require_keyset(), exports);
    __exportStar(require_util2(), exports);
  }
});

// node_modules/jose/dist/browser/runtime/webcrypto.js
var webcrypto_default, isCryptoKey;
var init_webcrypto = __esm({
  "node_modules/jose/dist/browser/runtime/webcrypto.js"() {
    webcrypto_default = crypto;
    isCryptoKey = (key) => key instanceof CryptoKey;
  }
});

// node_modules/jose/dist/browser/runtime/digest.js
var digest, digest_default;
var init_digest = __esm({
  "node_modules/jose/dist/browser/runtime/digest.js"() {
    init_webcrypto();
    digest = async (algorithm, data) => {
      const subtleDigest = `SHA-${algorithm.slice(-3)}`;
      return new Uint8Array(await webcrypto_default.subtle.digest(subtleDigest, data));
    };
    digest_default = digest;
  }
});

// node_modules/jose/dist/browser/lib/buffer_utils.js
function concat(...buffers) {
  const size3 = buffers.reduce((acc, { length: length2 }) => acc + length2, 0);
  const buf = new Uint8Array(size3);
  let i9 = 0;
  for (const buffer of buffers) {
    buf.set(buffer, i9);
    i9 += buffer.length;
  }
  return buf;
}
function p2s(alg, p2sInput) {
  return concat(encoder.encode(alg), new Uint8Array([0]), p2sInput);
}
function writeUInt32BE(buf, value, offset3) {
  if (value < 0 || value >= MAX_INT32) {
    throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);
  }
  buf.set([value >>> 24, value >>> 16, value >>> 8, value & 255], offset3);
}
function uint64be(value) {
  const high = Math.floor(value / MAX_INT32);
  const low = value % MAX_INT32;
  const buf = new Uint8Array(8);
  writeUInt32BE(buf, high, 0);
  writeUInt32BE(buf, low, 4);
  return buf;
}
function uint32be(value) {
  const buf = new Uint8Array(4);
  writeUInt32BE(buf, value);
  return buf;
}
function lengthAndInput(input) {
  return concat(uint32be(input.length), input);
}
async function concatKdf(secret, bits, value) {
  const iterations = Math.ceil((bits >> 3) / 32);
  const res = new Uint8Array(iterations * 32);
  for (let iter = 0; iter < iterations; iter++) {
    const buf = new Uint8Array(4 + secret.length + value.length);
    buf.set(uint32be(iter + 1));
    buf.set(secret, 4);
    buf.set(value, 4 + secret.length);
    res.set(await digest_default("sha256", buf), iter * 32);
  }
  return res.slice(0, bits >> 3);
}
var encoder, decoder, MAX_INT32;
var init_buffer_utils = __esm({
  "node_modules/jose/dist/browser/lib/buffer_utils.js"() {
    init_digest();
    encoder = new TextEncoder();
    decoder = new TextDecoder();
    MAX_INT32 = 2 ** 32;
  }
});

// node_modules/jose/dist/browser/runtime/base64url.js
var encodeBase64, encode2, decodeBase64, decode2;
var init_base64url = __esm({
  "node_modules/jose/dist/browser/runtime/base64url.js"() {
    init_buffer_utils();
    encodeBase64 = (input) => {
      let unencoded = input;
      if (typeof unencoded === "string") {
        unencoded = encoder.encode(unencoded);
      }
      const CHUNK_SIZE = 32768;
      const arr = [];
      for (let i9 = 0; i9 < unencoded.length; i9 += CHUNK_SIZE) {
        arr.push(String.fromCharCode.apply(null, unencoded.subarray(i9, i9 + CHUNK_SIZE)));
      }
      return btoa(arr.join(""));
    };
    encode2 = (input) => {
      return encodeBase64(input).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    };
    decodeBase64 = (encoded) => {
      const binary = atob(encoded);
      const bytes = new Uint8Array(binary.length);
      for (let i9 = 0; i9 < binary.length; i9++) {
        bytes[i9] = binary.charCodeAt(i9);
      }
      return bytes;
    };
    decode2 = (input) => {
      let encoded = input;
      if (encoded instanceof Uint8Array) {
        encoded = decoder.decode(encoded);
      }
      encoded = encoded.replace(/-/g, "+").replace(/_/g, "/").replace(/\s/g, "");
      try {
        return decodeBase64(encoded);
      } catch {
        throw new TypeError("The input to be decoded is not correctly encoded.");
      }
    };
  }
});

// node_modules/jose/dist/browser/util/errors.js
var errors_exports = {};
__export(errors_exports, {
  JOSEAlgNotAllowed: () => JOSEAlgNotAllowed,
  JOSEError: () => JOSEError,
  JOSENotSupported: () => JOSENotSupported,
  JWEDecryptionFailed: () => JWEDecryptionFailed,
  JWEInvalid: () => JWEInvalid,
  JWKInvalid: () => JWKInvalid,
  JWKSInvalid: () => JWKSInvalid,
  JWKSMultipleMatchingKeys: () => JWKSMultipleMatchingKeys,
  JWKSNoMatchingKey: () => JWKSNoMatchingKey,
  JWKSTimeout: () => JWKSTimeout,
  JWSInvalid: () => JWSInvalid,
  JWSSignatureVerificationFailed: () => JWSSignatureVerificationFailed,
  JWTClaimValidationFailed: () => JWTClaimValidationFailed,
  JWTExpired: () => JWTExpired,
  JWTInvalid: () => JWTInvalid
});
var JOSEError, JWTClaimValidationFailed, JWTExpired, JOSEAlgNotAllowed, JOSENotSupported, JWEDecryptionFailed, JWEInvalid, JWSInvalid, JWTInvalid, JWKInvalid, JWKSInvalid, JWKSNoMatchingKey, JWKSMultipleMatchingKeys, JWKSTimeout, JWSSignatureVerificationFailed;
var init_errors = __esm({
  "node_modules/jose/dist/browser/util/errors.js"() {
    JOSEError = class extends Error {
      constructor(message2, options) {
        super(message2, options);
        this.code = "ERR_JOSE_GENERIC";
        this.name = this.constructor.name;
        Error.captureStackTrace?.(this, this.constructor);
      }
    };
    JOSEError.code = "ERR_JOSE_GENERIC";
    JWTClaimValidationFailed = class extends JOSEError {
      constructor(message2, payload, claim = "unspecified", reason = "unspecified") {
        super(message2, { cause: { claim, reason, payload } });
        this.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
        this.claim = claim;
        this.reason = reason;
        this.payload = payload;
      }
    };
    JWTClaimValidationFailed.code = "ERR_JWT_CLAIM_VALIDATION_FAILED";
    JWTExpired = class extends JOSEError {
      constructor(message2, payload, claim = "unspecified", reason = "unspecified") {
        super(message2, { cause: { claim, reason, payload } });
        this.code = "ERR_JWT_EXPIRED";
        this.claim = claim;
        this.reason = reason;
        this.payload = payload;
      }
    };
    JWTExpired.code = "ERR_JWT_EXPIRED";
    JOSEAlgNotAllowed = class extends JOSEError {
      constructor() {
        super(...arguments);
        this.code = "ERR_JOSE_ALG_NOT_ALLOWED";
      }
    };
    JOSEAlgNotAllowed.code = "ERR_JOSE_ALG_NOT_ALLOWED";
    JOSENotSupported = class extends JOSEError {
      constructor() {
        super(...arguments);
        this.code = "ERR_JOSE_NOT_SUPPORTED";
      }
    };
    JOSENotSupported.code = "ERR_JOSE_NOT_SUPPORTED";
    JWEDecryptionFailed = class extends JOSEError {
      constructor(message2 = "decryption operation failed", options) {
        super(message2, options);
        this.code = "ERR_JWE_DECRYPTION_FAILED";
      }
    };
    JWEDecryptionFailed.code = "ERR_JWE_DECRYPTION_FAILED";
    JWEInvalid = class extends JOSEError {
      constructor() {
        super(...arguments);
        this.code = "ERR_JWE_INVALID";
      }
    };
    JWEInvalid.code = "ERR_JWE_INVALID";
    JWSInvalid = class extends JOSEError {
      constructor() {
        super(...arguments);
        this.code = "ERR_JWS_INVALID";
      }
    };
    JWSInvalid.code = "ERR_JWS_INVALID";
    JWTInvalid = class extends JOSEError {
      constructor() {
        super(...arguments);
        this.code = "ERR_JWT_INVALID";
      }
    };
    JWTInvalid.code = "ERR_JWT_INVALID";
    JWKInvalid = class extends JOSEError {
      constructor() {
        super(...arguments);
        this.code = "ERR_JWK_INVALID";
      }
    };
    JWKInvalid.code = "ERR_JWK_INVALID";
    JWKSInvalid = class extends JOSEError {
      constructor() {
        super(...arguments);
        this.code = "ERR_JWKS_INVALID";
      }
    };
    JWKSInvalid.code = "ERR_JWKS_INVALID";
    JWKSNoMatchingKey = class extends JOSEError {
      constructor(message2 = "no applicable key found in the JSON Web Key Set", options) {
        super(message2, options);
        this.code = "ERR_JWKS_NO_MATCHING_KEY";
      }
    };
    JWKSNoMatchingKey.code = "ERR_JWKS_NO_MATCHING_KEY";
    JWKSMultipleMatchingKeys = class extends JOSEError {
      constructor(message2 = "multiple matching keys found in the JSON Web Key Set", options) {
        super(message2, options);
        this.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
      }
    };
    JWKSMultipleMatchingKeys.code = "ERR_JWKS_MULTIPLE_MATCHING_KEYS";
    JWKSTimeout = class extends JOSEError {
      constructor(message2 = "request timed out", options) {
        super(message2, options);
        this.code = "ERR_JWKS_TIMEOUT";
      }
    };
    JWKSTimeout.code = "ERR_JWKS_TIMEOUT";
    JWSSignatureVerificationFailed = class extends JOSEError {
      constructor(message2 = "signature verification failed", options) {
        super(message2, options);
        this.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
      }
    };
    JWSSignatureVerificationFailed.code = "ERR_JWS_SIGNATURE_VERIFICATION_FAILED";
  }
});

// node_modules/jose/dist/browser/runtime/random.js
var random_default;
var init_random = __esm({
  "node_modules/jose/dist/browser/runtime/random.js"() {
    init_webcrypto();
    random_default = webcrypto_default.getRandomValues.bind(webcrypto_default);
  }
});

// node_modules/jose/dist/browser/lib/iv.js
function bitLength(alg) {
  switch (alg) {
    case "A128GCM":
    case "A128GCMKW":
    case "A192GCM":
    case "A192GCMKW":
    case "A256GCM":
    case "A256GCMKW":
      return 96;
    case "A128CBC-HS256":
    case "A192CBC-HS384":
    case "A256CBC-HS512":
      return 128;
    default:
      throw new JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
  }
}
var iv_default;
var init_iv = __esm({
  "node_modules/jose/dist/browser/lib/iv.js"() {
    init_errors();
    init_random();
    iv_default = (alg) => random_default(new Uint8Array(bitLength(alg) >> 3));
  }
});

// node_modules/jose/dist/browser/lib/check_iv_length.js
var checkIvLength, check_iv_length_default;
var init_check_iv_length = __esm({
  "node_modules/jose/dist/browser/lib/check_iv_length.js"() {
    init_errors();
    init_iv();
    checkIvLength = (enc, iv) => {
      if (iv.length << 3 !== bitLength(enc)) {
        throw new JWEInvalid("Invalid Initialization Vector length");
      }
    };
    check_iv_length_default = checkIvLength;
  }
});

// node_modules/jose/dist/browser/runtime/check_cek_length.js
var checkCekLength, check_cek_length_default;
var init_check_cek_length = __esm({
  "node_modules/jose/dist/browser/runtime/check_cek_length.js"() {
    init_errors();
    checkCekLength = (cek, expected) => {
      const actual = cek.byteLength << 3;
      if (actual !== expected) {
        throw new JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);
      }
    };
    check_cek_length_default = checkCekLength;
  }
});

// node_modules/jose/dist/browser/runtime/timing_safe_equal.js
var timingSafeEqual, timing_safe_equal_default;
var init_timing_safe_equal = __esm({
  "node_modules/jose/dist/browser/runtime/timing_safe_equal.js"() {
    timingSafeEqual = (a4, b3) => {
      if (!(a4 instanceof Uint8Array)) {
        throw new TypeError("First argument must be a buffer");
      }
      if (!(b3 instanceof Uint8Array)) {
        throw new TypeError("Second argument must be a buffer");
      }
      if (a4.length !== b3.length) {
        throw new TypeError("Input buffers must have the same length");
      }
      const len = a4.length;
      let out = 0;
      let i9 = -1;
      while (++i9 < len) {
        out |= a4[i9] ^ b3[i9];
      }
      return out === 0;
    };
    timing_safe_equal_default = timingSafeEqual;
  }
});

// node_modules/jose/dist/browser/lib/crypto_key.js
function unusable(name2, prop = "algorithm.name") {
  return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name2}`);
}
function isAlgorithm(algorithm, name2) {
  return algorithm.name === name2;
}
function getHashLength(hash) {
  return parseInt(hash.name.slice(4), 10);
}
function getNamedCurve(alg) {
  switch (alg) {
    case "ES256":
      return "P-256";
    case "ES384":
      return "P-384";
    case "ES512":
      return "P-521";
    default:
      throw new Error("unreachable");
  }
}
function checkUsage(key, usages) {
  if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {
    let msg = "CryptoKey does not support this operation, its usages must include ";
    if (usages.length > 2) {
      const last = usages.pop();
      msg += `one of ${usages.join(", ")}, or ${last}.`;
    } else if (usages.length === 2) {
      msg += `one of ${usages[0]} or ${usages[1]}.`;
    } else {
      msg += `${usages[0]}.`;
    }
    throw new TypeError(msg);
  }
}
function checkSigCryptoKey(key, alg, ...usages) {
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512": {
      if (!isAlgorithm(key.algorithm, "HMAC"))
        throw unusable("HMAC");
      const expected = parseInt(alg.slice(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "RS256":
    case "RS384":
    case "RS512": {
      if (!isAlgorithm(key.algorithm, "RSASSA-PKCS1-v1_5"))
        throw unusable("RSASSA-PKCS1-v1_5");
      const expected = parseInt(alg.slice(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "PS256":
    case "PS384":
    case "PS512": {
      if (!isAlgorithm(key.algorithm, "RSA-PSS"))
        throw unusable("RSA-PSS");
      const expected = parseInt(alg.slice(2), 10);
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    case "EdDSA": {
      if (key.algorithm.name !== "Ed25519" && key.algorithm.name !== "Ed448") {
        throw unusable("Ed25519 or Ed448");
      }
      break;
    }
    case "ES256":
    case "ES384":
    case "ES512": {
      if (!isAlgorithm(key.algorithm, "ECDSA"))
        throw unusable("ECDSA");
      const expected = getNamedCurve(alg);
      const actual = key.algorithm.namedCurve;
      if (actual !== expected)
        throw unusable(expected, "algorithm.namedCurve");
      break;
    }
    default:
      throw new TypeError("CryptoKey does not support this operation");
  }
  checkUsage(key, usages);
}
function checkEncCryptoKey(key, alg, ...usages) {
  switch (alg) {
    case "A128GCM":
    case "A192GCM":
    case "A256GCM": {
      if (!isAlgorithm(key.algorithm, "AES-GCM"))
        throw unusable("AES-GCM");
      const expected = parseInt(alg.slice(1, 4), 10);
      const actual = key.algorithm.length;
      if (actual !== expected)
        throw unusable(expected, "algorithm.length");
      break;
    }
    case "A128KW":
    case "A192KW":
    case "A256KW": {
      if (!isAlgorithm(key.algorithm, "AES-KW"))
        throw unusable("AES-KW");
      const expected = parseInt(alg.slice(1, 4), 10);
      const actual = key.algorithm.length;
      if (actual !== expected)
        throw unusable(expected, "algorithm.length");
      break;
    }
    case "ECDH": {
      switch (key.algorithm.name) {
        case "ECDH":
        case "X25519":
        case "X448":
          break;
        default:
          throw unusable("ECDH, X25519, or X448");
      }
      break;
    }
    case "PBES2-HS256+A128KW":
    case "PBES2-HS384+A192KW":
    case "PBES2-HS512+A256KW":
      if (!isAlgorithm(key.algorithm, "PBKDF2"))
        throw unusable("PBKDF2");
      break;
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512": {
      if (!isAlgorithm(key.algorithm, "RSA-OAEP"))
        throw unusable("RSA-OAEP");
      const expected = parseInt(alg.slice(9), 10) || 1;
      const actual = getHashLength(key.algorithm.hash);
      if (actual !== expected)
        throw unusable(`SHA-${expected}`, "algorithm.hash");
      break;
    }
    default:
      throw new TypeError("CryptoKey does not support this operation");
  }
  checkUsage(key, usages);
}
var init_crypto_key = __esm({
  "node_modules/jose/dist/browser/lib/crypto_key.js"() {
  }
});

// node_modules/jose/dist/browser/lib/invalid_key_input.js
function message(msg, actual, ...types2) {
  types2 = types2.filter(Boolean);
  if (types2.length > 2) {
    const last = types2.pop();
    msg += `one of type ${types2.join(", ")}, or ${last}.`;
  } else if (types2.length === 2) {
    msg += `one of type ${types2[0]} or ${types2[1]}.`;
  } else {
    msg += `of type ${types2[0]}.`;
  }
  if (actual == null) {
    msg += ` Received ${actual}`;
  } else if (typeof actual === "function" && actual.name) {
    msg += ` Received function ${actual.name}`;
  } else if (typeof actual === "object" && actual != null) {
    if (actual.constructor?.name) {
      msg += ` Received an instance of ${actual.constructor.name}`;
    }
  }
  return msg;
}
function withAlg(alg, actual, ...types2) {
  return message(`Key for the ${alg} algorithm must be `, actual, ...types2);
}
var invalid_key_input_default;
var init_invalid_key_input = __esm({
  "node_modules/jose/dist/browser/lib/invalid_key_input.js"() {
    invalid_key_input_default = (actual, ...types2) => {
      return message("Key must be ", actual, ...types2);
    };
  }
});

// node_modules/jose/dist/browser/runtime/is_key_like.js
var is_key_like_default, types;
var init_is_key_like = __esm({
  "node_modules/jose/dist/browser/runtime/is_key_like.js"() {
    init_webcrypto();
    is_key_like_default = (key) => {
      if (isCryptoKey(key)) {
        return true;
      }
      return key?.[Symbol.toStringTag] === "KeyObject";
    };
    types = ["CryptoKey"];
  }
});

// node_modules/jose/dist/browser/runtime/decrypt.js
async function cbcDecrypt(enc, cek, ciphertext, iv, tag2, aad) {
  if (!(cek instanceof Uint8Array)) {
    throw new TypeError(invalid_key_input_default(cek, "Uint8Array"));
  }
  const keySize = parseInt(enc.slice(1, 4), 10);
  const encKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(keySize >> 3), "AES-CBC", false, ["decrypt"]);
  const macKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(0, keySize >> 3), {
    hash: `SHA-${keySize << 1}`,
    name: "HMAC"
  }, false, ["sign"]);
  const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));
  const expectedTag = new Uint8Array((await webcrypto_default.subtle.sign("HMAC", macKey, macData)).slice(0, keySize >> 3));
  let macCheckPassed;
  try {
    macCheckPassed = timing_safe_equal_default(tag2, expectedTag);
  } catch {
  }
  if (!macCheckPassed) {
    throw new JWEDecryptionFailed();
  }
  let plaintext;
  try {
    plaintext = new Uint8Array(await webcrypto_default.subtle.decrypt({ iv, name: "AES-CBC" }, encKey, ciphertext));
  } catch {
  }
  if (!plaintext) {
    throw new JWEDecryptionFailed();
  }
  return plaintext;
}
async function gcmDecrypt(enc, cek, ciphertext, iv, tag2, aad) {
  let encKey;
  if (cek instanceof Uint8Array) {
    encKey = await webcrypto_default.subtle.importKey("raw", cek, "AES-GCM", false, ["decrypt"]);
  } else {
    checkEncCryptoKey(cek, enc, "decrypt");
    encKey = cek;
  }
  try {
    return new Uint8Array(await webcrypto_default.subtle.decrypt({
      additionalData: aad,
      iv,
      name: "AES-GCM",
      tagLength: 128
    }, encKey, concat(ciphertext, tag2)));
  } catch {
    throw new JWEDecryptionFailed();
  }
}
var decrypt, decrypt_default;
var init_decrypt = __esm({
  "node_modules/jose/dist/browser/runtime/decrypt.js"() {
    init_buffer_utils();
    init_check_iv_length();
    init_check_cek_length();
    init_timing_safe_equal();
    init_errors();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
    decrypt = async (enc, cek, ciphertext, iv, tag2, aad) => {
      if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {
        throw new TypeError(invalid_key_input_default(cek, ...types, "Uint8Array"));
      }
      if (!iv) {
        throw new JWEInvalid("JWE Initialization Vector missing");
      }
      if (!tag2) {
        throw new JWEInvalid("JWE Authentication Tag missing");
      }
      check_iv_length_default(enc, iv);
      switch (enc) {
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
          if (cek instanceof Uint8Array)
            check_cek_length_default(cek, parseInt(enc.slice(-3), 10));
          return cbcDecrypt(enc, cek, ciphertext, iv, tag2, aad);
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
          if (cek instanceof Uint8Array)
            check_cek_length_default(cek, parseInt(enc.slice(1, 4), 10));
          return gcmDecrypt(enc, cek, ciphertext, iv, tag2, aad);
        default:
          throw new JOSENotSupported("Unsupported JWE Content Encryption Algorithm");
      }
    };
    decrypt_default = decrypt;
  }
});

// node_modules/jose/dist/browser/lib/is_disjoint.js
var isDisjoint, is_disjoint_default;
var init_is_disjoint = __esm({
  "node_modules/jose/dist/browser/lib/is_disjoint.js"() {
    isDisjoint = (...headers) => {
      const sources = headers.filter(Boolean);
      if (sources.length === 0 || sources.length === 1) {
        return true;
      }
      let acc;
      for (const header of sources) {
        const parameters = Object.keys(header);
        if (!acc || acc.size === 0) {
          acc = new Set(parameters);
          continue;
        }
        for (const parameter of parameters) {
          if (acc.has(parameter)) {
            return false;
          }
          acc.add(parameter);
        }
      }
      return true;
    };
    is_disjoint_default = isDisjoint;
  }
});

// node_modules/jose/dist/browser/lib/is_object.js
function isObjectLike(value) {
  return typeof value === "object" && value !== null;
}
function isObject(input) {
  if (!isObjectLike(input) || Object.prototype.toString.call(input) !== "[object Object]") {
    return false;
  }
  if (Object.getPrototypeOf(input) === null) {
    return true;
  }
  let proto = input;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(input) === proto;
}
var init_is_object = __esm({
  "node_modules/jose/dist/browser/lib/is_object.js"() {
  }
});

// node_modules/jose/dist/browser/runtime/bogus.js
var bogusWebCrypto, bogus_default;
var init_bogus = __esm({
  "node_modules/jose/dist/browser/runtime/bogus.js"() {
    bogusWebCrypto = [
      { hash: "SHA-256", name: "HMAC" },
      true,
      ["sign"]
    ];
    bogus_default = bogusWebCrypto;
  }
});

// node_modules/jose/dist/browser/runtime/aeskw.js
function checkKeySize(key, alg) {
  if (key.algorithm.length !== parseInt(alg.slice(1, 4), 10)) {
    throw new TypeError(`Invalid key size for alg: ${alg}`);
  }
}
function getCryptoKey(key, alg, usage) {
  if (isCryptoKey(key)) {
    checkEncCryptoKey(key, alg, usage);
    return key;
  }
  if (key instanceof Uint8Array) {
    return webcrypto_default.subtle.importKey("raw", key, "AES-KW", true, [usage]);
  }
  throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
}
var wrap, unwrap;
var init_aeskw = __esm({
  "node_modules/jose/dist/browser/runtime/aeskw.js"() {
    init_bogus();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
    wrap = async (alg, key, cek) => {
      const cryptoKey = await getCryptoKey(key, alg, "wrapKey");
      checkKeySize(cryptoKey, alg);
      const cryptoKeyCek = await webcrypto_default.subtle.importKey("raw", cek, ...bogus_default);
      return new Uint8Array(await webcrypto_default.subtle.wrapKey("raw", cryptoKeyCek, cryptoKey, "AES-KW"));
    };
    unwrap = async (alg, key, encryptedKey) => {
      const cryptoKey = await getCryptoKey(key, alg, "unwrapKey");
      checkKeySize(cryptoKey, alg);
      const cryptoKeyCek = await webcrypto_default.subtle.unwrapKey("raw", encryptedKey, cryptoKey, "AES-KW", ...bogus_default);
      return new Uint8Array(await webcrypto_default.subtle.exportKey("raw", cryptoKeyCek));
    };
  }
});

// node_modules/jose/dist/browser/runtime/ecdhes.js
async function deriveKey(publicKey, privateKey, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {
  if (!isCryptoKey(publicKey)) {
    throw new TypeError(invalid_key_input_default(publicKey, ...types));
  }
  checkEncCryptoKey(publicKey, "ECDH");
  if (!isCryptoKey(privateKey)) {
    throw new TypeError(invalid_key_input_default(privateKey, ...types));
  }
  checkEncCryptoKey(privateKey, "ECDH", "deriveBits");
  const value = concat(lengthAndInput(encoder.encode(algorithm)), lengthAndInput(apu), lengthAndInput(apv), uint32be(keyLength));
  let length2;
  if (publicKey.algorithm.name === "X25519") {
    length2 = 256;
  } else if (publicKey.algorithm.name === "X448") {
    length2 = 448;
  } else {
    length2 = Math.ceil(parseInt(publicKey.algorithm.namedCurve.substr(-3), 10) / 8) << 3;
  }
  const sharedSecret = new Uint8Array(await webcrypto_default.subtle.deriveBits({
    name: publicKey.algorithm.name,
    public: publicKey
  }, privateKey, length2));
  return concatKdf(sharedSecret, keyLength, value);
}
async function generateEpk(key) {
  if (!isCryptoKey(key)) {
    throw new TypeError(invalid_key_input_default(key, ...types));
  }
  return webcrypto_default.subtle.generateKey(key.algorithm, true, ["deriveBits"]);
}
function ecdhAllowed(key) {
  if (!isCryptoKey(key)) {
    throw new TypeError(invalid_key_input_default(key, ...types));
  }
  return ["P-256", "P-384", "P-521"].includes(key.algorithm.namedCurve) || key.algorithm.name === "X25519" || key.algorithm.name === "X448";
}
var init_ecdhes = __esm({
  "node_modules/jose/dist/browser/runtime/ecdhes.js"() {
    init_buffer_utils();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
  }
});

// node_modules/jose/dist/browser/lib/check_p2s.js
function checkP2s(p2s2) {
  if (!(p2s2 instanceof Uint8Array) || p2s2.length < 8) {
    throw new JWEInvalid("PBES2 Salt Input must be 8 or more octets");
  }
}
var init_check_p2s = __esm({
  "node_modules/jose/dist/browser/lib/check_p2s.js"() {
    init_errors();
  }
});

// node_modules/jose/dist/browser/runtime/pbes2kw.js
function getCryptoKey2(key, alg) {
  if (key instanceof Uint8Array) {
    return webcrypto_default.subtle.importKey("raw", key, "PBKDF2", false, ["deriveBits"]);
  }
  if (isCryptoKey(key)) {
    checkEncCryptoKey(key, alg, "deriveBits", "deriveKey");
    return key;
  }
  throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
}
async function deriveKey2(p2s2, alg, p2c, key) {
  checkP2s(p2s2);
  const salt = p2s(alg, p2s2);
  const keylen = parseInt(alg.slice(13, 16), 10);
  const subtleAlg = {
    hash: `SHA-${alg.slice(8, 11)}`,
    iterations: p2c,
    name: "PBKDF2",
    salt
  };
  const wrapAlg = {
    length: keylen,
    name: "AES-KW"
  };
  const cryptoKey = await getCryptoKey2(key, alg);
  if (cryptoKey.usages.includes("deriveBits")) {
    return new Uint8Array(await webcrypto_default.subtle.deriveBits(subtleAlg, cryptoKey, keylen));
  }
  if (cryptoKey.usages.includes("deriveKey")) {
    return webcrypto_default.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ["wrapKey", "unwrapKey"]);
  }
  throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
}
var encrypt, decrypt2;
var init_pbes2kw = __esm({
  "node_modules/jose/dist/browser/runtime/pbes2kw.js"() {
    init_random();
    init_buffer_utils();
    init_base64url();
    init_aeskw();
    init_check_p2s();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
    encrypt = async (alg, key, cek, p2c = 2048, p2s2 = random_default(new Uint8Array(16))) => {
      const derived = await deriveKey2(p2s2, alg, p2c, key);
      const encryptedKey = await wrap(alg.slice(-6), derived, cek);
      return { encryptedKey, p2c, p2s: encode2(p2s2) };
    };
    decrypt2 = async (alg, key, encryptedKey, p2c, p2s2) => {
      const derived = await deriveKey2(p2s2, alg, p2c, key);
      return unwrap(alg.slice(-6), derived, encryptedKey);
    };
  }
});

// node_modules/jose/dist/browser/runtime/subtle_rsaes.js
function subtleRsaEs(alg) {
  switch (alg) {
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512":
      return "RSA-OAEP";
    default:
      throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
  }
}
var init_subtle_rsaes = __esm({
  "node_modules/jose/dist/browser/runtime/subtle_rsaes.js"() {
    init_errors();
  }
});

// node_modules/jose/dist/browser/runtime/check_key_length.js
var check_key_length_default;
var init_check_key_length = __esm({
  "node_modules/jose/dist/browser/runtime/check_key_length.js"() {
    check_key_length_default = (alg, key) => {
      if (alg.startsWith("RS") || alg.startsWith("PS")) {
        const { modulusLength } = key.algorithm;
        if (typeof modulusLength !== "number" || modulusLength < 2048) {
          throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
        }
      }
    };
  }
});

// node_modules/jose/dist/browser/runtime/rsaes.js
var encrypt2, decrypt3;
var init_rsaes = __esm({
  "node_modules/jose/dist/browser/runtime/rsaes.js"() {
    init_subtle_rsaes();
    init_bogus();
    init_webcrypto();
    init_crypto_key();
    init_check_key_length();
    init_invalid_key_input();
    init_is_key_like();
    encrypt2 = async (alg, key, cek) => {
      if (!isCryptoKey(key)) {
        throw new TypeError(invalid_key_input_default(key, ...types));
      }
      checkEncCryptoKey(key, alg, "encrypt", "wrapKey");
      check_key_length_default(alg, key);
      if (key.usages.includes("encrypt")) {
        return new Uint8Array(await webcrypto_default.subtle.encrypt(subtleRsaEs(alg), key, cek));
      }
      if (key.usages.includes("wrapKey")) {
        const cryptoKeyCek = await webcrypto_default.subtle.importKey("raw", cek, ...bogus_default);
        return new Uint8Array(await webcrypto_default.subtle.wrapKey("raw", cryptoKeyCek, key, subtleRsaEs(alg)));
      }
      throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation');
    };
    decrypt3 = async (alg, key, encryptedKey) => {
      if (!isCryptoKey(key)) {
        throw new TypeError(invalid_key_input_default(key, ...types));
      }
      checkEncCryptoKey(key, alg, "decrypt", "unwrapKey");
      check_key_length_default(alg, key);
      if (key.usages.includes("decrypt")) {
        return new Uint8Array(await webcrypto_default.subtle.decrypt(subtleRsaEs(alg), key, encryptedKey));
      }
      if (key.usages.includes("unwrapKey")) {
        const cryptoKeyCek = await webcrypto_default.subtle.unwrapKey("raw", encryptedKey, key, subtleRsaEs(alg), ...bogus_default);
        return new Uint8Array(await webcrypto_default.subtle.exportKey("raw", cryptoKeyCek));
      }
      throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation');
    };
  }
});

// node_modules/jose/dist/browser/lib/is_jwk.js
function isJWK(key) {
  return isObject(key) && typeof key.kty === "string";
}
function isPrivateJWK(key) {
  return key.kty !== "oct" && typeof key.d === "string";
}
function isPublicJWK(key) {
  return key.kty !== "oct" && typeof key.d === "undefined";
}
function isSecretJWK(key) {
  return isJWK(key) && key.kty === "oct" && typeof key.k === "string";
}
var init_is_jwk = __esm({
  "node_modules/jose/dist/browser/lib/is_jwk.js"() {
    init_is_object();
  }
});

// node_modules/jose/dist/browser/runtime/jwk_to_key.js
function subtleMapping(jwk) {
  let algorithm;
  let keyUsages;
  switch (jwk.kty) {
    case "RSA": {
      switch (jwk.alg) {
        case "PS256":
        case "PS384":
        case "PS512":
          algorithm = { name: "RSA-PSS", hash: `SHA-${jwk.alg.slice(-3)}` };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "RS256":
        case "RS384":
        case "RS512":
          algorithm = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${jwk.alg.slice(-3)}` };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
          algorithm = {
            name: "RSA-OAEP",
            hash: `SHA-${parseInt(jwk.alg.slice(-3), 10) || 1}`
          };
          keyUsages = jwk.d ? ["decrypt", "unwrapKey"] : ["encrypt", "wrapKey"];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "EC": {
      switch (jwk.alg) {
        case "ES256":
          algorithm = { name: "ECDSA", namedCurve: "P-256" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ES384":
          algorithm = { name: "ECDSA", namedCurve: "P-384" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ES512":
          algorithm = { name: "ECDSA", namedCurve: "P-521" };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          algorithm = { name: "ECDH", namedCurve: jwk.crv };
          keyUsages = jwk.d ? ["deriveBits"] : [];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    case "OKP": {
      switch (jwk.alg) {
        case "EdDSA":
          algorithm = { name: jwk.crv };
          keyUsages = jwk.d ? ["sign"] : ["verify"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW":
          algorithm = { name: jwk.crv };
          keyUsages = jwk.d ? ["deriveBits"] : [];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
      }
      break;
    }
    default:
      throw new JOSENotSupported('Invalid or unsupported JWK "kty" (Key Type) Parameter value');
  }
  return { algorithm, keyUsages };
}
var parse, jwk_to_key_default;
var init_jwk_to_key = __esm({
  "node_modules/jose/dist/browser/runtime/jwk_to_key.js"() {
    init_webcrypto();
    init_errors();
    parse = async (jwk) => {
      if (!jwk.alg) {
        throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
      }
      const { algorithm, keyUsages } = subtleMapping(jwk);
      const rest = [
        algorithm,
        jwk.ext ?? false,
        jwk.key_ops ?? keyUsages
      ];
      const keyData = { ...jwk };
      delete keyData.alg;
      delete keyData.use;
      return webcrypto_default.subtle.importKey("jwk", keyData, ...rest);
    };
    jwk_to_key_default = parse;
  }
});

// node_modules/jose/dist/browser/runtime/normalize_key.js
var exportKeyValue, privCache, pubCache, isKeyObject, importAndCache, normalizePublicKey, normalizePrivateKey, normalize_key_default;
var init_normalize_key = __esm({
  "node_modules/jose/dist/browser/runtime/normalize_key.js"() {
    init_is_jwk();
    init_base64url();
    init_jwk_to_key();
    exportKeyValue = (k2) => decode2(k2);
    isKeyObject = (key) => {
      return key?.[Symbol.toStringTag] === "KeyObject";
    };
    importAndCache = async (cache, key, jwk, alg, freeze = false) => {
      let cached = cache.get(key);
      if (cached?.[alg]) {
        return cached[alg];
      }
      const cryptoKey = await jwk_to_key_default({ ...jwk, alg });
      if (freeze)
        Object.freeze(key);
      if (!cached) {
        cache.set(key, { [alg]: cryptoKey });
      } else {
        cached[alg] = cryptoKey;
      }
      return cryptoKey;
    };
    normalizePublicKey = (key, alg) => {
      if (isKeyObject(key)) {
        let jwk = key.export({ format: "jwk" });
        delete jwk.d;
        delete jwk.dp;
        delete jwk.dq;
        delete jwk.p;
        delete jwk.q;
        delete jwk.qi;
        if (jwk.k) {
          return exportKeyValue(jwk.k);
        }
        pubCache || (pubCache = /* @__PURE__ */ new WeakMap());
        return importAndCache(pubCache, key, jwk, alg);
      }
      if (isJWK(key)) {
        if (key.k)
          return decode2(key.k);
        pubCache || (pubCache = /* @__PURE__ */ new WeakMap());
        const cryptoKey = importAndCache(pubCache, key, key, alg, true);
        return cryptoKey;
      }
      return key;
    };
    normalizePrivateKey = (key, alg) => {
      if (isKeyObject(key)) {
        let jwk = key.export({ format: "jwk" });
        if (jwk.k) {
          return exportKeyValue(jwk.k);
        }
        privCache || (privCache = /* @__PURE__ */ new WeakMap());
        return importAndCache(privCache, key, jwk, alg);
      }
      if (isJWK(key)) {
        if (key.k)
          return decode2(key.k);
        privCache || (privCache = /* @__PURE__ */ new WeakMap());
        const cryptoKey = importAndCache(privCache, key, key, alg, true);
        return cryptoKey;
      }
      return key;
    };
    normalize_key_default = { normalizePublicKey, normalizePrivateKey };
  }
});

// node_modules/jose/dist/browser/lib/cek.js
function bitLength2(alg) {
  switch (alg) {
    case "A128GCM":
      return 128;
    case "A192GCM":
      return 192;
    case "A256GCM":
    case "A128CBC-HS256":
      return 256;
    case "A192CBC-HS384":
      return 384;
    case "A256CBC-HS512":
      return 512;
    default:
      throw new JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
  }
}
var cek_default;
var init_cek = __esm({
  "node_modules/jose/dist/browser/lib/cek.js"() {
    init_errors();
    init_random();
    cek_default = (alg) => random_default(new Uint8Array(bitLength2(alg) >> 3));
  }
});

// node_modules/jose/dist/browser/lib/format_pem.js
var format_pem_default;
var init_format_pem = __esm({
  "node_modules/jose/dist/browser/lib/format_pem.js"() {
    format_pem_default = (b64, descriptor) => {
      const newlined = (b64.match(/.{1,64}/g) || []).join("\n");
      return `-----BEGIN ${descriptor}-----
${newlined}
-----END ${descriptor}-----`;
    };
  }
});

// node_modules/jose/dist/browser/runtime/asn1.js
function getElement(seq) {
  const result = [];
  let next = 0;
  while (next < seq.length) {
    const nextPart = parseElement(seq.subarray(next));
    result.push(nextPart);
    next += nextPart.byteLength;
  }
  return result;
}
function parseElement(bytes) {
  let position = 0;
  let tag2 = bytes[0] & 31;
  position++;
  if (tag2 === 31) {
    tag2 = 0;
    while (bytes[position] >= 128) {
      tag2 = tag2 * 128 + bytes[position] - 128;
      position++;
    }
    tag2 = tag2 * 128 + bytes[position] - 128;
    position++;
  }
  let length2 = 0;
  if (bytes[position] < 128) {
    length2 = bytes[position];
    position++;
  } else if (length2 === 128) {
    length2 = 0;
    while (bytes[position + length2] !== 0 || bytes[position + length2 + 1] !== 0) {
      if (length2 > bytes.byteLength) {
        throw new TypeError("invalid indefinite form length");
      }
      length2++;
    }
    const byteLength2 = position + length2 + 2;
    return {
      byteLength: byteLength2,
      contents: bytes.subarray(position, position + length2),
      raw: bytes.subarray(0, byteLength2)
    };
  } else {
    const numberOfDigits = bytes[position] & 127;
    position++;
    length2 = 0;
    for (let i9 = 0; i9 < numberOfDigits; i9++) {
      length2 = length2 * 256 + bytes[position];
      position++;
    }
  }
  const byteLength = position + length2;
  return {
    byteLength,
    contents: bytes.subarray(position, byteLength),
    raw: bytes.subarray(0, byteLength)
  };
}
function spkiFromX509(buf) {
  const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);
  return encodeBase64(tbsCertificate[tbsCertificate[0].raw[0] === 160 ? 6 : 5].raw);
}
function getSPKI(x509) {
  const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\s)/g, "");
  const raw = decodeBase64(pem);
  return format_pem_default(spkiFromX509(raw), "PUBLIC KEY");
}
var genericExport, toSPKI, toPKCS8, findOid, getNamedCurve2, genericImport, fromPKCS8, fromSPKI, fromX509;
var init_asn1 = __esm({
  "node_modules/jose/dist/browser/runtime/asn1.js"() {
    init_webcrypto();
    init_invalid_key_input();
    init_base64url();
    init_format_pem();
    init_errors();
    init_is_key_like();
    genericExport = async (keyType, keyFormat, key) => {
      if (!isCryptoKey(key)) {
        throw new TypeError(invalid_key_input_default(key, ...types));
      }
      if (!key.extractable) {
        throw new TypeError("CryptoKey is not extractable");
      }
      if (key.type !== keyType) {
        throw new TypeError(`key is not a ${keyType} key`);
      }
      return format_pem_default(encodeBase64(new Uint8Array(await webcrypto_default.subtle.exportKey(keyFormat, key))), `${keyType.toUpperCase()} KEY`);
    };
    toSPKI = (key) => {
      return genericExport("public", "spki", key);
    };
    toPKCS8 = (key) => {
      return genericExport("private", "pkcs8", key);
    };
    findOid = (keyData, oid, from3 = 0) => {
      if (from3 === 0) {
        oid.unshift(oid.length);
        oid.unshift(6);
      }
      const i9 = keyData.indexOf(oid[0], from3);
      if (i9 === -1)
        return false;
      const sub = keyData.subarray(i9, i9 + oid.length);
      if (sub.length !== oid.length)
        return false;
      return sub.every((value, index) => value === oid[index]) || findOid(keyData, oid, i9 + 1);
    };
    getNamedCurve2 = (keyData) => {
      switch (true) {
        case findOid(keyData, [42, 134, 72, 206, 61, 3, 1, 7]):
          return "P-256";
        case findOid(keyData, [43, 129, 4, 0, 34]):
          return "P-384";
        case findOid(keyData, [43, 129, 4, 0, 35]):
          return "P-521";
        case findOid(keyData, [43, 101, 110]):
          return "X25519";
        case findOid(keyData, [43, 101, 111]):
          return "X448";
        case findOid(keyData, [43, 101, 112]):
          return "Ed25519";
        case findOid(keyData, [43, 101, 113]):
          return "Ed448";
        default:
          throw new JOSENotSupported("Invalid or unsupported EC Key Curve or OKP Key Sub Type");
      }
    };
    genericImport = async (replace, keyFormat, pem, alg, options) => {
      let algorithm;
      let keyUsages;
      const keyData = new Uint8Array(atob(pem.replace(replace, "")).split("").map((c6) => c6.charCodeAt(0)));
      const isPublic = keyFormat === "spki";
      switch (alg) {
        case "PS256":
        case "PS384":
        case "PS512":
          algorithm = { name: "RSA-PSS", hash: `SHA-${alg.slice(-3)}` };
          keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        case "RS256":
        case "RS384":
        case "RS512":
          algorithm = { name: "RSASSA-PKCS1-v1_5", hash: `SHA-${alg.slice(-3)}` };
          keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        case "RSA-OAEP":
        case "RSA-OAEP-256":
        case "RSA-OAEP-384":
        case "RSA-OAEP-512":
          algorithm = {
            name: "RSA-OAEP",
            hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`
          };
          keyUsages = isPublic ? ["encrypt", "wrapKey"] : ["decrypt", "unwrapKey"];
          break;
        case "ES256":
          algorithm = { name: "ECDSA", namedCurve: "P-256" };
          keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        case "ES384":
          algorithm = { name: "ECDSA", namedCurve: "P-384" };
          keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        case "ES512":
          algorithm = { name: "ECDSA", namedCurve: "P-521" };
          keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        case "ECDH-ES":
        case "ECDH-ES+A128KW":
        case "ECDH-ES+A192KW":
        case "ECDH-ES+A256KW": {
          const namedCurve = getNamedCurve2(keyData);
          algorithm = namedCurve.startsWith("P-") ? { name: "ECDH", namedCurve } : { name: namedCurve };
          keyUsages = isPublic ? [] : ["deriveBits"];
          break;
        }
        case "EdDSA":
          algorithm = { name: getNamedCurve2(keyData) };
          keyUsages = isPublic ? ["verify"] : ["sign"];
          break;
        default:
          throw new JOSENotSupported('Invalid or unsupported "alg" (Algorithm) value');
      }
      return webcrypto_default.subtle.importKey(keyFormat, keyData, algorithm, options?.extractable ?? false, keyUsages);
    };
    fromPKCS8 = (pem, alg, options) => {
      return genericImport(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g, "pkcs8", pem, alg, options);
    };
    fromSPKI = (pem, alg, options) => {
      return genericImport(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g, "spki", pem, alg, options);
    };
    fromX509 = (pem, alg, options) => {
      let spki;
      try {
        spki = getSPKI(pem);
      } catch (cause) {
        throw new TypeError("Failed to parse the X.509 certificate", { cause });
      }
      return fromSPKI(spki, alg, options);
    };
  }
});

// node_modules/jose/dist/browser/key/import.js
async function importSPKI(spki, alg, options) {
  if (typeof spki !== "string" || spki.indexOf("-----BEGIN PUBLIC KEY-----") !== 0) {
    throw new TypeError('"spki" must be SPKI formatted string');
  }
  return fromSPKI(spki, alg, options);
}
async function importX509(x509, alg, options) {
  if (typeof x509 !== "string" || x509.indexOf("-----BEGIN CERTIFICATE-----") !== 0) {
    throw new TypeError('"x509" must be X.509 formatted string');
  }
  return fromX509(x509, alg, options);
}
async function importPKCS8(pkcs8, alg, options) {
  if (typeof pkcs8 !== "string" || pkcs8.indexOf("-----BEGIN PRIVATE KEY-----") !== 0) {
    throw new TypeError('"pkcs8" must be PKCS#8 formatted string');
  }
  return fromPKCS8(pkcs8, alg, options);
}
async function importJWK(jwk, alg) {
  if (!isObject(jwk)) {
    throw new TypeError("JWK must be an object");
  }
  alg || (alg = jwk.alg);
  switch (jwk.kty) {
    case "oct":
      if (typeof jwk.k !== "string" || !jwk.k) {
        throw new TypeError('missing "k" (Key Value) Parameter value');
      }
      return decode2(jwk.k);
    case "RSA":
      if (jwk.oth !== void 0) {
        throw new JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
      }
    case "EC":
    case "OKP":
      return jwk_to_key_default({ ...jwk, alg });
    default:
      throw new JOSENotSupported('Unsupported "kty" (Key Type) Parameter value');
  }
}
var init_import = __esm({
  "node_modules/jose/dist/browser/key/import.js"() {
    init_base64url();
    init_asn1();
    init_jwk_to_key();
    init_errors();
    init_is_object();
  }
});

// node_modules/jose/dist/browser/lib/check_key_type.js
function checkKeyType(allowJwk, alg, key, usage) {
  const symmetric = alg.startsWith("HS") || alg === "dir" || alg.startsWith("PBES2") || /^A\d{3}(?:GCM)?KW$/.test(alg);
  if (symmetric) {
    symmetricTypeCheck(alg, key, usage, allowJwk);
  } else {
    asymmetricTypeCheck(alg, key, usage, allowJwk);
  }
}
var tag, jwkMatchesOp, symmetricTypeCheck, asymmetricTypeCheck, check_key_type_default, checkKeyTypeWithJwk;
var init_check_key_type = __esm({
  "node_modules/jose/dist/browser/lib/check_key_type.js"() {
    init_invalid_key_input();
    init_is_key_like();
    init_is_jwk();
    tag = (key) => key?.[Symbol.toStringTag];
    jwkMatchesOp = (alg, key, usage) => {
      if (key.use !== void 0 && key.use !== "sig") {
        throw new TypeError("Invalid key for this operation, when present its use must be sig");
      }
      if (key.key_ops !== void 0 && key.key_ops.includes?.(usage) !== true) {
        throw new TypeError(`Invalid key for this operation, when present its key_ops must include ${usage}`);
      }
      if (key.alg !== void 0 && key.alg !== alg) {
        throw new TypeError(`Invalid key for this operation, when present its alg must be ${alg}`);
      }
      return true;
    };
    symmetricTypeCheck = (alg, key, usage, allowJwk) => {
      if (key instanceof Uint8Array)
        return;
      if (allowJwk && isJWK(key)) {
        if (isSecretJWK(key) && jwkMatchesOp(alg, key, usage))
          return;
        throw new TypeError(`JSON Web Key for symmetric algorithms must have JWK "kty" (Key Type) equal to "oct" and the JWK "k" (Key Value) present`);
      }
      if (!is_key_like_default(key)) {
        throw new TypeError(withAlg(alg, key, ...types, "Uint8Array", allowJwk ? "JSON Web Key" : null));
      }
      if (key.type !== "secret") {
        throw new TypeError(`${tag(key)} instances for symmetric algorithms must be of type "secret"`);
      }
    };
    asymmetricTypeCheck = (alg, key, usage, allowJwk) => {
      if (allowJwk && isJWK(key)) {
        switch (usage) {
          case "sign":
            if (isPrivateJWK(key) && jwkMatchesOp(alg, key, usage))
              return;
            throw new TypeError(`JSON Web Key for this operation be a private JWK`);
          case "verify":
            if (isPublicJWK(key) && jwkMatchesOp(alg, key, usage))
              return;
            throw new TypeError(`JSON Web Key for this operation be a public JWK`);
        }
      }
      if (!is_key_like_default(key)) {
        throw new TypeError(withAlg(alg, key, ...types, allowJwk ? "JSON Web Key" : null));
      }
      if (key.type === "secret") {
        throw new TypeError(`${tag(key)} instances for asymmetric algorithms must not be of type "secret"`);
      }
      if (usage === "sign" && key.type === "public") {
        throw new TypeError(`${tag(key)} instances for asymmetric algorithm signing must be of type "private"`);
      }
      if (usage === "decrypt" && key.type === "public") {
        throw new TypeError(`${tag(key)} instances for asymmetric algorithm decryption must be of type "private"`);
      }
      if (key.algorithm && usage === "verify" && key.type === "private") {
        throw new TypeError(`${tag(key)} instances for asymmetric algorithm verifying must be of type "public"`);
      }
      if (key.algorithm && usage === "encrypt" && key.type === "private") {
        throw new TypeError(`${tag(key)} instances for asymmetric algorithm encryption must be of type "public"`);
      }
    };
    check_key_type_default = checkKeyType.bind(void 0, false);
    checkKeyTypeWithJwk = checkKeyType.bind(void 0, true);
  }
});

// node_modules/jose/dist/browser/runtime/encrypt.js
async function cbcEncrypt(enc, plaintext, cek, iv, aad) {
  if (!(cek instanceof Uint8Array)) {
    throw new TypeError(invalid_key_input_default(cek, "Uint8Array"));
  }
  const keySize = parseInt(enc.slice(1, 4), 10);
  const encKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(keySize >> 3), "AES-CBC", false, ["encrypt"]);
  const macKey = await webcrypto_default.subtle.importKey("raw", cek.subarray(0, keySize >> 3), {
    hash: `SHA-${keySize << 1}`,
    name: "HMAC"
  }, false, ["sign"]);
  const ciphertext = new Uint8Array(await webcrypto_default.subtle.encrypt({
    iv,
    name: "AES-CBC"
  }, encKey, plaintext));
  const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));
  const tag2 = new Uint8Array((await webcrypto_default.subtle.sign("HMAC", macKey, macData)).slice(0, keySize >> 3));
  return { ciphertext, tag: tag2, iv };
}
async function gcmEncrypt(enc, plaintext, cek, iv, aad) {
  let encKey;
  if (cek instanceof Uint8Array) {
    encKey = await webcrypto_default.subtle.importKey("raw", cek, "AES-GCM", false, ["encrypt"]);
  } else {
    checkEncCryptoKey(cek, enc, "encrypt");
    encKey = cek;
  }
  const encrypted = new Uint8Array(await webcrypto_default.subtle.encrypt({
    additionalData: aad,
    iv,
    name: "AES-GCM",
    tagLength: 128
  }, encKey, plaintext));
  const tag2 = encrypted.slice(-16);
  const ciphertext = encrypted.slice(0, -16);
  return { ciphertext, tag: tag2, iv };
}
var encrypt3, encrypt_default;
var init_encrypt = __esm({
  "node_modules/jose/dist/browser/runtime/encrypt.js"() {
    init_buffer_utils();
    init_check_iv_length();
    init_check_cek_length();
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_iv();
    init_errors();
    init_is_key_like();
    encrypt3 = async (enc, plaintext, cek, iv, aad) => {
      if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {
        throw new TypeError(invalid_key_input_default(cek, ...types, "Uint8Array"));
      }
      if (iv) {
        check_iv_length_default(enc, iv);
      } else {
        iv = iv_default(enc);
      }
      switch (enc) {
        case "A128CBC-HS256":
        case "A192CBC-HS384":
        case "A256CBC-HS512":
          if (cek instanceof Uint8Array) {
            check_cek_length_default(cek, parseInt(enc.slice(-3), 10));
          }
          return cbcEncrypt(enc, plaintext, cek, iv, aad);
        case "A128GCM":
        case "A192GCM":
        case "A256GCM":
          if (cek instanceof Uint8Array) {
            check_cek_length_default(cek, parseInt(enc.slice(1, 4), 10));
          }
          return gcmEncrypt(enc, plaintext, cek, iv, aad);
        default:
          throw new JOSENotSupported("Unsupported JWE Content Encryption Algorithm");
      }
    };
    encrypt_default = encrypt3;
  }
});

// node_modules/jose/dist/browser/lib/aesgcmkw.js
async function wrap2(alg, key, cek, iv) {
  const jweAlgorithm = alg.slice(0, 7);
  const wrapped = await encrypt_default(jweAlgorithm, cek, key, iv, new Uint8Array(0));
  return {
    encryptedKey: wrapped.ciphertext,
    iv: encode2(wrapped.iv),
    tag: encode2(wrapped.tag)
  };
}
async function unwrap2(alg, key, encryptedKey, iv, tag2) {
  const jweAlgorithm = alg.slice(0, 7);
  return decrypt_default(jweAlgorithm, key, encryptedKey, iv, tag2, new Uint8Array(0));
}
var init_aesgcmkw = __esm({
  "node_modules/jose/dist/browser/lib/aesgcmkw.js"() {
    init_encrypt();
    init_decrypt();
    init_base64url();
  }
});

// node_modules/jose/dist/browser/lib/decrypt_key_management.js
async function decryptKeyManagement(alg, key, encryptedKey, joseHeader, options) {
  check_key_type_default(alg, key, "decrypt");
  key = await normalize_key_default.normalizePrivateKey?.(key, alg) || key;
  switch (alg) {
    case "dir": {
      if (encryptedKey !== void 0)
        throw new JWEInvalid("Encountered unexpected JWE Encrypted Key");
      return key;
    }
    case "ECDH-ES":
      if (encryptedKey !== void 0)
        throw new JWEInvalid("Encountered unexpected JWE Encrypted Key");
    case "ECDH-ES+A128KW":
    case "ECDH-ES+A192KW":
    case "ECDH-ES+A256KW": {
      if (!isObject(joseHeader.epk))
        throw new JWEInvalid(`JOSE Header "epk" (Ephemeral Public Key) missing or invalid`);
      if (!ecdhAllowed(key))
        throw new JOSENotSupported("ECDH with the provided key is not allowed or not supported by your javascript runtime");
      const epk = await importJWK(joseHeader.epk, alg);
      let partyUInfo;
      let partyVInfo;
      if (joseHeader.apu !== void 0) {
        if (typeof joseHeader.apu !== "string")
          throw new JWEInvalid(`JOSE Header "apu" (Agreement PartyUInfo) invalid`);
        try {
          partyUInfo = decode2(joseHeader.apu);
        } catch {
          throw new JWEInvalid("Failed to base64url decode the apu");
        }
      }
      if (joseHeader.apv !== void 0) {
        if (typeof joseHeader.apv !== "string")
          throw new JWEInvalid(`JOSE Header "apv" (Agreement PartyVInfo) invalid`);
        try {
          partyVInfo = decode2(joseHeader.apv);
        } catch {
          throw new JWEInvalid("Failed to base64url decode the apv");
        }
      }
      const sharedSecret = await deriveKey(epk, key, alg === "ECDH-ES" ? joseHeader.enc : alg, alg === "ECDH-ES" ? bitLength2(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);
      if (alg === "ECDH-ES")
        return sharedSecret;
      if (encryptedKey === void 0)
        throw new JWEInvalid("JWE Encrypted Key missing");
      return unwrap(alg.slice(-6), sharedSecret, encryptedKey);
    }
    case "RSA1_5":
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512": {
      if (encryptedKey === void 0)
        throw new JWEInvalid("JWE Encrypted Key missing");
      return decrypt3(alg, key, encryptedKey);
    }
    case "PBES2-HS256+A128KW":
    case "PBES2-HS384+A192KW":
    case "PBES2-HS512+A256KW": {
      if (encryptedKey === void 0)
        throw new JWEInvalid("JWE Encrypted Key missing");
      if (typeof joseHeader.p2c !== "number")
        throw new JWEInvalid(`JOSE Header "p2c" (PBES2 Count) missing or invalid`);
      const p2cLimit = options?.maxPBES2Count || 1e4;
      if (joseHeader.p2c > p2cLimit)
        throw new JWEInvalid(`JOSE Header "p2c" (PBES2 Count) out is of acceptable bounds`);
      if (typeof joseHeader.p2s !== "string")
        throw new JWEInvalid(`JOSE Header "p2s" (PBES2 Salt) missing or invalid`);
      let p2s2;
      try {
        p2s2 = decode2(joseHeader.p2s);
      } catch {
        throw new JWEInvalid("Failed to base64url decode the p2s");
      }
      return decrypt2(alg, key, encryptedKey, joseHeader.p2c, p2s2);
    }
    case "A128KW":
    case "A192KW":
    case "A256KW": {
      if (encryptedKey === void 0)
        throw new JWEInvalid("JWE Encrypted Key missing");
      return unwrap(alg, key, encryptedKey);
    }
    case "A128GCMKW":
    case "A192GCMKW":
    case "A256GCMKW": {
      if (encryptedKey === void 0)
        throw new JWEInvalid("JWE Encrypted Key missing");
      if (typeof joseHeader.iv !== "string")
        throw new JWEInvalid(`JOSE Header "iv" (Initialization Vector) missing or invalid`);
      if (typeof joseHeader.tag !== "string")
        throw new JWEInvalid(`JOSE Header "tag" (Authentication Tag) missing or invalid`);
      let iv;
      try {
        iv = decode2(joseHeader.iv);
      } catch {
        throw new JWEInvalid("Failed to base64url decode the iv");
      }
      let tag2;
      try {
        tag2 = decode2(joseHeader.tag);
      } catch {
        throw new JWEInvalid("Failed to base64url decode the tag");
      }
      return unwrap2(alg, key, encryptedKey, iv, tag2);
    }
    default: {
      throw new JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
    }
  }
}
var decrypt_key_management_default;
var init_decrypt_key_management = __esm({
  "node_modules/jose/dist/browser/lib/decrypt_key_management.js"() {
    init_aeskw();
    init_ecdhes();
    init_pbes2kw();
    init_rsaes();
    init_base64url();
    init_normalize_key();
    init_errors();
    init_cek();
    init_import();
    init_check_key_type();
    init_is_object();
    init_aesgcmkw();
    decrypt_key_management_default = decryptKeyManagement;
  }
});

// node_modules/jose/dist/browser/lib/validate_crit.js
function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
  if (joseHeader.crit !== void 0 && protectedHeader?.crit === void 0) {
    throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
  }
  if (!protectedHeader || protectedHeader.crit === void 0) {
    return /* @__PURE__ */ new Set();
  }
  if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some((input) => typeof input !== "string" || input.length === 0)) {
    throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
  }
  let recognized;
  if (recognizedOption !== void 0) {
    recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
  } else {
    recognized = recognizedDefault;
  }
  for (const parameter of protectedHeader.crit) {
    if (!recognized.has(parameter)) {
      throw new JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
    }
    if (joseHeader[parameter] === void 0) {
      throw new Err(`Extension Header Parameter "${parameter}" is missing`);
    }
    if (recognized.get(parameter) && protectedHeader[parameter] === void 0) {
      throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
    }
  }
  return new Set(protectedHeader.crit);
}
var validate_crit_default;
var init_validate_crit = __esm({
  "node_modules/jose/dist/browser/lib/validate_crit.js"() {
    init_errors();
    validate_crit_default = validateCrit;
  }
});

// node_modules/jose/dist/browser/lib/validate_algorithms.js
var validateAlgorithms, validate_algorithms_default;
var init_validate_algorithms = __esm({
  "node_modules/jose/dist/browser/lib/validate_algorithms.js"() {
    validateAlgorithms = (option, algorithms) => {
      if (algorithms !== void 0 && (!Array.isArray(algorithms) || algorithms.some((s4) => typeof s4 !== "string"))) {
        throw new TypeError(`"${option}" option must be an array of strings`);
      }
      if (!algorithms) {
        return void 0;
      }
      return new Set(algorithms);
    };
    validate_algorithms_default = validateAlgorithms;
  }
});

// node_modules/jose/dist/browser/jwe/flattened/decrypt.js
async function flattenedDecrypt(jwe, key, options) {
  if (!isObject(jwe)) {
    throw new JWEInvalid("Flattened JWE must be an object");
  }
  if (jwe.protected === void 0 && jwe.header === void 0 && jwe.unprotected === void 0) {
    throw new JWEInvalid("JOSE Header missing");
  }
  if (jwe.iv !== void 0 && typeof jwe.iv !== "string") {
    throw new JWEInvalid("JWE Initialization Vector incorrect type");
  }
  if (typeof jwe.ciphertext !== "string") {
    throw new JWEInvalid("JWE Ciphertext missing or incorrect type");
  }
  if (jwe.tag !== void 0 && typeof jwe.tag !== "string") {
    throw new JWEInvalid("JWE Authentication Tag incorrect type");
  }
  if (jwe.protected !== void 0 && typeof jwe.protected !== "string") {
    throw new JWEInvalid("JWE Protected Header incorrect type");
  }
  if (jwe.encrypted_key !== void 0 && typeof jwe.encrypted_key !== "string") {
    throw new JWEInvalid("JWE Encrypted Key incorrect type");
  }
  if (jwe.aad !== void 0 && typeof jwe.aad !== "string") {
    throw new JWEInvalid("JWE AAD incorrect type");
  }
  if (jwe.header !== void 0 && !isObject(jwe.header)) {
    throw new JWEInvalid("JWE Shared Unprotected Header incorrect type");
  }
  if (jwe.unprotected !== void 0 && !isObject(jwe.unprotected)) {
    throw new JWEInvalid("JWE Per-Recipient Unprotected Header incorrect type");
  }
  let parsedProt;
  if (jwe.protected) {
    try {
      const protectedHeader2 = decode2(jwe.protected);
      parsedProt = JSON.parse(decoder.decode(protectedHeader2));
    } catch {
      throw new JWEInvalid("JWE Protected Header is invalid");
    }
  }
  if (!is_disjoint_default(parsedProt, jwe.header, jwe.unprotected)) {
    throw new JWEInvalid("JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint");
  }
  const joseHeader = {
    ...parsedProt,
    ...jwe.header,
    ...jwe.unprotected
  };
  validate_crit_default(JWEInvalid, /* @__PURE__ */ new Map(), options?.crit, parsedProt, joseHeader);
  if (joseHeader.zip !== void 0) {
    throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
  }
  const { alg, enc } = joseHeader;
  if (typeof alg !== "string" || !alg) {
    throw new JWEInvalid("missing JWE Algorithm (alg) in JWE Header");
  }
  if (typeof enc !== "string" || !enc) {
    throw new JWEInvalid("missing JWE Encryption Algorithm (enc) in JWE Header");
  }
  const keyManagementAlgorithms = options && validate_algorithms_default("keyManagementAlgorithms", options.keyManagementAlgorithms);
  const contentEncryptionAlgorithms = options && validate_algorithms_default("contentEncryptionAlgorithms", options.contentEncryptionAlgorithms);
  if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg) || !keyManagementAlgorithms && alg.startsWith("PBES2")) {
    throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter value not allowed');
  }
  if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {
    throw new JOSEAlgNotAllowed('"enc" (Encryption Algorithm) Header Parameter value not allowed');
  }
  let encryptedKey;
  if (jwe.encrypted_key !== void 0) {
    try {
      encryptedKey = decode2(jwe.encrypted_key);
    } catch {
      throw new JWEInvalid("Failed to base64url decode the encrypted_key");
    }
  }
  let resolvedKey = false;
  if (typeof key === "function") {
    key = await key(parsedProt, jwe);
    resolvedKey = true;
  }
  let cek;
  try {
    cek = await decrypt_key_management_default(alg, key, encryptedKey, joseHeader, options);
  } catch (err) {
    if (err instanceof TypeError || err instanceof JWEInvalid || err instanceof JOSENotSupported) {
      throw err;
    }
    cek = cek_default(enc);
  }
  let iv;
  let tag2;
  if (jwe.iv !== void 0) {
    try {
      iv = decode2(jwe.iv);
    } catch {
      throw new JWEInvalid("Failed to base64url decode the iv");
    }
  }
  if (jwe.tag !== void 0) {
    try {
      tag2 = decode2(jwe.tag);
    } catch {
      throw new JWEInvalid("Failed to base64url decode the tag");
    }
  }
  const protectedHeader = encoder.encode(jwe.protected ?? "");
  let additionalData;
  if (jwe.aad !== void 0) {
    additionalData = concat(protectedHeader, encoder.encode("."), encoder.encode(jwe.aad));
  } else {
    additionalData = protectedHeader;
  }
  let ciphertext;
  try {
    ciphertext = decode2(jwe.ciphertext);
  } catch {
    throw new JWEInvalid("Failed to base64url decode the ciphertext");
  }
  const plaintext = await decrypt_default(enc, cek, ciphertext, iv, tag2, additionalData);
  const result = { plaintext };
  if (jwe.protected !== void 0) {
    result.protectedHeader = parsedProt;
  }
  if (jwe.aad !== void 0) {
    try {
      result.additionalAuthenticatedData = decode2(jwe.aad);
    } catch {
      throw new JWEInvalid("Failed to base64url decode the aad");
    }
  }
  if (jwe.unprotected !== void 0) {
    result.sharedUnprotectedHeader = jwe.unprotected;
  }
  if (jwe.header !== void 0) {
    result.unprotectedHeader = jwe.header;
  }
  if (resolvedKey) {
    return { ...result, key };
  }
  return result;
}
var init_decrypt2 = __esm({
  "node_modules/jose/dist/browser/jwe/flattened/decrypt.js"() {
    init_base64url();
    init_decrypt();
    init_errors();
    init_is_disjoint();
    init_is_object();
    init_decrypt_key_management();
    init_buffer_utils();
    init_cek();
    init_validate_crit();
    init_validate_algorithms();
  }
});

// node_modules/jose/dist/browser/jwe/compact/decrypt.js
async function compactDecrypt(jwe, key, options) {
  if (jwe instanceof Uint8Array) {
    jwe = decoder.decode(jwe);
  }
  if (typeof jwe !== "string") {
    throw new JWEInvalid("Compact JWE must be a string or Uint8Array");
  }
  const { 0: protectedHeader, 1: encryptedKey, 2: iv, 3: ciphertext, 4: tag2, length: length2 } = jwe.split(".");
  if (length2 !== 5) {
    throw new JWEInvalid("Invalid Compact JWE");
  }
  const decrypted = await flattenedDecrypt({
    ciphertext,
    iv: iv || void 0,
    protected: protectedHeader,
    tag: tag2 || void 0,
    encrypted_key: encryptedKey || void 0
  }, key, options);
  const result = { plaintext: decrypted.plaintext, protectedHeader: decrypted.protectedHeader };
  if (typeof key === "function") {
    return { ...result, key: decrypted.key };
  }
  return result;
}
var init_decrypt3 = __esm({
  "node_modules/jose/dist/browser/jwe/compact/decrypt.js"() {
    init_decrypt2();
    init_errors();
    init_buffer_utils();
  }
});

// node_modules/jose/dist/browser/jwe/general/decrypt.js
async function generalDecrypt(jwe, key, options) {
  if (!isObject(jwe)) {
    throw new JWEInvalid("General JWE must be an object");
  }
  if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(isObject)) {
    throw new JWEInvalid("JWE Recipients missing or incorrect type");
  }
  if (!jwe.recipients.length) {
    throw new JWEInvalid("JWE Recipients has no members");
  }
  for (const recipient of jwe.recipients) {
    try {
      return await flattenedDecrypt({
        aad: jwe.aad,
        ciphertext: jwe.ciphertext,
        encrypted_key: recipient.encrypted_key,
        header: recipient.header,
        iv: jwe.iv,
        protected: jwe.protected,
        tag: jwe.tag,
        unprotected: jwe.unprotected
      }, key, options);
    } catch {
    }
  }
  throw new JWEDecryptionFailed();
}
var init_decrypt4 = __esm({
  "node_modules/jose/dist/browser/jwe/general/decrypt.js"() {
    init_decrypt2();
    init_errors();
    init_is_object();
  }
});

// node_modules/jose/dist/browser/lib/private_symbols.js
var unprotected;
var init_private_symbols = __esm({
  "node_modules/jose/dist/browser/lib/private_symbols.js"() {
    unprotected = Symbol();
  }
});

// node_modules/jose/dist/browser/runtime/key_to_jwk.js
var keyToJWK, key_to_jwk_default;
var init_key_to_jwk = __esm({
  "node_modules/jose/dist/browser/runtime/key_to_jwk.js"() {
    init_webcrypto();
    init_invalid_key_input();
    init_base64url();
    init_is_key_like();
    keyToJWK = async (key) => {
      if (key instanceof Uint8Array) {
        return {
          kty: "oct",
          k: encode2(key)
        };
      }
      if (!isCryptoKey(key)) {
        throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array"));
      }
      if (!key.extractable) {
        throw new TypeError("non-extractable CryptoKey cannot be exported as a JWK");
      }
      const { ext, key_ops, alg, use, ...jwk } = await webcrypto_default.subtle.exportKey("jwk", key);
      return jwk;
    };
    key_to_jwk_default = keyToJWK;
  }
});

// node_modules/jose/dist/browser/key/export.js
async function exportSPKI(key) {
  return toSPKI(key);
}
async function exportPKCS8(key) {
  return toPKCS8(key);
}
async function exportJWK(key) {
  return key_to_jwk_default(key);
}
var init_export = __esm({
  "node_modules/jose/dist/browser/key/export.js"() {
    init_asn1();
    init_asn1();
    init_key_to_jwk();
  }
});

// node_modules/jose/dist/browser/lib/encrypt_key_management.js
async function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {
  let encryptedKey;
  let parameters;
  let cek;
  check_key_type_default(alg, key, "encrypt");
  key = await normalize_key_default.normalizePublicKey?.(key, alg) || key;
  switch (alg) {
    case "dir": {
      cek = key;
      break;
    }
    case "ECDH-ES":
    case "ECDH-ES+A128KW":
    case "ECDH-ES+A192KW":
    case "ECDH-ES+A256KW": {
      if (!ecdhAllowed(key)) {
        throw new JOSENotSupported("ECDH with the provided key is not allowed or not supported by your javascript runtime");
      }
      const { apu, apv } = providedParameters;
      let { epk: ephemeralKey } = providedParameters;
      ephemeralKey || (ephemeralKey = (await generateEpk(key)).privateKey);
      const { x: x2, y: y3, crv, kty } = await exportJWK(ephemeralKey);
      const sharedSecret = await deriveKey(key, ephemeralKey, alg === "ECDH-ES" ? enc : alg, alg === "ECDH-ES" ? bitLength2(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);
      parameters = { epk: { x: x2, crv, kty } };
      if (kty === "EC")
        parameters.epk.y = y3;
      if (apu)
        parameters.apu = encode2(apu);
      if (apv)
        parameters.apv = encode2(apv);
      if (alg === "ECDH-ES") {
        cek = sharedSecret;
        break;
      }
      cek = providedCek || cek_default(enc);
      const kwAlg = alg.slice(-6);
      encryptedKey = await wrap(kwAlg, sharedSecret, cek);
      break;
    }
    case "RSA1_5":
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512": {
      cek = providedCek || cek_default(enc);
      encryptedKey = await encrypt2(alg, key, cek);
      break;
    }
    case "PBES2-HS256+A128KW":
    case "PBES2-HS384+A192KW":
    case "PBES2-HS512+A256KW": {
      cek = providedCek || cek_default(enc);
      const { p2c, p2s: p2s2 } = providedParameters;
      ({ encryptedKey, ...parameters } = await encrypt(alg, key, cek, p2c, p2s2));
      break;
    }
    case "A128KW":
    case "A192KW":
    case "A256KW": {
      cek = providedCek || cek_default(enc);
      encryptedKey = await wrap(alg, key, cek);
      break;
    }
    case "A128GCMKW":
    case "A192GCMKW":
    case "A256GCMKW": {
      cek = providedCek || cek_default(enc);
      const { iv } = providedParameters;
      ({ encryptedKey, ...parameters } = await wrap2(alg, key, cek, iv));
      break;
    }
    default: {
      throw new JOSENotSupported('Invalid or unsupported "alg" (JWE Algorithm) header value');
    }
  }
  return { cek, encryptedKey, parameters };
}
var encrypt_key_management_default;
var init_encrypt_key_management = __esm({
  "node_modules/jose/dist/browser/lib/encrypt_key_management.js"() {
    init_aeskw();
    init_ecdhes();
    init_pbes2kw();
    init_rsaes();
    init_base64url();
    init_normalize_key();
    init_cek();
    init_errors();
    init_export();
    init_check_key_type();
    init_aesgcmkw();
    encrypt_key_management_default = encryptKeyManagement;
  }
});

// node_modules/jose/dist/browser/jwe/flattened/encrypt.js
var FlattenedEncrypt;
var init_encrypt2 = __esm({
  "node_modules/jose/dist/browser/jwe/flattened/encrypt.js"() {
    init_base64url();
    init_private_symbols();
    init_encrypt();
    init_encrypt_key_management();
    init_errors();
    init_is_disjoint();
    init_buffer_utils();
    init_validate_crit();
    FlattenedEncrypt = class {
      constructor(plaintext) {
        if (!(plaintext instanceof Uint8Array)) {
          throw new TypeError("plaintext must be an instance of Uint8Array");
        }
        this._plaintext = plaintext;
      }
      setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) {
          throw new TypeError("setKeyManagementParameters can only be called once");
        }
        this._keyManagementParameters = parameters;
        return this;
      }
      setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
          throw new TypeError("setProtectedHeader can only be called once");
        }
        this._protectedHeader = protectedHeader;
        return this;
      }
      setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._sharedUnprotectedHeader) {
          throw new TypeError("setSharedUnprotectedHeader can only be called once");
        }
        this._sharedUnprotectedHeader = sharedUnprotectedHeader;
        return this;
      }
      setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) {
          throw new TypeError("setUnprotectedHeader can only be called once");
        }
        this._unprotectedHeader = unprotectedHeader;
        return this;
      }
      setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
      }
      setContentEncryptionKey(cek) {
        if (this._cek) {
          throw new TypeError("setContentEncryptionKey can only be called once");
        }
        this._cek = cek;
        return this;
      }
      setInitializationVector(iv) {
        if (this._iv) {
          throw new TypeError("setInitializationVector can only be called once");
        }
        this._iv = iv;
        return this;
      }
      async encrypt(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {
          throw new JWEInvalid("either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()");
        }
        if (!is_disjoint_default(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {
          throw new JWEInvalid("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
        }
        const joseHeader = {
          ...this._protectedHeader,
          ...this._unprotectedHeader,
          ...this._sharedUnprotectedHeader
        };
        validate_crit_default(JWEInvalid, /* @__PURE__ */ new Map(), options?.crit, this._protectedHeader, joseHeader);
        if (joseHeader.zip !== void 0) {
          throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
        }
        const { alg, enc } = joseHeader;
        if (typeof alg !== "string" || !alg) {
          throw new JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
        }
        if (typeof enc !== "string" || !enc) {
          throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
        }
        let encryptedKey;
        if (this._cek && (alg === "dir" || alg === "ECDH-ES")) {
          throw new TypeError(`setContentEncryptionKey cannot be called with JWE "alg" (Algorithm) Header ${alg}`);
        }
        let cek;
        {
          let parameters;
          ({ cek, encryptedKey, parameters } = await encrypt_key_management_default(alg, enc, key, this._cek, this._keyManagementParameters));
          if (parameters) {
            if (options && unprotected in options) {
              if (!this._unprotectedHeader) {
                this.setUnprotectedHeader(parameters);
              } else {
                this._unprotectedHeader = { ...this._unprotectedHeader, ...parameters };
              }
            } else if (!this._protectedHeader) {
              this.setProtectedHeader(parameters);
            } else {
              this._protectedHeader = { ...this._protectedHeader, ...parameters };
            }
          }
        }
        let additionalData;
        let protectedHeader;
        let aadMember;
        if (this._protectedHeader) {
          protectedHeader = encoder.encode(encode2(JSON.stringify(this._protectedHeader)));
        } else {
          protectedHeader = encoder.encode("");
        }
        if (this._aad) {
          aadMember = encode2(this._aad);
          additionalData = concat(protectedHeader, encoder.encode("."), encoder.encode(aadMember));
        } else {
          additionalData = protectedHeader;
        }
        const { ciphertext, tag: tag2, iv } = await encrypt_default(enc, this._plaintext, cek, this._iv, additionalData);
        const jwe = {
          ciphertext: encode2(ciphertext)
        };
        if (iv) {
          jwe.iv = encode2(iv);
        }
        if (tag2) {
          jwe.tag = encode2(tag2);
        }
        if (encryptedKey) {
          jwe.encrypted_key = encode2(encryptedKey);
        }
        if (aadMember) {
          jwe.aad = aadMember;
        }
        if (this._protectedHeader) {
          jwe.protected = decoder.decode(protectedHeader);
        }
        if (this._sharedUnprotectedHeader) {
          jwe.unprotected = this._sharedUnprotectedHeader;
        }
        if (this._unprotectedHeader) {
          jwe.header = this._unprotectedHeader;
        }
        return jwe;
      }
    };
  }
});

// node_modules/jose/dist/browser/jwe/general/encrypt.js
var IndividualRecipient, GeneralEncrypt;
var init_encrypt3 = __esm({
  "node_modules/jose/dist/browser/jwe/general/encrypt.js"() {
    init_encrypt2();
    init_private_symbols();
    init_errors();
    init_cek();
    init_is_disjoint();
    init_encrypt_key_management();
    init_base64url();
    init_validate_crit();
    IndividualRecipient = class {
      constructor(enc, key, options) {
        this.parent = enc;
        this.key = key;
        this.options = options;
      }
      setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader) {
          throw new TypeError("setUnprotectedHeader can only be called once");
        }
        this.unprotectedHeader = unprotectedHeader;
        return this;
      }
      addRecipient(...args) {
        return this.parent.addRecipient(...args);
      }
      encrypt(...args) {
        return this.parent.encrypt(...args);
      }
      done() {
        return this.parent;
      }
    };
    GeneralEncrypt = class {
      constructor(plaintext) {
        this._recipients = [];
        this._plaintext = plaintext;
      }
      addRecipient(key, options) {
        const recipient = new IndividualRecipient(this, key, { crit: options?.crit });
        this._recipients.push(recipient);
        return recipient;
      }
      setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
          throw new TypeError("setProtectedHeader can only be called once");
        }
        this._protectedHeader = protectedHeader;
        return this;
      }
      setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._unprotectedHeader) {
          throw new TypeError("setSharedUnprotectedHeader can only be called once");
        }
        this._unprotectedHeader = sharedUnprotectedHeader;
        return this;
      }
      setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
      }
      async encrypt() {
        if (!this._recipients.length) {
          throw new JWEInvalid("at least one recipient must be added");
        }
        if (this._recipients.length === 1) {
          const [recipient] = this._recipients;
          const flattened = await new FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).encrypt(recipient.key, { ...recipient.options });
          const jwe2 = {
            ciphertext: flattened.ciphertext,
            iv: flattened.iv,
            recipients: [{}],
            tag: flattened.tag
          };
          if (flattened.aad)
            jwe2.aad = flattened.aad;
          if (flattened.protected)
            jwe2.protected = flattened.protected;
          if (flattened.unprotected)
            jwe2.unprotected = flattened.unprotected;
          if (flattened.encrypted_key)
            jwe2.recipients[0].encrypted_key = flattened.encrypted_key;
          if (flattened.header)
            jwe2.recipients[0].header = flattened.header;
          return jwe2;
        }
        let enc;
        for (let i9 = 0; i9 < this._recipients.length; i9++) {
          const recipient = this._recipients[i9];
          if (!is_disjoint_default(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader)) {
            throw new JWEInvalid("JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint");
          }
          const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
            ...recipient.unprotectedHeader
          };
          const { alg } = joseHeader;
          if (typeof alg !== "string" || !alg) {
            throw new JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
          }
          if (alg === "dir" || alg === "ECDH-ES") {
            throw new JWEInvalid('"dir" and "ECDH-ES" alg may only be used with a single recipient');
          }
          if (typeof joseHeader.enc !== "string" || !joseHeader.enc) {
            throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
          }
          if (!enc) {
            enc = joseHeader.enc;
          } else if (enc !== joseHeader.enc) {
            throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter must be the same for all recipients');
          }
          validate_crit_default(JWEInvalid, /* @__PURE__ */ new Map(), recipient.options.crit, this._protectedHeader, joseHeader);
          if (joseHeader.zip !== void 0) {
            throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported.');
          }
        }
        const cek = cek_default(enc);
        const jwe = {
          ciphertext: "",
          iv: "",
          recipients: [],
          tag: ""
        };
        for (let i9 = 0; i9 < this._recipients.length; i9++) {
          const recipient = this._recipients[i9];
          const target = {};
          jwe.recipients.push(target);
          const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
            ...recipient.unprotectedHeader
          };
          const p2c = joseHeader.alg.startsWith("PBES2") ? 2048 + i9 : void 0;
          if (i9 === 0) {
            const flattened = await new FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(cek).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).setKeyManagementParameters({ p2c }).encrypt(recipient.key, {
              ...recipient.options,
              [unprotected]: true
            });
            jwe.ciphertext = flattened.ciphertext;
            jwe.iv = flattened.iv;
            jwe.tag = flattened.tag;
            if (flattened.aad)
              jwe.aad = flattened.aad;
            if (flattened.protected)
              jwe.protected = flattened.protected;
            if (flattened.unprotected)
              jwe.unprotected = flattened.unprotected;
            target.encrypted_key = flattened.encrypted_key;
            if (flattened.header)
              target.header = flattened.header;
            continue;
          }
          const { encryptedKey, parameters } = await encrypt_key_management_default(recipient.unprotectedHeader?.alg || this._protectedHeader?.alg || this._unprotectedHeader?.alg, enc, recipient.key, cek, { p2c });
          target.encrypted_key = encode2(encryptedKey);
          if (recipient.unprotectedHeader || parameters)
            target.header = { ...recipient.unprotectedHeader, ...parameters };
        }
        return jwe;
      }
    };
  }
});

// node_modules/jose/dist/browser/runtime/subtle_dsa.js
function subtleDsa(alg, algorithm) {
  const hash = `SHA-${alg.slice(-3)}`;
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512":
      return { hash, name: "HMAC" };
    case "PS256":
    case "PS384":
    case "PS512":
      return { hash, name: "RSA-PSS", saltLength: alg.slice(-3) >> 3 };
    case "RS256":
    case "RS384":
    case "RS512":
      return { hash, name: "RSASSA-PKCS1-v1_5" };
    case "ES256":
    case "ES384":
    case "ES512":
      return { hash, name: "ECDSA", namedCurve: algorithm.namedCurve };
    case "EdDSA":
      return { name: algorithm.name };
    default:
      throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
  }
}
var init_subtle_dsa = __esm({
  "node_modules/jose/dist/browser/runtime/subtle_dsa.js"() {
    init_errors();
  }
});

// node_modules/jose/dist/browser/runtime/get_sign_verify_key.js
async function getCryptoKey3(alg, key, usage) {
  if (usage === "sign") {
    key = await normalize_key_default.normalizePrivateKey(key, alg);
  }
  if (usage === "verify") {
    key = await normalize_key_default.normalizePublicKey(key, alg);
  }
  if (isCryptoKey(key)) {
    checkSigCryptoKey(key, alg, usage);
    return key;
  }
  if (key instanceof Uint8Array) {
    if (!alg.startsWith("HS")) {
      throw new TypeError(invalid_key_input_default(key, ...types));
    }
    return webcrypto_default.subtle.importKey("raw", key, { hash: `SHA-${alg.slice(-3)}`, name: "HMAC" }, false, [usage]);
  }
  throw new TypeError(invalid_key_input_default(key, ...types, "Uint8Array", "JSON Web Key"));
}
var init_get_sign_verify_key = __esm({
  "node_modules/jose/dist/browser/runtime/get_sign_verify_key.js"() {
    init_webcrypto();
    init_crypto_key();
    init_invalid_key_input();
    init_is_key_like();
    init_normalize_key();
  }
});

// node_modules/jose/dist/browser/runtime/verify.js
var verify, verify_default;
var init_verify = __esm({
  "node_modules/jose/dist/browser/runtime/verify.js"() {
    init_subtle_dsa();
    init_webcrypto();
    init_check_key_length();
    init_get_sign_verify_key();
    verify = async (alg, key, signature, data) => {
      const cryptoKey = await getCryptoKey3(alg, key, "verify");
      check_key_length_default(alg, cryptoKey);
      const algorithm = subtleDsa(alg, cryptoKey.algorithm);
      try {
        return await webcrypto_default.subtle.verify(algorithm, cryptoKey, signature, data);
      } catch {
        return false;
      }
    };
    verify_default = verify;
  }
});

// node_modules/jose/dist/browser/jws/flattened/verify.js
async function flattenedVerify(jws, key, options) {
  if (!isObject(jws)) {
    throw new JWSInvalid("Flattened JWS must be an object");
  }
  if (jws.protected === void 0 && jws.header === void 0) {
    throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
  }
  if (jws.protected !== void 0 && typeof jws.protected !== "string") {
    throw new JWSInvalid("JWS Protected Header incorrect type");
  }
  if (jws.payload === void 0) {
    throw new JWSInvalid("JWS Payload missing");
  }
  if (typeof jws.signature !== "string") {
    throw new JWSInvalid("JWS Signature missing or incorrect type");
  }
  if (jws.header !== void 0 && !isObject(jws.header)) {
    throw new JWSInvalid("JWS Unprotected Header incorrect type");
  }
  let parsedProt = {};
  if (jws.protected) {
    try {
      const protectedHeader = decode2(jws.protected);
      parsedProt = JSON.parse(decoder.decode(protectedHeader));
    } catch {
      throw new JWSInvalid("JWS Protected Header is invalid");
    }
  }
  if (!is_disjoint_default(parsedProt, jws.header)) {
    throw new JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
  }
  const joseHeader = {
    ...parsedProt,
    ...jws.header
  };
  const extensions = validate_crit_default(JWSInvalid, /* @__PURE__ */ new Map([["b64", true]]), options?.crit, parsedProt, joseHeader);
  let b64 = true;
  if (extensions.has("b64")) {
    b64 = parsedProt.b64;
    if (typeof b64 !== "boolean") {
      throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
    }
  }
  const { alg } = joseHeader;
  if (typeof alg !== "string" || !alg) {
    throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
  }
  const algorithms = options && validate_algorithms_default("algorithms", options.algorithms);
  if (algorithms && !algorithms.has(alg)) {
    throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter value not allowed');
  }
  if (b64) {
    if (typeof jws.payload !== "string") {
      throw new JWSInvalid("JWS Payload must be a string");
    }
  } else if (typeof jws.payload !== "string" && !(jws.payload instanceof Uint8Array)) {
    throw new JWSInvalid("JWS Payload must be a string or an Uint8Array instance");
  }
  let resolvedKey = false;
  if (typeof key === "function") {
    key = await key(parsedProt, jws);
    resolvedKey = true;
    checkKeyTypeWithJwk(alg, key, "verify");
    if (isJWK(key)) {
      key = await importJWK(key, alg);
    }
  } else {
    checkKeyTypeWithJwk(alg, key, "verify");
  }
  const data = concat(encoder.encode(jws.protected ?? ""), encoder.encode("."), typeof jws.payload === "string" ? encoder.encode(jws.payload) : jws.payload);
  let signature;
  try {
    signature = decode2(jws.signature);
  } catch {
    throw new JWSInvalid("Failed to base64url decode the signature");
  }
  const verified = await verify_default(alg, key, signature, data);
  if (!verified) {
    throw new JWSSignatureVerificationFailed();
  }
  let payload;
  if (b64) {
    try {
      payload = decode2(jws.payload);
    } catch {
      throw new JWSInvalid("Failed to base64url decode the payload");
    }
  } else if (typeof jws.payload === "string") {
    payload = encoder.encode(jws.payload);
  } else {
    payload = jws.payload;
  }
  const result = { payload };
  if (jws.protected !== void 0) {
    result.protectedHeader = parsedProt;
  }
  if (jws.header !== void 0) {
    result.unprotectedHeader = jws.header;
  }
  if (resolvedKey) {
    return { ...result, key };
  }
  return result;
}
var init_verify2 = __esm({
  "node_modules/jose/dist/browser/jws/flattened/verify.js"() {
    init_base64url();
    init_verify();
    init_errors();
    init_buffer_utils();
    init_is_disjoint();
    init_is_object();
    init_check_key_type();
    init_validate_crit();
    init_validate_algorithms();
    init_is_jwk();
    init_import();
  }
});

// node_modules/jose/dist/browser/jws/compact/verify.js
async function compactVerify(jws, key, options) {
  if (jws instanceof Uint8Array) {
    jws = decoder.decode(jws);
  }
  if (typeof jws !== "string") {
    throw new JWSInvalid("Compact JWS must be a string or Uint8Array");
  }
  const { 0: protectedHeader, 1: payload, 2: signature, length: length2 } = jws.split(".");
  if (length2 !== 3) {
    throw new JWSInvalid("Invalid Compact JWS");
  }
  const verified = await flattenedVerify({ payload, protected: protectedHeader, signature }, key, options);
  const result = { payload: verified.payload, protectedHeader: verified.protectedHeader };
  if (typeof key === "function") {
    return { ...result, key: verified.key };
  }
  return result;
}
var init_verify3 = __esm({
  "node_modules/jose/dist/browser/jws/compact/verify.js"() {
    init_verify2();
    init_errors();
    init_buffer_utils();
  }
});

// node_modules/jose/dist/browser/jws/general/verify.js
async function generalVerify(jws, key, options) {
  if (!isObject(jws)) {
    throw new JWSInvalid("General JWS must be an object");
  }
  if (!Array.isArray(jws.signatures) || !jws.signatures.every(isObject)) {
    throw new JWSInvalid("JWS Signatures missing or incorrect type");
  }
  for (const signature of jws.signatures) {
    try {
      return await flattenedVerify({
        header: signature.header,
        payload: jws.payload,
        protected: signature.protected,
        signature: signature.signature
      }, key, options);
    } catch {
    }
  }
  throw new JWSSignatureVerificationFailed();
}
var init_verify4 = __esm({
  "node_modules/jose/dist/browser/jws/general/verify.js"() {
    init_verify2();
    init_errors();
    init_is_object();
  }
});

// node_modules/jose/dist/browser/lib/epoch.js
var epoch_default;
var init_epoch = __esm({
  "node_modules/jose/dist/browser/lib/epoch.js"() {
    epoch_default = (date) => Math.floor(date.getTime() / 1e3);
  }
});

// node_modules/jose/dist/browser/lib/secs.js
var minute, hour, day, week, year, REGEX, secs_default;
var init_secs = __esm({
  "node_modules/jose/dist/browser/lib/secs.js"() {
    minute = 60;
    hour = minute * 60;
    day = hour * 24;
    week = day * 7;
    year = day * 365.25;
    REGEX = /^(\+|\-)? ?(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)(?: (ago|from now))?$/i;
    secs_default = (str) => {
      const matched = REGEX.exec(str);
      if (!matched || matched[4] && matched[1]) {
        throw new TypeError("Invalid time period format");
      }
      const value = parseFloat(matched[2]);
      const unit = matched[3].toLowerCase();
      let numericDate;
      switch (unit) {
        case "sec":
        case "secs":
        case "second":
        case "seconds":
        case "s":
          numericDate = Math.round(value);
          break;
        case "minute":
        case "minutes":
        case "min":
        case "mins":
        case "m":
          numericDate = Math.round(value * minute);
          break;
        case "hour":
        case "hours":
        case "hr":
        case "hrs":
        case "h":
          numericDate = Math.round(value * hour);
          break;
        case "day":
        case "days":
        case "d":
          numericDate = Math.round(value * day);
          break;
        case "week":
        case "weeks":
        case "w":
          numericDate = Math.round(value * week);
          break;
        default:
          numericDate = Math.round(value * year);
          break;
      }
      if (matched[1] === "-" || matched[4] === "ago") {
        return -numericDate;
      }
      return numericDate;
    };
  }
});

// node_modules/jose/dist/browser/lib/jwt_claims_set.js
var normalizeTyp, checkAudiencePresence, jwt_claims_set_default;
var init_jwt_claims_set = __esm({
  "node_modules/jose/dist/browser/lib/jwt_claims_set.js"() {
    init_errors();
    init_buffer_utils();
    init_epoch();
    init_secs();
    init_is_object();
    normalizeTyp = (value) => value.toLowerCase().replace(/^application\//, "");
    checkAudiencePresence = (audPayload, audOption) => {
      if (typeof audPayload === "string") {
        return audOption.includes(audPayload);
      }
      if (Array.isArray(audPayload)) {
        return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
      }
      return false;
    };
    jwt_claims_set_default = (protectedHeader, encodedPayload, options = {}) => {
      let payload;
      try {
        payload = JSON.parse(decoder.decode(encodedPayload));
      } catch {
      }
      if (!isObject(payload)) {
        throw new JWTInvalid("JWT Claims Set must be a top-level JSON object");
      }
      const { typ } = options;
      if (typ && (typeof protectedHeader.typ !== "string" || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
        throw new JWTClaimValidationFailed('unexpected "typ" JWT header value', payload, "typ", "check_failed");
      }
      const { requiredClaims = [], issuer, subject, audience, maxTokenAge } = options;
      const presenceCheck = [...requiredClaims];
      if (maxTokenAge !== void 0)
        presenceCheck.push("iat");
      if (audience !== void 0)
        presenceCheck.push("aud");
      if (subject !== void 0)
        presenceCheck.push("sub");
      if (issuer !== void 0)
        presenceCheck.push("iss");
      for (const claim of new Set(presenceCheck.reverse())) {
        if (!(claim in payload)) {
          throw new JWTClaimValidationFailed(`missing required "${claim}" claim`, payload, claim, "missing");
        }
      }
      if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {
        throw new JWTClaimValidationFailed('unexpected "iss" claim value', payload, "iss", "check_failed");
      }
      if (subject && payload.sub !== subject) {
        throw new JWTClaimValidationFailed('unexpected "sub" claim value', payload, "sub", "check_failed");
      }
      if (audience && !checkAudiencePresence(payload.aud, typeof audience === "string" ? [audience] : audience)) {
        throw new JWTClaimValidationFailed('unexpected "aud" claim value', payload, "aud", "check_failed");
      }
      let tolerance;
      switch (typeof options.clockTolerance) {
        case "string":
          tolerance = secs_default(options.clockTolerance);
          break;
        case "number":
          tolerance = options.clockTolerance;
          break;
        case "undefined":
          tolerance = 0;
          break;
        default:
          throw new TypeError("Invalid clockTolerance option type");
      }
      const { currentDate } = options;
      const now = epoch_default(currentDate || /* @__PURE__ */ new Date());
      if ((payload.iat !== void 0 || maxTokenAge) && typeof payload.iat !== "number") {
        throw new JWTClaimValidationFailed('"iat" claim must be a number', payload, "iat", "invalid");
      }
      if (payload.nbf !== void 0) {
        if (typeof payload.nbf !== "number") {
          throw new JWTClaimValidationFailed('"nbf" claim must be a number', payload, "nbf", "invalid");
        }
        if (payload.nbf > now + tolerance) {
          throw new JWTClaimValidationFailed('"nbf" claim timestamp check failed', payload, "nbf", "check_failed");
        }
      }
      if (payload.exp !== void 0) {
        if (typeof payload.exp !== "number") {
          throw new JWTClaimValidationFailed('"exp" claim must be a number', payload, "exp", "invalid");
        }
        if (payload.exp <= now - tolerance) {
          throw new JWTExpired('"exp" claim timestamp check failed', payload, "exp", "check_failed");
        }
      }
      if (maxTokenAge) {
        const age = now - payload.iat;
        const max2 = typeof maxTokenAge === "number" ? maxTokenAge : secs_default(maxTokenAge);
        if (age - tolerance > max2) {
          throw new JWTExpired('"iat" claim timestamp check failed (too far in the past)', payload, "iat", "check_failed");
        }
        if (age < 0 - tolerance) {
          throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', payload, "iat", "check_failed");
        }
      }
      return payload;
    };
  }
});

// node_modules/jose/dist/browser/jwt/verify.js
async function jwtVerify(jwt, key, options) {
  const verified = await compactVerify(jwt, key, options);
  if (verified.protectedHeader.crit?.includes("b64") && verified.protectedHeader.b64 === false) {
    throw new JWTInvalid("JWTs MUST NOT use unencoded payload");
  }
  const payload = jwt_claims_set_default(verified.protectedHeader, verified.payload, options);
  const result = { payload, protectedHeader: verified.protectedHeader };
  if (typeof key === "function") {
    return { ...result, key: verified.key };
  }
  return result;
}
var init_verify5 = __esm({
  "node_modules/jose/dist/browser/jwt/verify.js"() {
    init_verify3();
    init_jwt_claims_set();
    init_errors();
  }
});

// node_modules/jose/dist/browser/jwt/decrypt.js
async function jwtDecrypt(jwt, key, options) {
  const decrypted = await compactDecrypt(jwt, key, options);
  const payload = jwt_claims_set_default(decrypted.protectedHeader, decrypted.plaintext, options);
  const { protectedHeader } = decrypted;
  if (protectedHeader.iss !== void 0 && protectedHeader.iss !== payload.iss) {
    throw new JWTClaimValidationFailed('replicated "iss" claim header parameter mismatch', payload, "iss", "mismatch");
  }
  if (protectedHeader.sub !== void 0 && protectedHeader.sub !== payload.sub) {
    throw new JWTClaimValidationFailed('replicated "sub" claim header parameter mismatch', payload, "sub", "mismatch");
  }
  if (protectedHeader.aud !== void 0 && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {
    throw new JWTClaimValidationFailed('replicated "aud" claim header parameter mismatch', payload, "aud", "mismatch");
  }
  const result = { payload, protectedHeader };
  if (typeof key === "function") {
    return { ...result, key: decrypted.key };
  }
  return result;
}
var init_decrypt5 = __esm({
  "node_modules/jose/dist/browser/jwt/decrypt.js"() {
    init_decrypt3();
    init_jwt_claims_set();
    init_errors();
  }
});

// node_modules/jose/dist/browser/jwe/compact/encrypt.js
var CompactEncrypt;
var init_encrypt4 = __esm({
  "node_modules/jose/dist/browser/jwe/compact/encrypt.js"() {
    init_encrypt2();
    CompactEncrypt = class {
      constructor(plaintext) {
        this._flattened = new FlattenedEncrypt(plaintext);
      }
      setContentEncryptionKey(cek) {
        this._flattened.setContentEncryptionKey(cek);
        return this;
      }
      setInitializationVector(iv) {
        this._flattened.setInitializationVector(iv);
        return this;
      }
      setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
      }
      setKeyManagementParameters(parameters) {
        this._flattened.setKeyManagementParameters(parameters);
        return this;
      }
      async encrypt(key, options) {
        const jwe = await this._flattened.encrypt(key, options);
        return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join(".");
      }
    };
  }
});

// node_modules/jose/dist/browser/runtime/sign.js
var sign, sign_default;
var init_sign = __esm({
  "node_modules/jose/dist/browser/runtime/sign.js"() {
    init_subtle_dsa();
    init_webcrypto();
    init_check_key_length();
    init_get_sign_verify_key();
    sign = async (alg, key, data) => {
      const cryptoKey = await getCryptoKey3(alg, key, "sign");
      check_key_length_default(alg, cryptoKey);
      const signature = await webcrypto_default.subtle.sign(subtleDsa(alg, cryptoKey.algorithm), cryptoKey, data);
      return new Uint8Array(signature);
    };
    sign_default = sign;
  }
});

// node_modules/jose/dist/browser/jws/flattened/sign.js
var FlattenedSign;
var init_sign2 = __esm({
  "node_modules/jose/dist/browser/jws/flattened/sign.js"() {
    init_base64url();
    init_sign();
    init_is_disjoint();
    init_errors();
    init_buffer_utils();
    init_check_key_type();
    init_validate_crit();
    FlattenedSign = class {
      constructor(payload) {
        if (!(payload instanceof Uint8Array)) {
          throw new TypeError("payload must be an instance of Uint8Array");
        }
        this._payload = payload;
      }
      setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
          throw new TypeError("setProtectedHeader can only be called once");
        }
        this._protectedHeader = protectedHeader;
        return this;
      }
      setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) {
          throw new TypeError("setUnprotectedHeader can only be called once");
        }
        this._unprotectedHeader = unprotectedHeader;
        return this;
      }
      async sign(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader) {
          throw new JWSInvalid("either setProtectedHeader or setUnprotectedHeader must be called before #sign()");
        }
        if (!is_disjoint_default(this._protectedHeader, this._unprotectedHeader)) {
          throw new JWSInvalid("JWS Protected and JWS Unprotected Header Parameter names must be disjoint");
        }
        const joseHeader = {
          ...this._protectedHeader,
          ...this._unprotectedHeader
        };
        const extensions = validate_crit_default(JWSInvalid, /* @__PURE__ */ new Map([["b64", true]]), options?.crit, this._protectedHeader, joseHeader);
        let b64 = true;
        if (extensions.has("b64")) {
          b64 = this._protectedHeader.b64;
          if (typeof b64 !== "boolean") {
            throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
          }
        }
        const { alg } = joseHeader;
        if (typeof alg !== "string" || !alg) {
          throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
        }
        checkKeyTypeWithJwk(alg, key, "sign");
        let payload = this._payload;
        if (b64) {
          payload = encoder.encode(encode2(payload));
        }
        let protectedHeader;
        if (this._protectedHeader) {
          protectedHeader = encoder.encode(encode2(JSON.stringify(this._protectedHeader)));
        } else {
          protectedHeader = encoder.encode("");
        }
        const data = concat(protectedHeader, encoder.encode("."), payload);
        const signature = await sign_default(alg, key, data);
        const jws = {
          signature: encode2(signature),
          payload: ""
        };
        if (b64) {
          jws.payload = decoder.decode(payload);
        }
        if (this._unprotectedHeader) {
          jws.header = this._unprotectedHeader;
        }
        if (this._protectedHeader) {
          jws.protected = decoder.decode(protectedHeader);
        }
        return jws;
      }
    };
  }
});

// node_modules/jose/dist/browser/jws/compact/sign.js
var CompactSign;
var init_sign3 = __esm({
  "node_modules/jose/dist/browser/jws/compact/sign.js"() {
    init_sign2();
    CompactSign = class {
      constructor(payload) {
        this._flattened = new FlattenedSign(payload);
      }
      setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
      }
      async sign(key, options) {
        const jws = await this._flattened.sign(key, options);
        if (jws.payload === void 0) {
          throw new TypeError("use the flattened module for creating JWS with b64: false");
        }
        return `${jws.protected}.${jws.payload}.${jws.signature}`;
      }
    };
  }
});

// node_modules/jose/dist/browser/jws/general/sign.js
var IndividualSignature, GeneralSign;
var init_sign4 = __esm({
  "node_modules/jose/dist/browser/jws/general/sign.js"() {
    init_sign2();
    init_errors();
    IndividualSignature = class {
      constructor(sig, key, options) {
        this.parent = sig;
        this.key = key;
        this.options = options;
      }
      setProtectedHeader(protectedHeader) {
        if (this.protectedHeader) {
          throw new TypeError("setProtectedHeader can only be called once");
        }
        this.protectedHeader = protectedHeader;
        return this;
      }
      setUnprotectedHeader(unprotectedHeader) {
        if (this.unprotectedHeader) {
          throw new TypeError("setUnprotectedHeader can only be called once");
        }
        this.unprotectedHeader = unprotectedHeader;
        return this;
      }
      addSignature(...args) {
        return this.parent.addSignature(...args);
      }
      sign(...args) {
        return this.parent.sign(...args);
      }
      done() {
        return this.parent;
      }
    };
    GeneralSign = class {
      constructor(payload) {
        this._signatures = [];
        this._payload = payload;
      }
      addSignature(key, options) {
        const signature = new IndividualSignature(this, key, options);
        this._signatures.push(signature);
        return signature;
      }
      async sign() {
        if (!this._signatures.length) {
          throw new JWSInvalid("at least one signature must be added");
        }
        const jws = {
          signatures: [],
          payload: ""
        };
        for (let i9 = 0; i9 < this._signatures.length; i9++) {
          const signature = this._signatures[i9];
          const flattened = new FlattenedSign(this._payload);
          flattened.setProtectedHeader(signature.protectedHeader);
          flattened.setUnprotectedHeader(signature.unprotectedHeader);
          const { payload, ...rest } = await flattened.sign(signature.key, signature.options);
          if (i9 === 0) {
            jws.payload = payload;
          } else if (jws.payload !== payload) {
            throw new JWSInvalid("inconsistent use of JWS Unencoded Payload (RFC7797)");
          }
          jws.signatures.push(rest);
        }
        return jws;
      }
    };
  }
});

// node_modules/jose/dist/browser/jwt/produce.js
function validateInput(label, input) {
  if (!Number.isFinite(input)) {
    throw new TypeError(`Invalid ${label} input`);
  }
  return input;
}
var ProduceJWT;
var init_produce = __esm({
  "node_modules/jose/dist/browser/jwt/produce.js"() {
    init_epoch();
    init_is_object();
    init_secs();
    ProduceJWT = class {
      constructor(payload = {}) {
        if (!isObject(payload)) {
          throw new TypeError("JWT Claims Set MUST be an object");
        }
        this._payload = payload;
      }
      setIssuer(issuer) {
        this._payload = { ...this._payload, iss: issuer };
        return this;
      }
      setSubject(subject) {
        this._payload = { ...this._payload, sub: subject };
        return this;
      }
      setAudience(audience) {
        this._payload = { ...this._payload, aud: audience };
        return this;
      }
      setJti(jwtId) {
        this._payload = { ...this._payload, jti: jwtId };
        return this;
      }
      setNotBefore(input) {
        if (typeof input === "number") {
          this._payload = { ...this._payload, nbf: validateInput("setNotBefore", input) };
        } else if (input instanceof Date) {
          this._payload = { ...this._payload, nbf: validateInput("setNotBefore", epoch_default(input)) };
        } else {
          this._payload = { ...this._payload, nbf: epoch_default(/* @__PURE__ */ new Date()) + secs_default(input) };
        }
        return this;
      }
      setExpirationTime(input) {
        if (typeof input === "number") {
          this._payload = { ...this._payload, exp: validateInput("setExpirationTime", input) };
        } else if (input instanceof Date) {
          this._payload = { ...this._payload, exp: validateInput("setExpirationTime", epoch_default(input)) };
        } else {
          this._payload = { ...this._payload, exp: epoch_default(/* @__PURE__ */ new Date()) + secs_default(input) };
        }
        return this;
      }
      setIssuedAt(input) {
        if (typeof input === "undefined") {
          this._payload = { ...this._payload, iat: epoch_default(/* @__PURE__ */ new Date()) };
        } else if (input instanceof Date) {
          this._payload = { ...this._payload, iat: validateInput("setIssuedAt", epoch_default(input)) };
        } else if (typeof input === "string") {
          this._payload = {
            ...this._payload,
            iat: validateInput("setIssuedAt", epoch_default(/* @__PURE__ */ new Date()) + secs_default(input))
          };
        } else {
          this._payload = { ...this._payload, iat: validateInput("setIssuedAt", input) };
        }
        return this;
      }
    };
  }
});

// node_modules/jose/dist/browser/jwt/sign.js
var SignJWT;
var init_sign5 = __esm({
  "node_modules/jose/dist/browser/jwt/sign.js"() {
    init_sign3();
    init_errors();
    init_buffer_utils();
    init_produce();
    SignJWT = class extends ProduceJWT {
      setProtectedHeader(protectedHeader) {
        this._protectedHeader = protectedHeader;
        return this;
      }
      async sign(key, options) {
        const sig = new CompactSign(encoder.encode(JSON.stringify(this._payload)));
        sig.setProtectedHeader(this._protectedHeader);
        if (Array.isArray(this._protectedHeader?.crit) && this._protectedHeader.crit.includes("b64") && this._protectedHeader.b64 === false) {
          throw new JWTInvalid("JWTs MUST NOT use unencoded payload");
        }
        return sig.sign(key, options);
      }
    };
  }
});

// node_modules/jose/dist/browser/jwt/encrypt.js
var EncryptJWT;
var init_encrypt5 = __esm({
  "node_modules/jose/dist/browser/jwt/encrypt.js"() {
    init_encrypt4();
    init_buffer_utils();
    init_produce();
    EncryptJWT = class extends ProduceJWT {
      setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
          throw new TypeError("setProtectedHeader can only be called once");
        }
        this._protectedHeader = protectedHeader;
        return this;
      }
      setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) {
          throw new TypeError("setKeyManagementParameters can only be called once");
        }
        this._keyManagementParameters = parameters;
        return this;
      }
      setContentEncryptionKey(cek) {
        if (this._cek) {
          throw new TypeError("setContentEncryptionKey can only be called once");
        }
        this._cek = cek;
        return this;
      }
      setInitializationVector(iv) {
        if (this._iv) {
          throw new TypeError("setInitializationVector can only be called once");
        }
        this._iv = iv;
        return this;
      }
      replicateIssuerAsHeader() {
        this._replicateIssuerAsHeader = true;
        return this;
      }
      replicateSubjectAsHeader() {
        this._replicateSubjectAsHeader = true;
        return this;
      }
      replicateAudienceAsHeader() {
        this._replicateAudienceAsHeader = true;
        return this;
      }
      async encrypt(key, options) {
        const enc = new CompactEncrypt(encoder.encode(JSON.stringify(this._payload)));
        if (this._replicateIssuerAsHeader) {
          this._protectedHeader = { ...this._protectedHeader, iss: this._payload.iss };
        }
        if (this._replicateSubjectAsHeader) {
          this._protectedHeader = { ...this._protectedHeader, sub: this._payload.sub };
        }
        if (this._replicateAudienceAsHeader) {
          this._protectedHeader = { ...this._protectedHeader, aud: this._payload.aud };
        }
        enc.setProtectedHeader(this._protectedHeader);
        if (this._iv) {
          enc.setInitializationVector(this._iv);
        }
        if (this._cek) {
          enc.setContentEncryptionKey(this._cek);
        }
        if (this._keyManagementParameters) {
          enc.setKeyManagementParameters(this._keyManagementParameters);
        }
        return enc.encrypt(key, options);
      }
    };
  }
});

// node_modules/jose/dist/browser/jwk/thumbprint.js
async function calculateJwkThumbprint(jwk, digestAlgorithm) {
  if (!isObject(jwk)) {
    throw new TypeError("JWK must be an object");
  }
  digestAlgorithm ?? (digestAlgorithm = "sha256");
  if (digestAlgorithm !== "sha256" && digestAlgorithm !== "sha384" && digestAlgorithm !== "sha512") {
    throw new TypeError('digestAlgorithm must one of "sha256", "sha384", or "sha512"');
  }
  let components;
  switch (jwk.kty) {
    case "EC":
      check(jwk.crv, '"crv" (Curve) Parameter');
      check(jwk.x, '"x" (X Coordinate) Parameter');
      check(jwk.y, '"y" (Y Coordinate) Parameter');
      components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };
      break;
    case "OKP":
      check(jwk.crv, '"crv" (Subtype of Key Pair) Parameter');
      check(jwk.x, '"x" (Public Key) Parameter');
      components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };
      break;
    case "RSA":
      check(jwk.e, '"e" (Exponent) Parameter');
      check(jwk.n, '"n" (Modulus) Parameter');
      components = { e: jwk.e, kty: jwk.kty, n: jwk.n };
      break;
    case "oct":
      check(jwk.k, '"k" (Key Value) Parameter');
      components = { k: jwk.k, kty: jwk.kty };
      break;
    default:
      throw new JOSENotSupported('"kty" (Key Type) Parameter missing or unsupported');
  }
  const data = encoder.encode(JSON.stringify(components));
  return encode2(await digest_default(digestAlgorithm, data));
}
async function calculateJwkThumbprintUri(jwk, digestAlgorithm) {
  digestAlgorithm ?? (digestAlgorithm = "sha256");
  const thumbprint = await calculateJwkThumbprint(jwk, digestAlgorithm);
  return `urn:ietf:params:oauth:jwk-thumbprint:sha-${digestAlgorithm.slice(-3)}:${thumbprint}`;
}
var check;
var init_thumbprint = __esm({
  "node_modules/jose/dist/browser/jwk/thumbprint.js"() {
    init_digest();
    init_base64url();
    init_errors();
    init_buffer_utils();
    init_is_object();
    check = (value, description) => {
      if (typeof value !== "string" || !value) {
        throw new JWKInvalid(`${description} missing or invalid`);
      }
    };
  }
});

// node_modules/jose/dist/browser/jwk/embedded.js
async function EmbeddedJWK(protectedHeader, token) {
  const joseHeader = {
    ...protectedHeader,
    ...token?.header
  };
  if (!isObject(joseHeader.jwk)) {
    throw new JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a JSON object');
  }
  const key = await importJWK({ ...joseHeader.jwk, ext: true }, joseHeader.alg);
  if (key instanceof Uint8Array || key.type !== "public") {
    throw new JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a public key');
  }
  return key;
}
var init_embedded = __esm({
  "node_modules/jose/dist/browser/jwk/embedded.js"() {
    init_import();
    init_is_object();
    init_errors();
  }
});

// node_modules/jose/dist/browser/jwks/local.js
function getKtyFromAlg(alg) {
  switch (typeof alg === "string" && alg.slice(0, 2)) {
    case "RS":
    case "PS":
      return "RSA";
    case "ES":
      return "EC";
    case "Ed":
      return "OKP";
    default:
      throw new JOSENotSupported('Unsupported "alg" value for a JSON Web Key Set');
  }
}
function isJWKSLike(jwks) {
  return jwks && typeof jwks === "object" && Array.isArray(jwks.keys) && jwks.keys.every(isJWKLike);
}
function isJWKLike(key) {
  return isObject(key);
}
function clone(obj) {
  if (typeof structuredClone === "function") {
    return structuredClone(obj);
  }
  return JSON.parse(JSON.stringify(obj));
}
async function importWithAlgCache(cache, jwk, alg) {
  const cached = cache.get(jwk) || cache.set(jwk, {}).get(jwk);
  if (cached[alg] === void 0) {
    const key = await importJWK({ ...jwk, ext: true }, alg);
    if (key instanceof Uint8Array || key.type !== "public") {
      throw new JWKSInvalid("JSON Web Key Set members must be public keys");
    }
    cached[alg] = key;
  }
  return cached[alg];
}
function createLocalJWKSet(jwks) {
  const set = new LocalJWKSet(jwks);
  const localJWKSet = async (protectedHeader, token) => set.getKey(protectedHeader, token);
  Object.defineProperties(localJWKSet, {
    jwks: {
      value: () => clone(set._jwks),
      enumerable: true,
      configurable: false,
      writable: false
    }
  });
  return localJWKSet;
}
var LocalJWKSet;
var init_local = __esm({
  "node_modules/jose/dist/browser/jwks/local.js"() {
    init_import();
    init_errors();
    init_is_object();
    LocalJWKSet = class {
      constructor(jwks) {
        this._cached = /* @__PURE__ */ new WeakMap();
        if (!isJWKSLike(jwks)) {
          throw new JWKSInvalid("JSON Web Key Set malformed");
        }
        this._jwks = clone(jwks);
      }
      async getKey(protectedHeader, token) {
        const { alg, kid } = { ...protectedHeader, ...token?.header };
        const kty = getKtyFromAlg(alg);
        const candidates = this._jwks.keys.filter((jwk2) => {
          let candidate = kty === jwk2.kty;
          if (candidate && typeof kid === "string") {
            candidate = kid === jwk2.kid;
          }
          if (candidate && typeof jwk2.alg === "string") {
            candidate = alg === jwk2.alg;
          }
          if (candidate && typeof jwk2.use === "string") {
            candidate = jwk2.use === "sig";
          }
          if (candidate && Array.isArray(jwk2.key_ops)) {
            candidate = jwk2.key_ops.includes("verify");
          }
          if (candidate && alg === "EdDSA") {
            candidate = jwk2.crv === "Ed25519" || jwk2.crv === "Ed448";
          }
          if (candidate) {
            switch (alg) {
              case "ES256":
                candidate = jwk2.crv === "P-256";
                break;
              case "ES256K":
                candidate = jwk2.crv === "secp256k1";
                break;
              case "ES384":
                candidate = jwk2.crv === "P-384";
                break;
              case "ES512":
                candidate = jwk2.crv === "P-521";
                break;
            }
          }
          return candidate;
        });
        const { 0: jwk, length: length2 } = candidates;
        if (length2 === 0) {
          throw new JWKSNoMatchingKey();
        }
        if (length2 !== 1) {
          const error = new JWKSMultipleMatchingKeys();
          const { _cached } = this;
          error[Symbol.asyncIterator] = async function* () {
            for (const jwk2 of candidates) {
              try {
                yield await importWithAlgCache(_cached, jwk2, alg);
              } catch {
              }
            }
          };
          throw error;
        }
        return importWithAlgCache(this._cached, jwk, alg);
      }
    };
  }
});

// node_modules/jose/dist/browser/runtime/fetch_jwks.js
var fetchJwks, fetch_jwks_default;
var init_fetch_jwks = __esm({
  "node_modules/jose/dist/browser/runtime/fetch_jwks.js"() {
    init_errors();
    fetchJwks = async (url, timeout, options) => {
      let controller;
      let id3;
      let timedOut = false;
      if (typeof AbortController === "function") {
        controller = new AbortController();
        id3 = setTimeout(() => {
          timedOut = true;
          controller.abort();
        }, timeout);
      }
      const response = await fetch(url.href, {
        signal: controller ? controller.signal : void 0,
        redirect: "manual",
        headers: options.headers
      }).catch((err) => {
        if (timedOut)
          throw new JWKSTimeout();
        throw err;
      });
      if (id3 !== void 0)
        clearTimeout(id3);
      if (response.status !== 200) {
        throw new JOSEError("Expected 200 OK from the JSON Web Key Set HTTP response");
      }
      try {
        return await response.json();
      } catch {
        throw new JOSEError("Failed to parse the JSON Web Key Set HTTP response as JSON");
      }
    };
    fetch_jwks_default = fetchJwks;
  }
});

// node_modules/jose/dist/browser/jwks/remote.js
function isCloudflareWorkers() {
  return typeof WebSocketPair !== "undefined" || typeof navigator !== "undefined" && navigator.userAgent === "Cloudflare-Workers" || typeof EdgeRuntime !== "undefined" && EdgeRuntime === "vercel";
}
function isFreshJwksCache(input, cacheMaxAge) {
  if (typeof input !== "object" || input === null) {
    return false;
  }
  if (!("uat" in input) || typeof input.uat !== "number" || Date.now() - input.uat >= cacheMaxAge) {
    return false;
  }
  if (!("jwks" in input) || !isObject(input.jwks) || !Array.isArray(input.jwks.keys) || !Array.prototype.every.call(input.jwks.keys, isObject)) {
    return false;
  }
  return true;
}
function createRemoteJWKSet(url, options) {
  const set = new RemoteJWKSet(url, options);
  const remoteJWKSet = async (protectedHeader, token) => set.getKey(protectedHeader, token);
  Object.defineProperties(remoteJWKSet, {
    coolingDown: {
      get: () => set.coolingDown(),
      enumerable: true,
      configurable: false
    },
    fresh: {
      get: () => set.fresh(),
      enumerable: true,
      configurable: false
    },
    reload: {
      value: () => set.reload(),
      enumerable: true,
      configurable: false,
      writable: false
    },
    reloading: {
      get: () => !!set._pendingFetch,
      enumerable: true,
      configurable: false
    },
    jwks: {
      value: () => set._local?.jwks(),
      enumerable: true,
      configurable: false,
      writable: false
    }
  });
  return remoteJWKSet;
}
var USER_AGENT, jwksCache, RemoteJWKSet, experimental_jwksCache;
var init_remote = __esm({
  "node_modules/jose/dist/browser/jwks/remote.js"() {
    init_fetch_jwks();
    init_errors();
    init_local();
    init_is_object();
    if (typeof navigator === "undefined" || !navigator.userAgent?.startsWith?.("Mozilla/5.0 ")) {
      const NAME = "jose";
      const VERSION = "v5.9.6";
      USER_AGENT = `${NAME}/${VERSION}`;
    }
    jwksCache = Symbol();
    RemoteJWKSet = class {
      constructor(url, options) {
        if (!(url instanceof URL)) {
          throw new TypeError("url must be an instance of URL");
        }
        this._url = new URL(url.href);
        this._options = { agent: options?.agent, headers: options?.headers };
        this._timeoutDuration = typeof options?.timeoutDuration === "number" ? options?.timeoutDuration : 5e3;
        this._cooldownDuration = typeof options?.cooldownDuration === "number" ? options?.cooldownDuration : 3e4;
        this._cacheMaxAge = typeof options?.cacheMaxAge === "number" ? options?.cacheMaxAge : 6e5;
        if (options?.[jwksCache] !== void 0) {
          this._cache = options?.[jwksCache];
          if (isFreshJwksCache(options?.[jwksCache], this._cacheMaxAge)) {
            this._jwksTimestamp = this._cache.uat;
            this._local = createLocalJWKSet(this._cache.jwks);
          }
        }
      }
      coolingDown() {
        return typeof this._jwksTimestamp === "number" ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;
      }
      fresh() {
        return typeof this._jwksTimestamp === "number" ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;
      }
      async getKey(protectedHeader, token) {
        if (!this._local || !this.fresh()) {
          await this.reload();
        }
        try {
          return await this._local(protectedHeader, token);
        } catch (err) {
          if (err instanceof JWKSNoMatchingKey) {
            if (this.coolingDown() === false) {
              await this.reload();
              return this._local(protectedHeader, token);
            }
          }
          throw err;
        }
      }
      async reload() {
        if (this._pendingFetch && isCloudflareWorkers()) {
          this._pendingFetch = void 0;
        }
        const headers = new Headers(this._options.headers);
        if (USER_AGENT && !headers.has("User-Agent")) {
          headers.set("User-Agent", USER_AGENT);
          this._options.headers = Object.fromEntries(headers.entries());
        }
        this._pendingFetch || (this._pendingFetch = fetch_jwks_default(this._url, this._timeoutDuration, this._options).then((json) => {
          this._local = createLocalJWKSet(json);
          if (this._cache) {
            this._cache.uat = Date.now();
            this._cache.jwks = json;
          }
          this._jwksTimestamp = Date.now();
          this._pendingFetch = void 0;
        }).catch((err) => {
          this._pendingFetch = void 0;
          throw err;
        }));
        await this._pendingFetch;
      }
    };
    experimental_jwksCache = jwksCache;
  }
});

// node_modules/jose/dist/browser/jwt/unsecured.js
var UnsecuredJWT;
var init_unsecured = __esm({
  "node_modules/jose/dist/browser/jwt/unsecured.js"() {
    init_base64url();
    init_buffer_utils();
    init_errors();
    init_jwt_claims_set();
    init_produce();
    UnsecuredJWT = class extends ProduceJWT {
      encode() {
        const header = encode2(JSON.stringify({ alg: "none" }));
        const payload = encode2(JSON.stringify(this._payload));
        return `${header}.${payload}.`;
      }
      static decode(jwt, options) {
        if (typeof jwt !== "string") {
          throw new JWTInvalid("Unsecured JWT must be a string");
        }
        const { 0: encodedHeader, 1: encodedPayload, 2: signature, length: length2 } = jwt.split(".");
        if (length2 !== 3 || signature !== "") {
          throw new JWTInvalid("Invalid Unsecured JWT");
        }
        let header;
        try {
          header = JSON.parse(decoder.decode(decode2(encodedHeader)));
          if (header.alg !== "none")
            throw new Error();
        } catch {
          throw new JWTInvalid("Invalid Unsecured JWT");
        }
        const payload = jwt_claims_set_default(header, decode2(encodedPayload), options);
        return { payload, header };
      }
    };
  }
});

// node_modules/jose/dist/browser/util/base64url.js
var base64url_exports2 = {};
__export(base64url_exports2, {
  decode: () => decode3,
  encode: () => encode3
});
var encode3, decode3;
var init_base64url2 = __esm({
  "node_modules/jose/dist/browser/util/base64url.js"() {
    init_base64url();
    encode3 = encode2;
    decode3 = decode2;
  }
});

// node_modules/jose/dist/browser/util/decode_protected_header.js
function decodeProtectedHeader(token) {
  let protectedB64u;
  if (typeof token === "string") {
    const parts = token.split(".");
    if (parts.length === 3 || parts.length === 5) {
      ;
      [protectedB64u] = parts;
    }
  } else if (typeof token === "object" && token) {
    if ("protected" in token) {
      protectedB64u = token.protected;
    } else {
      throw new TypeError("Token does not contain a Protected Header");
    }
  }
  try {
    if (typeof protectedB64u !== "string" || !protectedB64u) {
      throw new Error();
    }
    const result = JSON.parse(decoder.decode(decode3(protectedB64u)));
    if (!isObject(result)) {
      throw new Error();
    }
    return result;
  } catch {
    throw new TypeError("Invalid Token or Protected Header formatting");
  }
}
var init_decode_protected_header = __esm({
  "node_modules/jose/dist/browser/util/decode_protected_header.js"() {
    init_base64url2();
    init_buffer_utils();
    init_is_object();
  }
});

// node_modules/jose/dist/browser/util/decode_jwt.js
function decodeJwt(jwt) {
  if (typeof jwt !== "string")
    throw new JWTInvalid("JWTs must use Compact JWS serialization, JWT must be a string");
  const { 1: payload, length: length2 } = jwt.split(".");
  if (length2 === 5)
    throw new JWTInvalid("Only JWTs using Compact JWS serialization can be decoded");
  if (length2 !== 3)
    throw new JWTInvalid("Invalid JWT");
  if (!payload)
    throw new JWTInvalid("JWTs must contain a payload");
  let decoded;
  try {
    decoded = decode3(payload);
  } catch {
    throw new JWTInvalid("Failed to base64url decode the payload");
  }
  let result;
  try {
    result = JSON.parse(decoder.decode(decoded));
  } catch {
    throw new JWTInvalid("Failed to parse the decoded payload as JSON");
  }
  if (!isObject(result))
    throw new JWTInvalid("Invalid JWT Claims Set");
  return result;
}
var init_decode_jwt = __esm({
  "node_modules/jose/dist/browser/util/decode_jwt.js"() {
    init_base64url2();
    init_buffer_utils();
    init_is_object();
    init_errors();
  }
});

// node_modules/jose/dist/browser/runtime/generate.js
async function generateSecret(alg, options) {
  let length2;
  let algorithm;
  let keyUsages;
  switch (alg) {
    case "HS256":
    case "HS384":
    case "HS512":
      length2 = parseInt(alg.slice(-3), 10);
      algorithm = { name: "HMAC", hash: `SHA-${length2}`, length: length2 };
      keyUsages = ["sign", "verify"];
      break;
    case "A128CBC-HS256":
    case "A192CBC-HS384":
    case "A256CBC-HS512":
      length2 = parseInt(alg.slice(-3), 10);
      return random_default(new Uint8Array(length2 >> 3));
    case "A128KW":
    case "A192KW":
    case "A256KW":
      length2 = parseInt(alg.slice(1, 4), 10);
      algorithm = { name: "AES-KW", length: length2 };
      keyUsages = ["wrapKey", "unwrapKey"];
      break;
    case "A128GCMKW":
    case "A192GCMKW":
    case "A256GCMKW":
    case "A128GCM":
    case "A192GCM":
    case "A256GCM":
      length2 = parseInt(alg.slice(1, 4), 10);
      algorithm = { name: "AES-GCM", length: length2 };
      keyUsages = ["encrypt", "decrypt"];
      break;
    default:
      throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
  }
  return webcrypto_default.subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);
}
function getModulusLengthOption(options) {
  const modulusLength = options?.modulusLength ?? 2048;
  if (typeof modulusLength !== "number" || modulusLength < 2048) {
    throw new JOSENotSupported("Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used");
  }
  return modulusLength;
}
async function generateKeyPair(alg, options) {
  let algorithm;
  let keyUsages;
  switch (alg) {
    case "PS256":
    case "PS384":
    case "PS512":
      algorithm = {
        name: "RSA-PSS",
        hash: `SHA-${alg.slice(-3)}`,
        publicExponent: new Uint8Array([1, 0, 1]),
        modulusLength: getModulusLengthOption(options)
      };
      keyUsages = ["sign", "verify"];
      break;
    case "RS256":
    case "RS384":
    case "RS512":
      algorithm = {
        name: "RSASSA-PKCS1-v1_5",
        hash: `SHA-${alg.slice(-3)}`,
        publicExponent: new Uint8Array([1, 0, 1]),
        modulusLength: getModulusLengthOption(options)
      };
      keyUsages = ["sign", "verify"];
      break;
    case "RSA-OAEP":
    case "RSA-OAEP-256":
    case "RSA-OAEP-384":
    case "RSA-OAEP-512":
      algorithm = {
        name: "RSA-OAEP",
        hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,
        publicExponent: new Uint8Array([1, 0, 1]),
        modulusLength: getModulusLengthOption(options)
      };
      keyUsages = ["decrypt", "unwrapKey", "encrypt", "wrapKey"];
      break;
    case "ES256":
      algorithm = { name: "ECDSA", namedCurve: "P-256" };
      keyUsages = ["sign", "verify"];
      break;
    case "ES384":
      algorithm = { name: "ECDSA", namedCurve: "P-384" };
      keyUsages = ["sign", "verify"];
      break;
    case "ES512":
      algorithm = { name: "ECDSA", namedCurve: "P-521" };
      keyUsages = ["sign", "verify"];
      break;
    case "EdDSA": {
      keyUsages = ["sign", "verify"];
      const crv = options?.crv ?? "Ed25519";
      switch (crv) {
        case "Ed25519":
        case "Ed448":
          algorithm = { name: crv };
          break;
        default:
          throw new JOSENotSupported("Invalid or unsupported crv option provided");
      }
      break;
    }
    case "ECDH-ES":
    case "ECDH-ES+A128KW":
    case "ECDH-ES+A192KW":
    case "ECDH-ES+A256KW": {
      keyUsages = ["deriveKey", "deriveBits"];
      const crv = options?.crv ?? "P-256";
      switch (crv) {
        case "P-256":
        case "P-384":
        case "P-521": {
          algorithm = { name: "ECDH", namedCurve: crv };
          break;
        }
        case "X25519":
        case "X448":
          algorithm = { name: crv };
          break;
        default:
          throw new JOSENotSupported("Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448");
      }
      break;
    }
    default:
      throw new JOSENotSupported('Invalid or unsupported JWK "alg" (Algorithm) Parameter value');
  }
  return webcrypto_default.subtle.generateKey(algorithm, options?.extractable ?? false, keyUsages);
}
var init_generate = __esm({
  "node_modules/jose/dist/browser/runtime/generate.js"() {
    init_webcrypto();
    init_errors();
    init_random();
  }
});

// node_modules/jose/dist/browser/key/generate_key_pair.js
async function generateKeyPair2(alg, options) {
  return generateKeyPair(alg, options);
}
var init_generate_key_pair = __esm({
  "node_modules/jose/dist/browser/key/generate_key_pair.js"() {
    init_generate();
  }
});

// node_modules/jose/dist/browser/key/generate_secret.js
async function generateSecret2(alg, options) {
  return generateSecret(alg, options);
}
var init_generate_secret = __esm({
  "node_modules/jose/dist/browser/key/generate_secret.js"() {
    init_generate();
  }
});

// node_modules/jose/dist/browser/runtime/runtime.js
var runtime_default;
var init_runtime = __esm({
  "node_modules/jose/dist/browser/runtime/runtime.js"() {
    runtime_default = "WebCryptoAPI";
  }
});

// node_modules/jose/dist/browser/util/runtime.js
var runtime_default2;
var init_runtime2 = __esm({
  "node_modules/jose/dist/browser/util/runtime.js"() {
    init_runtime();
    runtime_default2 = runtime_default;
  }
});

// node_modules/jose/dist/browser/index.js
var browser_exports = {};
__export(browser_exports, {
  CompactEncrypt: () => CompactEncrypt,
  CompactSign: () => CompactSign,
  EmbeddedJWK: () => EmbeddedJWK,
  EncryptJWT: () => EncryptJWT,
  FlattenedEncrypt: () => FlattenedEncrypt,
  FlattenedSign: () => FlattenedSign,
  GeneralEncrypt: () => GeneralEncrypt,
  GeneralSign: () => GeneralSign,
  SignJWT: () => SignJWT,
  UnsecuredJWT: () => UnsecuredJWT,
  base64url: () => base64url_exports2,
  calculateJwkThumbprint: () => calculateJwkThumbprint,
  calculateJwkThumbprintUri: () => calculateJwkThumbprintUri,
  compactDecrypt: () => compactDecrypt,
  compactVerify: () => compactVerify,
  createLocalJWKSet: () => createLocalJWKSet,
  createRemoteJWKSet: () => createRemoteJWKSet,
  cryptoRuntime: () => runtime_default2,
  decodeJwt: () => decodeJwt,
  decodeProtectedHeader: () => decodeProtectedHeader,
  errors: () => errors_exports,
  experimental_jwksCache: () => experimental_jwksCache,
  exportJWK: () => exportJWK,
  exportPKCS8: () => exportPKCS8,
  exportSPKI: () => exportSPKI,
  flattenedDecrypt: () => flattenedDecrypt,
  flattenedVerify: () => flattenedVerify,
  generalDecrypt: () => generalDecrypt,
  generalVerify: () => generalVerify,
  generateKeyPair: () => generateKeyPair2,
  generateSecret: () => generateSecret2,
  importJWK: () => importJWK,
  importPKCS8: () => importPKCS8,
  importSPKI: () => importSPKI,
  importX509: () => importX509,
  jwksCache: () => jwksCache,
  jwtDecrypt: () => jwtDecrypt,
  jwtVerify: () => jwtVerify
});
var init_browser = __esm({
  "node_modules/jose/dist/browser/index.js"() {
    init_decrypt3();
    init_decrypt2();
    init_decrypt4();
    init_encrypt3();
    init_verify3();
    init_verify2();
    init_verify4();
    init_verify5();
    init_decrypt5();
    init_encrypt4();
    init_encrypt2();
    init_sign3();
    init_sign2();
    init_sign4();
    init_sign5();
    init_encrypt5();
    init_thumbprint();
    init_embedded();
    init_local();
    init_remote();
    init_unsecured();
    init_export();
    init_import();
    init_decode_protected_header();
    init_decode_jwt();
    init_errors();
    init_generate_key_pair();
    init_generate_secret();
    init_base64url2();
    init_runtime2();
  }
});

// node_modules/@atproto/jwk-jose/dist/util.js
var require_util3 = __commonJS({
  "node_modules/@atproto/jwk-jose/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.either = either;
    function either(a4, b3) {
      if (a4 != null && b3 != null && a4 !== b3) {
        throw new TypeError(`Expected "${b3}", got "${a4}"`);
      }
      return a4 ?? b3 ?? void 0;
    }
  }
});

// node_modules/@atproto/jwk-jose/dist/jose-key.js
var require_jose_key = __commonJS({
  "node_modules/@atproto/jwk-jose/dist/jose-key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JoseKey = void 0;
    var jwk_1 = require_dist();
    var jose_1 = (init_browser(), __toCommonJS(browser_exports));
    var util_1 = require_util3();
    var { JOSEError: JOSEError2 } = jose_1.errors;
    var JoseKey = class _JoseKey extends jwk_1.Key {
      /**
       * Some runtimes (e.g. Bun) require an `alg` second argument to be set when
       * invoking `importJWK`. In order to be compatible with these runtimes, we
       * provide the following method to ensure the `alg` is always set. We also
       * take the opportunity to ensure that the `alg` is compatible with this key.
       */
      async getKeyObj(alg) {
        if (!this.algorithms.includes(alg)) {
          throw new jwk_1.JwkError(`Key cannot be used with algorithm "${alg}"`);
        }
        try {
          return await (0, jose_1.importJWK)(this.jwk, alg);
        } catch (cause) {
          throw new jwk_1.JwkError("Failed to import JWK", void 0, { cause });
        }
      }
      async createJwt(header, payload) {
        try {
          const { kid } = header;
          if (kid && kid !== this.kid) {
            throw new jwk_1.JwtCreateError(`Invalid "kid" (${kid}) used to sign with key "${this.kid}"`);
          }
          const { alg } = header;
          if (!alg) {
            throw new jwk_1.JwtCreateError('Missing "alg" in JWT header');
          }
          const keyObj = await this.getKeyObj(alg);
          const jwtBuilder = new jose_1.SignJWT(payload).setProtectedHeader({
            ...header,
            alg,
            kid: this.kid
          });
          const signedJwt = await jwtBuilder.sign(keyObj);
          return signedJwt;
        } catch (cause) {
          if (cause instanceof JOSEError2) {
            throw new jwk_1.JwtCreateError(cause.message, cause.code, { cause });
          } else {
            throw jwk_1.JwtCreateError.from(cause);
          }
        }
      }
      async verifyJwt(token, options) {
        try {
          const result = await (0, jose_1.jwtVerify)(token, async ({ alg }) => this.getKeyObj(alg), { ...options, algorithms: this.algorithms });
          const headerParsed = jwk_1.jwtHeaderSchema.safeParse(result.protectedHeader);
          if (!headerParsed.success) {
            throw new jwk_1.JwtVerifyError("Invalid JWT header", void 0, {
              cause: headerParsed.error
            });
          }
          const payloadParsed = jwk_1.jwtPayloadSchema.safeParse(result.payload);
          if (!payloadParsed.success) {
            throw new jwk_1.JwtVerifyError("Invalid JWT payload", void 0, {
              cause: payloadParsed.error
            });
          }
          return {
            protectedHeader: headerParsed.data,
            // "requiredClaims" enforced by jwtVerify()
            payload: payloadParsed.data
          };
        } catch (cause) {
          if (cause instanceof JOSEError2) {
            throw new jwk_1.JwtVerifyError(cause.message, cause.code, { cause });
          } else {
            throw jwk_1.JwtVerifyError.from(cause);
          }
        }
      }
      static async generateKeyPair(allowedAlgos = ["ES256"], options) {
        if (!allowedAlgos.length) {
          throw new jwk_1.JwkError("No algorithms provided for key generation");
        }
        const errors = [];
        for (const alg of allowedAlgos) {
          try {
            return await (0, jose_1.generateKeyPair)(alg, options);
          } catch (err) {
            errors.push(err);
          }
        }
        throw new jwk_1.JwkError("Failed to generate key pair", void 0, {
          cause: new AggregateError(errors, "None of the algorithms worked")
        });
      }
      static async generate(allowedAlgos = ["ES256"], kid, options) {
        const kp = await this.generateKeyPair(allowedAlgos, {
          ...options,
          extractable: true
        });
        return this.fromImportable(kp.privateKey, kid);
      }
      static async fromImportable(input, kid) {
        if (typeof input === "string") {
          if (input.startsWith("-----")) {
            return this.fromPKCS8(input, "", kid);
          }
          if (input.startsWith("{")) {
            return this.fromJWK(input, kid);
          }
          throw new jwk_1.JwkError("Invalid input");
        }
        if (typeof input === "object") {
          if ("kty" in input || "alg" in input) {
            return this.fromJWK(input, kid);
          }
          return this.fromKeyLike(input, kid);
        }
        throw new jwk_1.JwkError("Invalid input");
      }
      /**
       * @see {@link exportJWK}
       */
      static async fromKeyLike(keyLike, kid, alg) {
        const jwk = await (0, jose_1.exportJWK)(keyLike);
        if (alg) {
          if (!jwk.alg)
            jwk.alg = alg;
          else if (jwk.alg !== alg)
            throw new jwk_1.JwkError('Invalid "alg" in JWK');
        }
        return this.fromJWK(jwk, kid);
      }
      /**
       * @see {@link importPKCS8}
       */
      static async fromPKCS8(pem, alg, kid) {
        const keyLike = await (0, jose_1.importPKCS8)(pem, alg, { extractable: true });
        return this.fromKeyLike(keyLike, kid);
      }
      static async fromJWK(input, inputKid) {
        const jwk = typeof input === "string" ? JSON.parse(input) : input;
        if (!jwk || typeof jwk !== "object")
          throw new jwk_1.JwkError("Invalid JWK");
        const kid = (0, util_1.either)(jwk.kid, inputKid);
        const use = jwk.use || "sig";
        return new _JoseKey(jwk_1.jwkValidator.parse({ ...jwk, kid, use }));
      }
    };
    exports.JoseKey = JoseKey;
  }
});

// node_modules/@atproto/jwk-jose/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@atproto/jwk-jose/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_jose_key(), exports);
  }
});

// node_modules/@atproto/jwk-webcrypto/dist/util.js
var require_util4 = __commonJS({
  "node_modules/@atproto/jwk-webcrypto/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toSubtleAlgorithm = toSubtleAlgorithm;
    exports.fromSubtleAlgorithm = fromSubtleAlgorithm;
    exports.isCryptoKeyPair = isCryptoKeyPair;
    function toSubtleAlgorithm(alg, crv, options) {
      switch (alg) {
        case "PS256":
        case "PS384":
        case "PS512":
          return {
            name: "RSA-PSS",
            hash: `SHA-${alg.slice(-3)}`,
            modulusLength: options?.modulusLength ?? 2048,
            publicExponent: new Uint8Array([1, 0, 1])
          };
        case "RS256":
        case "RS384":
        case "RS512":
          return {
            name: "RSASSA-PKCS1-v1_5",
            hash: `SHA-${alg.slice(-3)}`,
            modulusLength: options?.modulusLength ?? 2048,
            publicExponent: new Uint8Array([1, 0, 1])
          };
        case "ES256":
        case "ES384":
          return {
            name: "ECDSA",
            namedCurve: `P-${alg.slice(-3)}`
          };
        case "ES512":
          return {
            name: "ECDSA",
            namedCurve: "P-521"
          };
        default:
          throw new TypeError(`Unsupported alg "${alg}"`);
      }
    }
    function fromSubtleAlgorithm(algorithm) {
      switch (algorithm.name) {
        case "RSA-PSS":
        case "RSASSA-PKCS1-v1_5": {
          const hash = algorithm.hash.name;
          switch (hash) {
            case "SHA-256":
            case "SHA-384":
            case "SHA-512": {
              const prefix = algorithm.name === "RSA-PSS" ? "PS" : "RS";
              return `${prefix}${hash.slice(-3)}`;
            }
            default:
              throw new TypeError("unsupported RsaHashedKeyAlgorithm hash");
          }
        }
        case "ECDSA": {
          const namedCurve = algorithm.namedCurve;
          switch (namedCurve) {
            case "P-256":
            case "P-384":
            case "P-512":
              return `ES${namedCurve.slice(-3)}`;
            case "P-521":
              return "ES512";
            default:
              throw new TypeError("unsupported EcKeyAlgorithm namedCurve");
          }
        }
        case "Ed448":
        case "Ed25519":
          return "EdDSA";
        default:
          throw new TypeError(`Unexpected algorithm "${algorithm.name}"`);
      }
    }
    function isCryptoKeyPair(v2, extractable) {
      return typeof v2 === "object" && v2 !== null && "privateKey" in v2 && v2.privateKey instanceof CryptoKey && v2.privateKey.type === "private" && (extractable == null || v2.privateKey.extractable === extractable) && v2.privateKey.usages.includes("sign") && "publicKey" in v2 && v2.publicKey instanceof CryptoKey && v2.publicKey.type === "public" && v2.publicKey.extractable === true && v2.publicKey.usages.includes("verify");
    }
  }
});

// node_modules/@atproto/jwk-webcrypto/dist/webcrypto-key.js
var require_webcrypto_key = __commonJS({
  "node_modules/@atproto/jwk-webcrypto/dist/webcrypto-key.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebcryptoKey = exports.jwkWithAlgSchema = void 0;
    var jwk_1 = require_dist();
    var jwk_jose_1 = require_dist2();
    var zod_1 = __importDefault(require_lib2());
    var util_js_1 = require_util4();
    exports.jwkWithAlgSchema = zod_1.default.intersection(jwk_1.jwkSchema, zod_1.default.object({ alg: zod_1.default.string() }));
    var WebcryptoKey = class _WebcryptoKey extends jwk_jose_1.JoseKey {
      // We need to override the static method generate from JoseKey because
      // the browser needs both the private and public keys
      static async generate(allowedAlgos = ["ES256"], kid = crypto.randomUUID(), options) {
        const keyPair = await this.generateKeyPair(allowedAlgos, options);
        if (!(0, util_js_1.isCryptoKeyPair)(keyPair)) {
          throw new TypeError("Invalid CryptoKeyPair");
        }
        return this.fromKeypair(keyPair, kid);
      }
      static async fromKeypair(cryptoKeyPair, kid) {
        const { key_ops, use, alg = (0, util_js_1.fromSubtleAlgorithm)(cryptoKeyPair.privateKey.algorithm), ...jwk } = await crypto.subtle.exportKey("jwk", cryptoKeyPair.privateKey.extractable ? cryptoKeyPair.privateKey : cryptoKeyPair.publicKey);
        if (use && use !== "sig") {
          throw new TypeError(`Unsupported JWK use "${use}"`);
        }
        if (key_ops && !key_ops.some((o13) => o13 === "sign" || o13 === "verify")) {
          throw new TypeError(`Invalid key_ops "${key_ops}" for "sig" use`);
        }
        return new _WebcryptoKey(exports.jwkWithAlgSchema.parse({ ...jwk, kid, alg, use: "sig" }), cryptoKeyPair);
      }
      constructor(jwk, cryptoKeyPair) {
        super(jwk);
        Object.defineProperty(this, "cryptoKeyPair", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: cryptoKeyPair
        });
      }
      get isPrivate() {
        return true;
      }
      get privateJwk() {
        if (super.isPrivate)
          return this.jwk;
        throw new Error("Private Webcrypto Key not exportable");
      }
      async getKeyObj(alg) {
        if (this.jwk.alg !== alg) {
          throw new jwk_1.JwkError(`Key cannot be used with algorithm "${alg}"`);
        }
        return this.cryptoKeyPair.privateKey;
      }
    };
    exports.WebcryptoKey = WebcryptoKey;
  }
});

// node_modules/@atproto/jwk-webcrypto/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@atproto/jwk-webcrypto/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_webcrypto_key(), exports);
  }
});

// node_modules/@atproto/did/dist/did-error.js
var require_did_error = __commonJS({
  "node_modules/@atproto/did/dist/did-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidDidError = exports.DidError = void 0;
    var DidError = class _DidError extends Error {
      constructor(did, message2, code2, status = 400, cause) {
        super(message2, { cause });
        Object.defineProperty(this, "did", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: did
        });
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: code2
        });
        Object.defineProperty(this, "status", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: status
        });
      }
      /**
       * For compatibility with error handlers in common HTTP frameworks.
       */
      get statusCode() {
        return this.status;
      }
      toString() {
        return `${this.constructor.name} ${this.code} (${this.did}): ${this.message}`;
      }
      static from(cause, did) {
        if (cause instanceof _DidError) {
          return cause;
        }
        const message2 = cause instanceof Error ? cause.message : typeof cause === "string" ? cause : "An unknown error occurred";
        const status = (typeof cause?.["statusCode"] === "number" ? cause["statusCode"] : void 0) ?? (typeof cause?.["status"] === "number" ? cause["status"] : void 0);
        return new _DidError(did, message2, "did-unknown-error", status, cause);
      }
    };
    exports.DidError = DidError;
    var InvalidDidError = class extends DidError {
      constructor(did, message2, cause) {
        super(did, message2, "did-invalid", 400, cause);
      }
    };
    exports.InvalidDidError = InvalidDidError;
  }
});

// node_modules/@atproto/did/dist/methods/plc.js
var require_plc = __commonJS({
  "node_modules/@atproto/did/dist/methods/plc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DID_PLC_PREFIX = void 0;
    exports.isDidPlc = isDidPlc;
    exports.asDidPlc = asDidPlc;
    exports.assertDidPlc = assertDidPlc;
    var did_error_js_1 = require_did_error();
    var DID_PLC_PREFIX = `did:plc:`;
    exports.DID_PLC_PREFIX = DID_PLC_PREFIX;
    var DID_PLC_PREFIX_LENGTH = DID_PLC_PREFIX.length;
    var DID_PLC_LENGTH = 32;
    function isDidPlc(input) {
      if (typeof input !== "string")
        return false;
      if (input.length !== DID_PLC_LENGTH)
        return false;
      if (!input.startsWith(DID_PLC_PREFIX))
        return false;
      for (let i9 = DID_PLC_PREFIX_LENGTH; i9 < DID_PLC_LENGTH; i9++) {
        if (!isBase32Char(input.charCodeAt(i9)))
          return false;
      }
      return true;
    }
    function asDidPlc(input) {
      assertDidPlc(input);
      return input;
    }
    function assertDidPlc(input) {
      if (typeof input !== "string") {
        throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
      }
      if (input.length !== DID_PLC_LENGTH) {
        throw new did_error_js_1.InvalidDidError(input, `did:plc must be ${DID_PLC_LENGTH} characters long`);
      }
      if (!input.startsWith(DID_PLC_PREFIX)) {
        throw new did_error_js_1.InvalidDidError(input, `Invalid did:plc prefix`);
      }
      for (let i9 = DID_PLC_PREFIX_LENGTH; i9 < DID_PLC_LENGTH; i9++) {
        if (!isBase32Char(input.charCodeAt(i9))) {
          throw new did_error_js_1.InvalidDidError(input, `Invalid character at position ${i9}`);
        }
      }
    }
    var isBase32Char = (c6) => c6 >= 97 && c6 <= 122 || c6 >= 50 && c6 <= 55;
  }
});

// node_modules/@atproto/did/dist/did.js
var require_did = __commonJS({
  "node_modules/@atproto/did/dist/did.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.didSchema = exports.DID_PREFIX = void 0;
    exports.assertDidMethod = assertDidMethod;
    exports.extractDidMethod = extractDidMethod;
    exports.assertDidMsid = assertDidMsid;
    exports.assertDid = assertDid;
    exports.isDid = isDid;
    exports.asDid = asDid;
    var zod_1 = require_lib2();
    var did_error_js_1 = require_did_error();
    var DID_PREFIX = "did:";
    exports.DID_PREFIX = DID_PREFIX;
    var DID_PREFIX_LENGTH = DID_PREFIX.length;
    function assertDidMethod(input, start = 0, end = input.length) {
      if (!Number.isFinite(end) || !Number.isFinite(start) || end < start || end > input.length) {
        throw new TypeError("Invalid start or end position");
      }
      if (end === start) {
        throw new did_error_js_1.InvalidDidError(input, `Empty method name`);
      }
      let c6;
      for (let i9 = start; i9 < end; i9++) {
        c6 = input.charCodeAt(i9);
        if ((c6 < 97 || c6 > 122) && // a-z
        (c6 < 48 || c6 > 57)) {
          throw new did_error_js_1.InvalidDidError(input, `Invalid character at position ${i9} in DID method name`);
        }
      }
    }
    function extractDidMethod(did) {
      const msidSep = did.indexOf(":", DID_PREFIX_LENGTH);
      const method = did.slice(DID_PREFIX_LENGTH, msidSep);
      return method;
    }
    function assertDidMsid(input, start = 0, end = input.length) {
      if (!Number.isFinite(end) || !Number.isFinite(start) || end < start || end > input.length) {
        throw new TypeError("Invalid start or end position");
      }
      if (end === start) {
        throw new did_error_js_1.InvalidDidError(input, `DID method-specific id must not be empty`);
      }
      let c6;
      for (let i9 = start; i9 < end; i9++) {
        c6 = input.charCodeAt(i9);
        if ((c6 < 97 || c6 > 122) && // a-z
        (c6 < 65 || c6 > 90) && // A-Z
        (c6 < 48 || c6 > 57) && // 0-9
        c6 !== 46 && // .
        c6 !== 45 && // -
        c6 !== 95) {
          if (c6 === 58) {
            if (i9 === end - 1) {
              throw new did_error_js_1.InvalidDidError(input, `DID cannot end with ":"`);
            }
            continue;
          }
          if (c6 === 37) {
            c6 = input.charCodeAt(++i9);
            if ((c6 < 48 || c6 > 57) && (c6 < 65 || c6 > 70)) {
              throw new did_error_js_1.InvalidDidError(input, `Invalid pct-encoded character at position ${i9}`);
            }
            c6 = input.charCodeAt(++i9);
            if ((c6 < 48 || c6 > 57) && (c6 < 65 || c6 > 70)) {
              throw new did_error_js_1.InvalidDidError(input, `Invalid pct-encoded character at position ${i9}`);
            }
            if (i9 >= end) {
              throw new did_error_js_1.InvalidDidError(input, `Incomplete pct-encoded character at position ${i9 - 2}`);
            }
            continue;
          }
          throw new did_error_js_1.InvalidDidError(input, `Disallowed character in DID at position ${i9}`);
        }
      }
    }
    function assertDid(input) {
      if (typeof input !== "string") {
        throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
      }
      const { length: length2 } = input;
      if (length2 > 2048) {
        throw new did_error_js_1.InvalidDidError(input, `DID is too long (2048 chars max)`);
      }
      if (!input.startsWith(DID_PREFIX)) {
        throw new did_error_js_1.InvalidDidError(input, `DID requires "${DID_PREFIX}" prefix`);
      }
      const idSep = input.indexOf(":", DID_PREFIX_LENGTH);
      if (idSep === -1) {
        throw new did_error_js_1.InvalidDidError(input, `Missing colon after method name`);
      }
      assertDidMethod(input, DID_PREFIX_LENGTH, idSep);
      assertDidMsid(input, idSep + 1, length2);
    }
    function isDid(input) {
      try {
        assertDid(input);
        return true;
      } catch (err) {
        if (err instanceof did_error_js_1.DidError) {
          return false;
        }
        throw err;
      }
    }
    function asDid(input) {
      assertDid(input);
      return input;
    }
    exports.didSchema = zod_1.z.string().superRefine((value, ctx) => {
      try {
        assertDid(value);
        return true;
      } catch (err) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: err instanceof Error ? err.message : "Unexpected error"
        });
        return false;
      }
    });
  }
});

// node_modules/@atproto/did/dist/methods/web.js
var require_web = __commonJS({
  "node_modules/@atproto/did/dist/methods/web.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DID_WEB_PREFIX = void 0;
    exports.isDidWeb = isDidWeb;
    exports.asDidWeb = asDidWeb;
    exports.assertDidWeb = assertDidWeb;
    exports.didWebToUrl = didWebToUrl;
    exports.urlToDidWeb = urlToDidWeb;
    var did_error_js_1 = require_did_error();
    var did_js_1 = require_did();
    exports.DID_WEB_PREFIX = `did:web:`;
    function isDidWeb(input) {
      if (typeof input !== "string")
        return false;
      try {
        assertDidWeb(input);
        return true;
      } catch {
        return false;
      }
    }
    function asDidWeb(input) {
      assertDidWeb(input);
      return input;
    }
    function assertDidWeb(input) {
      if (typeof input !== "string") {
        throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
      }
      void didWebToUrl(input);
    }
    function didWebToUrl(did) {
      if (!did.startsWith(exports.DID_WEB_PREFIX)) {
        throw new did_error_js_1.InvalidDidError(did, `did:web must start with ${exports.DID_WEB_PREFIX}`);
      }
      if (did.charAt(exports.DID_WEB_PREFIX.length) === ":") {
        throw new did_error_js_1.InvalidDidError(did, "did:web MSID must not start with a colon");
      }
      (0, did_js_1.assertDidMsid)(did, exports.DID_WEB_PREFIX.length);
      try {
        const msid = did.slice(exports.DID_WEB_PREFIX.length);
        const parts = msid.split(":").map(decodeURIComponent);
        const url = new URL(`https://${parts.join("/")}`);
        if (url.hostname === "localhost") {
          url.protocol = "http:";
        }
        return url;
      } catch (cause) {
        throw new did_error_js_1.InvalidDidError(did, "Invalid Web DID", cause);
      }
    }
    function urlToDidWeb(url) {
      const path = url.pathname === "/" ? "" : url.pathname.slice(1).split("/").map(encodeURIComponent).join(":");
      return `did:web:${encodeURIComponent(url.host)}${path ? `:${path}` : ""}`;
    }
  }
});

// node_modules/@atproto/did/dist/methods.js
var require_methods = __commonJS({
  "node_modules/@atproto/did/dist/methods.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_plc(), exports);
    __exportStar(require_web(), exports);
  }
});

// node_modules/@atproto/did/dist/atproto.js
var require_atproto = __commonJS({
  "node_modules/@atproto/did/dist/atproto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.atprotoDidSchema = void 0;
    exports.isAtprotoDid = isAtprotoDid;
    exports.asAtprotoDid = asAtprotoDid;
    exports.assertAtprotoDid = assertAtprotoDid;
    exports.assertAtprotoDidWeb = assertAtprotoDidWeb;
    exports.isAtprotoDidWeb = isAtprotoDidWeb;
    var zod_1 = require_lib2();
    var did_error_js_1 = require_did_error();
    var methods_js_1 = require_methods();
    exports.atprotoDidSchema = zod_1.z.string().refine(isAtprotoDid, `Atproto only allows "plc" and "web" DID methods`);
    function isAtprotoDid(input) {
      if (typeof input !== "string") {
        return false;
      } else if (input.startsWith(methods_js_1.DID_PLC_PREFIX)) {
        return (0, methods_js_1.isDidPlc)(input);
      } else if (input.startsWith(methods_js_1.DID_WEB_PREFIX)) {
        return isAtprotoDidWeb(input);
      } else {
        return false;
      }
    }
    function asAtprotoDid(input) {
      assertAtprotoDid(input);
      return input;
    }
    function assertAtprotoDid(input) {
      if (typeof input !== "string") {
        throw new did_error_js_1.InvalidDidError(typeof input, `DID must be a string`);
      } else if (input.startsWith(methods_js_1.DID_PLC_PREFIX)) {
        (0, methods_js_1.assertDidPlc)(input);
      } else if (input.startsWith(methods_js_1.DID_WEB_PREFIX)) {
        assertAtprotoDidWeb(input);
      } else {
        throw new did_error_js_1.InvalidDidError(input, `Atproto only allows "plc" and "web" DID methods`);
      }
    }
    function assertAtprotoDidWeb(input) {
      (0, methods_js_1.assertDidWeb)(input);
      if (input.includes(":", methods_js_1.DID_WEB_PREFIX.length)) {
        throw new did_error_js_1.InvalidDidError(input, `Atproto does not allow path components in Web DIDs`);
      }
      if (input.includes("%3A", methods_js_1.DID_WEB_PREFIX.length) && !input.startsWith("did:web:localhost%3A")) {
        throw new did_error_js_1.InvalidDidError(input, `Atproto does not allow port numbers in Web DIDs, except for localhost`);
      }
    }
    function isAtprotoDidWeb(input) {
      try {
        assertAtprotoDidWeb(input);
        return true;
      } catch {
        return false;
      }
    }
  }
});

// node_modules/@atproto/did/dist/did-document.js
var require_did_document = __commonJS({
  "node_modules/@atproto/did/dist/did-document.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.didDocumentValidator = exports.didDocumentSchema = void 0;
    var zod_1 = require_lib2();
    var did_js_1 = require_did();
    var rfc3968UriSchema = zod_1.z.string().refine((data) => {
      try {
        new URL(data);
        return true;
      } catch {
        return false;
      }
    }, "RFC3968 compliant URI");
    var didControllerSchema = zod_1.z.union([did_js_1.didSchema, zod_1.z.array(did_js_1.didSchema)]);
    var didRelativeUriSchema = zod_1.z.union([
      rfc3968UriSchema,
      zod_1.z.string().regex(/^#[^#]+$/)
    ]);
    var didVerificationMethodSchema = zod_1.z.object({
      id: didRelativeUriSchema,
      type: zod_1.z.string().min(1),
      controller: didControllerSchema,
      publicKeyJwk: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()).optional(),
      publicKeyMultibase: zod_1.z.string().optional()
    });
    var didServiceIdSchema = didRelativeUriSchema;
    var didServiceTypeSchema = zod_1.z.union([zod_1.z.string(), zod_1.z.array(zod_1.z.string())]);
    var didServiceEndpointSchema = zod_1.z.union([
      rfc3968UriSchema,
      zod_1.z.record(zod_1.z.string(), rfc3968UriSchema),
      zod_1.z.array(zod_1.z.union([rfc3968UriSchema, zod_1.z.record(zod_1.z.string(), rfc3968UriSchema)])).nonempty()
    ]);
    var didServiceSchema = zod_1.z.object({
      id: didServiceIdSchema,
      type: didServiceTypeSchema,
      serviceEndpoint: didServiceEndpointSchema
    });
    var didAuthenticationSchema = zod_1.z.union([
      //
      didRelativeUriSchema,
      didVerificationMethodSchema
    ]);
    exports.didDocumentSchema = zod_1.z.object({
      "@context": zod_1.z.union([
        zod_1.z.literal("https://www.w3.org/ns/did/v1"),
        zod_1.z.array(zod_1.z.string().url()).nonempty().refine((data) => data[0] === "https://www.w3.org/ns/did/v1", {
          message: "First @context must be https://www.w3.org/ns/did/v1"
        })
      ]),
      id: did_js_1.didSchema,
      controller: didControllerSchema.optional(),
      alsoKnownAs: zod_1.z.array(rfc3968UriSchema).optional(),
      service: zod_1.z.array(didServiceSchema).optional(),
      authentication: zod_1.z.array(didAuthenticationSchema).optional(),
      verificationMethod: zod_1.z.array(zod_1.z.union([didVerificationMethodSchema, didRelativeUriSchema])).optional()
    });
    exports.didDocumentValidator = exports.didDocumentSchema.superRefine(({ id: did, service }, ctx) => {
      if (service) {
        const visited = /* @__PURE__ */ new Set();
        for (let i9 = 0; i9 < service.length; i9++) {
          const current = service[i9];
          const serviceId = current.id.startsWith("#") ? `${did}${current.id}` : current.id;
          if (!visited.has(serviceId)) {
            visited.add(serviceId);
          } else {
            ctx.addIssue({
              code: zod_1.z.ZodIssueCode.custom,
              message: `Duplicate service id (${current.id}) found in the document`,
              path: ["service", i9, "id"]
            });
          }
        }
      }
    });
  }
});

// node_modules/@atproto/did/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/@atproto/did/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_atproto(), exports);
    __exportStar(require_did_document(), exports);
    __exportStar(require_did_error(), exports);
    __exportStar(require_did(), exports);
    __exportStar(require_methods(), exports);
  }
});

// node_modules/lru-cache/dist/commonjs/index.js
var require_commonjs = __commonJS({
  "node_modules/lru-cache/dist/commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LRUCache = void 0;
    var perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
    var warned = /* @__PURE__ */ new Set();
    var PROCESS = typeof process === "object" && !!process ? process : {};
    var emitWarning = (msg, type, code2, fn) => {
      typeof PROCESS.emitWarning === "function" ? PROCESS.emitWarning(msg, type, code2, fn) : console.error(`[${code2}] ${type}: ${msg}`);
    };
    var AC = globalThis.AbortController;
    var AS = globalThis.AbortSignal;
    if (typeof AC === "undefined") {
      AS = class AbortSignal {
        onabort;
        _onabort = [];
        reason;
        aborted = false;
        addEventListener(_2, fn) {
          this._onabort.push(fn);
        }
      };
      AC = class AbortController {
        constructor() {
          warnACPolyfill();
        }
        signal = new AS();
        abort(reason) {
          if (this.signal.aborted)
            return;
          this.signal.reason = reason;
          this.signal.aborted = true;
          for (const fn of this.signal._onabort) {
            fn(reason);
          }
          this.signal.onabort?.(reason);
        }
      };
      let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== "1";
      const warnACPolyfill = () => {
        if (!printACPolyfillWarning)
          return;
        printACPolyfillWarning = false;
        emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", warnACPolyfill);
      };
    }
    var shouldWarn = (code2) => !warned.has(code2);
    var TYPE = Symbol("type");
    var isPosInt = (n10) => n10 && n10 === Math.floor(n10) && n10 > 0 && isFinite(n10);
    var getUintArray = (max2) => !isPosInt(max2) ? null : max2 <= Math.pow(2, 8) ? Uint8Array : max2 <= Math.pow(2, 16) ? Uint16Array : max2 <= Math.pow(2, 32) ? Uint32Array : max2 <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
    var ZeroArray = class extends Array {
      constructor(size3) {
        super(size3);
        this.fill(0);
      }
    };
    var Stack = class _Stack {
      heap;
      length;
      // private constructor
      static #constructing = false;
      static create(max2) {
        const HeapCls = getUintArray(max2);
        if (!HeapCls)
          return [];
        _Stack.#constructing = true;
        const s4 = new _Stack(max2, HeapCls);
        _Stack.#constructing = false;
        return s4;
      }
      constructor(max2, HeapCls) {
        if (!_Stack.#constructing) {
          throw new TypeError("instantiate Stack using Stack.create(n)");
        }
        this.heap = new HeapCls(max2);
        this.length = 0;
      }
      push(n10) {
        this.heap[this.length++] = n10;
      }
      pop() {
        return this.heap[--this.length];
      }
    };
    var LRUCache = class _LRUCache {
      // options that cannot be changed without disaster
      #max;
      #maxSize;
      #dispose;
      #disposeAfter;
      #fetchMethod;
      #memoMethod;
      /**
       * {@link LRUCache.OptionsBase.ttl}
       */
      ttl;
      /**
       * {@link LRUCache.OptionsBase.ttlResolution}
       */
      ttlResolution;
      /**
       * {@link LRUCache.OptionsBase.ttlAutopurge}
       */
      ttlAutopurge;
      /**
       * {@link LRUCache.OptionsBase.updateAgeOnGet}
       */
      updateAgeOnGet;
      /**
       * {@link LRUCache.OptionsBase.updateAgeOnHas}
       */
      updateAgeOnHas;
      /**
       * {@link LRUCache.OptionsBase.allowStale}
       */
      allowStale;
      /**
       * {@link LRUCache.OptionsBase.noDisposeOnSet}
       */
      noDisposeOnSet;
      /**
       * {@link LRUCache.OptionsBase.noUpdateTTL}
       */
      noUpdateTTL;
      /**
       * {@link LRUCache.OptionsBase.maxEntrySize}
       */
      maxEntrySize;
      /**
       * {@link LRUCache.OptionsBase.sizeCalculation}
       */
      sizeCalculation;
      /**
       * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
       */
      noDeleteOnFetchRejection;
      /**
       * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
       */
      noDeleteOnStaleGet;
      /**
       * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
       */
      allowStaleOnFetchAbort;
      /**
       * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
       */
      allowStaleOnFetchRejection;
      /**
       * {@link LRUCache.OptionsBase.ignoreFetchAbort}
       */
      ignoreFetchAbort;
      // computed properties
      #size;
      #calculatedSize;
      #keyMap;
      #keyList;
      #valList;
      #next;
      #prev;
      #head;
      #tail;
      #free;
      #disposed;
      #sizes;
      #starts;
      #ttls;
      #hasDispose;
      #hasFetchMethod;
      #hasDisposeAfter;
      /**
       * Do not call this method unless you need to inspect the
       * inner workings of the cache.  If anything returned by this
       * object is modified in any way, strange breakage may occur.
       *
       * These fields are private for a reason!
       *
       * @internal
       */
      static unsafeExposeInternals(c6) {
        return {
          // properties
          starts: c6.#starts,
          ttls: c6.#ttls,
          sizes: c6.#sizes,
          keyMap: c6.#keyMap,
          keyList: c6.#keyList,
          valList: c6.#valList,
          next: c6.#next,
          prev: c6.#prev,
          get head() {
            return c6.#head;
          },
          get tail() {
            return c6.#tail;
          },
          free: c6.#free,
          // methods
          isBackgroundFetch: (p3) => c6.#isBackgroundFetch(p3),
          backgroundFetch: (k2, index, options, context) => c6.#backgroundFetch(k2, index, options, context),
          moveToTail: (index) => c6.#moveToTail(index),
          indexes: (options) => c6.#indexes(options),
          rindexes: (options) => c6.#rindexes(options),
          isStale: (index) => c6.#isStale(index)
        };
      }
      // Protected read-only members
      /**
       * {@link LRUCache.OptionsBase.max} (read-only)
       */
      get max() {
        return this.#max;
      }
      /**
       * {@link LRUCache.OptionsBase.maxSize} (read-only)
       */
      get maxSize() {
        return this.#maxSize;
      }
      /**
       * The total computed size of items in the cache (read-only)
       */
      get calculatedSize() {
        return this.#calculatedSize;
      }
      /**
       * The number of items stored in the cache (read-only)
       */
      get size() {
        return this.#size;
      }
      /**
       * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
       */
      get fetchMethod() {
        return this.#fetchMethod;
      }
      get memoMethod() {
        return this.#memoMethod;
      }
      /**
       * {@link LRUCache.OptionsBase.dispose} (read-only)
       */
      get dispose() {
        return this.#dispose;
      }
      /**
       * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
       */
      get disposeAfter() {
        return this.#disposeAfter;
      }
      constructor(options) {
        const { max: max2 = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
        if (max2 !== 0 && !isPosInt(max2)) {
          throw new TypeError("max option must be a nonnegative integer");
        }
        const UintArray = max2 ? getUintArray(max2) : Array;
        if (!UintArray) {
          throw new Error("invalid max value: " + max2);
        }
        this.#max = max2;
        this.#maxSize = maxSize;
        this.maxEntrySize = maxEntrySize || this.#maxSize;
        this.sizeCalculation = sizeCalculation;
        if (this.sizeCalculation) {
          if (!this.#maxSize && !this.maxEntrySize) {
            throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
          }
          if (typeof this.sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation set to non-function");
          }
        }
        if (memoMethod !== void 0 && typeof memoMethod !== "function") {
          throw new TypeError("memoMethod must be a function if defined");
        }
        this.#memoMethod = memoMethod;
        if (fetchMethod !== void 0 && typeof fetchMethod !== "function") {
          throw new TypeError("fetchMethod must be a function if specified");
        }
        this.#fetchMethod = fetchMethod;
        this.#hasFetchMethod = !!fetchMethod;
        this.#keyMap = /* @__PURE__ */ new Map();
        this.#keyList = new Array(max2).fill(void 0);
        this.#valList = new Array(max2).fill(void 0);
        this.#next = new UintArray(max2);
        this.#prev = new UintArray(max2);
        this.#head = 0;
        this.#tail = 0;
        this.#free = Stack.create(max2);
        this.#size = 0;
        this.#calculatedSize = 0;
        if (typeof dispose === "function") {
          this.#dispose = dispose;
        }
        if (typeof disposeAfter === "function") {
          this.#disposeAfter = disposeAfter;
          this.#disposed = [];
        } else {
          this.#disposeAfter = void 0;
          this.#disposed = void 0;
        }
        this.#hasDispose = !!this.#dispose;
        this.#hasDisposeAfter = !!this.#disposeAfter;
        this.noDisposeOnSet = !!noDisposeOnSet;
        this.noUpdateTTL = !!noUpdateTTL;
        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
        this.ignoreFetchAbort = !!ignoreFetchAbort;
        if (this.maxEntrySize !== 0) {
          if (this.#maxSize !== 0) {
            if (!isPosInt(this.#maxSize)) {
              throw new TypeError("maxSize must be a positive integer if specified");
            }
          }
          if (!isPosInt(this.maxEntrySize)) {
            throw new TypeError("maxEntrySize must be a positive integer if specified");
          }
          this.#initializeSizeTracking();
        }
        this.allowStale = !!allowStale;
        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
        this.updateAgeOnGet = !!updateAgeOnGet;
        this.updateAgeOnHas = !!updateAgeOnHas;
        this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
        this.ttlAutopurge = !!ttlAutopurge;
        this.ttl = ttl || 0;
        if (this.ttl) {
          if (!isPosInt(this.ttl)) {
            throw new TypeError("ttl must be a positive integer if specified");
          }
          this.#initializeTTLTracking();
        }
        if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {
          throw new TypeError("At least one of max, maxSize, or ttl is required");
        }
        if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
          const code2 = "LRU_CACHE_UNBOUNDED";
          if (shouldWarn(code2)) {
            warned.add(code2);
            const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
            emitWarning(msg, "UnboundedCacheWarning", code2, _LRUCache);
          }
        }
      }
      /**
       * Return the number of ms left in the item's TTL. If item is not in cache,
       * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
       */
      getRemainingTTL(key) {
        return this.#keyMap.has(key) ? Infinity : 0;
      }
      #initializeTTLTracking() {
        const ttls = new ZeroArray(this.#max);
        const starts = new ZeroArray(this.#max);
        this.#ttls = ttls;
        this.#starts = starts;
        this.#setItemTTL = (index, ttl, start = perf.now()) => {
          starts[index] = ttl !== 0 ? start : 0;
          ttls[index] = ttl;
          if (ttl !== 0 && this.ttlAutopurge) {
            const t6 = setTimeout(() => {
              if (this.#isStale(index)) {
                this.#delete(this.#keyList[index], "expire");
              }
            }, ttl + 1);
            if (t6.unref) {
              t6.unref();
            }
          }
        };
        this.#updateItemAge = (index) => {
          starts[index] = ttls[index] !== 0 ? perf.now() : 0;
        };
        this.#statusTTL = (status, index) => {
          if (ttls[index]) {
            const ttl = ttls[index];
            const start = starts[index];
            if (!ttl || !start)
              return;
            status.ttl = ttl;
            status.start = start;
            status.now = cachedNow || getNow();
            const age = status.now - start;
            status.remainingTTL = ttl - age;
          }
        };
        let cachedNow = 0;
        const getNow = () => {
          const n10 = perf.now();
          if (this.ttlResolution > 0) {
            cachedNow = n10;
            const t6 = setTimeout(() => cachedNow = 0, this.ttlResolution);
            if (t6.unref) {
              t6.unref();
            }
          }
          return n10;
        };
        this.getRemainingTTL = (key) => {
          const index = this.#keyMap.get(key);
          if (index === void 0) {
            return 0;
          }
          const ttl = ttls[index];
          const start = starts[index];
          if (!ttl || !start) {
            return Infinity;
          }
          const age = (cachedNow || getNow()) - start;
          return ttl - age;
        };
        this.#isStale = (index) => {
          const s4 = starts[index];
          const t6 = ttls[index];
          return !!t6 && !!s4 && (cachedNow || getNow()) - s4 > t6;
        };
      }
      // conditionally set private methods related to TTL
      #updateItemAge = () => {
      };
      #statusTTL = () => {
      };
      #setItemTTL = () => {
      };
      /* c8 ignore stop */
      #isStale = () => false;
      #initializeSizeTracking() {
        const sizes = new ZeroArray(this.#max);
        this.#calculatedSize = 0;
        this.#sizes = sizes;
        this.#removeItemSize = (index) => {
          this.#calculatedSize -= sizes[index];
          sizes[index] = 0;
        };
        this.#requireSize = (k2, v2, size3, sizeCalculation) => {
          if (this.#isBackgroundFetch(v2)) {
            return 0;
          }
          if (!isPosInt(size3)) {
            if (sizeCalculation) {
              if (typeof sizeCalculation !== "function") {
                throw new TypeError("sizeCalculation must be a function");
              }
              size3 = sizeCalculation(v2, k2);
              if (!isPosInt(size3)) {
                throw new TypeError("sizeCalculation return invalid (expect positive integer)");
              }
            } else {
              throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
            }
          }
          return size3;
        };
        this.#addItemSize = (index, size3, status) => {
          sizes[index] = size3;
          if (this.#maxSize) {
            const maxSize = this.#maxSize - sizes[index];
            while (this.#calculatedSize > maxSize) {
              this.#evict(true);
            }
          }
          this.#calculatedSize += sizes[index];
          if (status) {
            status.entrySize = size3;
            status.totalCalculatedSize = this.#calculatedSize;
          }
        };
      }
      #removeItemSize = (_i) => {
      };
      #addItemSize = (_i, _s, _st) => {
      };
      #requireSize = (_k, _v, size3, sizeCalculation) => {
        if (size3 || sizeCalculation) {
          throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
        }
        return 0;
      };
      *#indexes({ allowStale = this.allowStale } = {}) {
        if (this.#size) {
          for (let i9 = this.#tail; true; ) {
            if (!this.#isValidIndex(i9)) {
              break;
            }
            if (allowStale || !this.#isStale(i9)) {
              yield i9;
            }
            if (i9 === this.#head) {
              break;
            } else {
              i9 = this.#prev[i9];
            }
          }
        }
      }
      *#rindexes({ allowStale = this.allowStale } = {}) {
        if (this.#size) {
          for (let i9 = this.#head; true; ) {
            if (!this.#isValidIndex(i9)) {
              break;
            }
            if (allowStale || !this.#isStale(i9)) {
              yield i9;
            }
            if (i9 === this.#tail) {
              break;
            } else {
              i9 = this.#next[i9];
            }
          }
        }
      }
      #isValidIndex(index) {
        return index !== void 0 && this.#keyMap.get(this.#keyList[index]) === index;
      }
      /**
       * Return a generator yielding `[key, value]` pairs,
       * in order from most recently used to least recently used.
       */
      *entries() {
        for (const i9 of this.#indexes()) {
          if (this.#valList[i9] !== void 0 && this.#keyList[i9] !== void 0 && !this.#isBackgroundFetch(this.#valList[i9])) {
            yield [this.#keyList[i9], this.#valList[i9]];
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.entries}
       *
       * Return a generator yielding `[key, value]` pairs,
       * in order from least recently used to most recently used.
       */
      *rentries() {
        for (const i9 of this.#rindexes()) {
          if (this.#valList[i9] !== void 0 && this.#keyList[i9] !== void 0 && !this.#isBackgroundFetch(this.#valList[i9])) {
            yield [this.#keyList[i9], this.#valList[i9]];
          }
        }
      }
      /**
       * Return a generator yielding the keys in the cache,
       * in order from most recently used to least recently used.
       */
      *keys() {
        for (const i9 of this.#indexes()) {
          const k2 = this.#keyList[i9];
          if (k2 !== void 0 && !this.#isBackgroundFetch(this.#valList[i9])) {
            yield k2;
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.keys}
       *
       * Return a generator yielding the keys in the cache,
       * in order from least recently used to most recently used.
       */
      *rkeys() {
        for (const i9 of this.#rindexes()) {
          const k2 = this.#keyList[i9];
          if (k2 !== void 0 && !this.#isBackgroundFetch(this.#valList[i9])) {
            yield k2;
          }
        }
      }
      /**
       * Return a generator yielding the values in the cache,
       * in order from most recently used to least recently used.
       */
      *values() {
        for (const i9 of this.#indexes()) {
          const v2 = this.#valList[i9];
          if (v2 !== void 0 && !this.#isBackgroundFetch(this.#valList[i9])) {
            yield this.#valList[i9];
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.values}
       *
       * Return a generator yielding the values in the cache,
       * in order from least recently used to most recently used.
       */
      *rvalues() {
        for (const i9 of this.#rindexes()) {
          const v2 = this.#valList[i9];
          if (v2 !== void 0 && !this.#isBackgroundFetch(this.#valList[i9])) {
            yield this.#valList[i9];
          }
        }
      }
      /**
       * Iterating over the cache itself yields the same results as
       * {@link LRUCache.entries}
       */
      [Symbol.iterator]() {
        return this.entries();
      }
      /**
       * A String value that is used in the creation of the default string
       * description of an object. Called by the built-in method
       * `Object.prototype.toString`.
       */
      [Symbol.toStringTag] = "LRUCache";
      /**
       * Find a value for which the supplied fn method returns a truthy value,
       * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
       */
      find(fn, getOptions = {}) {
        for (const i9 of this.#indexes()) {
          const v2 = this.#valList[i9];
          const value = this.#isBackgroundFetch(v2) ? v2.__staleWhileFetching : v2;
          if (value === void 0)
            continue;
          if (fn(value, this.#keyList[i9], this)) {
            return this.get(this.#keyList[i9], getOptions);
          }
        }
      }
      /**
       * Call the supplied function on each item in the cache, in order from most
       * recently used to least recently used.
       *
       * `fn` is called as `fn(value, key, cache)`.
       *
       * If `thisp` is provided, function will be called in the `this`-context of
       * the provided object, or the cache if no `thisp` object is provided.
       *
       * Does not update age or recenty of use, or iterate over stale values.
       */
      forEach(fn, thisp = this) {
        for (const i9 of this.#indexes()) {
          const v2 = this.#valList[i9];
          const value = this.#isBackgroundFetch(v2) ? v2.__staleWhileFetching : v2;
          if (value === void 0)
            continue;
          fn.call(thisp, value, this.#keyList[i9], this);
        }
      }
      /**
       * The same as {@link LRUCache.forEach} but items are iterated over in
       * reverse order.  (ie, less recently used items are iterated over first.)
       */
      rforEach(fn, thisp = this) {
        for (const i9 of this.#rindexes()) {
          const v2 = this.#valList[i9];
          const value = this.#isBackgroundFetch(v2) ? v2.__staleWhileFetching : v2;
          if (value === void 0)
            continue;
          fn.call(thisp, value, this.#keyList[i9], this);
        }
      }
      /**
       * Delete any stale entries. Returns true if anything was removed,
       * false otherwise.
       */
      purgeStale() {
        let deleted = false;
        for (const i9 of this.#rindexes({ allowStale: true })) {
          if (this.#isStale(i9)) {
            this.#delete(this.#keyList[i9], "expire");
            deleted = true;
          }
        }
        return deleted;
      }
      /**
       * Get the extended info about a given entry, to get its value, size, and
       * TTL info simultaneously. Returns `undefined` if the key is not present.
       *
       * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
       * serialization, the `start` value is always the current timestamp, and the
       * `ttl` is a calculated remaining time to live (negative if expired).
       *
       * Always returns stale values, if their info is found in the cache, so be
       * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
       * if relevant.
       */
      info(key) {
        const i9 = this.#keyMap.get(key);
        if (i9 === void 0)
          return void 0;
        const v2 = this.#valList[i9];
        const value = this.#isBackgroundFetch(v2) ? v2.__staleWhileFetching : v2;
        if (value === void 0)
          return void 0;
        const entry = { value };
        if (this.#ttls && this.#starts) {
          const ttl = this.#ttls[i9];
          const start = this.#starts[i9];
          if (ttl && start) {
            const remain = ttl - (perf.now() - start);
            entry.ttl = remain;
            entry.start = Date.now();
          }
        }
        if (this.#sizes) {
          entry.size = this.#sizes[i9];
        }
        return entry;
      }
      /**
       * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
       * passed to {@link LRLUCache#load}.
       *
       * The `start` fields are calculated relative to a portable `Date.now()`
       * timestamp, even if `performance.now()` is available.
       *
       * Stale entries are always included in the `dump`, even if
       * {@link LRUCache.OptionsBase.allowStale} is false.
       *
       * Note: this returns an actual array, not a generator, so it can be more
       * easily passed around.
       */
      dump() {
        const arr = [];
        for (const i9 of this.#indexes({ allowStale: true })) {
          const key = this.#keyList[i9];
          const v2 = this.#valList[i9];
          const value = this.#isBackgroundFetch(v2) ? v2.__staleWhileFetching : v2;
          if (value === void 0 || key === void 0)
            continue;
          const entry = { value };
          if (this.#ttls && this.#starts) {
            entry.ttl = this.#ttls[i9];
            const age = perf.now() - this.#starts[i9];
            entry.start = Math.floor(Date.now() - age);
          }
          if (this.#sizes) {
            entry.size = this.#sizes[i9];
          }
          arr.unshift([key, entry]);
        }
        return arr;
      }
      /**
       * Reset the cache and load in the items in entries in the order listed.
       *
       * The shape of the resulting cache may be different if the same options are
       * not used in both caches.
       *
       * The `start` fields are assumed to be calculated relative to a portable
       * `Date.now()` timestamp, even if `performance.now()` is available.
       */
      load(arr) {
        this.clear();
        for (const [key, entry] of arr) {
          if (entry.start) {
            const age = Date.now() - entry.start;
            entry.start = perf.now() - age;
          }
          this.set(key, entry.value, entry);
        }
      }
      /**
       * Add a value to the cache.
       *
       * Note: if `undefined` is specified as a value, this is an alias for
       * {@link LRUCache#delete}
       *
       * Fields on the {@link LRUCache.SetOptions} options param will override
       * their corresponding values in the constructor options for the scope
       * of this single `set()` operation.
       *
       * If `start` is provided, then that will set the effective start
       * time for the TTL calculation. Note that this must be a previous
       * value of `performance.now()` if supported, or a previous value of
       * `Date.now()` if not.
       *
       * Options object may also include `size`, which will prevent
       * calling the `sizeCalculation` function and just use the specified
       * number if it is a positive integer, and `noDisposeOnSet` which
       * will prevent calling a `dispose` function in the case of
       * overwrites.
       *
       * If the `size` (or return value of `sizeCalculation`) for a given
       * entry is greater than `maxEntrySize`, then the item will not be
       * added to the cache.
       *
       * Will update the recency of the entry.
       *
       * If the value is `undefined`, then this is an alias for
       * `cache.delete(key)`. `undefined` is never stored in the cache.
       */
      set(k2, v2, setOptions = {}) {
        if (v2 === void 0) {
          this.delete(k2);
          return this;
        }
        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
        let { noUpdateTTL = this.noUpdateTTL } = setOptions;
        const size3 = this.#requireSize(k2, v2, setOptions.size || 0, sizeCalculation);
        if (this.maxEntrySize && size3 > this.maxEntrySize) {
          if (status) {
            status.set = "miss";
            status.maxEntrySizeExceeded = true;
          }
          this.#delete(k2, "set");
          return this;
        }
        let index = this.#size === 0 ? void 0 : this.#keyMap.get(k2);
        if (index === void 0) {
          index = this.#size === 0 ? this.#tail : this.#free.length !== 0 ? this.#free.pop() : this.#size === this.#max ? this.#evict(false) : this.#size;
          this.#keyList[index] = k2;
          this.#valList[index] = v2;
          this.#keyMap.set(k2, index);
          this.#next[this.#tail] = index;
          this.#prev[index] = this.#tail;
          this.#tail = index;
          this.#size++;
          this.#addItemSize(index, size3, status);
          if (status)
            status.set = "add";
          noUpdateTTL = false;
        } else {
          this.#moveToTail(index);
          const oldVal = this.#valList[index];
          if (v2 !== oldVal) {
            if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
              oldVal.__abortController.abort(new Error("replaced"));
              const { __staleWhileFetching: s4 } = oldVal;
              if (s4 !== void 0 && !noDisposeOnSet) {
                if (this.#hasDispose) {
                  this.#dispose?.(s4, k2, "set");
                }
                if (this.#hasDisposeAfter) {
                  this.#disposed?.push([s4, k2, "set"]);
                }
              }
            } else if (!noDisposeOnSet) {
              if (this.#hasDispose) {
                this.#dispose?.(oldVal, k2, "set");
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([oldVal, k2, "set"]);
              }
            }
            this.#removeItemSize(index);
            this.#addItemSize(index, size3, status);
            this.#valList[index] = v2;
            if (status) {
              status.set = "replace";
              const oldValue = oldVal && this.#isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
              if (oldValue !== void 0)
                status.oldValue = oldValue;
            }
          } else if (status) {
            status.set = "update";
          }
        }
        if (ttl !== 0 && !this.#ttls) {
          this.#initializeTTLTracking();
        }
        if (this.#ttls) {
          if (!noUpdateTTL) {
            this.#setItemTTL(index, ttl, start);
          }
          if (status)
            this.#statusTTL(status, index);
        }
        if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
          const dt = this.#disposed;
          let task2;
          while (task2 = dt?.shift()) {
            this.#disposeAfter?.(...task2);
          }
        }
        return this;
      }
      /**
       * Evict the least recently used item, returning its value or
       * `undefined` if cache is empty.
       */
      pop() {
        try {
          while (this.#size) {
            const val = this.#valList[this.#head];
            this.#evict(true);
            if (this.#isBackgroundFetch(val)) {
              if (val.__staleWhileFetching) {
                return val.__staleWhileFetching;
              }
            } else if (val !== void 0) {
              return val;
            }
          }
        } finally {
          if (this.#hasDisposeAfter && this.#disposed) {
            const dt = this.#disposed;
            let task2;
            while (task2 = dt?.shift()) {
              this.#disposeAfter?.(...task2);
            }
          }
        }
      }
      #evict(free) {
        const head = this.#head;
        const k2 = this.#keyList[head];
        const v2 = this.#valList[head];
        if (this.#hasFetchMethod && this.#isBackgroundFetch(v2)) {
          v2.__abortController.abort(new Error("evicted"));
        } else if (this.#hasDispose || this.#hasDisposeAfter) {
          if (this.#hasDispose) {
            this.#dispose?.(v2, k2, "evict");
          }
          if (this.#hasDisposeAfter) {
            this.#disposed?.push([v2, k2, "evict"]);
          }
        }
        this.#removeItemSize(head);
        if (free) {
          this.#keyList[head] = void 0;
          this.#valList[head] = void 0;
          this.#free.push(head);
        }
        if (this.#size === 1) {
          this.#head = this.#tail = 0;
          this.#free.length = 0;
        } else {
          this.#head = this.#next[head];
        }
        this.#keyMap.delete(k2);
        this.#size--;
        return head;
      }
      /**
       * Check if a key is in the cache, without updating the recency of use.
       * Will return false if the item is stale, even though it is technically
       * in the cache.
       *
       * Check if a key is in the cache, without updating the recency of
       * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
       * to `true` in either the options or the constructor.
       *
       * Will return `false` if the item is stale, even though it is technically in
       * the cache. The difference can be determined (if it matters) by using a
       * `status` argument, and inspecting the `has` field.
       *
       * Will not update item age unless
       * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
       */
      has(k2, hasOptions = {}) {
        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
        const index = this.#keyMap.get(k2);
        if (index !== void 0) {
          const v2 = this.#valList[index];
          if (this.#isBackgroundFetch(v2) && v2.__staleWhileFetching === void 0) {
            return false;
          }
          if (!this.#isStale(index)) {
            if (updateAgeOnHas) {
              this.#updateItemAge(index);
            }
            if (status) {
              status.has = "hit";
              this.#statusTTL(status, index);
            }
            return true;
          } else if (status) {
            status.has = "stale";
            this.#statusTTL(status, index);
          }
        } else if (status) {
          status.has = "miss";
        }
        return false;
      }
      /**
       * Like {@link LRUCache#get} but doesn't update recency or delete stale
       * items.
       *
       * Returns `undefined` if the item is stale, unless
       * {@link LRUCache.OptionsBase.allowStale} is set.
       */
      peek(k2, peekOptions = {}) {
        const { allowStale = this.allowStale } = peekOptions;
        const index = this.#keyMap.get(k2);
        if (index === void 0 || !allowStale && this.#isStale(index)) {
          return;
        }
        const v2 = this.#valList[index];
        return this.#isBackgroundFetch(v2) ? v2.__staleWhileFetching : v2;
      }
      #backgroundFetch(k2, index, options, context) {
        const v2 = index === void 0 ? void 0 : this.#valList[index];
        if (this.#isBackgroundFetch(v2)) {
          return v2;
        }
        const ac = new AC();
        const { signal } = options;
        signal?.addEventListener("abort", () => ac.abort(signal.reason), {
          signal: ac.signal
        });
        const fetchOpts = {
          signal: ac.signal,
          options,
          context
        };
        const cb = (v3, updateCache = false) => {
          const { aborted } = ac.signal;
          const ignoreAbort = options.ignoreFetchAbort && v3 !== void 0;
          if (options.status) {
            if (aborted && !updateCache) {
              options.status.fetchAborted = true;
              options.status.fetchError = ac.signal.reason;
              if (ignoreAbort)
                options.status.fetchAbortIgnored = true;
            } else {
              options.status.fetchResolved = true;
            }
          }
          if (aborted && !ignoreAbort && !updateCache) {
            return fetchFail(ac.signal.reason);
          }
          const bf2 = p3;
          if (this.#valList[index] === p3) {
            if (v3 === void 0) {
              if (bf2.__staleWhileFetching) {
                this.#valList[index] = bf2.__staleWhileFetching;
              } else {
                this.#delete(k2, "fetch");
              }
            } else {
              if (options.status)
                options.status.fetchUpdated = true;
              this.set(k2, v3, fetchOpts.options);
            }
          }
          return v3;
        };
        const eb = (er) => {
          if (options.status) {
            options.status.fetchRejected = true;
            options.status.fetchError = er;
          }
          return fetchFail(er);
        };
        const fetchFail = (er) => {
          const { aborted } = ac.signal;
          const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
          const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
          const noDelete = allowStale || options.noDeleteOnFetchRejection;
          const bf2 = p3;
          if (this.#valList[index] === p3) {
            const del = !noDelete || bf2.__staleWhileFetching === void 0;
            if (del) {
              this.#delete(k2, "fetch");
            } else if (!allowStaleAborted) {
              this.#valList[index] = bf2.__staleWhileFetching;
            }
          }
          if (allowStale) {
            if (options.status && bf2.__staleWhileFetching !== void 0) {
              options.status.returnedStale = true;
            }
            return bf2.__staleWhileFetching;
          } else if (bf2.__returned === bf2) {
            throw er;
          }
        };
        const pcall = (res, rej) => {
          const fmp = this.#fetchMethod?.(k2, v2, fetchOpts);
          if (fmp && fmp instanceof Promise) {
            fmp.then((v3) => res(v3 === void 0 ? void 0 : v3), rej);
          }
          ac.signal.addEventListener("abort", () => {
            if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
              res(void 0);
              if (options.allowStaleOnFetchAbort) {
                res = (v3) => cb(v3, true);
              }
            }
          });
        };
        if (options.status)
          options.status.fetchDispatched = true;
        const p3 = new Promise(pcall).then(cb, eb);
        const bf = Object.assign(p3, {
          __abortController: ac,
          __staleWhileFetching: v2,
          __returned: void 0
        });
        if (index === void 0) {
          this.set(k2, bf, { ...fetchOpts.options, status: void 0 });
          index = this.#keyMap.get(k2);
        } else {
          this.#valList[index] = bf;
        }
        return bf;
      }
      #isBackgroundFetch(p3) {
        if (!this.#hasFetchMethod)
          return false;
        const b3 = p3;
        return !!b3 && b3 instanceof Promise && b3.hasOwnProperty("__staleWhileFetching") && b3.__abortController instanceof AC;
      }
      async fetch(k2, fetchOptions = {}) {
        const {
          // get options
          allowStale = this.allowStale,
          updateAgeOnGet = this.updateAgeOnGet,
          noDeleteOnStaleGet = this.noDeleteOnStaleGet,
          // set options
          ttl = this.ttl,
          noDisposeOnSet = this.noDisposeOnSet,
          size: size3 = 0,
          sizeCalculation = this.sizeCalculation,
          noUpdateTTL = this.noUpdateTTL,
          // fetch exclusive options
          noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
          allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
          ignoreFetchAbort = this.ignoreFetchAbort,
          allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
          context,
          forceRefresh = false,
          status,
          signal
        } = fetchOptions;
        if (!this.#hasFetchMethod) {
          if (status)
            status.fetch = "get";
          return this.get(k2, {
            allowStale,
            updateAgeOnGet,
            noDeleteOnStaleGet,
            status
          });
        }
        const options = {
          allowStale,
          updateAgeOnGet,
          noDeleteOnStaleGet,
          ttl,
          noDisposeOnSet,
          size: size3,
          sizeCalculation,
          noUpdateTTL,
          noDeleteOnFetchRejection,
          allowStaleOnFetchRejection,
          allowStaleOnFetchAbort,
          ignoreFetchAbort,
          status,
          signal
        };
        let index = this.#keyMap.get(k2);
        if (index === void 0) {
          if (status)
            status.fetch = "miss";
          const p3 = this.#backgroundFetch(k2, index, options, context);
          return p3.__returned = p3;
        } else {
          const v2 = this.#valList[index];
          if (this.#isBackgroundFetch(v2)) {
            const stale = allowStale && v2.__staleWhileFetching !== void 0;
            if (status) {
              status.fetch = "inflight";
              if (stale)
                status.returnedStale = true;
            }
            return stale ? v2.__staleWhileFetching : v2.__returned = v2;
          }
          const isStale = this.#isStale(index);
          if (!forceRefresh && !isStale) {
            if (status)
              status.fetch = "hit";
            this.#moveToTail(index);
            if (updateAgeOnGet) {
              this.#updateItemAge(index);
            }
            if (status)
              this.#statusTTL(status, index);
            return v2;
          }
          const p3 = this.#backgroundFetch(k2, index, options, context);
          const hasStale = p3.__staleWhileFetching !== void 0;
          const staleVal = hasStale && allowStale;
          if (status) {
            status.fetch = isStale ? "stale" : "refresh";
            if (staleVal && isStale)
              status.returnedStale = true;
          }
          return staleVal ? p3.__staleWhileFetching : p3.__returned = p3;
        }
      }
      async forceFetch(k2, fetchOptions = {}) {
        const v2 = await this.fetch(k2, fetchOptions);
        if (v2 === void 0)
          throw new Error("fetch() returned undefined");
        return v2;
      }
      memo(k2, memoOptions = {}) {
        const memoMethod = this.#memoMethod;
        if (!memoMethod) {
          throw new Error("no memoMethod provided to constructor");
        }
        const { context, forceRefresh, ...options } = memoOptions;
        const v2 = this.get(k2, options);
        if (!forceRefresh && v2 !== void 0)
          return v2;
        const vv = memoMethod(k2, v2, {
          options,
          context
        });
        this.set(k2, vv, options);
        return vv;
      }
      /**
       * Return a value from the cache. Will update the recency of the cache
       * entry found.
       *
       * If the key is not found, get() will return `undefined`.
       */
      get(k2, getOptions = {}) {
        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
        const index = this.#keyMap.get(k2);
        if (index !== void 0) {
          const value = this.#valList[index];
          const fetching = this.#isBackgroundFetch(value);
          if (status)
            this.#statusTTL(status, index);
          if (this.#isStale(index)) {
            if (status)
              status.get = "stale";
            if (!fetching) {
              if (!noDeleteOnStaleGet) {
                this.#delete(k2, "expire");
              }
              if (status && allowStale)
                status.returnedStale = true;
              return allowStale ? value : void 0;
            } else {
              if (status && allowStale && value.__staleWhileFetching !== void 0) {
                status.returnedStale = true;
              }
              return allowStale ? value.__staleWhileFetching : void 0;
            }
          } else {
            if (status)
              status.get = "hit";
            if (fetching) {
              return value.__staleWhileFetching;
            }
            this.#moveToTail(index);
            if (updateAgeOnGet) {
              this.#updateItemAge(index);
            }
            return value;
          }
        } else if (status) {
          status.get = "miss";
        }
      }
      #connect(p3, n10) {
        this.#prev[n10] = p3;
        this.#next[p3] = n10;
      }
      #moveToTail(index) {
        if (index !== this.#tail) {
          if (index === this.#head) {
            this.#head = this.#next[index];
          } else {
            this.#connect(this.#prev[index], this.#next[index]);
          }
          this.#connect(this.#tail, index);
          this.#tail = index;
        }
      }
      /**
       * Deletes a key out of the cache.
       *
       * Returns true if the key was deleted, false otherwise.
       */
      delete(k2) {
        return this.#delete(k2, "delete");
      }
      #delete(k2, reason) {
        let deleted = false;
        if (this.#size !== 0) {
          const index = this.#keyMap.get(k2);
          if (index !== void 0) {
            deleted = true;
            if (this.#size === 1) {
              this.#clear(reason);
            } else {
              this.#removeItemSize(index);
              const v2 = this.#valList[index];
              if (this.#isBackgroundFetch(v2)) {
                v2.__abortController.abort(new Error("deleted"));
              } else if (this.#hasDispose || this.#hasDisposeAfter) {
                if (this.#hasDispose) {
                  this.#dispose?.(v2, k2, reason);
                }
                if (this.#hasDisposeAfter) {
                  this.#disposed?.push([v2, k2, reason]);
                }
              }
              this.#keyMap.delete(k2);
              this.#keyList[index] = void 0;
              this.#valList[index] = void 0;
              if (index === this.#tail) {
                this.#tail = this.#prev[index];
              } else if (index === this.#head) {
                this.#head = this.#next[index];
              } else {
                const pi = this.#prev[index];
                this.#next[pi] = this.#next[index];
                const ni = this.#next[index];
                this.#prev[ni] = this.#prev[index];
              }
              this.#size--;
              this.#free.push(index);
            }
          }
        }
        if (this.#hasDisposeAfter && this.#disposed?.length) {
          const dt = this.#disposed;
          let task2;
          while (task2 = dt?.shift()) {
            this.#disposeAfter?.(...task2);
          }
        }
        return deleted;
      }
      /**
       * Clear the cache entirely, throwing away all values.
       */
      clear() {
        return this.#clear("delete");
      }
      #clear(reason) {
        for (const index of this.#rindexes({ allowStale: true })) {
          const v2 = this.#valList[index];
          if (this.#isBackgroundFetch(v2)) {
            v2.__abortController.abort(new Error("deleted"));
          } else {
            const k2 = this.#keyList[index];
            if (this.#hasDispose) {
              this.#dispose?.(v2, k2, reason);
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([v2, k2, reason]);
            }
          }
        }
        this.#keyMap.clear();
        this.#valList.fill(void 0);
        this.#keyList.fill(void 0);
        if (this.#ttls && this.#starts) {
          this.#ttls.fill(0);
          this.#starts.fill(0);
        }
        if (this.#sizes) {
          this.#sizes.fill(0);
        }
        this.#head = 0;
        this.#tail = 0;
        this.#free.length = 0;
        this.#calculatedSize = 0;
        this.#size = 0;
        if (this.#hasDisposeAfter && this.#disposed) {
          const dt = this.#disposed;
          let task2;
          while (task2 = dt?.shift()) {
            this.#disposeAfter?.(...task2);
          }
        }
      }
    };
    exports.LRUCache = LRUCache;
  }
});

// node_modules/@atproto-labs/simple-store-memory/dist/util.js
var require_util5 = __commonJS({
  "node_modules/@atproto-labs/simple-store-memory/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.roughSizeOfObject = void 0;
    var knownSizes = /* @__PURE__ */ new WeakMap();
    function roughSizeOfObject(value) {
      const objectList = /* @__PURE__ */ new Set();
      const stack = [value];
      let bytes = 0;
      while (stack.length) {
        const value2 = stack.pop();
        switch (typeof value2) {
          // Types are ordered by frequency
          case "string":
            bytes += 12 + 4 * Math.ceil(value2.length / 4);
            break;
          case "number":
            bytes += 12;
            break;
          case "boolean":
            bytes += 4;
            break;
          case "object":
            bytes += 4;
            if (value2 === null) {
              break;
            }
            if (knownSizes.has(value2)) {
              bytes += knownSizes.get(value2);
              break;
            }
            if (objectList.has(value2))
              continue;
            objectList.add(value2);
            if (Array.isArray(value2)) {
              bytes += 4;
              stack.push(...value2);
            } else {
              bytes += 8;
              const keys = Object.getOwnPropertyNames(value2);
              for (let i9 = 0; i9 < keys.length; i9++) {
                bytes += 4;
                const key = keys[i9];
                const val = value2[key];
                if (val !== void 0)
                  stack.push(val);
                stack.push(key);
              }
            }
            break;
          case "function":
            bytes += 8;
            break;
          case "symbol":
            bytes += 8;
            break;
          case "bigint":
            bytes += 16;
            break;
        }
      }
      if (typeof value === "object" && value !== null) {
        knownSizes.set(value, bytes);
      }
      return bytes;
    }
    exports.roughSizeOfObject = roughSizeOfObject;
  }
});

// node_modules/@atproto-labs/simple-store-memory/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/@atproto-labs/simple-store-memory/dist/index.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f5) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f5.call(receiver, value) : f5 ? f5.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f5) {
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f5 : kind === "a" ? f5.call(receiver) : f5 ? f5.value : state.get(receiver);
    };
    var _SimpleStoreMemory_cache;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SimpleStoreMemory = void 0;
    var lru_cache_1 = require_commonjs();
    var util_js_1 = require_util5();
    var nullSymbol = Symbol("nullItem");
    var toLruValue = (value) => value === null ? nullSymbol : value;
    var fromLruValue = (value) => value === nullSymbol ? null : value;
    var SimpleStoreMemory = class {
      constructor({ sizeCalculation, ...options }) {
        _SimpleStoreMemory_cache.set(this, void 0);
        __classPrivateFieldSet(this, _SimpleStoreMemory_cache, new lru_cache_1.LRUCache({
          ...options,
          allowStale: false,
          updateAgeOnGet: false,
          updateAgeOnHas: false,
          sizeCalculation: sizeCalculation ? (value, key) => sizeCalculation(fromLruValue(value), key) : options.maxEntrySize != null || options.maxSize != null ? (
            // maxEntrySize and maxSize require a size calculation function.
            util_js_1.roughSizeOfObject
          ) : void 0
        }), "f");
      }
      get(key) {
        const value = __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").get(key);
        if (value === void 0)
          return void 0;
        return fromLruValue(value);
      }
      set(key, value) {
        __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").set(key, toLruValue(value));
      }
      del(key) {
        __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").delete(key);
      }
      clear() {
        __classPrivateFieldGet(this, _SimpleStoreMemory_cache, "f").clear();
      }
    };
    exports.SimpleStoreMemory = SimpleStoreMemory;
    _SimpleStoreMemory_cache = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/@atproto-labs/did-resolver/dist/did-cache-memory.js
var require_did_cache_memory = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/did-cache-memory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DidCacheMemory = void 0;
    var simple_store_memory_1 = require_dist5();
    var DEFAULT_TTL = 3600 * 1e3;
    var DEFAULT_MAX_SIZE = 50 * 1024 * 1024;
    var DidCacheMemory = class extends simple_store_memory_1.SimpleStoreMemory {
      constructor(options) {
        super(options?.max == null ? { ttl: DEFAULT_TTL, maxSize: DEFAULT_MAX_SIZE, ...options } : { ttl: DEFAULT_TTL, ...options });
      }
    };
    exports.DidCacheMemory = DidCacheMemory;
  }
});

// node_modules/@atproto-labs/simple-store/dist/cached-getter.js
var require_cached_getter = __commonJS({
  "node_modules/@atproto-labs/simple-store/dist/cached-getter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CachedGetter = void 0;
    var returnTrue = () => true;
    var returnFalse = () => false;
    var CachedGetter = class {
      constructor(getter, store, options) {
        Object.defineProperty(this, "getter", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: getter
        });
        Object.defineProperty(this, "store", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: store
        });
        Object.defineProperty(this, "options", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: options
        });
        Object.defineProperty(this, "pending", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: /* @__PURE__ */ new Map()
        });
      }
      async get(key, options) {
        options?.signal?.throwIfAborted();
        const isStale = this.options?.isStale;
        const allowStored = options?.noCache ? returnFalse : options?.allowStale || isStale == null ? returnTrue : async (value2) => !await isStale(key, value2);
        let previousExecutionFlow;
        while (previousExecutionFlow = this.pending.get(key)) {
          try {
            const { isFresh, value: value2 } = await previousExecutionFlow;
            if (isFresh)
              return value2;
            if (await allowStored(value2))
              return value2;
          } catch {
          }
          options?.signal?.throwIfAborted();
        }
        const currentExecutionFlow = Promise.resolve().then(async () => {
          const storedValue = await this.getStored(key, options);
          if (storedValue !== void 0 && await allowStored(storedValue)) {
            return { isFresh: false, value: storedValue };
          }
          return Promise.resolve().then(async () => (0, this.getter)(key, options, storedValue)).catch(async (err) => {
            if (storedValue !== void 0) {
              try {
                const deleteOnError = this.options?.deleteOnError;
                if (await deleteOnError?.(err, key, storedValue)) {
                  await this.delStored(key, err);
                }
              } catch (error) {
                throw new AggregateError([err, error], "Error while deleting stored value");
              }
            }
            throw err;
          }).then(async (value2) => {
            await this.setStored(key, value2);
            return { isFresh: true, value: value2 };
          });
        }).finally(() => {
          this.pending.delete(key);
        });
        if (this.pending.has(key)) {
          throw new Error("Concurrent request for the same key");
        }
        this.pending.set(key, currentExecutionFlow);
        const { value } = await currentExecutionFlow;
        return value;
      }
      bind(key) {
        return async (options) => this.get(key, options);
      }
      async getStored(key, options) {
        try {
          return await this.store.get(key, options);
        } catch (err) {
          return void 0;
        }
      }
      async setStored(key, value) {
        try {
          await this.store.set(key, value);
        } catch (err) {
          const onStoreError = this.options?.onStoreError;
          await onStoreError?.(err, key, value);
        }
      }
      async delStored(key, _cause) {
        await this.store.del(key);
      }
    };
    exports.CachedGetter = CachedGetter;
  }
});

// node_modules/@atproto-labs/simple-store/dist/simple-store.js
var require_simple_store = __commonJS({
  "node_modules/@atproto-labs/simple-store/dist/simple-store.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@atproto-labs/simple-store/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/@atproto-labs/simple-store/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_cached_getter(), exports);
    __exportStar(require_simple_store(), exports);
  }
});

// node_modules/@atproto-labs/did-resolver/dist/did-cache.js
var require_did_cache = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/did-cache.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DidResolverCached = void 0;
    var simple_store_1 = require_dist6();
    var did_cache_memory_js_1 = require_did_cache_memory();
    var DidResolverCached = class {
      constructor(resolver, cache = new did_cache_memory_js_1.DidCacheMemory()) {
        Object.defineProperty(this, "getter", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.getter = new simple_store_1.CachedGetter((did, options) => resolver.resolve(did, options), cache);
      }
      async resolve(did, options) {
        return this.getter.get(did, options);
      }
    };
    exports.DidResolverCached = DidResolverCached;
  }
});

// node_modules/@atproto-labs/did-resolver/dist/did-method.js
var require_did_method = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/did-method.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@atproto-labs/fetch/dist/fetch-error.js
var require_fetch_error = __commonJS({
  "node_modules/@atproto-labs/fetch/dist/fetch-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchError = void 0;
    var FetchError = class extends Error {
      constructor(statusCode, message2, options) {
        super(message2, options);
        Object.defineProperty(this, "statusCode", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: statusCode
        });
      }
      get expose() {
        return true;
      }
    };
    exports.FetchError = FetchError;
  }
});

// node_modules/@atproto-labs/fetch/dist/fetch.js
var require_fetch = __commonJS({
  "node_modules/@atproto-labs/fetch/dist/fetch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toRequestTransformer = toRequestTransformer;
    exports.asRequest = asRequest;
    function toRequestTransformer(requestTransformer) {
      return function(input, init) {
        return requestTransformer.call(this, asRequest(input, init));
      };
    }
    function asRequest(input, init) {
      if (!init && input instanceof Request)
        return input;
      return new Request(input, init);
    }
  }
});

// node_modules/@atproto-labs/fetch/dist/util.js
var require_util6 = __commonJS({
  "node_modules/@atproto-labs/fetch/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.extractUrl = exports.MaxBytesTransformStream = exports.ifString = exports.ifObject = void 0;
    exports.isIp = isIp;
    exports.padLines = padLines;
    exports.cancelBody = cancelBody;
    exports.logCancellationError = logCancellationError;
    exports.stringifyMessage = stringifyMessage;
    function isIp(hostname) {
      if (hostname.match(/^\d+\.\d+\.\d+\.\d+$/))
        return true;
      if (hostname.startsWith("[") && hostname.endsWith("]"))
        return true;
      return false;
    }
    var plainObjectProto = Object.prototype;
    var ifObject = (v2) => {
      if (typeof v2 === "object" && v2 != null && !Array.isArray(v2)) {
        const proto = Object.getPrototypeOf(v2);
        if (proto === null || proto === plainObjectProto) {
          return v2;
        }
      }
      return void 0;
    };
    exports.ifObject = ifObject;
    var ifString = (v2) => typeof v2 === "string" ? v2 : void 0;
    exports.ifString = ifString;
    var MaxBytesTransformStream = class extends TransformStream {
      constructor(maxBytes) {
        if (!(maxBytes >= 0)) {
          throw new TypeError("maxBytes must be a non-negative number");
        }
        let bytesRead = 0;
        super({
          transform: (chunk, ctrl) => {
            if ((bytesRead += chunk.length) <= maxBytes) {
              ctrl.enqueue(chunk);
            } else {
              ctrl.error(new Error("Response too large"));
            }
          }
        });
      }
    };
    exports.MaxBytesTransformStream = MaxBytesTransformStream;
    var LINE_BREAK = /\r?\n/g;
    function padLines(input, pad) {
      if (!input)
        return input;
      return pad + input.replace(LINE_BREAK, `$&${pad}`);
    }
    async function cancelBody(body, onCancellationError) {
      if (body.body && !body.bodyUsed && !body.body.locked && // Support for alternative fetch implementations
      typeof body.body.cancel === "function") {
        if (typeof onCancellationError === "function") {
          void body.body.cancel().catch(onCancellationError);
        } else if (onCancellationError === "log") {
          void body.body.cancel().catch(logCancellationError);
        } else {
          await body.body.cancel();
        }
      }
    }
    function logCancellationError(err) {
      console.warn("Failed to cancel response body", err);
    }
    async function stringifyMessage(input) {
      try {
        const headers = stringifyHeaders(input.headers);
        const payload = await stringifyBody(input);
        return headers && payload ? `${headers}
${payload}` : headers || payload;
      } finally {
        void cancelBody(input, "log");
      }
    }
    function stringifyHeaders(headers) {
      return Array.from(headers).map(([name2, value]) => `${name2}: ${value}`).join("\n");
    }
    async function stringifyBody(body) {
      try {
        const blob = await body.blob();
        if (blob.type?.startsWith("text/")) {
          const text = await blob.text();
          return JSON.stringify(text);
        }
        if (/application\/(?:\w+\+)?json/.test(blob.type)) {
          const text = await blob.text();
          return text.includes("\n") ? JSON.stringify(JSON.parse(text)) : text;
        }
        return `[Body size: ${blob.size}, type: ${JSON.stringify(blob.type)} ]`;
      } catch {
        return "[Body could not be read]";
      }
    }
    var extractUrl = (input) => typeof input === "string" ? new URL(input) : input instanceof URL ? input : new URL(input.url);
    exports.extractUrl = extractUrl;
  }
});

// node_modules/@atproto-labs/fetch/dist/fetch-request.js
var require_fetch_request = __commonJS({
  "node_modules/@atproto-labs/fetch/dist/fetch-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_FORBIDDEN_DOMAIN_NAMES = exports.FetchRequestError = void 0;
    exports.protocolCheckRequestTransform = protocolCheckRequestTransform;
    exports.redirectCheckRequestTransform = redirectCheckRequestTransform;
    exports.requireHostHeaderTransform = requireHostHeaderTransform;
    exports.forbiddenDomainNameRequestTransform = forbiddenDomainNameRequestTransform;
    var fetch_error_js_1 = require_fetch_error();
    var fetch_js_1 = require_fetch();
    var util_js_1 = require_util6();
    var FetchRequestError = class _FetchRequestError extends fetch_error_js_1.FetchError {
      constructor(request, statusCode, message2, options) {
        if (statusCode == null || !message2) {
          const info = extractInfo(extractRootCause(options?.cause));
          statusCode ?? (statusCode = info[0]);
          message2 || (message2 = info[1]);
        }
        super(statusCode, message2, options);
        Object.defineProperty(this, "request", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: request
        });
      }
      get expose() {
        return this.statusCode !== 500;
      }
      static from(request, cause) {
        if (cause instanceof _FetchRequestError)
          return cause;
        return new _FetchRequestError(request, void 0, void 0, { cause });
      }
    };
    exports.FetchRequestError = FetchRequestError;
    function extractRootCause(err) {
      if (err instanceof TypeError && err.message === "fetch failed" && err.cause !== void 0) {
        return err.cause;
      }
      return err;
    }
    function extractInfo(err) {
      if (typeof err === "string" && err.length > 0) {
        return [500, err];
      }
      if (!(err instanceof Error)) {
        return [500, "Failed to fetch"];
      }
      switch (err.message) {
        case "failed to fetch the data URL":
          return [400, err.message];
        case "unexpected redirect":
        case "cors failure":
        case "blocked":
        case "proxy authentication required":
          return [502, err.message];
      }
      const code2 = err["code"];
      if (typeof code2 === "string") {
        switch (true) {
          case code2 === "ENOTFOUND":
            return [400, "Invalid hostname"];
          case code2 === "ECONNREFUSED":
            return [502, "Connection refused"];
          case code2 === "DEPTH_ZERO_SELF_SIGNED_CERT":
            return [502, "Self-signed certificate"];
          case code2.startsWith("ERR_TLS"):
            return [502, "TLS error"];
          case code2.startsWith("ECONN"):
            return [502, "Connection error"];
          default:
            return [500, `${code2} error`];
        }
      }
      return [500, err.message];
    }
    function protocolCheckRequestTransform(protocols) {
      return (input, init) => {
        const { protocol, port } = (0, util_js_1.extractUrl)(input);
        const request = (0, fetch_js_1.asRequest)(input, init);
        const config = Object.hasOwn(protocols, protocol) ? protocols[protocol] : void 0;
        if (!config) {
          throw new FetchRequestError(request, 400, `Forbidden protocol "${protocol}"`);
        } else if (config === true) {
        } else if (!config["allowCustomPort"] && port !== "") {
          throw new FetchRequestError(request, 400, `Custom ${protocol} ports not allowed`);
        }
        return request;
      };
    }
    function redirectCheckRequestTransform() {
      return (input, init) => {
        const request = (0, fetch_js_1.asRequest)(input, init);
        if (request.redirect === "follow") {
          throw new FetchRequestError(request, 500, 'Request redirect must be "error" or "manual"');
        }
        return request;
      };
    }
    function requireHostHeaderTransform() {
      return (input, init) => {
        const { protocol, hostname } = (0, util_js_1.extractUrl)(input);
        const request = (0, fetch_js_1.asRequest)(input, init);
        if (protocol !== "http:" && protocol !== "https:") {
          throw new FetchRequestError(request, 400, `"${protocol}" requests are not allowed`);
        }
        if (!hostname || (0, util_js_1.isIp)(hostname)) {
          throw new FetchRequestError(request, 400, "Invalid hostname");
        }
        return request;
      };
    }
    exports.DEFAULT_FORBIDDEN_DOMAIN_NAMES = [
      "example.com",
      "*.example.com",
      "example.org",
      "*.example.org",
      "example.net",
      "*.example.net",
      "googleusercontent.com",
      "*.googleusercontent.com"
    ];
    function forbiddenDomainNameRequestTransform(denyList = exports.DEFAULT_FORBIDDEN_DOMAIN_NAMES) {
      const denySet = new Set(denyList);
      if (denySet.size === 0) {
        return fetch_js_1.asRequest;
      }
      return async (input, init) => {
        const { hostname } = (0, util_js_1.extractUrl)(input);
        const request = (0, fetch_js_1.asRequest)(input, init);
        if (denySet.has(hostname)) {
          throw new FetchRequestError(request, 403, "Forbidden hostname");
        }
        let curDot = hostname.indexOf(".");
        while (curDot !== -1) {
          const subdomain = hostname.slice(curDot + 1);
          if (denySet.has(`*.${subdomain}`)) {
            throw new FetchRequestError(request, 403, "Forbidden hostname");
          }
          curDot = hostname.indexOf(".", curDot + 1);
        }
        return request;
      };
    }
  }
});

// node_modules/@atproto-labs/pipe/dist/pipe.js
var require_pipe = __commonJS({
  "node_modules/@atproto-labs/pipe/dist/pipe.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pipeTwo = exports.pipe = void 0;
    function pipe(...pipeline) {
      return pipeline.reduce(pipeTwo);
    }
    exports.pipe = pipe;
    function pipeTwo(first, second) {
      return async (input) => second(await first(input));
    }
    exports.pipeTwo = pipeTwo;
  }
});

// node_modules/@atproto-labs/pipe/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/@atproto-labs/pipe/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pipeTwo = exports.pipe = void 0;
    var pipe_js_1 = require_pipe();
    Object.defineProperty(exports, "pipe", { enumerable: true, get: function() {
      return pipe_js_1.pipe;
    } });
    Object.defineProperty(exports, "pipeTwo", { enumerable: true, get: function() {
      return pipe_js_1.pipeTwo;
    } });
  }
});

// node_modules/@atproto-labs/fetch/dist/transformed-response.js
var require_transformed_response = __commonJS({
  "node_modules/@atproto-labs/fetch/dist/transformed-response.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f5) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f5.call(receiver, value) : f5 ? f5.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f5) {
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f5 : kind === "a" ? f5.call(receiver) : f5 ? f5.value : state.get(receiver);
    };
    var _TransformedResponse_response;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransformedResponse = void 0;
    var TransformedResponse = class extends Response {
      constructor(response, transform) {
        if (!response.body) {
          throw new TypeError("Response body is not available");
        }
        if (response.bodyUsed) {
          throw new TypeError("Response body is already used");
        }
        super(response.body.pipeThrough(transform), {
          status: response.status,
          statusText: response.statusText,
          headers: response.headers
        });
        _TransformedResponse_response.set(this, void 0);
        __classPrivateFieldSet(this, _TransformedResponse_response, response, "f");
      }
      /**
       * Some props can't be set through ResponseInit, so we need to proxy them
       */
      get url() {
        return __classPrivateFieldGet(this, _TransformedResponse_response, "f").url;
      }
      get redirected() {
        return __classPrivateFieldGet(this, _TransformedResponse_response, "f").redirected;
      }
      get type() {
        return __classPrivateFieldGet(this, _TransformedResponse_response, "f").type;
      }
      get statusText() {
        return __classPrivateFieldGet(this, _TransformedResponse_response, "f").statusText;
      }
    };
    exports.TransformedResponse = TransformedResponse;
    _TransformedResponse_response = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/@atproto-labs/fetch/dist/fetch-response.js
var require_fetch_response = __commonJS({
  "node_modules/@atproto-labs/fetch/dist/fetch-response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchResponseError = void 0;
    exports.peekJson = peekJson;
    exports.checkLength = checkLength;
    exports.extractLength = extractLength;
    exports.extractMime = extractMime;
    exports.cancelBodyOnError = cancelBodyOnError;
    exports.fetchOkProcessor = fetchOkProcessor;
    exports.fetchOkTransformer = fetchOkTransformer;
    exports.fetchMaxSizeProcessor = fetchMaxSizeProcessor;
    exports.fetchResponseMaxSizeChecker = fetchResponseMaxSizeChecker;
    exports.fetchTypeProcessor = fetchTypeProcessor;
    exports.fetchResponseTypeChecker = fetchResponseTypeChecker;
    exports.fetchResponseJsonTransformer = fetchResponseJsonTransformer;
    exports.fetchJsonProcessor = fetchJsonProcessor;
    exports.fetchJsonZodProcessor = fetchJsonZodProcessor;
    var pipe_1 = require_dist7();
    var fetch_error_js_1 = require_fetch_error();
    var transformed_response_js_1 = require_transformed_response();
    var util_js_1 = require_util6();
    var JSON_MIME = /^application\/(?:[^()<>@,;:/[\]\\?={} \t]+\+)?json$/i;
    var FetchResponseError = class _FetchResponseError extends fetch_error_js_1.FetchError {
      constructor(response, statusCode = response.status, message2 = response.statusText, options) {
        super(statusCode, message2, options);
        Object.defineProperty(this, "response", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: response
        });
      }
      static async from(response, customMessage = extractResponseMessage, statusCode = response.status, options) {
        const message2 = typeof customMessage === "string" ? customMessage : typeof customMessage === "function" ? await customMessage(response) : void 0;
        return new _FetchResponseError(response, statusCode, message2, options);
      }
    };
    exports.FetchResponseError = FetchResponseError;
    var extractResponseMessage = async (response) => {
      const mimeType = extractMime(response);
      if (!mimeType)
        return void 0;
      try {
        if (mimeType === "text/plain") {
          return await response.text();
        } else if (JSON_MIME.test(mimeType)) {
          const json = await response.json();
          if (typeof json === "string")
            return json;
          const errorDescription = (0, util_js_1.ifString)((0, util_js_1.ifObject)(json)?.["error_description"]);
          if (errorDescription)
            return errorDescription;
          const error = (0, util_js_1.ifString)((0, util_js_1.ifObject)(json)?.["error"]);
          if (error)
            return error;
          const message2 = (0, util_js_1.ifString)((0, util_js_1.ifObject)(json)?.["message"]);
          if (message2)
            return message2;
        }
      } catch {
      }
      return void 0;
    };
    async function peekJson(response, maxSize = Infinity) {
      const type = extractMime(response);
      if (type !== "application/json")
        return void 0;
      checkLength(response, maxSize);
      const clonedResponse = response.clone();
      const limitedResponse = response.body && maxSize < Infinity ? new transformed_response_js_1.TransformedResponse(clonedResponse, new util_js_1.MaxBytesTransformStream(maxSize)) : (
        // Note: some runtimes (e.g. react-native) don't expose a body property
        clonedResponse
      );
      return limitedResponse.json();
    }
    function checkLength(response, maxBytes) {
      if (!(maxBytes >= 0)) {
        throw new TypeError("maxBytes must be a non-negative number");
      }
      const length2 = extractLength(response);
      if (length2 != null && length2 > maxBytes) {
        throw new FetchResponseError(response, 502, "Response too large");
      }
      return length2;
    }
    function extractLength(response) {
      const contentLength = response.headers.get("Content-Length");
      if (contentLength == null)
        return void 0;
      if (!/^\d+$/.test(contentLength)) {
        throw new FetchResponseError(response, 502, "Invalid Content-Length");
      }
      const length2 = Number(contentLength);
      if (!Number.isSafeInteger(length2)) {
        throw new FetchResponseError(response, 502, "Content-Length too large");
      }
      return length2;
    }
    function extractMime(response) {
      const contentType = response.headers.get("Content-Type");
      if (contentType == null)
        return void 0;
      return contentType.split(";", 1)[0].trim();
    }
    function cancelBodyOnError(transformer, onCancellationError = util_js_1.logCancellationError) {
      return async (response) => {
        try {
          return await transformer(response);
        } catch (err) {
          await (0, util_js_1.cancelBody)(response, onCancellationError ?? void 0);
          throw err;
        }
      };
    }
    function fetchOkProcessor(customMessage) {
      return cancelBodyOnError((response) => {
        return fetchOkTransformer(response, customMessage);
      });
    }
    async function fetchOkTransformer(response, customMessage) {
      if (response.ok)
        return response;
      throw await FetchResponseError.from(response, customMessage);
    }
    function fetchMaxSizeProcessor(maxBytes) {
      if (maxBytes === Infinity)
        return (response) => response;
      if (!Number.isFinite(maxBytes) || maxBytes < 0) {
        throw new TypeError("maxBytes must be a 0, Infinity or a positive number");
      }
      return cancelBodyOnError((response) => {
        return fetchResponseMaxSizeChecker(response, maxBytes);
      });
    }
    function fetchResponseMaxSizeChecker(response, maxBytes) {
      if (maxBytes === Infinity)
        return response;
      checkLength(response, maxBytes);
      if (!response.body)
        return response;
      const transform = new util_js_1.MaxBytesTransformStream(maxBytes);
      return new transformed_response_js_1.TransformedResponse(response, transform);
    }
    function fetchTypeProcessor(expectedMime, contentTypeRequired = true) {
      const isExpected = typeof expectedMime === "string" ? (mimeType) => mimeType === expectedMime : expectedMime instanceof RegExp ? (mimeType) => expectedMime.test(mimeType) : expectedMime;
      return cancelBodyOnError((response) => {
        return fetchResponseTypeChecker(response, isExpected, contentTypeRequired);
      });
    }
    async function fetchResponseTypeChecker(response, isExpectedMime, contentTypeRequired = true) {
      const mimeType = extractMime(response);
      if (mimeType) {
        if (!isExpectedMime(mimeType.toLowerCase())) {
          throw await FetchResponseError.from(response, `Unexpected response Content-Type (${mimeType})`, 502);
        }
      } else if (contentTypeRequired) {
        throw await FetchResponseError.from(response, "Missing response Content-Type header", 502);
      }
      return response;
    }
    async function fetchResponseJsonTransformer(response) {
      try {
        const json = await response.json();
        return { response, json };
      } catch (cause) {
        throw new FetchResponseError(response, 502, "Unable to parse response as JSON", { cause });
      }
    }
    function fetchJsonProcessor(expectedMime = JSON_MIME, contentTypeRequired = true) {
      return (0, pipe_1.pipe)(fetchTypeProcessor(expectedMime, contentTypeRequired), cancelBodyOnError(fetchResponseJsonTransformer));
    }
    function fetchJsonZodProcessor(schema, params) {
      return async (jsonResponse) => schema.parseAsync(jsonResponse.json, params);
    }
  }
});

// node_modules/@atproto-labs/fetch/dist/fetch-wrap.js
var require_fetch_wrap = __commonJS({
  "node_modules/@atproto-labs/fetch/dist/fetch-wrap.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.timedFetch = void 0;
    exports.loggedFetch = loggedFetch;
    exports.bindFetch = bindFetch;
    var fetch_request_js_1 = require_fetch_request();
    var fetch_js_1 = require_fetch();
    var transformed_response_js_1 = require_transformed_response();
    var util_js_1 = require_util6();
    function loggedFetch({ fetch: fetch2 = globalThis.fetch, logRequest = true, logResponse = true, logError = true }) {
      const onRequest = logRequest === true ? async (request) => {
        const requestMessage = await (0, util_js_1.stringifyMessage)(request);
        console.info(`> ${request.method} ${request.url}
${(0, util_js_1.padLines)(requestMessage, "  ")}`);
      } : logRequest || void 0;
      const onResponse = logResponse === true ? async (response) => {
        const responseMessage = await (0, util_js_1.stringifyMessage)(response.clone());
        console.info(`< HTTP/1.1 ${response.status} ${response.statusText}
${(0, util_js_1.padLines)(responseMessage, "  ")}`);
      } : logResponse || void 0;
      const onError = logError === true ? async (error) => {
        console.error(`< Error:`, error);
      } : logError || void 0;
      if (!onRequest && !onResponse && !onError)
        return fetch2;
      return (0, fetch_js_1.toRequestTransformer)(async function(request) {
        if (onRequest)
          await onRequest(request);
        try {
          const response = await fetch2.call(this, request);
          if (onResponse)
            await onResponse(response, request);
          return response;
        } catch (error) {
          if (onError)
            await onError(error, request);
          throw error;
        }
      });
    }
    var timedFetch = (timeout = 6e4, fetch2 = globalThis.fetch) => {
      if (timeout === Infinity)
        return fetch2;
      if (!Number.isFinite(timeout) || timeout <= 0) {
        throw new TypeError("Timeout must be positive");
      }
      return (0, fetch_js_1.toRequestTransformer)(async function(request) {
        const controller = new AbortController();
        const signal = controller.signal;
        const abort = () => {
          controller.abort();
        };
        const cleanup = () => {
          clearTimeout(timer);
          request.signal?.removeEventListener("abort", abort);
        };
        const timer = setTimeout(abort, timeout);
        if (typeof timer === "object")
          timer.unref?.();
        request.signal?.addEventListener("abort", abort);
        signal.addEventListener("abort", cleanup);
        const response = await fetch2.call(this, request, { signal });
        if (!response.body) {
          cleanup();
          return response;
        } else {
          const transform = new TransformStream({ flush: cleanup });
          return new transformed_response_js_1.TransformedResponse(response, transform);
        }
      });
    };
    exports.timedFetch = timedFetch;
    function bindFetch(fetch2 = globalThis.fetch, context = globalThis) {
      return (0, fetch_js_1.toRequestTransformer)(async (request) => {
        try {
          return await fetch2.call(context, request);
        } catch (err) {
          throw fetch_request_js_1.FetchRequestError.from(request, err);
        }
      });
    }
  }
});

// node_modules/@atproto-labs/fetch/dist/index.js
var require_dist8 = __commonJS({
  "node_modules/@atproto-labs/fetch/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_fetch_error(), exports);
    __exportStar(require_fetch_request(), exports);
    __exportStar(require_fetch_response(), exports);
    __exportStar(require_fetch_wrap(), exports);
    __exportStar(require_fetch(), exports);
    __exportStar(require_util6(), exports);
  }
});

// node_modules/@atproto-labs/did-resolver/dist/did-resolver-base.js
var require_did_resolver_base = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/did-resolver-base.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DidResolverBase = void 0;
    var fetch_1 = require_dist8();
    var did_1 = require_dist4();
    var zod_1 = require_lib2();
    var DidResolverBase = class {
      constructor(methods) {
        Object.defineProperty(this, "methods", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.methods = new Map(Object.entries(methods));
      }
      async resolve(did, options) {
        options?.signal?.throwIfAborted();
        const method = (0, did_1.extractDidMethod)(did);
        const resolver = this.methods.get(method);
        if (!resolver) {
          throw new did_1.DidError(did, `Unsupported DID method`, "did-method-invalid", 400);
        }
        try {
          const document2 = await resolver.resolve(did, options);
          if (document2.id !== did) {
            throw new did_1.DidError(did, `DID document id (${document2.id}) does not match DID`, "did-document-id-mismatch", 400);
          }
          return document2;
        } catch (err) {
          if (err instanceof fetch_1.FetchRequestError) {
            throw new did_1.DidError(did, err.message, "did-fetch-error", 400, err);
          }
          if (err instanceof zod_1.ZodError) {
            throw new did_1.DidError(did, err.message, "did-document-format-error", 503, err);
          }
          throw did_1.DidError.from(err, did);
        }
      }
    };
    exports.DidResolverBase = DidResolverBase;
  }
});

// node_modules/@atproto-labs/did-resolver/dist/methods/plc.js
var require_plc2 = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/methods/plc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DidPlcMethod = void 0;
    var fetch_1 = require_dist8();
    var pipe_1 = require_dist7();
    var did_1 = require_dist4();
    var fetchSuccessHandler = (0, pipe_1.pipe)((0, fetch_1.fetchOkProcessor)(), (0, fetch_1.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/), (0, fetch_1.fetchJsonZodProcessor)(did_1.didDocumentValidator));
    var DidPlcMethod = class {
      constructor(options) {
        Object.defineProperty(this, "fetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "plcDirectoryUrl", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.plcDirectoryUrl = new URL(options?.plcDirectoryUrl || "https://plc.directory/");
        this.fetch = (0, fetch_1.bindFetch)(options?.fetch);
      }
      async resolve(did, options) {
        (0, did_1.assertDidPlc)(did);
        const url = new URL(`/${encodeURIComponent(did)}`, this.plcDirectoryUrl);
        return this.fetch(url, {
          redirect: "error",
          headers: { accept: "application/did+ld+json,application/json" },
          signal: options?.signal
        }).then(fetchSuccessHandler);
      }
    };
    exports.DidPlcMethod = DidPlcMethod;
  }
});

// node_modules/@atproto-labs/did-resolver/dist/methods/web.js
var require_web2 = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/methods/web.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DidWebMethod = void 0;
    exports.buildDidWebDocumentUrl = buildDidWebDocumentUrl;
    var fetch_1 = require_dist8();
    var pipe_1 = require_dist7();
    var did_1 = require_dist4();
    var fetchSuccessHandler = (0, pipe_1.pipe)((0, fetch_1.fetchOkProcessor)(), (0, fetch_1.fetchJsonProcessor)(/^application\/(did\+ld\+)?json$/), (0, fetch_1.fetchJsonZodProcessor)(did_1.didDocumentValidator));
    var DidWebMethod = class {
      constructor({ fetch: fetch2 = globalThis.fetch, allowHttp = true } = {}) {
        Object.defineProperty(this, "fetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "allowHttp", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.fetch = (0, fetch_1.bindFetch)(fetch2);
        this.allowHttp = allowHttp;
      }
      async resolve(did, options) {
        const didDocumentUrl = buildDidWebDocumentUrl(did);
        if (!this.allowHttp && didDocumentUrl.protocol === "http:") {
          throw new Error(`Cannot resolve DID document for localhost: ${didDocumentUrl}`);
        }
        return this.fetch(didDocumentUrl, {
          redirect: "error",
          headers: { accept: "application/did+ld+json,application/json" },
          signal: options?.signal
        }).then(fetchSuccessHandler);
      }
    };
    exports.DidWebMethod = DidWebMethod;
    function buildDidWebDocumentUrl(did) {
      const url = (0, did_1.didWebToUrl)(did);
      if (url.pathname === "/") {
        return new URL(`/.well-known/did.json`, url);
      } else {
        return new URL(`${url.pathname}/did.json`, url);
      }
    }
  }
});

// node_modules/@atproto-labs/did-resolver/dist/did-resolver-common.js
var require_did_resolver_common = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/did-resolver-common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DidResolverCommon = void 0;
    var did_resolver_base_js_1 = require_did_resolver_base();
    var plc_js_1 = require_plc2();
    var web_js_1 = require_web2();
    var DidResolverCommon = class extends did_resolver_base_js_1.DidResolverBase {
      constructor(options) {
        super({
          plc: new plc_js_1.DidPlcMethod(options),
          web: new web_js_1.DidWebMethod(options)
        });
      }
    };
    exports.DidResolverCommon = DidResolverCommon;
  }
});

// node_modules/@atproto-labs/did-resolver/dist/did-resolver.js
var require_did_resolver = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/did-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@atproto-labs/did-resolver/dist/methods.js
var require_methods2 = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/methods.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_plc2(), exports);
    __exportStar(require_web2(), exports);
  }
});

// node_modules/@atproto-labs/did-resolver/dist/util.js
var require_util7 = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@atproto-labs/did-resolver/dist/index.js
var require_dist9 = __commonJS({
  "node_modules/@atproto-labs/did-resolver/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_dist4(), exports);
    __exportStar(require_did_cache_memory(), exports);
    __exportStar(require_did_cache(), exports);
    __exportStar(require_did_method(), exports);
    __exportStar(require_did_resolver_common(), exports);
    __exportStar(require_did_resolver(), exports);
    __exportStar(require_methods2(), exports);
    __exportStar(require_util7(), exports);
  }
});

// node_modules/@atproto-labs/handle-resolver/dist/types.js
var require_types2 = __commonJS({
  "node_modules/@atproto-labs/handle-resolver/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isResolvedHandle = isResolvedHandle;
    var did_1 = require_dist4();
    function isResolvedHandle(value) {
      return value === null || (0, did_1.isAtprotoDid)(value);
    }
  }
});

// node_modules/@atproto-labs/handle-resolver/dist/app-view-handle-resolver.js
var require_app_view_handle_resolver = __commonJS({
  "node_modules/@atproto-labs/handle-resolver/dist/app-view-handle-resolver.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AppViewHandleResolver = exports.xrpcErrorSchema = void 0;
    var zod_1 = __importDefault(require_lib2());
    var types_js_1 = require_types2();
    exports.xrpcErrorSchema = zod_1.default.object({
      error: zod_1.default.string(),
      message: zod_1.default.string().optional()
    });
    var AppViewHandleResolver = class _AppViewHandleResolver {
      static from(service, options) {
        if (typeof service === "string" || service instanceof URL) {
          return new _AppViewHandleResolver(service, options);
        }
        return service;
      }
      constructor(service, options) {
        Object.defineProperty(this, "serviceUrl", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "fetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.serviceUrl = new URL(service);
        this.fetch = options?.fetch ?? globalThis.fetch;
      }
      async resolve(handle, options) {
        const url = new URL("/xrpc/com.atproto.identity.resolveHandle", this.serviceUrl);
        url.searchParams.set("handle", handle);
        const response = await this.fetch.call(null, url, {
          cache: options?.noCache ? "no-cache" : void 0,
          signal: options?.signal,
          redirect: "error"
        });
        const payload = await response.json();
        if (response.status === 400) {
          const data = exports.xrpcErrorSchema.parse(payload);
          if (data.error === "InvalidRequest" && data.message === "Unable to resolve handle") {
            return null;
          }
        }
        if (!response.ok) {
          throw new TypeError("Invalid response from resolveHandle method");
        }
        const value = payload?.did;
        if (!(0, types_js_1.isResolvedHandle)(value)) {
          throw new TypeError("Invalid DID returned from resolveHandle method");
        }
        return value;
      }
    };
    exports.AppViewHandleResolver = AppViewHandleResolver;
  }
});

// node_modules/@atproto-labs/handle-resolver/dist/internal-resolvers/dns-handle-resolver.js
var require_dns_handle_resolver = __commonJS({
  "node_modules/@atproto-labs/handle-resolver/dist/internal-resolvers/dns-handle-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DnsHandleResolver = void 0;
    var types_1 = require_types2();
    var SUBDOMAIN = "_atproto";
    var PREFIX = "did=";
    var DnsHandleResolver = class {
      constructor(resolveTxt) {
        Object.defineProperty(this, "resolveTxt", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: resolveTxt
        });
      }
      async resolve(handle) {
        const results = await this.resolveTxt.call(null, `${SUBDOMAIN}.${handle}`);
        if (!results)
          return null;
        for (let i9 = 0; i9 < results.length; i9++) {
          if (!results[i9].startsWith(PREFIX))
            continue;
          for (let j2 = i9 + 1; j2 < results.length; j2++) {
            if (results[j2].startsWith(PREFIX))
              return null;
          }
          const did = results[i9].slice(PREFIX.length);
          return (0, types_1.isResolvedHandle)(did) ? did : null;
        }
        return null;
      }
    };
    exports.DnsHandleResolver = DnsHandleResolver;
  }
});

// node_modules/@atproto-labs/handle-resolver/dist/internal-resolvers/well-known-handler-resolver.js
var require_well_known_handler_resolver = __commonJS({
  "node_modules/@atproto-labs/handle-resolver/dist/internal-resolvers/well-known-handler-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WellKnownHandleResolver = void 0;
    var types_js_1 = require_types2();
    var WellKnownHandleResolver = class {
      constructor(options) {
        Object.defineProperty(this, "fetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.fetch = options?.fetch ?? globalThis.fetch;
      }
      async resolve(handle, options) {
        const url = new URL("/.well-known/atproto-did", `https://${handle}`);
        try {
          const response = await this.fetch.call(null, url, {
            cache: options?.noCache ? "no-cache" : void 0,
            signal: options?.signal,
            redirect: "error"
          });
          const text = await response.text();
          const firstLine = text.split("\n")[0].trim();
          if ((0, types_js_1.isResolvedHandle)(firstLine))
            return firstLine;
          return null;
        } catch (err) {
          options?.signal?.throwIfAborted();
          return null;
        }
      }
    };
    exports.WellKnownHandleResolver = WellKnownHandleResolver;
  }
});

// node_modules/@atproto-labs/handle-resolver/dist/atproto-handle-resolver.js
var require_atproto_handle_resolver = __commonJS({
  "node_modules/@atproto-labs/handle-resolver/dist/atproto-handle-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AtprotoHandleResolver = void 0;
    var dns_handle_resolver_js_1 = require_dns_handle_resolver();
    var well_known_handler_resolver_js_1 = require_well_known_handler_resolver();
    var noop = () => {
    };
    var AtprotoHandleResolver = class {
      constructor(options) {
        Object.defineProperty(this, "httpResolver", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "dnsResolver", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "dnsResolverFallback", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.httpResolver = new well_known_handler_resolver_js_1.WellKnownHandleResolver(options);
        this.dnsResolver = new dns_handle_resolver_js_1.DnsHandleResolver(options.resolveTxt);
        this.dnsResolverFallback = options.resolveTxtFallback ? new dns_handle_resolver_js_1.DnsHandleResolver(options.resolveTxtFallback) : void 0;
      }
      async resolve(handle, options) {
        options?.signal?.throwIfAborted();
        const abortController = new AbortController();
        const { signal } = abortController;
        options?.signal?.addEventListener("abort", () => abortController.abort(), {
          signal
        });
        const wrappedOptions = { ...options, signal };
        try {
          const dnsPromise = this.dnsResolver.resolve(handle, wrappedOptions);
          const httpPromise = this.httpResolver.resolve(handle, wrappedOptions);
          httpPromise.catch(noop);
          const dnsRes = await dnsPromise;
          if (dnsRes)
            return dnsRes;
          signal.throwIfAborted();
          const res = await httpPromise;
          if (res)
            return res;
          signal.throwIfAborted();
          return this.dnsResolverFallback?.resolve(handle, wrappedOptions) ?? null;
        } finally {
          abortController.abort();
        }
      }
    };
    exports.AtprotoHandleResolver = AtprotoHandleResolver;
  }
});

// node_modules/@atproto-labs/handle-resolver/dist/atproto-doh-handle-resolver.js
var require_atproto_doh_handle_resolver = __commonJS({
  "node_modules/@atproto-labs/handle-resolver/dist/atproto-doh-handle-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AtprotoDohHandleResolver = void 0;
    var atproto_handle_resolver_js_1 = require_atproto_handle_resolver();
    var AtprotoDohHandleResolver = class extends atproto_handle_resolver_js_1.AtprotoHandleResolver {
      constructor(options) {
        super({
          ...options,
          resolveTxt: dohResolveTxtFactory(options),
          resolveTxtFallback: void 0
        });
      }
    };
    exports.AtprotoDohHandleResolver = AtprotoDohHandleResolver;
    function dohResolveTxtFactory({ dohEndpoint, fetch: fetch2 = globalThis.fetch }) {
      return async (hostname) => {
        const url = new URL(dohEndpoint);
        url.searchParams.set("type", "TXT");
        url.searchParams.set("name", hostname);
        const response = await fetch2(url, {
          method: "GET",
          headers: { accept: "application/dns-json" },
          redirect: "follow"
        });
        try {
          const contentType = response.headers.get("content-type")?.trim();
          if (!response.ok) {
            const message2 = contentType?.startsWith("text/plain") ? await response.text() : `Failed to resolve ${hostname}`;
            throw new TypeError(message2);
          } else if (contentType?.match(/application\/(dns-)?json/i) == null) {
            throw new TypeError("Unexpected response from DoH server");
          }
          const result = asResult(await response.json());
          return result.Answer?.filter(isAnswerTxt).map(extractTxtData) ?? null;
        } finally {
          if (response.bodyUsed === false) {
            void response.body?.cancel().catch(onCancelError);
          }
        }
      };
    }
    function onCancelError(err) {
      if (!(err instanceof DOMException) || err.name !== "AbortError") {
        console.error("An error occurred while cancelling the response body:", err);
      }
    }
    function isResult(result) {
      if (typeof result !== "object" || result === null)
        return false;
      if (!("Status" in result) || typeof result.Status !== "number")
        return false;
      if ("Answer" in result && !isArrayOf(result.Answer, isAnswer))
        return false;
      return true;
    }
    function asResult(result) {
      if (isResult(result))
        return result;
      throw new TypeError("Invalid DoH response");
    }
    function isArrayOf(value, predicate) {
      return Array.isArray(value) && value.every(predicate);
    }
    function isAnswer(answer) {
      return typeof answer === "object" && answer !== null && "name" in answer && typeof answer.name === "string" && "type" in answer && typeof answer.type === "number" && "data" in answer && typeof answer.data === "string" && "TTL" in answer && typeof answer.TTL === "number";
    }
    function isAnswerTxt(answer) {
      return answer.type === 16;
    }
    function extractTxtData(answer) {
      return answer.data.replace(/^"|"$/g, "").replace(/\\"/g, '"');
    }
  }
});

// node_modules/@atproto-labs/handle-resolver/dist/cached-handle-resolver.js
var require_cached_handle_resolver = __commonJS({
  "node_modules/@atproto-labs/handle-resolver/dist/cached-handle-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CachedHandleResolver = void 0;
    var simple_store_1 = require_dist6();
    var simple_store_memory_1 = require_dist5();
    var CachedHandleResolver = class {
      constructor(resolver, cache = new simple_store_memory_1.SimpleStoreMemory({
        max: 1e3,
        ttl: 10 * 6e4
      })) {
        Object.defineProperty(this, "getter", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.getter = new simple_store_1.CachedGetter((handle, options) => resolver.resolve(handle, options), cache);
      }
      async resolve(handle, options) {
        return this.getter.get(handle, options);
      }
    };
    exports.CachedHandleResolver = CachedHandleResolver;
  }
});

// node_modules/@atproto-labs/handle-resolver/dist/index.js
var require_dist10 = __commonJS({
  "node_modules/@atproto-labs/handle-resolver/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_types2(), exports);
    __exportStar(require_app_view_handle_resolver(), exports);
    __exportStar(require_atproto_doh_handle_resolver(), exports);
    __exportStar(require_atproto_handle_resolver(), exports);
    __exportStar(require_cached_handle_resolver(), exports);
  }
});

// node_modules/@atproto/oauth-types/dist/constants.js
var require_constants = __commonJS({
  "node_modules/@atproto/oauth-types/dist/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CLIENT_ASSERTION_TYPE_JWT_BEARER = void 0;
    exports.CLIENT_ASSERTION_TYPE_JWT_BEARER = "urn:ietf:params:oauth:client-assertion-type:jwt-bearer";
  }
});

// node_modules/@atproto/oauth-types/dist/util.js
var require_util8 = __commonJS({
  "node_modules/@atproto/oauth-types/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHostnameIP = isHostnameIP;
    exports.isLoopbackHost = isLoopbackHost;
    exports.isLoopbackUrl = isLoopbackUrl;
    exports.safeUrl = safeUrl;
    exports.extractUrlPath = extractUrlPath;
    function isHostnameIP(hostname) {
      if (hostname.match(/^\d+\.\d+\.\d+\.\d+$/))
        return true;
      if (hostname.startsWith("[") && hostname.endsWith("]"))
        return true;
      return false;
    }
    function isLoopbackHost(host) {
      return host === "localhost" || host === "127.0.0.1" || host === "[::1]";
    }
    function isLoopbackUrl(input) {
      const url = typeof input === "string" ? new URL(input) : input;
      return isLoopbackHost(url.hostname);
    }
    function safeUrl(input) {
      try {
        return new URL(input);
      } catch {
        return null;
      }
    }
    function extractUrlPath(url) {
      const endOfProtocol = url.startsWith("https://") ? 8 : url.startsWith("http://") ? 7 : -1;
      if (endOfProtocol === -1) {
        throw new TypeError('URL must use the "https:" or "http:" protocol');
      }
      const hashIdx = url.indexOf("#", endOfProtocol);
      const questionIdx = url.indexOf("?", endOfProtocol);
      const queryStrIdx = questionIdx !== -1 && (hashIdx === -1 || questionIdx < hashIdx) ? questionIdx : -1;
      const pathEnd = hashIdx === -1 ? queryStrIdx === -1 ? url.length : queryStrIdx : queryStrIdx === -1 ? hashIdx : Math.min(hashIdx, queryStrIdx);
      const slashIdx = url.indexOf("/", endOfProtocol);
      const pathStart = slashIdx === -1 || slashIdx > pathEnd ? pathEnd : slashIdx;
      if (endOfProtocol === pathStart) {
        throw new TypeError("URL must contain a host");
      }
      return url.substring(pathStart, pathEnd);
    }
  }
});

// node_modules/@atproto/oauth-types/dist/uri.js
var require_uri = __commonJS({
  "node_modules/@atproto/oauth-types/dist/uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.privateUseUriSchema = exports.webUriSchema = exports.httpsUriSchema = exports.loopbackUriSchema = exports.dangerousUriSchema = void 0;
    var zod_1 = require_lib2();
    var util_js_1 = require_util8();
    exports.dangerousUriSchema = zod_1.z.string().refine((data) => data.includes(":") && URL.canParse(data), {
      message: "Invalid URL"
    });
    exports.loopbackUriSchema = exports.dangerousUriSchema.superRefine((value, ctx) => {
      if (!value.startsWith("http://")) {
        ctx.addIssue({
          code: zod_1.ZodIssueCode.custom,
          message: 'URL must use the "http:" protocol'
        });
        return false;
      }
      const url = new URL(value);
      if (!(0, util_js_1.isLoopbackHost)(url.hostname)) {
        ctx.addIssue({
          code: zod_1.ZodIssueCode.custom,
          message: 'URL must use "localhost", "127.0.0.1" or "[::1]" as hostname'
        });
        return false;
      }
      return true;
    });
    exports.httpsUriSchema = exports.dangerousUriSchema.superRefine((value, ctx) => {
      if (!value.startsWith("https://")) {
        ctx.addIssue({
          code: zod_1.ZodIssueCode.custom,
          message: 'URL must use the "https:" protocol'
        });
        return false;
      }
      const url = new URL(value);
      if ((0, util_js_1.isLoopbackHost)(url.hostname)) {
        ctx.addIssue({
          code: zod_1.ZodIssueCode.custom,
          message: "https: URL must not use a loopback host"
        });
        return false;
      }
      if ((0, util_js_1.isHostnameIP)(url.hostname)) {
      } else {
        if (!url.hostname.includes(".")) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: "Domain name must contain at least two segments"
          });
          return false;
        }
        if (url.hostname.endsWith(".local")) {
          ctx.addIssue({
            code: zod_1.ZodIssueCode.custom,
            message: 'Domain name must not end with ".local"'
          });
          return false;
        }
      }
      return true;
    });
    exports.webUriSchema = zod_1.z.string().superRefine((value, ctx) => {
      if (value.startsWith("http://")) {
        const result = exports.loopbackUriSchema.safeParse(value);
        if (!result.success)
          result.error.issues.forEach(ctx.addIssue, ctx);
        return result.success;
      }
      if (value.startsWith("https://")) {
        const result = exports.httpsUriSchema.safeParse(value);
        if (!result.success)
          result.error.issues.forEach(ctx.addIssue, ctx);
        return result.success;
      }
      ctx.addIssue({
        code: zod_1.ZodIssueCode.custom,
        message: 'URL must use the "http:" or "https:" protocol'
      });
      return false;
    });
    exports.privateUseUriSchema = exports.dangerousUriSchema.superRefine((value, ctx) => {
      const dotIdx = value.indexOf(".");
      const colonIdx = value.indexOf(":");
      if (dotIdx === -1 || colonIdx === -1 || dotIdx > colonIdx) {
        ctx.addIssue({
          code: zod_1.ZodIssueCode.custom,
          message: 'Private-use URI scheme requires a "." as part of the protocol'
        });
        return false;
      }
      const url = new URL(value);
      if (!url.protocol.includes(".")) {
        ctx.addIssue({
          code: zod_1.ZodIssueCode.custom,
          message: "Invalid private-use URI scheme"
        });
        return false;
      }
      if (url.hostname) {
        ctx.addIssue({
          code: zod_1.ZodIssueCode.custom,
          message: 'Private-use URI schemes must not include a hostname (only one "/" is allowed after the protocol, as per RFC 8252)'
        });
        return false;
      }
      return true;
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-client-id.js
var require_oauth_client_id = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-client-id.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthClientIdSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthClientIdSchema = zod_1.z.string().min(1);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-redirect-uri.js
var require_oauth_redirect_uri = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-redirect-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthRedirectUriSchema = exports.oauthPrivateUseRedirectURISchema = exports.oauthHttpsRedirectURISchema = exports.oauthLoopbackRedirectURISchema = void 0;
    var zod_1 = require_lib2();
    var uri_js_1 = require_uri();
    exports.oauthLoopbackRedirectURISchema = uri_js_1.loopbackUriSchema.superRefine((value, ctx) => {
      if (value.startsWith("http://localhost")) {
        ctx.addIssue({
          code: zod_1.ZodIssueCode.custom,
          message: 'Use of "localhost" hostname is not allowed (RFC 8252), use a loopback IP such as "127.0.0.1" instead'
        });
        return false;
      }
      return true;
    });
    exports.oauthHttpsRedirectURISchema = uri_js_1.httpsUriSchema;
    exports.oauthPrivateUseRedirectURISchema = uri_js_1.privateUseUriSchema;
    exports.oauthRedirectUriSchema = zod_1.z.union([
      exports.oauthLoopbackRedirectURISchema,
      exports.oauthHttpsRedirectURISchema,
      exports.oauthPrivateUseRedirectURISchema
    ], {
      message: `URL must use the "https:" or "http:" protocol, or a private-use URI scheme (RFC 8252)`
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-scope.js
var require_oauth_scope = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-scope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthScopeSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthScopeSchema = zod_1.z.string().regex(/^[\x21\x23-\x5B\x5D-\x7E]+(?: [\x21\x23-\x5B\x5D-\x7E]+)*$/);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-client-id-loopback.js
var require_oauth_client_id_loopback = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-client-id-loopback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthClientIdLoopbackSchema = void 0;
    exports.isOAuthClientIdLoopback = isOAuthClientIdLoopback;
    exports.assertOAuthLoopbackClientId = assertOAuthLoopbackClientId;
    exports.parseOAuthLoopbackClientId = parseOAuthLoopbackClientId;
    var zod_1 = require_lib2();
    var oauth_client_id_js_1 = require_oauth_client_id();
    var oauth_redirect_uri_js_1 = require_oauth_redirect_uri();
    var oauth_scope_js_1 = require_oauth_scope();
    var PREFIX = "http://localhost";
    exports.oauthClientIdLoopbackSchema = oauth_client_id_js_1.oauthClientIdSchema.superRefine((value, ctx) => {
      try {
        assertOAuthLoopbackClientId(value);
        return true;
      } catch (error) {
        ctx.addIssue({
          code: zod_1.ZodIssueCode.custom,
          message: error instanceof TypeError ? error.message : "Invalid loopback client ID"
        });
        return false;
      }
    });
    function isOAuthClientIdLoopback(clientId) {
      try {
        parseOAuthLoopbackClientId(clientId);
        return true;
      } catch {
        return false;
      }
    }
    function assertOAuthLoopbackClientId(clientId) {
      void parseOAuthLoopbackClientId(clientId);
    }
    function parseOAuthLoopbackClientId(clientId) {
      if (!clientId.startsWith(PREFIX)) {
        throw new TypeError(`Loopback ClientID must start with "${PREFIX}"`);
      } else if (clientId.includes("#", PREFIX.length)) {
        throw new TypeError("Loopback ClientID must not contain a hash component");
      }
      const queryStringIdx = clientId.length > PREFIX.length && clientId[PREFIX.length] === "/" ? PREFIX.length + 1 : PREFIX.length;
      if (clientId.length === queryStringIdx) {
        return {};
      }
      if (clientId[queryStringIdx] !== "?") {
        throw new TypeError("Loopback ClientID must not contain a path component");
      }
      const searchParams = new URLSearchParams(clientId.slice(queryStringIdx + 1));
      for (const name2 of searchParams.keys()) {
        if (name2 !== "redirect_uri" && name2 !== "scope") {
          throw new TypeError(`Invalid query parameter "${name2}" in client ID`);
        }
      }
      const scope = searchParams.get("scope") ?? void 0;
      if (scope != null) {
        if (searchParams.getAll("scope").length > 1) {
          throw new TypeError("Loopback ClientID must contain at most one scope query parameter");
        } else if (!oauth_scope_js_1.oauthScopeSchema.safeParse(scope).success) {
          throw new TypeError("Invalid scope query parameter in client ID");
        }
      }
      const redirect_uris = searchParams.has("redirect_uri") ? searchParams.getAll("redirect_uri").map((value) => oauth_redirect_uri_js_1.oauthLoopbackRedirectURISchema.parse(value)) : void 0;
      return {
        scope,
        redirect_uris
      };
    }
  }
});

// node_modules/@atproto/oauth-types/dist/atproto-loopback-client-metadata.js
var require_atproto_loopback_client_metadata = __commonJS({
  "node_modules/@atproto/oauth-types/dist/atproto-loopback-client-metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.atprotoLoopbackClientMetadata = atprotoLoopbackClientMetadata;
    var oauth_client_id_loopback_js_1 = require_oauth_client_id_loopback();
    function atprotoLoopbackClientMetadata(clientId) {
      const { scope = "atproto", redirect_uris = [`http://127.0.0.1/`, `http://[::1]/`] } = (0, oauth_client_id_loopback_js_1.parseOAuthLoopbackClientId)(clientId);
      return {
        client_id: clientId,
        scope,
        redirect_uris,
        client_name: "Loopback client",
        response_types: ["code"],
        grant_types: ["authorization_code", "refresh_token"],
        token_endpoint_auth_method: "none",
        application_type: "native",
        dpop_bound_access_tokens: true
      };
    }
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-access-token.js
var require_oauth_access_token = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-access-token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthAccessTokenSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthAccessTokenSchema = zod_1.z.string().min(1);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-authorization-code-grant-token-request.js
var require_oauth_authorization_code_grant_token_request = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-authorization-code-grant-token-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthAuthorizationCodeGrantTokenRequestSchema = void 0;
    var zod_1 = require_lib2();
    var oauth_redirect_uri_js_1 = require_oauth_redirect_uri();
    exports.oauthAuthorizationCodeGrantTokenRequestSchema = zod_1.z.object({
      grant_type: zod_1.z.literal("authorization_code"),
      code: zod_1.z.string().min(1),
      redirect_uri: oauth_redirect_uri_js_1.oauthRedirectUriSchema,
      /** @see {@link https://datatracker.ietf.org/doc/html/rfc7636#section-4.1} */
      code_verifier: zod_1.z.string().min(43).max(128).regex(/^[a-zA-Z0-9-._~]+$/).optional()
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-authorization-details.js
var require_oauth_authorization_details = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-authorization-details.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthAuthorizationDetailsSchema = exports.oauthAuthorizationDetailSchema = void 0;
    var zod_1 = require_lib2();
    var uri_js_1 = require_uri();
    exports.oauthAuthorizationDetailSchema = zod_1.z.object({
      type: zod_1.z.string(),
      /**
       * An array of strings representing the location of the resource or RS. These
       * strings are typically URIs identifying the location of the RS.
       */
      locations: zod_1.z.array(uri_js_1.dangerousUriSchema).optional(),
      /**
       * An array of strings representing the kinds of actions to be taken at the
       * resource.
       */
      actions: zod_1.z.array(zod_1.z.string()).optional(),
      /**
       * An array of strings representing the kinds of data being requested from the
       * resource.
       */
      datatypes: zod_1.z.array(zod_1.z.string()).optional(),
      /**
       * A string identifier indicating a specific resource available at the API.
       */
      identifier: zod_1.z.string().optional(),
      /**
       * An array of strings representing the types or levels of privilege being
       * requested at the resource.
       */
      privileges: zod_1.z.array(zod_1.z.string()).optional()
    });
    exports.oauthAuthorizationDetailsSchema = zod_1.z.array(exports.oauthAuthorizationDetailSchema);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-authorization-request-jar.js
var require_oauth_authorization_request_jar = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-authorization-request-jar.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthAuthorizationRequestJarSchema = void 0;
    var jwk_1 = require_dist();
    var zod_1 = require_lib2();
    exports.oauthAuthorizationRequestJarSchema = zod_1.z.object({
      /**
       * AuthorizationRequest inside a JWT:
       * - "iat" is required and **MUST** be less than one minute
       *
       * @see {@link https://datatracker.ietf.org/doc/html/rfc9101}
       */
      request: zod_1.z.union([jwk_1.signedJwtSchema, jwk_1.unsignedJwtSchema])
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-code-challenge-method.js
var require_oauth_code_challenge_method = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-code-challenge-method.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthCodeChallengeMethodSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthCodeChallengeMethodSchema = zod_1.z.enum(["S256", "plain"]);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-response-type.js
var require_oauth_response_type = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-response-type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthResponseTypeSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthResponseTypeSchema = zod_1.z.enum([
      // OAuth2 (https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-10#section-4.1.1)
      "code",
      // Authorization Code Grant
      "token",
      // Implicit Grant
      // OIDC (https://openid.net/specs/oauth-v2-multiple-response-types-1_0.html)
      "none",
      "code id_token token",
      "code id_token",
      "code token",
      "id_token token",
      "id_token"
    ]);
  }
});

// node_modules/@atproto/oauth-types/dist/oidc-claims-parameter.js
var require_oidc_claims_parameter = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oidc-claims-parameter.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oidcClaimsParameterSchema = void 0;
    var zod_1 = require_lib2();
    exports.oidcClaimsParameterSchema = zod_1.z.enum([
      // https://openid.net/specs/openid-provider-authentication-policy-extension-1_0.html#rfc.section.5.2
      // if client metadata "require_auth_time" is true, this *must* be provided
      "auth_time",
      // OIDC
      "nonce",
      "acr",
      // OpenID: "profile" scope
      "name",
      "family_name",
      "given_name",
      "middle_name",
      "nickname",
      "preferred_username",
      "gender",
      "picture",
      "profile",
      "website",
      "birthdate",
      "zoneinfo",
      "locale",
      "updated_at",
      // OpenID: "email" scope
      "email",
      "email_verified",
      // OpenID: "phone" scope
      "phone_number",
      "phone_number_verified",
      // OpenID: "address" scope
      "address"
    ]);
  }
});

// node_modules/@atproto/oauth-types/dist/oidc-claims-properties.js
var require_oidc_claims_properties = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oidc-claims-properties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oidcClaimsPropertiesSchema = void 0;
    var zod_1 = require_lib2();
    var oidcClaimsValueSchema = zod_1.z.union([zod_1.z.string(), zod_1.z.number(), zod_1.z.boolean()]);
    exports.oidcClaimsPropertiesSchema = zod_1.z.object({
      essential: zod_1.z.boolean().optional(),
      value: oidcClaimsValueSchema.optional(),
      values: zod_1.z.array(oidcClaimsValueSchema).optional()
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oidc-entity-type.js
var require_oidc_entity_type = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oidc-entity-type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oidcEntityTypeSchema = void 0;
    var zod_1 = require_lib2();
    exports.oidcEntityTypeSchema = zod_1.z.enum(["userinfo", "id_token"]);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-authorization-request-parameters.js
var require_oauth_authorization_request_parameters = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-authorization-request-parameters.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthAuthorizationRequestParametersSchema = void 0;
    var jwk_1 = require_dist();
    var zod_1 = require_lib2();
    var oauth_authorization_details_js_1 = require_oauth_authorization_details();
    var oauth_client_id_js_1 = require_oauth_client_id();
    var oauth_code_challenge_method_js_1 = require_oauth_code_challenge_method();
    var oauth_redirect_uri_js_1 = require_oauth_redirect_uri();
    var oauth_response_type_js_1 = require_oauth_response_type();
    var oauth_scope_js_1 = require_oauth_scope();
    var oidc_claims_parameter_js_1 = require_oidc_claims_parameter();
    var oidc_claims_properties_js_1 = require_oidc_claims_properties();
    var oidc_entity_type_js_1 = require_oidc_entity_type();
    exports.oauthAuthorizationRequestParametersSchema = zod_1.z.object({
      client_id: oauth_client_id_js_1.oauthClientIdSchema,
      state: zod_1.z.string().optional(),
      redirect_uri: oauth_redirect_uri_js_1.oauthRedirectUriSchema.optional(),
      scope: oauth_scope_js_1.oauthScopeSchema.optional(),
      response_type: oauth_response_type_js_1.oauthResponseTypeSchema,
      // PKCE
      code_challenge: zod_1.z.string().optional(),
      code_challenge_method: oauth_code_challenge_method_js_1.oauthCodeChallengeMethodSchema.default("S256").optional(),
      // DPOP
      // https://datatracker.ietf.org/doc/html/rfc9449#section-12.3
      dpop_jkt: zod_1.z.string().optional(),
      // OIDC
      // Default depend on response_type
      response_mode: zod_1.z.enum(["query", "fragment", "form_post"]).optional(),
      nonce: zod_1.z.string().optional(),
      // Specifies the allowable elapsed time in seconds since the last time the
      // End-User was actively authenticated by the OP. If the elapsed time is
      // greater than this value, the OP MUST attempt to actively re-authenticate
      // the End-User. (The max_age request parameter corresponds to the OpenID 2.0
      // PAPE [OpenID.PAPE] max_auth_age request parameter.) When max_age is used,
      // the ID Token returned MUST include an auth_time Claim Value. Note that
      // max_age=0 is equivalent to prompt=login.
      max_age: zod_1.z.number().int().min(0).optional(),
      claims: zod_1.z.record(oidc_entity_type_js_1.oidcEntityTypeSchema, zod_1.z.record(oidc_claims_parameter_js_1.oidcClaimsParameterSchema, zod_1.z.union([zod_1.z.literal(null), oidc_claims_properties_js_1.oidcClaimsPropertiesSchema]))).optional(),
      // https://openid.net/specs/openid-connect-core-1_0.html#RegistrationParameter
      // Not supported by this library (yet?)
      // registration: clientMetadataSchema.optional(),
      login_hint: zod_1.z.string().min(1).optional(),
      ui_locales: zod_1.z.string().regex(/^[a-z]{2}(-[A-Z]{2})?( [a-z]{2}(-[A-Z]{2})?)*$/).optional(),
      // Previous ID Token, should be provided when prompt=none is used
      id_token_hint: jwk_1.signedJwtSchema.optional(),
      // Type of UI the AS is displayed on
      display: zod_1.z.enum(["page", "popup", "touch", "wap"]).optional(),
      /**
       * - "none" will only be allowed if the user already allowed the client on the same device
       * - "login" will force the user to login again, unless he very recently logged in
       * - "consent" will force the user to consent again
       * - "select_account" will force the user to select an account
       */
      prompt: zod_1.z.enum(["none", "login", "consent", "select_account"]).optional(),
      // https://datatracker.ietf.org/doc/html/rfc9396
      authorization_details: oauth_authorization_details_js_1.oauthAuthorizationDetailsSchema.optional()
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-authorization-request-par.js
var require_oauth_authorization_request_par = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-authorization-request-par.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthAuthorizationRequestParSchema = void 0;
    var zod_1 = require_lib2();
    var oauth_authorization_request_jar_js_1 = require_oauth_authorization_request_jar();
    var oauth_authorization_request_parameters_js_1 = require_oauth_authorization_request_parameters();
    exports.oauthAuthorizationRequestParSchema = zod_1.z.union([
      oauth_authorization_request_parameters_js_1.oauthAuthorizationRequestParametersSchema,
      oauth_authorization_request_jar_js_1.oauthAuthorizationRequestJarSchema
    ]);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-request-uri.js
var require_oauth_request_uri = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-request-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthRequestUriSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthRequestUriSchema = zod_1.z.string();
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-authorization-request-uri.js
var require_oauth_authorization_request_uri = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-authorization-request-uri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthAuthorizationRequestUriSchema = void 0;
    var zod_1 = require_lib2();
    var oauth_request_uri_js_1 = require_oauth_request_uri();
    exports.oauthAuthorizationRequestUriSchema = zod_1.z.object({
      request_uri: oauth_request_uri_js_1.oauthRequestUriSchema
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-authorization-request-query.js
var require_oauth_authorization_request_query = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-authorization-request-query.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthAuthorizationRequestQuerySchema = void 0;
    var zod_1 = require_lib2();
    var oauth_authorization_request_jar_js_1 = require_oauth_authorization_request_jar();
    var oauth_authorization_request_parameters_js_1 = require_oauth_authorization_request_parameters();
    var oauth_authorization_request_uri_js_1 = require_oauth_authorization_request_uri();
    exports.oauthAuthorizationRequestQuerySchema = zod_1.z.union([
      oauth_authorization_request_parameters_js_1.oauthAuthorizationRequestParametersSchema,
      oauth_authorization_request_jar_js_1.oauthAuthorizationRequestJarSchema,
      oauth_authorization_request_uri_js_1.oauthAuthorizationRequestUriSchema
    ]);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-issuer-identifier.js
var require_oauth_issuer_identifier = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-issuer-identifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthIssuerIdentifierSchema = void 0;
    var zod_1 = require_lib2();
    var uri_js_1 = require_uri();
    exports.oauthIssuerIdentifierSchema = uri_js_1.webUriSchema.superRefine((value, ctx) => {
      if (value.endsWith("/")) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: "Issuer URL must not end with a slash"
        });
        return false;
      }
      const url = new URL(value);
      if (url.username || url.password) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: "Issuer URL must not contain a username or password"
        });
        return false;
      }
      if (url.hash || url.search) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: "Issuer URL must not contain a query or fragment"
        });
        return false;
      }
      const canonicalValue = url.pathname === "/" ? url.origin : url.href;
      if (value !== canonicalValue) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: "Issuer URL must be in the canonical form"
        });
        return false;
      }
      return true;
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-authorization-server-metadata.js
var require_oauth_authorization_server_metadata = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-authorization-server-metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthAuthorizationServerMetadataValidator = exports.oauthAuthorizationServerMetadataSchema = void 0;
    var zod_1 = require_lib2();
    var oauth_code_challenge_method_js_1 = require_oauth_code_challenge_method();
    var oauth_issuer_identifier_js_1 = require_oauth_issuer_identifier();
    var uri_js_1 = require_uri();
    exports.oauthAuthorizationServerMetadataSchema = zod_1.z.object({
      issuer: oauth_issuer_identifier_js_1.oauthIssuerIdentifierSchema,
      claims_supported: zod_1.z.array(zod_1.z.string()).optional(),
      claims_locales_supported: zod_1.z.array(zod_1.z.string()).optional(),
      claims_parameter_supported: zod_1.z.boolean().optional(),
      request_parameter_supported: zod_1.z.boolean().optional(),
      request_uri_parameter_supported: zod_1.z.boolean().optional(),
      require_request_uri_registration: zod_1.z.boolean().optional(),
      scopes_supported: zod_1.z.array(zod_1.z.string()).optional(),
      subject_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
      response_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
      response_modes_supported: zod_1.z.array(zod_1.z.string()).optional(),
      grant_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
      code_challenge_methods_supported: zod_1.z.array(oauth_code_challenge_method_js_1.oauthCodeChallengeMethodSchema).min(1).optional(),
      ui_locales_supported: zod_1.z.array(zod_1.z.string()).optional(),
      id_token_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
      display_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
      request_object_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
      authorization_response_iss_parameter_supported: zod_1.z.boolean().optional(),
      authorization_details_types_supported: zod_1.z.array(zod_1.z.string()).optional(),
      request_object_encryption_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
      request_object_encryption_enc_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
      jwks_uri: uri_js_1.webUriSchema.optional(),
      authorization_endpoint: uri_js_1.webUriSchema,
      // .optional(),
      token_endpoint: uri_js_1.webUriSchema,
      // .optional(),
      token_endpoint_auth_methods_supported: zod_1.z.array(zod_1.z.string()).optional(),
      token_endpoint_auth_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
      revocation_endpoint: uri_js_1.webUriSchema.optional(),
      introspection_endpoint: uri_js_1.webUriSchema.optional(),
      pushed_authorization_request_endpoint: uri_js_1.webUriSchema.optional(),
      require_pushed_authorization_requests: zod_1.z.boolean().optional(),
      userinfo_endpoint: uri_js_1.webUriSchema.optional(),
      end_session_endpoint: uri_js_1.webUriSchema.optional(),
      registration_endpoint: uri_js_1.webUriSchema.optional(),
      // https://datatracker.ietf.org/doc/html/rfc9449#section-5.1
      dpop_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
      // https://datatracker.ietf.org/doc/html/draft-ietf-oauth-resource-metadata-05#section-4
      protected_resources: zod_1.z.array(uri_js_1.webUriSchema).optional(),
      // https://drafts.aaronpk.com/draft-parecki-oauth-client-id-metadata-document/draft-parecki-oauth-client-id-metadata-document.html
      client_id_metadata_document_supported: zod_1.z.boolean().optional()
    });
    exports.oauthAuthorizationServerMetadataValidator = exports.oauthAuthorizationServerMetadataSchema.superRefine((data, ctx) => {
      if (data.require_pushed_authorization_requests && !data.pushed_authorization_request_endpoint) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: '"pushed_authorization_request_endpoint" required when "require_pushed_authorization_requests" is true'
        });
      }
    }).superRefine((data, ctx) => {
      if (data.response_types_supported) {
        if (!data.response_types_supported.includes("code")) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: 'Response type "code" is required'
          });
        }
      }
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-client-credentials-grant-token-request.js
var require_oauth_client_credentials_grant_token_request = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-client-credentials-grant-token-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthClientCredentialsGrantTokenRequestSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthClientCredentialsGrantTokenRequestSchema = zod_1.z.object({
      grant_type: zod_1.z.literal("client_credentials")
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-client-credentials.js
var require_oauth_client_credentials = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-client-credentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthClientCredentialsSchema = exports.oauthClientCredentialsNoneSchema = exports.oauthClientCredentialsSecretPostSchema = exports.oauthClientCredentialsJwtBearerSchema = void 0;
    var zod_1 = require_lib2();
    var jwk_1 = require_dist();
    var oauth_client_id_js_1 = require_oauth_client_id();
    var constants_js_1 = require_constants();
    exports.oauthClientCredentialsJwtBearerSchema = zod_1.z.object({
      client_id: oauth_client_id_js_1.oauthClientIdSchema,
      client_assertion_type: zod_1.z.literal(constants_js_1.CLIENT_ASSERTION_TYPE_JWT_BEARER),
      /**
       * - "sub" the subject MUST be the "client_id" of the OAuth client
       * - "iat" is required and MUST be less than one minute
       * - "aud" must containing a value that identifies the authorization server
       * - The JWT MAY contain a "jti" (JWT ID) claim that provides a unique identifier for the token.
       * - Note that the authorization server may reject JWTs with an "exp" claim value that is unreasonably far in the future.
       *
       * @see {@link https://datatracker.ietf.org/doc/html/rfc7523#section-3}
       */
      client_assertion: jwk_1.signedJwtSchema
    });
    exports.oauthClientCredentialsSecretPostSchema = zod_1.z.object({
      client_id: oauth_client_id_js_1.oauthClientIdSchema,
      client_secret: zod_1.z.string()
    });
    exports.oauthClientCredentialsNoneSchema = zod_1.z.object({
      client_id: oauth_client_id_js_1.oauthClientIdSchema
    });
    exports.oauthClientCredentialsSchema = zod_1.z.union([
      exports.oauthClientCredentialsJwtBearerSchema,
      exports.oauthClientCredentialsSecretPostSchema,
      // Must be last since it is less specific
      exports.oauthClientCredentialsNoneSchema
    ]);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-client-id-discoverable.js
var require_oauth_client_id_discoverable = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-client-id-discoverable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthClientIdDiscoverableSchema = void 0;
    exports.isOAuthClientIdDiscoverable = isOAuthClientIdDiscoverable;
    exports.assertOAuthDiscoverableClientId = assertOAuthDiscoverableClientId;
    exports.parseOAuthDiscoverableClientId = parseOAuthDiscoverableClientId;
    var zod_1 = require_lib2();
    var oauth_client_id_js_1 = require_oauth_client_id();
    var uri_js_1 = require_uri();
    var util_js_1 = require_util8();
    exports.oauthClientIdDiscoverableSchema = zod_1.z.intersection(oauth_client_id_js_1.oauthClientIdSchema, uri_js_1.httpsUriSchema).superRefine((value, ctx) => {
      const url = new URL(value);
      if (url.username || url.password) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: "ClientID must not contain credentials"
        });
        return false;
      }
      if (url.hash) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: "ClientID must not contain a fragment"
        });
        return false;
      }
      if (url.pathname === "/") {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: 'ClientID must contain a path component (e.g. "/client-metadata.json")'
        });
        return false;
      }
      if (url.pathname.endsWith("/")) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: "ClientID path must not end with a trailing slash"
        });
        return false;
      }
      if ((0, util_js_1.isHostnameIP)(url.hostname)) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: "ClientID hostname must not be an IP address"
        });
        return false;
      }
      if ((0, util_js_1.extractUrlPath)(value) !== url.pathname) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.custom,
          message: `ClientID must be in canonical form ("${url.href}", got "${value}")`
        });
        return false;
      }
      return true;
    });
    function isOAuthClientIdDiscoverable(clientId) {
      return exports.oauthClientIdDiscoverableSchema.safeParse(clientId).success;
    }
    function assertOAuthDiscoverableClientId(value) {
      void exports.oauthClientIdDiscoverableSchema.parse(value);
    }
    function parseOAuthDiscoverableClientId(clientId) {
      return new URL(exports.oauthClientIdDiscoverableSchema.parse(clientId));
    }
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-endpoint-auth-method.js
var require_oauth_endpoint_auth_method = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-endpoint-auth-method.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthEndpointAuthMethod = void 0;
    var zod_1 = require_lib2();
    exports.oauthEndpointAuthMethod = zod_1.z.enum([
      "client_secret_basic",
      "client_secret_jwt",
      "client_secret_post",
      "none",
      "private_key_jwt",
      "self_signed_tls_client_auth",
      "tls_client_auth"
    ]);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-grant-type.js
var require_oauth_grant_type = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-grant-type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthGrantTypeSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthGrantTypeSchema = zod_1.z.enum([
      "authorization_code",
      "implicit",
      "refresh_token",
      "password",
      // Not part of OAuth 2.1
      "client_credentials",
      "urn:ietf:params:oauth:grant-type:jwt-bearer",
      "urn:ietf:params:oauth:grant-type:saml2-bearer"
    ]);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-client-metadata.js
var require_oauth_client_metadata = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-client-metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthClientMetadataSchema = void 0;
    var jwk_1 = require_dist();
    var zod_1 = require_lib2();
    var oauth_client_id_js_1 = require_oauth_client_id();
    var oauth_endpoint_auth_method_js_1 = require_oauth_endpoint_auth_method();
    var oauth_grant_type_js_1 = require_oauth_grant_type();
    var oauth_redirect_uri_js_1 = require_oauth_redirect_uri();
    var oauth_response_type_js_1 = require_oauth_response_type();
    var oauth_scope_js_1 = require_oauth_scope();
    var uri_js_1 = require_uri();
    exports.oauthClientMetadataSchema = zod_1.z.object({
      /**
       * @note redirect_uris require additional validation
       */
      redirect_uris: zod_1.z.array(oauth_redirect_uri_js_1.oauthRedirectUriSchema).nonempty(),
      response_types: zod_1.z.array(oauth_response_type_js_1.oauthResponseTypeSchema).nonempty().default(["code"]),
      grant_types: zod_1.z.array(oauth_grant_type_js_1.oauthGrantTypeSchema).nonempty().default(["authorization_code"]),
      scope: oauth_scope_js_1.oauthScopeSchema.optional(),
      token_endpoint_auth_method: oauth_endpoint_auth_method_js_1.oauthEndpointAuthMethod.default("none").optional(),
      token_endpoint_auth_signing_alg: zod_1.z.string().optional(),
      userinfo_signed_response_alg: zod_1.z.string().optional(),
      userinfo_encrypted_response_alg: zod_1.z.string().optional(),
      jwks_uri: uri_js_1.webUriSchema.optional(),
      jwks: jwk_1.jwksPubSchema.optional(),
      application_type: zod_1.z.enum(["web", "native"]).default("web").optional(),
      // default, per spec, is "web"
      subject_type: zod_1.z.enum(["public", "pairwise"]).default("public").optional(),
      request_object_signing_alg: zod_1.z.string().optional(),
      id_token_signed_response_alg: zod_1.z.string().optional(),
      authorization_signed_response_alg: zod_1.z.string().default("RS256").optional(),
      authorization_encrypted_response_enc: zod_1.z.enum(["A128CBC-HS256"]).optional(),
      authorization_encrypted_response_alg: zod_1.z.string().optional(),
      client_id: oauth_client_id_js_1.oauthClientIdSchema.optional(),
      client_name: zod_1.z.string().optional(),
      client_uri: uri_js_1.webUriSchema.optional(),
      policy_uri: uri_js_1.webUriSchema.optional(),
      tos_uri: uri_js_1.webUriSchema.optional(),
      logo_uri: uri_js_1.webUriSchema.optional(),
      // TODO: allow data: uri ?
      /**
       * Default Maximum Authentication Age. Specifies that the End-User MUST be
       * actively authenticated if the End-User was authenticated longer ago than
       * the specified number of seconds. The max_age request parameter overrides
       * this default value. If omitted, no default Maximum Authentication Age is
       * specified.
       */
      default_max_age: zod_1.z.number().optional(),
      require_auth_time: zod_1.z.boolean().optional(),
      contacts: zod_1.z.array(zod_1.z.string().email()).optional(),
      tls_client_certificate_bound_access_tokens: zod_1.z.boolean().optional(),
      // https://datatracker.ietf.org/doc/html/rfc9449#section-5.2
      dpop_bound_access_tokens: zod_1.z.boolean().optional(),
      // https://datatracker.ietf.org/doc/html/rfc9396#section-14.5
      authorization_details_types: zod_1.z.array(zod_1.z.string()).optional()
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-endpoint-name.js
var require_oauth_endpoint_name = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-endpoint-name.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAUTH_ENDPOINT_NAMES = void 0;
    exports.OAUTH_ENDPOINT_NAMES = [
      "token",
      "revocation",
      "introspection",
      "pushed_authorization_request"
    ];
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-introspection-response.js
var require_oauth_introspection_response = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-introspection-response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-par-response.js
var require_oauth_par_response = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-par-response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthParResponseSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthParResponseSchema = zod_1.z.object({
      request_uri: zod_1.z.string(),
      expires_in: zod_1.z.number().int().positive()
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-password-grant-token-request.js
var require_oauth_password_grant_token_request = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-password-grant-token-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthPasswordGrantTokenRequestSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthPasswordGrantTokenRequestSchema = zod_1.z.object({
      grant_type: zod_1.z.literal("password"),
      username: zod_1.z.string(),
      password: zod_1.z.string()
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-protected-resource-metadata.js
var require_oauth_protected_resource_metadata = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-protected-resource-metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthProtectedResourceMetadataSchema = void 0;
    var zod_1 = require_lib2();
    var oauth_issuer_identifier_js_1 = require_oauth_issuer_identifier();
    var uri_js_1 = require_uri();
    exports.oauthProtectedResourceMetadataSchema = zod_1.z.object({
      /**
       * REQUIRED. The protected resource's resource identifier, which is a URL that
       * uses the https scheme and has no query or fragment components. Using these
       * well-known resources is described in Section 3.
       *
       * @note This schema allows non https URLs for testing & development purposes.
       * Make sure to validate the URL before using it in a production environment.
       */
      resource: uri_js_1.webUriSchema.refine((url) => !url.includes("?"), {
        message: "Resource URL must not contain query parameters"
      }).refine((url) => !url.includes("#"), {
        message: "Resource URL must not contain a fragment"
      }),
      /**
       * OPTIONAL. JSON array containing a list of OAuth authorization server issuer
       * identifiers, as defined in [RFC8414], for authorization servers that can be
       * used with this protected resource. Protected resources MAY choose not to
       * advertise some supported authorization servers even when this parameter is
       * used. In some use cases, the set of authorization servers will not be
       * enumerable, in which case this metadata parameter would not be used.
       */
      authorization_servers: zod_1.z.array(oauth_issuer_identifier_js_1.oauthIssuerIdentifierSchema).optional(),
      /**
       * OPTIONAL. URL of the protected resource's JWK Set [JWK] document. This
       * contains public keys belonging to the protected resource, such as signing
       * key(s) that the resource server uses to sign resource responses. This URL
       * MUST use the https scheme. When both signing and encryption keys are made
       * available, a use (public key use) parameter value is REQUIRED for all keys
       * in the referenced JWK Set to indicate each key's intended usage.
       */
      jwks_uri: uri_js_1.webUriSchema.optional(),
      /**
       * RECOMMENDED. JSON array containing a list of the OAuth 2.0 [RFC6749] scope
       * values that are used in authorization requests to request access to this
       * protected resource. Protected resources MAY choose not to advertise some
       * scope values supported even when this parameter is used.
       */
      scopes_supported: zod_1.z.array(zod_1.z.string()).optional(),
      /**
       * OPTIONAL. JSON array containing a list of the supported methods of sending
       * an OAuth 2.0 Bearer Token [RFC6750] to the protected resource. Defined
       * values are ["header", "body", "query"], corresponding to Sections 2.1, 2.2,
       * and 2.3 of RFC 6750.
       */
      bearer_methods_supported: zod_1.z.array(zod_1.z.enum(["header", "body", "query"])).optional(),
      /**
       * OPTIONAL. JSON array containing a list of the JWS [JWS] signing algorithms
       * (alg values) [JWA] supported by the protected resource for signing resource
       * responses, for instance, as described in [FAPI.MessageSigning]. No default
       * algorithms are implied if this entry is omitted. The value none MUST NOT be
       * used.
       */
      resource_signing_alg_values_supported: zod_1.z.array(zod_1.z.string()).optional(),
      /**
       * OPTIONAL. URL of a page containing human-readable information that
       * developers might want or need to know when using the protected resource
       */
      resource_documentation: uri_js_1.webUriSchema.optional(),
      /**
       * OPTIONAL. URL that the protected resource provides to read about the
       * protected resource's requirements on how the client can use the data
       * provided by the protected resource
       */
      resource_policy_uri: uri_js_1.webUriSchema.optional(),
      /**
       * OPTIONAL. URL that the protected resource provides to read about the
       * protected resource's terms of service
       */
      resource_tos_uri: uri_js_1.webUriSchema.optional()
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-refresh-token.js
var require_oauth_refresh_token = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-refresh-token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthRefreshTokenSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthRefreshTokenSchema = zod_1.z.string().min(1);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-refresh-token-grant-token-request.js
var require_oauth_refresh_token_grant_token_request = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-refresh-token-grant-token-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthRefreshTokenGrantTokenRequestSchema = void 0;
    var zod_1 = require_lib2();
    var oauth_refresh_token_js_1 = require_oauth_refresh_token();
    exports.oauthRefreshTokenGrantTokenRequestSchema = zod_1.z.object({
      grant_type: zod_1.z.literal("refresh_token"),
      refresh_token: oauth_refresh_token_js_1.oauthRefreshTokenSchema
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-response-mode.js
var require_oauth_response_mode = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-response-mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthResponseModeSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthResponseModeSchema = zod_1.z.enum([
      "query",
      "fragment",
      "form_post"
    ]);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-token-identification.js
var require_oauth_token_identification = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-token-identification.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthTokenIdentificationSchema = void 0;
    var zod_1 = require_lib2();
    var oauth_access_token_js_1 = require_oauth_access_token();
    var oauth_refresh_token_js_1 = require_oauth_refresh_token();
    exports.oauthTokenIdentificationSchema = zod_1.z.object({
      token: zod_1.z.union([oauth_access_token_js_1.oauthAccessTokenSchema, oauth_refresh_token_js_1.oauthRefreshTokenSchema]),
      token_type_hint: zod_1.z.enum(["access_token", "refresh_token"]).optional()
    });
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-token-request.js
var require_oauth_token_request = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-token-request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthTokenRequestSchema = void 0;
    var zod_1 = require_lib2();
    var oauth_authorization_code_grant_token_request_js_1 = require_oauth_authorization_code_grant_token_request();
    var oauth_client_credentials_grant_token_request_js_1 = require_oauth_client_credentials_grant_token_request();
    var oauth_password_grant_token_request_js_1 = require_oauth_password_grant_token_request();
    var oauth_refresh_token_grant_token_request_js_1 = require_oauth_refresh_token_grant_token_request();
    exports.oauthTokenRequestSchema = zod_1.z.discriminatedUnion("grant_type", [
      oauth_authorization_code_grant_token_request_js_1.oauthAuthorizationCodeGrantTokenRequestSchema,
      oauth_refresh_token_grant_token_request_js_1.oauthRefreshTokenGrantTokenRequestSchema,
      oauth_password_grant_token_request_js_1.oauthPasswordGrantTokenRequestSchema,
      oauth_client_credentials_grant_token_request_js_1.oauthClientCredentialsGrantTokenRequestSchema
    ]);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-token-type.js
var require_oauth_token_type = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-token-type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthTokenTypeSchema = void 0;
    var zod_1 = require_lib2();
    exports.oauthTokenTypeSchema = zod_1.z.union([
      zod_1.z.string().regex(/^DPoP$/i).transform(() => "DPoP"),
      zod_1.z.string().regex(/^Bearer$/i).transform(() => "Bearer")
    ]);
  }
});

// node_modules/@atproto/oauth-types/dist/oauth-token-response.js
var require_oauth_token_response = __commonJS({
  "node_modules/@atproto/oauth-types/dist/oauth-token-response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.oauthTokenResponseSchema = void 0;
    var jwk_1 = require_dist();
    var zod_1 = require_lib2();
    var oauth_authorization_details_js_1 = require_oauth_authorization_details();
    var oauth_token_type_js_1 = require_oauth_token_type();
    exports.oauthTokenResponseSchema = zod_1.z.object({
      // https://www.rfc-editor.org/rfc/rfc6749.html#section-5.1
      access_token: zod_1.z.string(),
      token_type: oauth_token_type_js_1.oauthTokenTypeSchema,
      scope: zod_1.z.string().optional(),
      refresh_token: zod_1.z.string().optional(),
      expires_in: zod_1.z.number().optional(),
      // https://openid.net/specs/openid-connect-core-1_0.html#TokenResponse
      id_token: jwk_1.signedJwtSchema.optional(),
      // https://datatracker.ietf.org/doc/html/rfc9396#name-enriched-authorization-deta
      authorization_details: oauth_authorization_details_js_1.oauthAuthorizationDetailsSchema.optional()
    }).passthrough();
  }
});

// node_modules/@atproto/oauth-types/dist/index.js
var require_dist11 = __commonJS({
  "node_modules/@atproto/oauth-types/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_constants(), exports);
    __exportStar(require_uri(), exports);
    __exportStar(require_util8(), exports);
    __exportStar(require_atproto_loopback_client_metadata(), exports);
    __exportStar(require_oauth_access_token(), exports);
    __exportStar(require_oauth_authorization_code_grant_token_request(), exports);
    __exportStar(require_oauth_authorization_details(), exports);
    __exportStar(require_oauth_authorization_request_jar(), exports);
    __exportStar(require_oauth_authorization_request_par(), exports);
    __exportStar(require_oauth_authorization_request_parameters(), exports);
    __exportStar(require_oauth_authorization_request_query(), exports);
    __exportStar(require_oauth_authorization_request_uri(), exports);
    __exportStar(require_oauth_authorization_server_metadata(), exports);
    __exportStar(require_oauth_client_credentials_grant_token_request(), exports);
    __exportStar(require_oauth_client_credentials(), exports);
    __exportStar(require_oauth_client_id_discoverable(), exports);
    __exportStar(require_oauth_client_id_loopback(), exports);
    __exportStar(require_oauth_client_id(), exports);
    __exportStar(require_oauth_client_metadata(), exports);
    __exportStar(require_oauth_endpoint_auth_method(), exports);
    __exportStar(require_oauth_endpoint_name(), exports);
    __exportStar(require_oauth_grant_type(), exports);
    __exportStar(require_oauth_introspection_response(), exports);
    __exportStar(require_oauth_issuer_identifier(), exports);
    __exportStar(require_oauth_par_response(), exports);
    __exportStar(require_oauth_password_grant_token_request(), exports);
    __exportStar(require_oauth_protected_resource_metadata(), exports);
    __exportStar(require_oauth_redirect_uri(), exports);
    __exportStar(require_oauth_refresh_token_grant_token_request(), exports);
    __exportStar(require_oauth_refresh_token(), exports);
    __exportStar(require_oauth_request_uri(), exports);
    __exportStar(require_oauth_response_mode(), exports);
    __exportStar(require_oauth_response_type(), exports);
    __exportStar(require_oauth_scope(), exports);
    __exportStar(require_oauth_token_identification(), exports);
    __exportStar(require_oauth_token_request(), exports);
    __exportStar(require_oauth_token_response(), exports);
    __exportStar(require_oauth_token_type(), exports);
    __exportStar(require_oidc_claims_parameter(), exports);
    __exportStar(require_oidc_claims_properties(), exports);
    __exportStar(require_oidc_entity_type(), exports);
  }
});

// node_modules/@atproto/oauth-client/dist/util.js
var require_util9 = __commonJS({
  "node_modules/@atproto/oauth-client/dist/util.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f5) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f5.call(receiver, value) : f5 ? f5.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f5) {
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f5 : kind === "a" ? f5.call(receiver) : f5 ? f5.value : state.get(receiver);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.includesSpaceSeparatedValue = exports.CustomEventTarget = exports.CustomEvent = exports.timeoutSignal = void 0;
    exports.contentMime = contentMime;
    exports.combineSignals = combineSignals;
    Symbol.dispose ?? (Symbol.dispose = Symbol("@@dispose"));
    var timeoutSignal = (timeout, options) => {
      if (!Number.isInteger(timeout) || timeout < 0) {
        throw new TypeError("Expected a positive integer");
      }
      options?.signal?.throwIfAborted();
      const controller = new AbortController();
      const { signal } = controller;
      options?.signal?.addEventListener("abort", (reason) => controller.abort(reason), { once: true, signal });
      const timeoutId = setTimeout(
        (err) => controller.abort(err),
        timeout,
        // create Error here to keep original stack trace
        new Error("Timeout")
      );
      timeoutId?.unref?.();
      signal.addEventListener("abort", () => clearTimeout(timeoutId), {
        once: true,
        signal
      });
      Object.defineProperty(signal, Symbol.dispose, {
        value: () => controller.abort()
      });
      return signal;
    };
    exports.timeoutSignal = timeoutSignal;
    function contentMime(headers) {
      return headers.get("content-type")?.split(";")[0].trim();
    }
    exports.CustomEvent = globalThis.CustomEvent ?? (() => {
      var _CustomEvent_detail;
      class CustomEvent2 extends Event {
        constructor(type, options) {
          if (!arguments.length)
            throw new TypeError("type argument is required");
          super(type, options);
          _CustomEvent_detail.set(this, void 0);
          __classPrivateFieldSet(this, _CustomEvent_detail, options?.detail ?? null, "f");
        }
        get detail() {
          return __classPrivateFieldGet(this, _CustomEvent_detail, "f");
        }
      }
      _CustomEvent_detail = /* @__PURE__ */ new WeakMap();
      Object.defineProperties(CustomEvent2.prototype, {
        [Symbol.toStringTag]: {
          writable: false,
          enumerable: false,
          configurable: true,
          value: "CustomEvent"
        },
        detail: {
          enumerable: true
        }
      });
      return CustomEvent2;
    })();
    var CustomEventTarget = class {
      constructor() {
        Object.defineProperty(this, "eventTarget", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new EventTarget()
        });
      }
      addEventListener(type, callback, options) {
        this.eventTarget.addEventListener(type, callback, options);
      }
      removeEventListener(type, callback, options) {
        this.eventTarget.removeEventListener(type, callback, options);
      }
      dispatchCustomEvent(type, detail, init) {
        return this.eventTarget.dispatchEvent(new exports.CustomEvent(type, { ...init, detail }));
      }
    };
    exports.CustomEventTarget = CustomEventTarget;
    var includesSpaceSeparatedValue = (input, value) => {
      if (value.length === 0)
        throw new TypeError("Value cannot be empty");
      if (value.includes(" "))
        throw new TypeError("Value cannot contain spaces");
      const inputLength = input.length;
      const valueLength = value.length;
      if (inputLength < valueLength)
        return false;
      let idx = input.indexOf(value);
      let idxEnd;
      while (idx !== -1) {
        idxEnd = idx + valueLength;
        if (
          // at beginning or preceded by space
          (idx === 0 || input[idx - 1] === " ") && // at end or followed by space
          (idxEnd === inputLength || input[idxEnd] === " ")
        ) {
          return true;
        }
        idx = input.indexOf(value, idxEnd + 1);
      }
      return false;
    };
    exports.includesSpaceSeparatedValue = includesSpaceSeparatedValue;
    function combineSignals(signals) {
      const controller = new AbortController();
      const onAbort = function(_event) {
        const reason = new Error("This operation was aborted", {
          cause: this.reason
        });
        controller.abort(reason);
      };
      for (const sig of signals) {
        if (!sig)
          continue;
        if (sig.aborted) {
          controller.abort();
          throw new Error("One of the signals is already aborted", {
            cause: sig.reason
          });
        }
        sig.addEventListener("abort", onAbort, { signal: controller.signal });
      }
      controller[Symbol.dispose] = () => {
        const reason = new Error("AbortController was disposed");
        controller.abort(reason);
      };
      return controller;
    }
  }
});

// node_modules/@atproto/oauth-client/dist/oauth-authorization-server-metadata-resolver.js
var require_oauth_authorization_server_metadata_resolver = __commonJS({
  "node_modules/@atproto/oauth-client/dist/oauth-authorization-server-metadata-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuthAuthorizationServerMetadataResolver = void 0;
    var fetch_1 = require_dist8();
    var simple_store_1 = require_dist6();
    var oauth_types_1 = require_dist11();
    var util_js_1 = require_util9();
    var OAuthAuthorizationServerMetadataResolver = class extends simple_store_1.CachedGetter {
      constructor(cache, fetch2, config) {
        super(async (issuer, options) => this.fetchMetadata(issuer, options), cache);
        Object.defineProperty(this, "fetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "allowHttpIssuer", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.fetch = (0, fetch_1.bindFetch)(fetch2);
        this.allowHttpIssuer = config?.allowHttpIssuer === true;
      }
      async get(input, options) {
        const issuer = oauth_types_1.oauthIssuerIdentifierSchema.parse(input);
        if (!this.allowHttpIssuer && issuer.startsWith("http:")) {
          throw new TypeError("Unsecure issuer URL protocol only allowed in development and test environments");
        }
        return super.get(issuer, options);
      }
      async fetchMetadata(issuer, options) {
        const url = new URL(`/.well-known/oauth-authorization-server`, issuer);
        const request = new Request(url, {
          headers: { accept: "application/json" },
          cache: options?.noCache ? "no-cache" : void 0,
          signal: options?.signal,
          redirect: "manual"
          // response must be 200 OK
        });
        const response = await this.fetch(request);
        if (response.status !== 200) {
          await (0, fetch_1.cancelBody)(response, "log");
          throw await fetch_1.FetchResponseError.from(response, `Unexpected status code ${response.status} for "${url}"`, void 0, { cause: request });
        }
        if ((0, util_js_1.contentMime)(response.headers) !== "application/json") {
          await (0, fetch_1.cancelBody)(response, "log");
          throw await fetch_1.FetchResponseError.from(response, `Unexpected content type for "${url}"`, void 0, { cause: request });
        }
        const metadata = oauth_types_1.oauthAuthorizationServerMetadataValidator.parse(await response.json());
        if (metadata.issuer !== issuer) {
          throw new TypeError(`Invalid issuer ${metadata.issuer}`);
        }
        if (metadata.client_id_metadata_document_supported !== true) {
          throw new TypeError(`Authorization server "${issuer}" does not support client_id_metadata_document`);
        }
        return metadata;
      }
    };
    exports.OAuthAuthorizationServerMetadataResolver = OAuthAuthorizationServerMetadataResolver;
  }
});

// node_modules/@atproto/oauth-client/dist/oauth-callback-error.js
var require_oauth_callback_error = __commonJS({
  "node_modules/@atproto/oauth-client/dist/oauth-callback-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuthCallbackError = void 0;
    var OAuthCallbackError = class _OAuthCallbackError extends Error {
      static from(err, params, state) {
        if (err instanceof _OAuthCallbackError)
          return err;
        const message2 = err instanceof Error ? err.message : void 0;
        return new _OAuthCallbackError(params, message2, state, err);
      }
      constructor(params, message2 = params.get("error_description") || "OAuth callback error", state, cause) {
        super(message2, { cause });
        Object.defineProperty(this, "params", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: params
        });
        Object.defineProperty(this, "state", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: state
        });
      }
    };
    exports.OAuthCallbackError = OAuthCallbackError;
  }
});

// node_modules/@atproto/syntax/dist/handle.js
var require_handle = __commonJS({
  "node_modules/@atproto/syntax/dist/handle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisallowedDomainError = exports.UnsupportedDomainError = exports.ReservedHandleError = exports.InvalidHandleError = exports.isValidTld = exports.isValidHandle = exports.normalizeAndEnsureValidHandle = exports.normalizeHandle = exports.ensureValidHandleRegex = exports.ensureValidHandle = exports.DISALLOWED_TLDS = exports.INVALID_HANDLE = void 0;
    exports.INVALID_HANDLE = "handle.invalid";
    exports.DISALLOWED_TLDS = [
      ".local",
      ".arpa",
      ".invalid",
      ".localhost",
      ".internal",
      ".example",
      ".alt",
      // policy could concievably change on ".onion" some day
      ".onion"
      // NOTE: .test is allowed in testing and devopment. In practical terms
      // "should" "never" actually resolve and get registered in production
    ];
    var ensureValidHandle = (handle) => {
      if (!/^[a-zA-Z0-9.-]*$/.test(handle)) {
        throw new InvalidHandleError("Disallowed characters in handle (ASCII letters, digits, dashes, periods only)");
      }
      if (handle.length > 253) {
        throw new InvalidHandleError("Handle is too long (253 chars max)");
      }
      const labels = handle.split(".");
      if (labels.length < 2) {
        throw new InvalidHandleError("Handle domain needs at least two parts");
      }
      for (let i9 = 0; i9 < labels.length; i9++) {
        const l5 = labels[i9];
        if (l5.length < 1) {
          throw new InvalidHandleError("Handle parts can not be empty");
        }
        if (l5.length > 63) {
          throw new InvalidHandleError("Handle part too long (max 63 chars)");
        }
        if (l5.endsWith("-") || l5.startsWith("-")) {
          throw new InvalidHandleError("Handle parts can not start or end with hyphens");
        }
        if (i9 + 1 === labels.length && !/^[a-zA-Z]/.test(l5)) {
          throw new InvalidHandleError("Handle final component (TLD) must start with ASCII letter");
        }
      }
    };
    exports.ensureValidHandle = ensureValidHandle;
    var ensureValidHandleRegex = (handle) => {
      if (!/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(handle)) {
        throw new InvalidHandleError("Handle didn't validate via regex");
      }
      if (handle.length > 253) {
        throw new InvalidHandleError("Handle is too long (253 chars max)");
      }
    };
    exports.ensureValidHandleRegex = ensureValidHandleRegex;
    var normalizeHandle = (handle) => {
      return handle.toLowerCase();
    };
    exports.normalizeHandle = normalizeHandle;
    var normalizeAndEnsureValidHandle = (handle) => {
      const normalized = (0, exports.normalizeHandle)(handle);
      (0, exports.ensureValidHandle)(normalized);
      return normalized;
    };
    exports.normalizeAndEnsureValidHandle = normalizeAndEnsureValidHandle;
    var isValidHandle = (handle) => {
      try {
        (0, exports.ensureValidHandle)(handle);
      } catch (err) {
        if (err instanceof InvalidHandleError) {
          return false;
        }
        throw err;
      }
      return true;
    };
    exports.isValidHandle = isValidHandle;
    var isValidTld = (handle) => {
      return !exports.DISALLOWED_TLDS.some((domain) => handle.endsWith(domain));
    };
    exports.isValidTld = isValidTld;
    var InvalidHandleError = class extends Error {
    };
    exports.InvalidHandleError = InvalidHandleError;
    var ReservedHandleError = class extends Error {
    };
    exports.ReservedHandleError = ReservedHandleError;
    var UnsupportedDomainError = class extends Error {
    };
    exports.UnsupportedDomainError = UnsupportedDomainError;
    var DisallowedDomainError = class extends Error {
    };
    exports.DisallowedDomainError = DisallowedDomainError;
  }
});

// node_modules/@atproto/syntax/dist/did.js
var require_did2 = __commonJS({
  "node_modules/@atproto/syntax/dist/did.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidDidError = exports.ensureValidDidRegex = exports.ensureValidDid = void 0;
    var ensureValidDid = (did) => {
      if (!did.startsWith("did:")) {
        throw new InvalidDidError('DID requires "did:" prefix');
      }
      if (!/^[a-zA-Z0-9._:%-]*$/.test(did)) {
        throw new InvalidDidError("Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)");
      }
      const { length: length2, 1: method } = did.split(":");
      if (length2 < 3) {
        throw new InvalidDidError("DID requires prefix, method, and method-specific content");
      }
      if (!/^[a-z]+$/.test(method)) {
        throw new InvalidDidError("DID method must be lower-case letters");
      }
      if (did.endsWith(":") || did.endsWith("%")) {
        throw new InvalidDidError('DID can not end with ":" or "%"');
      }
      if (did.length > 2 * 1024) {
        throw new InvalidDidError("DID is too long (2048 chars max)");
      }
    };
    exports.ensureValidDid = ensureValidDid;
    var ensureValidDidRegex = (did) => {
      if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(did)) {
        throw new InvalidDidError("DID didn't validate via regex");
      }
      if (did.length > 2 * 1024) {
        throw new InvalidDidError("DID is too long (2048 chars max)");
      }
    };
    exports.ensureValidDidRegex = ensureValidDidRegex;
    var InvalidDidError = class extends Error {
    };
    exports.InvalidDidError = InvalidDidError;
  }
});

// node_modules/@atproto/syntax/dist/nsid.js
var require_nsid = __commonJS({
  "node_modules/@atproto/syntax/dist/nsid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidNsidError = exports.ensureValidNsidRegex = exports.ensureValidNsid = exports.NSID = void 0;
    var NSID = class _NSID {
      static parse(nsid) {
        return new _NSID(nsid);
      }
      static create(authority, name2) {
        const segments = [...authority.split(".").reverse(), name2].join(".");
        return new _NSID(segments);
      }
      static isValid(nsid) {
        try {
          _NSID.parse(nsid);
          return true;
        } catch (e12) {
          return false;
        }
      }
      constructor(nsid) {
        Object.defineProperty(this, "segments", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
        (0, exports.ensureValidNsid)(nsid);
        this.segments = nsid.split(".");
      }
      get authority() {
        return this.segments.slice(0, this.segments.length - 1).reverse().join(".");
      }
      get name() {
        return this.segments.at(this.segments.length - 1);
      }
      toString() {
        return this.segments.join(".");
      }
    };
    exports.NSID = NSID;
    var ensureValidNsid = (nsid) => {
      const toCheck = nsid;
      if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {
        throw new InvalidNsidError("Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)");
      }
      if (toCheck.length > 253 + 1 + 63) {
        throw new InvalidNsidError("NSID is too long (317 chars max)");
      }
      const labels = toCheck.split(".");
      if (labels.length < 3) {
        throw new InvalidNsidError("NSID needs at least three parts");
      }
      for (let i9 = 0; i9 < labels.length; i9++) {
        const l5 = labels[i9];
        if (l5.length < 1) {
          throw new InvalidNsidError("NSID parts can not be empty");
        }
        if (l5.length > 63) {
          throw new InvalidNsidError("NSID part too long (max 63 chars)");
        }
        if (l5.endsWith("-") || l5.startsWith("-")) {
          throw new InvalidNsidError("NSID parts can not start or end with hyphen");
        }
        if (/^[0-9]/.test(l5) && i9 === 0) {
          throw new InvalidNsidError("NSID first part may not start with a digit");
        }
        if (!/^[a-zA-Z]+$/.test(l5) && i9 + 1 === labels.length) {
          throw new InvalidNsidError("NSID name part must be only letters");
        }
      }
    };
    exports.ensureValidNsid = ensureValidNsid;
    var ensureValidNsidRegex = (nsid) => {
      if (!/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\.[a-zA-Z]([a-zA-Z]{0,61}[a-zA-Z])?)$/.test(nsid)) {
        throw new InvalidNsidError("NSID didn't validate via regex");
      }
      if (nsid.length > 253 + 1 + 63) {
        throw new InvalidNsidError("NSID is too long (317 chars max)");
      }
    };
    exports.ensureValidNsidRegex = ensureValidNsidRegex;
    var InvalidNsidError = class extends Error {
    };
    exports.InvalidNsidError = InvalidNsidError;
  }
});

// node_modules/@atproto/syntax/dist/aturi_validation.js
var require_aturi_validation = __commonJS({
  "node_modules/@atproto/syntax/dist/aturi_validation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ensureValidAtUriRegex = exports.ensureValidAtUri = void 0;
    var handle_1 = require_handle();
    var did_1 = require_did2();
    var nsid_1 = require_nsid();
    var ensureValidAtUri = (uri) => {
      const uriParts = uri.split("#");
      if (uriParts.length > 2) {
        throw new Error('ATURI can have at most one "#", separating fragment out');
      }
      const fragmentPart = uriParts[1] || null;
      uri = uriParts[0];
      if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri)) {
        throw new Error("Disallowed characters in ATURI (ASCII)");
      }
      const parts = uri.split("/");
      if (parts.length >= 3 && (parts[0] !== "at:" || parts[1].length !== 0)) {
        throw new Error('ATURI must start with "at://"');
      }
      if (parts.length < 3) {
        throw new Error("ATURI requires at least method and authority sections");
      }
      try {
        if (parts[2].startsWith("did:")) {
          (0, did_1.ensureValidDid)(parts[2]);
        } else {
          (0, handle_1.ensureValidHandle)(parts[2]);
        }
      } catch {
        throw new Error("ATURI authority must be a valid handle or DID");
      }
      if (parts.length >= 4) {
        if (parts[3].length === 0) {
          throw new Error("ATURI can not have a slash after authority without a path segment");
        }
        try {
          (0, nsid_1.ensureValidNsid)(parts[3]);
        } catch {
          throw new Error("ATURI requires first path segment (if supplied) to be valid NSID");
        }
      }
      if (parts.length >= 5) {
        if (parts[4].length === 0) {
          throw new Error("ATURI can not have a slash after collection, unless record key is provided");
        }
      }
      if (parts.length >= 6) {
        throw new Error("ATURI path can have at most two parts, and no trailing slash");
      }
      if (uriParts.length >= 2 && fragmentPart == null) {
        throw new Error("ATURI fragment must be non-empty and start with slash");
      }
      if (fragmentPart != null) {
        if (fragmentPart.length === 0 || fragmentPart[0] !== "/") {
          throw new Error("ATURI fragment must be non-empty and start with slash");
        }
        if (!/^\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\]/-]*$/.test(fragmentPart)) {
          throw new Error("Disallowed characters in ATURI fragment (ASCII)");
        }
      }
      if (uri.length > 8 * 1024) {
        throw new Error("ATURI is far too long");
      }
    };
    exports.ensureValidAtUri = ensureValidAtUri;
    var ensureValidAtUriRegex = (uri) => {
      const aturiRegex = /^at:\/\/(?<authority>[a-zA-Z0-9._:%-]+)(\/(?<collection>[a-zA-Z0-9-.]+)(\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\/[a-zA-Z0-9._~:@!$&%')(*+,;=\-[\]/\\]*))?$/;
      const rm = uri.match(aturiRegex);
      if (!rm || !rm.groups) {
        throw new Error("ATURI didn't validate via regex");
      }
      const groups = rm.groups;
      try {
        (0, handle_1.ensureValidHandleRegex)(groups.authority);
      } catch {
        try {
          (0, did_1.ensureValidDidRegex)(groups.authority);
        } catch {
          throw new Error("ATURI authority must be a valid handle or DID");
        }
      }
      if (groups.collection) {
        try {
          (0, nsid_1.ensureValidNsidRegex)(groups.collection);
        } catch {
          throw new Error("ATURI collection path segment must be a valid NSID");
        }
      }
      if (uri.length > 8 * 1024) {
        throw new Error("ATURI is far too long");
      }
    };
    exports.ensureValidAtUriRegex = ensureValidAtUriRegex;
  }
});

// node_modules/@atproto/syntax/dist/aturi.js
var require_aturi = __commonJS({
  "node_modules/@atproto/syntax/dist/aturi.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AtUri = exports.ATP_URI_REGEX = void 0;
    __exportStar(require_aturi_validation(), exports);
    exports.ATP_URI_REGEX = // proto-    --did--------------   --name----------------   --path----   --query--   --hash--
    /^(at:\/\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
    var RELATIVE_REGEX = /^(\/[^?#\s]*)?(\?[^#\s]+)?(#[^\s]+)?$/i;
    var AtUri = class _AtUri {
      constructor(uri, base3) {
        Object.defineProperty(this, "hash", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "host", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "pathname", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "searchParams", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        let parsed;
        if (base3) {
          parsed = parse2(base3);
          if (!parsed) {
            throw new Error(`Invalid at uri: ${base3}`);
          }
          const relativep = parseRelative(uri);
          if (!relativep) {
            throw new Error(`Invalid path: ${uri}`);
          }
          Object.assign(parsed, relativep);
        } else {
          parsed = parse2(uri);
          if (!parsed) {
            throw new Error(`Invalid at uri: ${uri}`);
          }
        }
        this.hash = parsed.hash;
        this.host = parsed.host;
        this.pathname = parsed.pathname;
        this.searchParams = parsed.searchParams;
      }
      static make(handleOrDid, collection, rkey) {
        let str = handleOrDid;
        if (collection)
          str += "/" + collection;
        if (rkey)
          str += "/" + rkey;
        return new _AtUri(str);
      }
      get protocol() {
        return "at:";
      }
      get origin() {
        return `at://${this.host}`;
      }
      get hostname() {
        return this.host;
      }
      set hostname(v2) {
        this.host = v2;
      }
      get search() {
        return this.searchParams.toString();
      }
      set search(v2) {
        this.searchParams = new URLSearchParams(v2);
      }
      get collection() {
        return this.pathname.split("/").filter(Boolean)[0] || "";
      }
      set collection(v2) {
        const parts = this.pathname.split("/").filter(Boolean);
        parts[0] = v2;
        this.pathname = parts.join("/");
      }
      get rkey() {
        return this.pathname.split("/").filter(Boolean)[1] || "";
      }
      set rkey(v2) {
        const parts = this.pathname.split("/").filter(Boolean);
        if (!parts[0])
          parts[0] = "undefined";
        parts[1] = v2;
        this.pathname = parts.join("/");
      }
      get href() {
        return this.toString();
      }
      toString() {
        let path = this.pathname || "/";
        if (!path.startsWith("/")) {
          path = `/${path}`;
        }
        let qs = this.searchParams.toString();
        if (qs && !qs.startsWith("?")) {
          qs = `?${qs}`;
        }
        let hash = this.hash;
        if (hash && !hash.startsWith("#")) {
          hash = `#${hash}`;
        }
        return `at://${this.host}${path}${qs}${hash}`;
      }
    };
    exports.AtUri = AtUri;
    function parse2(str) {
      const match = exports.ATP_URI_REGEX.exec(str);
      if (match) {
        return {
          hash: match[5] || "",
          host: match[2] || "",
          pathname: match[3] || "",
          searchParams: new URLSearchParams(match[4] || "")
        };
      }
      return void 0;
    }
    function parseRelative(str) {
      const match = RELATIVE_REGEX.exec(str);
      if (match) {
        return {
          hash: match[3] || "",
          pathname: match[1] || "",
          searchParams: new URLSearchParams(match[2] || "")
        };
      }
      return void 0;
    }
  }
});

// node_modules/@atproto/syntax/dist/tid.js
var require_tid = __commonJS({
  "node_modules/@atproto/syntax/dist/tid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidTidError = exports.isValidTid = exports.ensureValidTid = void 0;
    var ensureValidTid = (tid) => {
      if (tid.length !== 13) {
        throw new InvalidTidError("TID must be 13 characters");
      }
      if (!/^[234567abcdefghij][234567abcdefghijklmnopqrstuvwxyz]{12}$/.test(tid)) {
        throw new InvalidTidError("TID syntax not valid (regex)");
      }
    };
    exports.ensureValidTid = ensureValidTid;
    var isValidTid = (tid) => {
      try {
        (0, exports.ensureValidTid)(tid);
      } catch (err) {
        if (err instanceof InvalidTidError) {
          return false;
        }
        throw err;
      }
      return true;
    };
    exports.isValidTid = isValidTid;
    var InvalidTidError = class extends Error {
    };
    exports.InvalidTidError = InvalidTidError;
  }
});

// node_modules/@atproto/syntax/dist/recordkey.js
var require_recordkey = __commonJS({
  "node_modules/@atproto/syntax/dist/recordkey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidRecordKeyError = exports.isValidRecordKey = exports.ensureValidRecordKey = void 0;
    var ensureValidRecordKey = (rkey) => {
      if (rkey.length > 512 || rkey.length < 1) {
        throw new InvalidRecordKeyError("record key must be 1 to 512 characters");
      }
      if (!/^[a-zA-Z0-9_~.:-]{1,512}$/.test(rkey)) {
        throw new InvalidRecordKeyError("record key syntax not valid (regex)");
      }
      if (rkey === "." || rkey === "..")
        throw new InvalidRecordKeyError('record key can not be "." or ".."');
    };
    exports.ensureValidRecordKey = ensureValidRecordKey;
    var isValidRecordKey = (rkey) => {
      try {
        (0, exports.ensureValidRecordKey)(rkey);
      } catch (err) {
        if (err instanceof InvalidRecordKeyError) {
          return false;
        }
        throw err;
      }
      return true;
    };
    exports.isValidRecordKey = isValidRecordKey;
    var InvalidRecordKeyError = class extends Error {
    };
    exports.InvalidRecordKeyError = InvalidRecordKeyError;
  }
});

// node_modules/@atproto/syntax/dist/datetime.js
var require_datetime = __commonJS({
  "node_modules/@atproto/syntax/dist/datetime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidDatetimeError = exports.normalizeDatetimeAlways = exports.normalizeDatetime = exports.isValidDatetime = exports.ensureValidDatetime = void 0;
    var ensureValidDatetime = (dtStr) => {
      const date = new Date(dtStr);
      if (isNaN(date.getTime())) {
        throw new InvalidDatetimeError("datetime did not parse as ISO 8601");
      }
      if (date.toISOString().startsWith("-")) {
        throw new InvalidDatetimeError("datetime normalized to a negative time");
      }
      if (!/^[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](.[0-9]{1,20})?(Z|([+-][0-2][0-9]:[0-5][0-9]))$/.test(dtStr)) {
        throw new InvalidDatetimeError("datetime didn't validate via regex");
      }
      if (dtStr.length > 64) {
        throw new InvalidDatetimeError("datetime is too long (64 chars max)");
      }
      if (dtStr.endsWith("-00:00")) {
        throw new InvalidDatetimeError('datetime can not use "-00:00" for UTC timezone');
      }
      if (dtStr.startsWith("000")) {
        throw new InvalidDatetimeError("datetime so close to year zero not allowed");
      }
    };
    exports.ensureValidDatetime = ensureValidDatetime;
    var isValidDatetime = (dtStr) => {
      try {
        (0, exports.ensureValidDatetime)(dtStr);
      } catch (err) {
        if (err instanceof InvalidDatetimeError) {
          return false;
        }
        throw err;
      }
      return true;
    };
    exports.isValidDatetime = isValidDatetime;
    var normalizeDatetime = (dtStr) => {
      if ((0, exports.isValidDatetime)(dtStr)) {
        const outStr = new Date(dtStr).toISOString();
        if ((0, exports.isValidDatetime)(outStr)) {
          return outStr;
        }
      }
      if (!/.*(([+-]\d\d:?\d\d)|[a-zA-Z])$/.test(dtStr)) {
        const date2 = /* @__PURE__ */ new Date(dtStr + "Z");
        if (!isNaN(date2.getTime())) {
          const tzStr = date2.toISOString();
          if ((0, exports.isValidDatetime)(tzStr)) {
            return tzStr;
          }
        }
      }
      const date = new Date(dtStr);
      if (isNaN(date.getTime())) {
        throw new InvalidDatetimeError("datetime did not parse as any timestamp format");
      }
      const isoStr = date.toISOString();
      if ((0, exports.isValidDatetime)(isoStr)) {
        return isoStr;
      } else {
        throw new InvalidDatetimeError("datetime normalized to invalid timestamp string");
      }
    };
    exports.normalizeDatetime = normalizeDatetime;
    var normalizeDatetimeAlways = (dtStr) => {
      try {
        return (0, exports.normalizeDatetime)(dtStr);
      } catch (err) {
        if (err instanceof InvalidDatetimeError) {
          return (/* @__PURE__ */ new Date(0)).toISOString();
        }
        throw err;
      }
    };
    exports.normalizeDatetimeAlways = normalizeDatetimeAlways;
    var InvalidDatetimeError = class extends Error {
    };
    exports.InvalidDatetimeError = InvalidDatetimeError;
  }
});

// node_modules/@atproto/syntax/dist/index.js
var require_dist12 = __commonJS({
  "node_modules/@atproto/syntax/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_handle(), exports);
    __exportStar(require_did2(), exports);
    __exportStar(require_nsid(), exports);
    __exportStar(require_aturi(), exports);
    __exportStar(require_tid(), exports);
    __exportStar(require_recordkey(), exports);
    __exportStar(require_datetime(), exports);
  }
});

// node_modules/@atproto-labs/identity-resolver/dist/identity-resolver.js
var require_identity_resolver = __commonJS({
  "node_modules/@atproto-labs/identity-resolver/dist/identity-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IdentityResolver = void 0;
    var handle_resolver_1 = require_dist10();
    var syntax_1 = require_dist12();
    var IdentityResolver = class {
      constructor(didResolver, handleResolver) {
        Object.defineProperty(this, "didResolver", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: didResolver
        });
        Object.defineProperty(this, "handleResolver", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: handleResolver
        });
      }
      async resolve(input, options) {
        const document2 = (0, handle_resolver_1.isResolvedHandle)(input) ? await this.getDocumentFromDid(input, options) : await this.getDocumentFromHandle(input, options);
        const service = document2.service?.find(isAtprotoPersonalDataServerService, document2);
        if (!service) {
          throw new TypeError(`No valid "AtprotoPersonalDataServer" service found in "${document2.id}" DID document`);
        }
        return {
          did: document2.id,
          pds: new URL(service.serviceEndpoint)
        };
      }
      async getDocumentFromDid(did, options) {
        return this.didResolver.resolve(did, options);
      }
      async getDocumentFromHandle(input, options) {
        const handle = (0, syntax_1.normalizeAndEnsureValidHandle)(input);
        const did = await this.handleResolver.resolve(handle, options);
        if (!did) {
          throw new TypeError(`Handle "${handle}" does not resolve to a DID`);
        }
        options?.signal?.throwIfAborted();
        const document2 = await this.didResolver.resolve(did, options);
        if (!document2.alsoKnownAs?.includes(`at://${handle}`)) {
          throw new TypeError(`Did document for "${did}" does not include the handle "${handle}"`);
        }
        return document2;
      }
    };
    exports.IdentityResolver = IdentityResolver;
    function isAtprotoPersonalDataServerService(s4) {
      return typeof s4.serviceEndpoint === "string" && s4.type === "AtprotoPersonalDataServer" && (s4.id.startsWith("#") ? s4.id === "#atproto_pds" : s4.id === `${this.id}#atproto_pds`);
    }
  }
});

// node_modules/@atproto-labs/identity-resolver/dist/index.js
var require_dist13 = __commonJS({
  "node_modules/@atproto-labs/identity-resolver/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_identity_resolver(), exports);
  }
});

// node_modules/@atproto/oauth-client/dist/constants.js
var require_constants2 = __commonJS({
  "node_modules/@atproto/oauth-client/dist/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FALLBACK_ALG = void 0;
    exports.FALLBACK_ALG = "ES256";
  }
});

// node_modules/@atproto/oauth-client/dist/errors/token-revoked-error.js
var require_token_revoked_error = __commonJS({
  "node_modules/@atproto/oauth-client/dist/errors/token-revoked-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenRevokedError = void 0;
    var TokenRevokedError = class extends Error {
      constructor(sub, message2 = `The session for "${sub}" was successfully revoked`, options) {
        super(message2, options);
        Object.defineProperty(this, "sub", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: sub
        });
      }
    };
    exports.TokenRevokedError = TokenRevokedError;
  }
});

// node_modules/@atproto/oauth-client/dist/oauth-protected-resource-metadata-resolver.js
var require_oauth_protected_resource_metadata_resolver = __commonJS({
  "node_modules/@atproto/oauth-client/dist/oauth-protected-resource-metadata-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuthProtectedResourceMetadataResolver = void 0;
    var fetch_1 = require_dist8();
    var simple_store_1 = require_dist6();
    var oauth_types_1 = require_dist11();
    var util_js_1 = require_util9();
    var OAuthProtectedResourceMetadataResolver = class extends simple_store_1.CachedGetter {
      constructor(cache, fetch2 = globalThis.fetch, config) {
        super(async (origin, options) => this.fetchMetadata(origin, options), cache);
        Object.defineProperty(this, "fetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "allowHttpResource", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.fetch = (0, fetch_1.bindFetch)(fetch2);
        this.allowHttpResource = config?.allowHttpResource === true;
      }
      async get(resource, options) {
        const { protocol, origin } = new URL(resource);
        if (protocol !== "https:" && protocol !== "http:") {
          throw new TypeError(`Invalid protected resource metadata URL protocol: ${protocol}`);
        }
        if (protocol === "http:" && !this.allowHttpResource) {
          throw new TypeError(`Unsecure resource metadata URL (${protocol}) only allowed in development and test environments`);
        }
        return super.get(origin, options);
      }
      async fetchMetadata(origin, options) {
        const url = new URL(`/.well-known/oauth-protected-resource`, origin);
        const request = new Request(url, {
          signal: options?.signal,
          headers: { accept: "application/json" },
          cache: options?.noCache ? "no-cache" : void 0,
          redirect: "manual"
          // response must be 200 OK
        });
        const response = await this.fetch(request);
        if (response.status !== 200) {
          await (0, fetch_1.cancelBody)(response, "log");
          throw await fetch_1.FetchResponseError.from(response, `Unexpected status code ${response.status} for "${url}"`, void 0, { cause: request });
        }
        if ((0, util_js_1.contentMime)(response.headers) !== "application/json") {
          await (0, fetch_1.cancelBody)(response, "log");
          throw await fetch_1.FetchResponseError.from(response, `Unexpected content type for "${url}"`, void 0, { cause: request });
        }
        const metadata = oauth_types_1.oauthProtectedResourceMetadataSchema.parse(await response.json());
        if (metadata.resource !== origin) {
          throw new TypeError(`Invalid issuer ${metadata.resource}`);
        }
        return metadata;
      }
    };
    exports.OAuthProtectedResourceMetadataResolver = OAuthProtectedResourceMetadataResolver;
  }
});

// node_modules/@atproto/oauth-client/dist/oauth-resolver-error.js
var require_oauth_resolver_error = __commonJS({
  "node_modules/@atproto/oauth-client/dist/oauth-resolver-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuthResolverError = void 0;
    var zod_1 = require_lib2();
    var OAuthResolverError = class _OAuthResolverError extends Error {
      constructor(message2, options) {
        super(message2, options);
      }
      static from(cause, message2) {
        if (cause instanceof _OAuthResolverError)
          return cause;
        const validationReason = cause instanceof zod_1.ZodError ? `${cause.errors[0].path} ${cause.errors[0].message}` : null;
        const fullMessage = (message2 ?? `Unable to resolve identity`) + (validationReason ? ` (${validationReason})` : "");
        return new _OAuthResolverError(fullMessage, {
          cause
        });
      }
    };
    exports.OAuthResolverError = OAuthResolverError;
  }
});

// node_modules/@atproto/oauth-client/dist/oauth-resolver.js
var require_oauth_resolver = __commonJS({
  "node_modules/@atproto/oauth-client/dist/oauth-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuthResolver = void 0;
    var oauth_types_1 = require_dist11();
    var oauth_resolver_error_js_1 = require_oauth_resolver_error();
    var OAuthResolver = class {
      constructor(identityResolver, protectedResourceMetadataResolver, authorizationServerMetadataResolver) {
        Object.defineProperty(this, "identityResolver", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: identityResolver
        });
        Object.defineProperty(this, "protectedResourceMetadataResolver", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: protectedResourceMetadataResolver
        });
        Object.defineProperty(this, "authorizationServerMetadataResolver", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: authorizationServerMetadataResolver
        });
      }
      /**
       * @param input - A handle, DID, PDS URL or Entryway URL
       */
      async resolve(input, options) {
        return /^https?:\/\//.test(input) ? this.resolveFromService(input, options) : this.resolveFromIdentity(input, options);
      }
      /**
       * @note this method can be used to verify if a particular uri supports OAuth
       * based sign-in (for compatibility with legacy implementation).
       */
      async resolveFromService(input, options) {
        try {
          const metadata = await this.getResourceServerMetadata(input, options);
          return { metadata };
        } catch (err) {
          if (!options?.signal?.aborted && err instanceof oauth_resolver_error_js_1.OAuthResolverError) {
            try {
              const result = oauth_types_1.oauthIssuerIdentifierSchema.safeParse(input);
              if (result.success) {
                const metadata = await this.getAuthorizationServerMetadata(result.data, options);
                return { metadata };
              }
            } catch {
            }
          }
          throw err;
        }
      }
      async resolveFromIdentity(input, options) {
        const identity3 = await this.resolveIdentity(input, options);
        options?.signal?.throwIfAborted();
        const metadata = await this.getResourceServerMetadata(identity3.pds, options);
        return { identity: identity3, metadata };
      }
      async resolveIdentity(input, options) {
        try {
          return await this.identityResolver.resolve(input, options);
        } catch (cause) {
          throw oauth_resolver_error_js_1.OAuthResolverError.from(cause, `Failed to resolve identity: ${input}`);
        }
      }
      async getAuthorizationServerMetadata(issuer, options) {
        try {
          return await this.authorizationServerMetadataResolver.get(issuer, options);
        } catch (cause) {
          throw oauth_resolver_error_js_1.OAuthResolverError.from(cause, `Failed to resolve OAuth server metadata for issuer: ${issuer}`);
        }
      }
      async getResourceServerMetadata(pdsUrl, options) {
        try {
          const rsMetadata = await this.protectedResourceMetadataResolver.get(pdsUrl, options);
          if (rsMetadata.authorization_servers?.length !== 1) {
            throw new oauth_resolver_error_js_1.OAuthResolverError(rsMetadata.authorization_servers?.length ? `Unable to determine authorization server for PDS: ${pdsUrl}` : `No authorization servers found for PDS: ${pdsUrl}`);
          }
          const issuer = rsMetadata.authorization_servers[0];
          options?.signal?.throwIfAborted();
          const asMetadata = await this.getAuthorizationServerMetadata(issuer, options);
          if (asMetadata.protected_resources) {
            if (!asMetadata.protected_resources.includes(rsMetadata.resource)) {
              throw new oauth_resolver_error_js_1.OAuthResolverError(`PDS "${pdsUrl}" not protected by issuer "${issuer}"`);
            }
          }
          return asMetadata;
        } catch (cause) {
          throw oauth_resolver_error_js_1.OAuthResolverError.from(cause, `Failed to resolve OAuth server metadata for resource: ${pdsUrl}`);
        }
      }
    };
    exports.OAuthResolver = OAuthResolver;
  }
});

// node_modules/@atproto/oauth-client/dist/atproto-token-response.js
var require_atproto_token_response = __commonJS({
  "node_modules/@atproto/oauth-client/dist/atproto-token-response.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.atprotoTokenResponseSchema = exports.atprotoScopeSchema = exports.isAtprotoScope = void 0;
    var did_1 = require_dist4();
    var oauth_types_1 = require_dist11();
    var zod_1 = require_lib2();
    var util_1 = require_util9();
    var isAtprotoScope = (input) => (0, util_1.includesSpaceSeparatedValue)(input, "atproto");
    exports.isAtprotoScope = isAtprotoScope;
    exports.atprotoScopeSchema = zod_1.z.string().refine(exports.isAtprotoScope, 'The "atproto" scope is required');
    exports.atprotoTokenResponseSchema = oauth_types_1.oauthTokenResponseSchema.extend({
      token_type: zod_1.z.literal("DPoP"),
      sub: did_1.atprotoDidSchema,
      scope: exports.atprotoScopeSchema,
      // OpenID is not compatible with atproto identities
      id_token: zod_1.z.never().optional()
    });
  }
});

// node_modules/@atproto/oauth-client/dist/errors/token-refresh-error.js
var require_token_refresh_error = __commonJS({
  "node_modules/@atproto/oauth-client/dist/errors/token-refresh-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenRefreshError = void 0;
    var TokenRefreshError = class extends Error {
      constructor(sub, message2, options) {
        super(message2, options);
        Object.defineProperty(this, "sub", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: sub
        });
      }
    };
    exports.TokenRefreshError = TokenRefreshError;
  }
});

// node_modules/@atproto/oauth-client/dist/fetch-dpop.js
var require_fetch_dpop = __commonJS({
  "node_modules/@atproto/oauth-client/dist/fetch-dpop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dpopFetchWrapper = dpopFetchWrapper;
    var fetch_1 = require_dist8();
    var base64_1 = (init_base64(), __toCommonJS(base64_exports));
    var subtle = globalThis.crypto?.subtle;
    var ReadableStream = globalThis.ReadableStream;
    function dpopFetchWrapper({ key, iss, supportedAlgs, nonces, sha256: sha2562 = typeof subtle !== "undefined" ? subtleSha256 : void 0, isAuthServer, fetch: fetch2 = globalThis.fetch }) {
      if (!sha2562) {
        throw new TypeError(`crypto.subtle is not available in this environment. Please provide a sha256 function.`);
      }
      const alg = negotiateAlg(key, supportedAlgs);
      return async function(input, init) {
        if (!key.algorithms.includes(alg)) {
          throw new TypeError(`Key does not support the algorithm ${alg}`);
        }
        const request = init == null && input instanceof Request ? input : new Request(input, init);
        const authorizationHeader = request.headers.get("Authorization");
        const ath = authorizationHeader?.startsWith("DPoP ") ? await sha2562(authorizationHeader.slice(5)) : void 0;
        const { method, url } = request;
        const { origin } = new URL(url);
        let initNonce;
        try {
          initNonce = await nonces.get(origin);
        } catch {
        }
        const initProof = await buildProof(key, alg, iss, method, url, initNonce, ath);
        request.headers.set("DPoP", initProof);
        const initResponse = await fetch2.call(this, request);
        const nextNonce = initResponse.headers.get("DPoP-Nonce");
        if (!nextNonce || nextNonce === initNonce) {
          return initResponse;
        }
        try {
          await nonces.set(origin, nextNonce);
        } catch {
        }
        const shouldRetry = await isUseDpopNonceError(initResponse, isAuthServer);
        if (!shouldRetry) {
          return initResponse;
        }
        if (input === request) {
          return initResponse;
        }
        if (ReadableStream && init?.body instanceof ReadableStream) {
          return initResponse;
        }
        await (0, fetch_1.cancelBody)(initResponse, "log");
        const nextProof = await buildProof(key, alg, iss, method, url, nextNonce, ath);
        const nextRequest = new Request(input, init);
        nextRequest.headers.set("DPoP", nextProof);
        return fetch2.call(this, nextRequest);
      };
    }
    async function buildProof(key, alg, iss, htm, htu, nonce, ath) {
      if (!key.bareJwk) {
        throw new Error("Only asymmetric keys can be used as DPoP proofs");
      }
      const now = Math.floor(Date.now() / 1e3);
      return key.createJwt(
        // https://datatracker.ietf.org/doc/html/rfc9449#section-4.2
        {
          alg,
          typ: "dpop+jwt",
          jwk: key.bareJwk
        },
        {
          iss,
          iat: now,
          // Any collision will cause the request to be rejected by the server. no biggie.
          jti: Math.random().toString(36).slice(2),
          htm,
          htu,
          nonce,
          ath
        }
      );
    }
    async function isUseDpopNonceError(response, isAuthServer) {
      if (isAuthServer === void 0 || isAuthServer === false) {
        if (response.status === 401) {
          const wwwAuth = response.headers.get("WWW-Authenticate");
          if (wwwAuth?.startsWith("DPoP")) {
            return wwwAuth.includes('error="use_dpop_nonce"');
          }
        }
      }
      if (isAuthServer === void 0 || isAuthServer === true) {
        if (response.status === 400) {
          try {
            const json = await (0, fetch_1.peekJson)(response, 10 * 1024);
            return typeof json === "object" && json?.["error"] === "use_dpop_nonce";
          } catch {
            return false;
          }
        }
      }
      return false;
    }
    function negotiateAlg(key, supportedAlgs) {
      if (supportedAlgs) {
        const alg = supportedAlgs.find((a4) => key.algorithms.includes(a4));
        if (alg)
          return alg;
      } else {
        const [alg] = key.algorithms;
        if (alg)
          return alg;
      }
      throw new Error("Key does not match any alg supported by the server");
    }
    async function subtleSha256(input) {
      if (subtle == null) {
        throw new Error(`crypto.subtle is not available in this environment. Please provide a sha256 function.`);
      }
      const bytes = new TextEncoder().encode(input);
      const digest3 = await subtle.digest("SHA-256", bytes);
      const digestBytes = new Uint8Array(digest3);
      return base64_1.base64url.baseEncode(digestBytes);
    }
  }
});

// node_modules/@atproto/oauth-client/dist/oauth-response-error.js
var require_oauth_response_error = __commonJS({
  "node_modules/@atproto/oauth-client/dist/oauth-response-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuthResponseError = void 0;
    var fetch_1 = require_dist8();
    var OAuthResponseError = class extends Error {
      constructor(response, payload) {
        const error = (0, fetch_1.ifString)((0, fetch_1.ifObject)(payload)?.["error"]);
        const errorDescription = (0, fetch_1.ifString)((0, fetch_1.ifObject)(payload)?.["error_description"]);
        const messageError = error ? `"${error}"` : "unknown";
        const messageDesc = errorDescription ? `: ${errorDescription}` : "";
        const message2 = `OAuth ${messageError} error${messageDesc}`;
        super(message2);
        Object.defineProperty(this, "response", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: response
        });
        Object.defineProperty(this, "payload", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: payload
        });
        Object.defineProperty(this, "error", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "errorDescription", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.error = error;
        this.errorDescription = errorDescription;
      }
      get status() {
        return this.response.status;
      }
      get headers() {
        return this.response.headers;
      }
    };
    exports.OAuthResponseError = OAuthResponseError;
  }
});

// node_modules/@atproto/oauth-client/dist/oauth-server-agent.js
var require_oauth_server_agent = __commonJS({
  "node_modules/@atproto/oauth-client/dist/oauth-server-agent.js"(exports) {
    "use strict";
    var __addDisposableResource = exports && exports.__addDisposableResource || function(env, value, async) {
      if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
          if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
          dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
          if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
          dispose = value[Symbol.dispose];
          if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() {
          try {
            inner.call(this);
          } catch (e12) {
            return Promise.reject(e12);
          }
        };
        env.stack.push({ value, dispose, async });
      } else if (async) {
        env.stack.push({ async: true });
      }
      return value;
    };
    var __disposeResources = exports && exports.__disposeResources || /* @__PURE__ */ function(SuppressedError2) {
      return function(env) {
        function fail(e12) {
          env.error = env.hasError ? new SuppressedError2(e12, env.error, "An error was suppressed during disposal.") : e12;
          env.hasError = true;
        }
        var r10, s4 = 0;
        function next() {
          while (r10 = env.stack.pop()) {
            try {
              if (!r10.async && s4 === 1) return s4 = 0, env.stack.push(r10), Promise.resolve().then(next);
              if (r10.dispose) {
                var result = r10.dispose.call(r10.value);
                if (r10.async) return s4 |= 2, Promise.resolve(result).then(next, function(e12) {
                  fail(e12);
                  return next();
                });
              } else s4 |= 1;
            } catch (e12) {
              fail(e12);
            }
          }
          if (s4 === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
          if (env.hasError) throw env.error;
        }
        return next();
      };
    }(typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message2) {
      var e12 = new Error(message2);
      return e12.name = "SuppressedError", e12.error = error, e12.suppressed = suppressed, e12;
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuthServerAgent = void 0;
    var fetch_1 = require_dist8();
    var oauth_types_1 = require_dist11();
    var atproto_token_response_js_1 = require_atproto_token_response();
    var constants_js_1 = require_constants2();
    var token_refresh_error_js_1 = require_token_refresh_error();
    var fetch_dpop_js_1 = require_fetch_dpop();
    var oauth_response_error_js_1 = require_oauth_response_error();
    var util_js_1 = require_util9();
    var OAuthServerAgent = class {
      constructor(dpopKey, serverMetadata, clientMetadata, dpopNonces, oauthResolver, runtime, keyset, fetch2) {
        Object.defineProperty(this, "dpopKey", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: dpopKey
        });
        Object.defineProperty(this, "serverMetadata", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: serverMetadata
        });
        Object.defineProperty(this, "clientMetadata", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: clientMetadata
        });
        Object.defineProperty(this, "dpopNonces", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: dpopNonces
        });
        Object.defineProperty(this, "oauthResolver", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: oauthResolver
        });
        Object.defineProperty(this, "runtime", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: runtime
        });
        Object.defineProperty(this, "keyset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: keyset
        });
        Object.defineProperty(this, "dpopFetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.dpopFetch = (0, fetch_dpop_js_1.dpopFetchWrapper)({
          fetch: (0, fetch_1.bindFetch)(fetch2),
          iss: clientMetadata.client_id,
          key: dpopKey,
          supportedAlgs: serverMetadata.dpop_signing_alg_values_supported,
          sha256: async (v2) => runtime.sha256(v2),
          nonces: dpopNonces,
          isAuthServer: true
        });
      }
      get issuer() {
        return this.serverMetadata.issuer;
      }
      async revoke(token) {
        try {
          await this.request("revocation", { token });
        } catch {
        }
      }
      async exchangeCode(code2, codeVerifier) {
        const now = Date.now();
        const tokenResponse = await this.request("token", {
          grant_type: "authorization_code",
          redirect_uri: this.clientMetadata.redirect_uris[0],
          code: code2,
          code_verifier: codeVerifier
        });
        try {
          const aud = await this.verifyIssuer(tokenResponse.sub);
          return {
            aud,
            sub: tokenResponse.sub,
            iss: this.issuer,
            scope: tokenResponse.scope,
            refresh_token: tokenResponse.refresh_token,
            access_token: tokenResponse.access_token,
            token_type: tokenResponse.token_type,
            expires_at: typeof tokenResponse.expires_in === "number" ? new Date(now + tokenResponse.expires_in * 1e3).toISOString() : void 0
          };
        } catch (err) {
          await this.revoke(tokenResponse.access_token);
          throw err;
        }
      }
      async refresh(tokenSet) {
        if (!tokenSet.refresh_token) {
          throw new token_refresh_error_js_1.TokenRefreshError(tokenSet.sub, "No refresh token available");
        }
        const aud = await this.verifyIssuer(tokenSet.sub);
        const now = Date.now();
        const tokenResponse = await this.request("token", {
          grant_type: "refresh_token",
          refresh_token: tokenSet.refresh_token
        });
        return {
          aud,
          sub: tokenSet.sub,
          iss: this.issuer,
          scope: tokenResponse.scope,
          refresh_token: tokenResponse.refresh_token,
          access_token: tokenResponse.access_token,
          token_type: tokenResponse.token_type,
          expires_at: typeof tokenResponse.expires_in === "number" ? new Date(now + tokenResponse.expires_in * 1e3).toISOString() : void 0
        };
      }
      /**
       * VERY IMPORTANT ! Always call this to process token responses.
       *
       * Whenever an OAuth token response is received, we **MUST** verify that the
       * "sub" is a DID, whose issuer authority is indeed the server we just
       * obtained credentials from. This check is a critical step to actually be
       * able to use the "sub" (DID) as being the actual user's identifier.
       *
       * @returns The user's PDS URL (the resource server for the user)
       */
      async verifyIssuer(sub) {
        const env_1 = { stack: [], error: void 0, hasError: false };
        try {
          const signal = __addDisposableResource(env_1, (0, util_js_1.timeoutSignal)(1e4), false);
          const resolved = await this.oauthResolver.resolveFromIdentity(sub, {
            noCache: true,
            allowStale: false,
            signal
          });
          if (this.issuer !== resolved.metadata.issuer) {
            throw new TypeError("Issuer mismatch");
          }
          return resolved.identity.pds.href;
        } catch (e_1) {
          env_1.error = e_1;
          env_1.hasError = true;
        } finally {
          __disposeResources(env_1);
        }
      }
      async request(endpoint, payload) {
        const url = this.serverMetadata[`${endpoint}_endpoint`];
        if (!url)
          throw new Error(`No ${endpoint} endpoint available`);
        const auth = await this.buildClientAuth(endpoint);
        const { response, json } = await this.dpopFetch(url, {
          method: "POST",
          headers: { ...auth.headers, "Content-Type": "application/json" },
          body: JSON.stringify({ ...payload, ...auth.payload })
        }).then((0, fetch_1.fetchJsonProcessor)());
        if (response.ok) {
          switch (endpoint) {
            case "token":
              return atproto_token_response_js_1.atprotoTokenResponseSchema.parse(json);
            case "pushed_authorization_request":
              return oauth_types_1.oauthParResponseSchema.parse(json);
            default:
              return json;
          }
        } else {
          throw new oauth_response_error_js_1.OAuthResponseError(response, json);
        }
      }
      async buildClientAuth(endpoint) {
        const methodSupported = this.serverMetadata[`token_endpoint_auth_methods_supported`];
        const method = this.clientMetadata[`token_endpoint_auth_method`];
        if (method === "private_key_jwt" || this.keyset && !method && (methodSupported?.includes("private_key_jwt") ?? false)) {
          if (!this.keyset)
            throw new Error("No keyset available");
          try {
            const alg = this.serverMetadata[`token_endpoint_auth_signing_alg_values_supported`] ?? constants_js_1.FALLBACK_ALG;
            const kid = this.clientMetadata.jwks?.keys.map(({ kid: kid2 }) => kid2).filter((v2) => typeof v2 === "string");
            return {
              payload: {
                client_id: this.clientMetadata.client_id,
                client_assertion_type: oauth_types_1.CLIENT_ASSERTION_TYPE_JWT_BEARER,
                client_assertion: await this.keyset.createJwt({ alg, kid }, {
                  iss: this.clientMetadata.client_id,
                  sub: this.clientMetadata.client_id,
                  aud: this.serverMetadata.issuer,
                  jti: await this.runtime.generateNonce(),
                  iat: Math.floor(Date.now() / 1e3)
                })
              }
            };
          } catch (err) {
            if (method === "private_key_jwt")
              throw err;
          }
        }
        if (method === "none" || !method && (methodSupported?.includes("none") ?? true)) {
          return {
            payload: {
              client_id: this.clientMetadata.client_id
            }
          };
        }
        throw new Error(`Unsupported ${endpoint} authentication method`);
      }
    };
    exports.OAuthServerAgent = OAuthServerAgent;
  }
});

// node_modules/@atproto/oauth-client/dist/oauth-server-factory.js
var require_oauth_server_factory = __commonJS({
  "node_modules/@atproto/oauth-client/dist/oauth-server-factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuthServerFactory = void 0;
    var oauth_server_agent_js_1 = require_oauth_server_agent();
    var OAuthServerFactory = class {
      constructor(clientMetadata, runtime, resolver, fetch2, keyset, dpopNonceCache) {
        Object.defineProperty(this, "clientMetadata", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: clientMetadata
        });
        Object.defineProperty(this, "runtime", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: runtime
        });
        Object.defineProperty(this, "resolver", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: resolver
        });
        Object.defineProperty(this, "fetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: fetch2
        });
        Object.defineProperty(this, "keyset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: keyset
        });
        Object.defineProperty(this, "dpopNonceCache", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: dpopNonceCache
        });
      }
      async fromIssuer(issuer, dpopKey, options) {
        const serverMetadata = await this.resolver.getAuthorizationServerMetadata(issuer, options);
        return this.fromMetadata(serverMetadata, dpopKey);
      }
      async fromMetadata(serverMetadata, dpopKey) {
        return new oauth_server_agent_js_1.OAuthServerAgent(dpopKey, serverMetadata, this.clientMetadata, this.dpopNonceCache, this.resolver, this.runtime, this.keyset, this.fetch);
      }
    };
    exports.OAuthServerFactory = OAuthServerFactory;
  }
});

// node_modules/@atproto/oauth-client/dist/errors/token-invalid-error.js
var require_token_invalid_error = __commonJS({
  "node_modules/@atproto/oauth-client/dist/errors/token-invalid-error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenInvalidError = void 0;
    var TokenInvalidError = class extends Error {
      constructor(sub, message2 = `The session for "${sub}" is invalid`, options) {
        super(message2, options);
        Object.defineProperty(this, "sub", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: sub
        });
      }
    };
    exports.TokenInvalidError = TokenInvalidError;
  }
});

// node_modules/@atproto/oauth-client/dist/oauth-session.js
var require_oauth_session = __commonJS({
  "node_modules/@atproto/oauth-client/dist/oauth-session.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuthSession = void 0;
    var fetch_1 = require_dist8();
    var token_invalid_error_js_1 = require_token_invalid_error();
    var token_revoked_error_js_1 = require_token_revoked_error();
    var fetch_dpop_js_1 = require_fetch_dpop();
    var ReadableStream = globalThis.ReadableStream;
    var OAuthSession = class {
      constructor(server, sub, sessionGetter, fetch2 = globalThis.fetch) {
        Object.defineProperty(this, "server", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: server
        });
        Object.defineProperty(this, "sub", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: sub
        });
        Object.defineProperty(this, "sessionGetter", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: sessionGetter
        });
        Object.defineProperty(this, "dpopFetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.dpopFetch = (0, fetch_dpop_js_1.dpopFetchWrapper)({
          fetch: (0, fetch_1.bindFetch)(fetch2),
          iss: server.clientMetadata.client_id,
          key: server.dpopKey,
          supportedAlgs: server.serverMetadata.dpop_signing_alg_values_supported,
          sha256: async (v2) => server.runtime.sha256(v2),
          nonces: server.dpopNonces,
          isAuthServer: false
        });
      }
      get did() {
        return this.sub;
      }
      get serverMetadata() {
        return this.server.serverMetadata;
      }
      /**
       * @param refresh When `true`, the credentials will be refreshed even if they
       * are not expired. When `false`, the credentials will not be refreshed even
       * if they are expired. When `undefined`, the credentials will be refreshed
       * if, and only if, they are (about to be) expired. Defaults to `undefined`.
       */
      async getTokenSet(refresh) {
        const { tokenSet } = await this.sessionGetter.get(this.sub, {
          noCache: refresh === true,
          allowStale: refresh === false
        });
        return tokenSet;
      }
      async getTokenInfo(refresh = "auto") {
        const tokenSet = await this.getTokenSet(refresh);
        const expiresAt = tokenSet.expires_at == null ? void 0 : new Date(tokenSet.expires_at);
        return {
          expiresAt,
          get expired() {
            return expiresAt == null ? void 0 : expiresAt.getTime() < Date.now() - 5e3;
          },
          scope: tokenSet.scope,
          iss: tokenSet.iss,
          aud: tokenSet.aud,
          sub: tokenSet.sub
        };
      }
      async signOut() {
        try {
          const tokenSet = await this.getTokenSet(false);
          await this.server.revoke(tokenSet.access_token);
        } finally {
          await this.sessionGetter.delStored(this.sub, new token_revoked_error_js_1.TokenRevokedError(this.sub));
        }
      }
      async fetchHandler(pathname, init) {
        const tokenSet = await this.getTokenSet("auto");
        const initialUrl = new URL(pathname, tokenSet.aud);
        const initialAuth = `${tokenSet.token_type} ${tokenSet.access_token}`;
        const headers = new Headers(init?.headers);
        headers.set("Authorization", initialAuth);
        const initialResponse = await this.dpopFetch(initialUrl, {
          ...init,
          headers
        });
        if (!isInvalidTokenResponse(initialResponse)) {
          return initialResponse;
        }
        let tokenSetFresh;
        try {
          tokenSetFresh = await this.getTokenSet(true);
        } catch (err) {
          return initialResponse;
        }
        if (ReadableStream && init?.body instanceof ReadableStream) {
          return initialResponse;
        }
        const finalAuth = `${tokenSetFresh.token_type} ${tokenSetFresh.access_token}`;
        const finalUrl = new URL(pathname, tokenSetFresh.aud);
        headers.set("Authorization", finalAuth);
        const finalResponse = await this.dpopFetch(finalUrl, { ...init, headers });
        if (isInvalidTokenResponse(finalResponse)) {
          await this.sessionGetter.delStored(this.sub, new token_invalid_error_js_1.TokenInvalidError(this.sub));
        }
        return finalResponse;
      }
    };
    exports.OAuthSession = OAuthSession;
    function isInvalidTokenResponse(response) {
      if (response.status !== 401)
        return false;
      const wwwAuth = response.headers.get("WWW-Authenticate");
      return wwwAuth != null && (wwwAuth.startsWith("Bearer ") || wwwAuth.startsWith("DPoP ")) && wwwAuth.includes('error="invalid_token"');
    }
  }
});

// node_modules/@atproto/oauth-client/dist/lock.js
var require_lock = __commonJS({
  "node_modules/@atproto/oauth-client/dist/lock.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.requestLocalLock = void 0;
    var locks2 = /* @__PURE__ */ new Map();
    function acquireLocalLock(name2) {
      return new Promise((resolveAcquire) => {
        const prev = locks2.get(name2) ?? Promise.resolve();
        const next = prev.then(() => {
          return new Promise((resolveRelease) => {
            const release = () => {
              if (locks2.get(name2) === next)
                locks2.delete(name2);
              resolveRelease();
            };
            resolveAcquire(release);
          });
        });
        locks2.set(name2, next);
      });
    }
    var requestLocalLock = (name2, fn) => {
      return acquireLocalLock(name2).then(async (release) => {
        try {
          return await fn();
        } finally {
          release();
        }
      });
    };
    exports.requestLocalLock = requestLocalLock;
  }
});

// node_modules/@atproto/oauth-client/dist/runtime.js
var require_runtime = __commonJS({
  "node_modules/@atproto/oauth-client/dist/runtime.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Runtime = void 0;
    var base64_1 = (init_base64(), __toCommonJS(base64_exports));
    var lock_js_1 = require_lock();
    var Runtime = class {
      constructor(implementation) {
        Object.defineProperty(this, "implementation", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: implementation
        });
        Object.defineProperty(this, "hasImplementationLock", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "usingLock", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        const { requestLock } = implementation;
        this.hasImplementationLock = requestLock != null;
        this.usingLock = requestLock?.bind(implementation) || // Falling back to a local lock
        lock_js_1.requestLocalLock;
      }
      async generateKey(algs) {
        const algsSorted = Array.from(algs).sort(compareAlgos);
        return this.implementation.createKey(algsSorted);
      }
      async sha256(text) {
        const bytes = new TextEncoder().encode(text);
        const digest3 = await this.implementation.digest(bytes, { name: "sha256" });
        return base64_1.base64url.baseEncode(digest3);
      }
      async generateNonce(length2 = 16) {
        const bytes = await this.implementation.getRandomValues(length2);
        return base64_1.base64url.baseEncode(bytes);
      }
      async generatePKCE(byteLength) {
        const verifier = await this.generateVerifier(byteLength);
        return {
          verifier,
          challenge: await this.sha256(verifier),
          method: "S256"
        };
      }
      async calculateJwkThumbprint(jwk) {
        const components = extractJktComponents(jwk);
        const data = JSON.stringify(components);
        return this.sha256(data);
      }
      /**
       * @see {@link https://datatracker.ietf.org/doc/html/rfc7636#section-4.1}
       * @note It is RECOMMENDED that the output of a suitable random number generator
       * be used to create a 32-octet sequence. The octet sequence is then
       * base64url-encoded to produce a 43-octet URL safe string to use as the code
       * verifier.
       */
      async generateVerifier(byteLength = 32) {
        if (byteLength < 32 || byteLength > 96) {
          throw new TypeError("Invalid code_verifier length");
        }
        const bytes = await this.implementation.getRandomValues(byteLength);
        return base64_1.base64url.baseEncode(bytes);
      }
    };
    exports.Runtime = Runtime;
    function extractJktComponents(jwk) {
      const get = (field) => {
        const value = jwk[field];
        if (typeof value !== "string" || !value) {
          throw new TypeError(`"${field}" Parameter missing or invalid`);
        }
        return value;
      };
      switch (jwk.kty) {
        case "EC":
          return { crv: get("crv"), kty: get("kty"), x: get("x"), y: get("y") };
        case "OKP":
          return { crv: get("crv"), kty: get("kty"), x: get("x") };
        case "RSA":
          return { e: get("e"), kty: get("kty"), n: get("n") };
        case "oct":
          return { k: get("k"), kty: get("kty") };
        default:
          throw new TypeError('"kty" (Key Type) Parameter missing or unsupported');
      }
    }
    function compareAlgos(a4, b3) {
      if (a4 === "ES256K")
        return -1;
      if (b3 === "ES256K")
        return 1;
      for (const prefix of ["ES", "PS", "RS"]) {
        if (a4.startsWith(prefix)) {
          if (b3.startsWith(prefix)) {
            const aLen = parseInt(a4.slice(2, 5));
            const bLen = parseInt(b3.slice(2, 5));
            return aLen - bLen;
          }
          return -1;
        } else if (b3.startsWith(prefix)) {
          return 1;
        }
      }
      return 0;
    }
  }
});

// node_modules/@atproto/oauth-client/dist/session-getter.js
var require_session_getter = __commonJS({
  "node_modules/@atproto/oauth-client/dist/session-getter.js"(exports) {
    "use strict";
    var __addDisposableResource = exports && exports.__addDisposableResource || function(env, value, async) {
      if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
          if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
          dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
          if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
          dispose = value[Symbol.dispose];
          if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() {
          try {
            inner.call(this);
          } catch (e12) {
            return Promise.reject(e12);
          }
        };
        env.stack.push({ value, dispose, async });
      } else if (async) {
        env.stack.push({ async: true });
      }
      return value;
    };
    var __disposeResources = exports && exports.__disposeResources || /* @__PURE__ */ function(SuppressedError2) {
      return function(env) {
        function fail(e12) {
          env.error = env.hasError ? new SuppressedError2(e12, env.error, "An error was suppressed during disposal.") : e12;
          env.hasError = true;
        }
        var r10, s4 = 0;
        function next() {
          while (r10 = env.stack.pop()) {
            try {
              if (!r10.async && s4 === 1) return s4 = 0, env.stack.push(r10), Promise.resolve().then(next);
              if (r10.dispose) {
                var result = r10.dispose.call(r10.value);
                if (r10.async) return s4 |= 2, Promise.resolve(result).then(next, function(e12) {
                  fail(e12);
                  return next();
                });
              } else s4 |= 1;
            } catch (e12) {
              fail(e12);
            }
          }
          if (s4 === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
          if (env.hasError) throw env.error;
        }
        return next();
      };
    }(typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message2) {
      var e12 = new Error(message2);
      return e12.name = "SuppressedError", e12.error = error, e12.suppressed = suppressed, e12;
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SessionGetter = void 0;
    var simple_store_1 = require_dist6();
    var token_invalid_error_js_1 = require_token_invalid_error();
    var token_refresh_error_js_1 = require_token_refresh_error();
    var token_revoked_error_js_1 = require_token_revoked_error();
    var oauth_response_error_js_1 = require_oauth_response_error();
    var util_js_1 = require_util9();
    var SessionGetter = class extends simple_store_1.CachedGetter {
      constructor(sessionStore, serverFactory, runtime) {
        super(async (sub, options, storedSession) => {
          if (storedSession === void 0) {
            const msg = "The session was deleted by another process";
            const cause = new token_refresh_error_js_1.TokenRefreshError(sub, msg);
            this.dispatchEvent("deleted", { sub, cause });
            throw cause;
          }
          const { dpopKey, tokenSet } = storedSession;
          if (sub !== tokenSet.sub) {
            throw new token_refresh_error_js_1.TokenRefreshError(sub, "Stored session sub mismatch");
          }
          if (!tokenSet.refresh_token) {
            throw new token_refresh_error_js_1.TokenRefreshError(sub, "No refresh token available");
          }
          const server = await serverFactory.fromIssuer(tokenSet.iss, dpopKey);
          options?.signal?.throwIfAborted();
          try {
            const newTokenSet = await server.refresh(tokenSet);
            if (sub !== newTokenSet.sub) {
              throw new token_refresh_error_js_1.TokenRefreshError(sub, "Token set sub mismatch");
            }
            return { dpopKey, tokenSet: newTokenSet };
          } catch (cause) {
            if (cause instanceof oauth_response_error_js_1.OAuthResponseError && cause.status === 400 && cause.error === "invalid_grant") {
              if (!runtime.hasImplementationLock) {
                await new Promise((r10) => setTimeout(r10, 1e3));
                const stored = await this.getStored(sub);
                if (stored === void 0) {
                  const msg2 = "The session was deleted by another process";
                  throw new token_refresh_error_js_1.TokenRefreshError(sub, msg2, { cause });
                } else if (stored.tokenSet.access_token !== tokenSet.access_token || stored.tokenSet.refresh_token !== tokenSet.refresh_token) {
                  return stored;
                } else {
                }
              }
              const msg = cause.errorDescription ?? "The session was revoked";
              throw new token_refresh_error_js_1.TokenRefreshError(sub, msg, { cause });
            }
            throw cause;
          }
        }, sessionStore, {
          isStale: (sub, { tokenSet }) => {
            return tokenSet.expires_at != null && new Date(tokenSet.expires_at).getTime() < Date.now() + // Add some lee way to ensure the token is not expired when it
            // reaches the server.
            1e4 + // Add some randomness to reduce the chances of multiple
            // instances trying to refresh the token at the same.
            3e4 * Math.random();
          },
          onStoreError: async (err, sub, { tokenSet, dpopKey }) => {
            const server = await serverFactory.fromIssuer(tokenSet.iss, dpopKey);
            await server.revoke(tokenSet.refresh_token ?? tokenSet.access_token);
            throw err;
          },
          deleteOnError: async (err) => (
            // Optimization: More likely to happen first
            err instanceof token_refresh_error_js_1.TokenRefreshError || err instanceof token_revoked_error_js_1.TokenRevokedError || err instanceof token_invalid_error_js_1.TokenInvalidError
          )
        });
        Object.defineProperty(this, "runtime", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: runtime
        });
        Object.defineProperty(this, "eventTarget", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new util_js_1.CustomEventTarget()
        });
      }
      addEventListener(type, callback, options) {
        this.eventTarget.addEventListener(type, callback, options);
      }
      removeEventListener(type, callback, options) {
        this.eventTarget.removeEventListener(type, callback, options);
      }
      dispatchEvent(type, detail) {
        return this.eventTarget.dispatchCustomEvent(type, detail);
      }
      async setStored(sub, session) {
        if (sub !== session.tokenSet.sub) {
          throw new TypeError("Token set does not match the expected sub");
        }
        await super.setStored(sub, session);
        this.dispatchEvent("updated", { sub, ...session });
      }
      async delStored(sub, cause) {
        await super.delStored(sub, cause);
        this.dispatchEvent("deleted", { sub, cause });
      }
      /**
       * @param refresh When `true`, the credentials will be refreshed even if they
       * are not expired. When `false`, the credentials will not be refreshed even
       * if they are expired. When `undefined`, the credentials will be refreshed
       * if, and only if, they are (about to be) expired. Defaults to `undefined`.
       */
      async getSession(sub, refresh) {
        return this.get(sub, {
          noCache: refresh === true,
          allowStale: refresh === false
        });
      }
      async get(sub, options) {
        const session = await this.runtime.usingLock(`@atproto-oauth-client-${sub}`, async () => {
          const env_1 = { stack: [], error: void 0, hasError: false };
          try {
            const signal = __addDisposableResource(env_1, (0, util_js_1.timeoutSignal)(3e4, options), false);
            const abortController = __addDisposableResource(env_1, (0, util_js_1.combineSignals)([options?.signal, signal]), false);
            return await super.get(sub, {
              ...options,
              signal: abortController.signal
            });
          } catch (e_1) {
            env_1.error = e_1;
            env_1.hasError = true;
          } finally {
            __disposeResources(env_1);
          }
        });
        if (sub !== session.tokenSet.sub) {
          throw new Error("Token set does not match the expected sub");
        }
        return session;
      }
    };
    exports.SessionGetter = SessionGetter;
  }
});

// node_modules/@atproto/oauth-client/dist/types.js
var require_types3 = __commonJS({
  "node_modules/@atproto/oauth-client/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.clientMetadataSchema = void 0;
    var oauth_types_1 = require_dist11();
    var zod_1 = require_lib2();
    exports.clientMetadataSchema = oauth_types_1.oauthClientMetadataSchema.extend({
      client_id: zod_1.z.union([
        oauth_types_1.oauthClientIdDiscoverableSchema,
        oauth_types_1.oauthClientIdLoopbackSchema
      ])
    });
  }
});

// node_modules/@atproto/oauth-client/dist/validate-client-metadata.js
var require_validate_client_metadata = __commonJS({
  "node_modules/@atproto/oauth-client/dist/validate-client-metadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateClientMetadata = validateClientMetadata;
    var oauth_types_1 = require_dist11();
    var types_js_1 = require_types3();
    var TOKEN_ENDPOINT_AUTH_METHOD = `token_endpoint_auth_method`;
    var TOKEN_ENDPOINT_AUTH_SIGNING_ALG = `token_endpoint_auth_signing_alg`;
    function validateClientMetadata(input, keyset) {
      if (input.jwks) {
        if (!keyset) {
          throw new TypeError(`Keyset must not be provided when jwks is provided`);
        }
        for (const key of input.jwks.keys) {
          if (!key.kid) {
            throw new TypeError(`Key must have a "kid" property`);
          } else if (!keyset.has(key.kid)) {
            throw new TypeError(`Key with kid "${key.kid}" not found in keyset`);
          }
        }
      }
      if (!input.jwks && !input.jwks_uri && keyset?.size) {
        input = { ...input, jwks: keyset.toJSON() };
      }
      const metadata = types_js_1.clientMetadataSchema.parse(input);
      if (metadata.client_id.startsWith("http:")) {
        (0, oauth_types_1.assertOAuthLoopbackClientId)(metadata.client_id);
      } else {
        (0, oauth_types_1.assertOAuthDiscoverableClientId)(metadata.client_id);
      }
      const scopes = metadata.scope?.split(" ");
      if (!scopes?.includes("atproto")) {
        throw new TypeError(`Client metadata must include the "atproto" scope`);
      }
      if (!metadata.response_types.includes("code")) {
        throw new TypeError(`"response_types" must include "code"`);
      }
      if (!metadata.grant_types.includes("authorization_code")) {
        throw new TypeError(`"grant_types" must include "authorization_code"`);
      }
      const method = metadata[TOKEN_ENDPOINT_AUTH_METHOD];
      switch (method) {
        case void 0:
          throw new TypeError(`${TOKEN_ENDPOINT_AUTH_METHOD} must be provided`);
        case "none":
          if (metadata[TOKEN_ENDPOINT_AUTH_SIGNING_ALG]) {
            throw new TypeError(`${TOKEN_ENDPOINT_AUTH_SIGNING_ALG} must not be provided when ${TOKEN_ENDPOINT_AUTH_METHOD} is "${method}"`);
          }
          break;
        case "private_key_jwt":
          if (!keyset?.size) {
            throw new TypeError(`A non-empty keyset must be provided when ${TOKEN_ENDPOINT_AUTH_METHOD} is "${method}"`);
          }
          if (!metadata[TOKEN_ENDPOINT_AUTH_SIGNING_ALG]) {
            throw new TypeError(`${TOKEN_ENDPOINT_AUTH_SIGNING_ALG} must be provided when ${TOKEN_ENDPOINT_AUTH_METHOD} is "${method}"`);
          }
          break;
        default:
          throw new TypeError(`Invalid "token_endpoint_auth_method" value: ${method}`);
      }
      return metadata;
    }
  }
});

// node_modules/@atproto/oauth-client/dist/oauth-client.js
var require_oauth_client = __commonJS({
  "node_modules/@atproto/oauth-client/dist/oauth-client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OAuthClient = void 0;
    var did_resolver_1 = require_dist9();
    var handle_resolver_1 = require_dist10();
    var identity_resolver_1 = require_dist13();
    var simple_store_memory_1 = require_dist5();
    var jwk_1 = require_dist();
    var oauth_types_1 = require_dist11();
    var constants_js_1 = require_constants2();
    var token_revoked_error_js_1 = require_token_revoked_error();
    var oauth_authorization_server_metadata_resolver_js_1 = require_oauth_authorization_server_metadata_resolver();
    var oauth_callback_error_js_1 = require_oauth_callback_error();
    var oauth_protected_resource_metadata_resolver_js_1 = require_oauth_protected_resource_metadata_resolver();
    var oauth_resolver_js_1 = require_oauth_resolver();
    var oauth_server_factory_js_1 = require_oauth_server_factory();
    var oauth_session_js_1 = require_oauth_session();
    var runtime_js_1 = require_runtime();
    var session_getter_js_1 = require_session_getter();
    var util_js_1 = require_util9();
    var validate_client_metadata_js_1 = require_validate_client_metadata();
    var OAuthClient = class extends util_js_1.CustomEventTarget {
      static async fetchMetadata({ clientId, fetch: fetch2 = globalThis.fetch, signal }) {
        signal?.throwIfAborted();
        const request = new Request(clientId, {
          redirect: "error",
          signal
        });
        const response = await fetch2(request);
        if (response.status !== 200) {
          response.body?.cancel?.();
          throw new TypeError(`Failed to fetch client metadata: ${response.status}`);
        }
        const mime = response.headers.get("content-type")?.split(";")[0].trim();
        if (mime !== "application/json") {
          response.body?.cancel?.();
          throw new TypeError(`Invalid client metadata content type: ${mime}`);
        }
        const json = await response.json();
        signal?.throwIfAborted();
        return oauth_types_1.oauthClientMetadataSchema.parse(json);
      }
      constructor({ fetch: fetch2 = globalThis.fetch, allowHttp = false, stateStore, sessionStore, didCache = void 0, dpopNonceCache = new simple_store_memory_1.SimpleStoreMemory({ ttl: 6e4, max: 100 }), handleCache = void 0, authorizationServerMetadataCache = new simple_store_memory_1.SimpleStoreMemory({
        ttl: 6e4,
        max: 100
      }), protectedResourceMetadataCache = new simple_store_memory_1.SimpleStoreMemory({
        ttl: 6e4,
        max: 100
      }), responseMode, clientMetadata, handleResolver, plcDirectoryUrl, runtimeImplementation, keyset }) {
        super();
        Object.defineProperty(this, "clientMetadata", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "responseMode", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "keyset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "runtime", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "fetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "oauthResolver", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "serverFactory", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "sessionGetter", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "stateStore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.keyset = keyset ? keyset instanceof jwk_1.Keyset ? keyset : new jwk_1.Keyset(keyset) : void 0;
        this.clientMetadata = (0, validate_client_metadata_js_1.validateClientMetadata)(clientMetadata, this.keyset);
        this.responseMode = responseMode;
        this.runtime = new runtime_js_1.Runtime(runtimeImplementation);
        this.fetch = fetch2;
        this.oauthResolver = new oauth_resolver_js_1.OAuthResolver(new identity_resolver_1.IdentityResolver(new did_resolver_1.DidResolverCached(new did_resolver_1.DidResolverCommon({ fetch: fetch2, plcDirectoryUrl, allowHttp }), didCache), new handle_resolver_1.CachedHandleResolver(handle_resolver_1.AppViewHandleResolver.from(handleResolver, { fetch: fetch2 }), handleCache)), new oauth_protected_resource_metadata_resolver_js_1.OAuthProtectedResourceMetadataResolver(protectedResourceMetadataCache, fetch2, { allowHttpResource: allowHttp }), new oauth_authorization_server_metadata_resolver_js_1.OAuthAuthorizationServerMetadataResolver(authorizationServerMetadataCache, fetch2, { allowHttpIssuer: allowHttp }));
        this.serverFactory = new oauth_server_factory_js_1.OAuthServerFactory(this.clientMetadata, this.runtime, this.oauthResolver, this.fetch, this.keyset, dpopNonceCache);
        this.sessionGetter = new session_getter_js_1.SessionGetter(sessionStore, this.serverFactory, this.runtime);
        this.stateStore = stateStore;
        for (const type of ["deleted", "updated"]) {
          this.sessionGetter.addEventListener(type, (event) => {
            if (!this.dispatchCustomEvent(type, event.detail)) {
              event.preventDefault();
            }
          });
        }
      }
      // Exposed as public API for convenience
      get identityResolver() {
        return this.oauthResolver.identityResolver;
      }
      // Exposed as public API for convenience
      get didResolver() {
        return this.identityResolver.didResolver;
      }
      // Exposed as public API for convenience
      get handleResolver() {
        return this.identityResolver.handleResolver;
      }
      get jwks() {
        return this.keyset?.publicJwks ?? { keys: [] };
      }
      async authorize(input, { signal, ...options } = {}) {
        const redirectUri = options?.redirect_uri ?? this.clientMetadata.redirect_uris[0];
        if (!this.clientMetadata.redirect_uris.includes(redirectUri)) {
          throw new TypeError("Invalid redirect_uri");
        }
        const { identity: identity3, metadata } = await this.oauthResolver.resolve(input, {
          signal
        });
        const pkce = await this.runtime.generatePKCE();
        const dpopKey = await this.runtime.generateKey(metadata.dpop_signing_alg_values_supported || [constants_js_1.FALLBACK_ALG]);
        const state = await this.runtime.generateNonce();
        await this.stateStore.set(state, {
          iss: metadata.issuer,
          dpopKey,
          verifier: pkce.verifier,
          appState: options?.state
        });
        const parameters = {
          ...options,
          client_id: this.clientMetadata.client_id,
          redirect_uri: redirectUri,
          code_challenge: pkce.challenge,
          code_challenge_method: pkce.method,
          state,
          login_hint: identity3 ? input : void 0,
          response_mode: this.responseMode,
          response_type: "code",
          scope: options?.scope ?? this.clientMetadata.scope
        };
        const authorizationUrl = new URL(metadata.authorization_endpoint);
        if (authorizationUrl.protocol !== "https:" && authorizationUrl.protocol !== "http:") {
          throw new TypeError(`Invalid authorization endpoint protocol: ${authorizationUrl.protocol}`);
        }
        if (metadata.pushed_authorization_request_endpoint) {
          const server = await this.serverFactory.fromMetadata(metadata, dpopKey);
          const parResponse = await server.request("pushed_authorization_request", parameters);
          authorizationUrl.searchParams.set("client_id", this.clientMetadata.client_id);
          authorizationUrl.searchParams.set("request_uri", parResponse.request_uri);
          return authorizationUrl;
        } else if (metadata.require_pushed_authorization_requests) {
          throw new Error("Server requires pushed authorization requests (PAR) but no PAR endpoint is available");
        } else {
          for (const [key, value] of Object.entries(parameters)) {
            if (value)
              authorizationUrl.searchParams.set(key, String(value));
          }
          const urlLength = authorizationUrl.pathname.length + authorizationUrl.search.length;
          if (urlLength < 2048) {
            return authorizationUrl;
          } else if (!metadata.pushed_authorization_request_endpoint) {
            throw new Error("Login URL too long");
          }
        }
        throw new Error("Server does not support pushed authorization requests (PAR)");
      }
      /**
       * This method allows the client to proactively revoke the request_uri it
       * created through PAR.
       */
      async abortRequest(authorizeUrl) {
        const requestUri = authorizeUrl.searchParams.get("request_uri");
        if (!requestUri)
          return;
      }
      async callback(params) {
        const responseJwt = params.get("response");
        if (responseJwt != null) {
          throw new oauth_callback_error_js_1.OAuthCallbackError(params, "JARM not supported");
        }
        const issuerParam = params.get("iss");
        const stateParam = params.get("state");
        const errorParam = params.get("error");
        const codeParam = params.get("code");
        if (!stateParam) {
          throw new oauth_callback_error_js_1.OAuthCallbackError(params, 'Missing "state" parameter');
        }
        const stateData = await this.stateStore.get(stateParam);
        if (stateData) {
          await this.stateStore.del(stateParam);
        } else {
          throw new oauth_callback_error_js_1.OAuthCallbackError(params, `Unknown authorization session "${stateParam}"`);
        }
        try {
          if (errorParam != null) {
            throw new oauth_callback_error_js_1.OAuthCallbackError(params, void 0, stateData.appState);
          }
          if (!codeParam) {
            throw new oauth_callback_error_js_1.OAuthCallbackError(params, 'Missing "code" query param', stateData.appState);
          }
          const server = await this.serverFactory.fromIssuer(stateData.iss, stateData.dpopKey);
          if (issuerParam != null) {
            if (!server.issuer) {
              throw new oauth_callback_error_js_1.OAuthCallbackError(params, "Issuer not found in metadata", stateData.appState);
            }
            if (server.issuer !== issuerParam) {
              throw new oauth_callback_error_js_1.OAuthCallbackError(params, "Issuer mismatch", stateData.appState);
            }
          } else if (server.serverMetadata.authorization_response_iss_parameter_supported) {
            throw new oauth_callback_error_js_1.OAuthCallbackError(params, "iss missing from the response", stateData.appState);
          }
          const tokenSet = await server.exchangeCode(codeParam, stateData.verifier);
          try {
            await this.sessionGetter.setStored(tokenSet.sub, {
              dpopKey: stateData.dpopKey,
              tokenSet
            });
            const session = this.createSession(server, tokenSet.sub);
            return { session, state: stateData.appState ?? null };
          } catch (err) {
            await server.revoke(tokenSet.refresh_token || tokenSet.access_token);
            throw err;
          }
        } catch (err) {
          throw oauth_callback_error_js_1.OAuthCallbackError.from(err, params, stateData.appState);
        }
      }
      /**
       * Load a stored session. This will refresh the token only if needed (about to
       * expire) by default.
       *
       * @param refresh See {@link SessionGetter.getSession}
       */
      async restore(sub, refresh = "auto") {
        (0, did_resolver_1.assertAtprotoDid)(sub);
        const { dpopKey, tokenSet } = await this.sessionGetter.get(sub, {
          noCache: refresh === true,
          allowStale: refresh === false
        });
        const server = await this.serverFactory.fromIssuer(tokenSet.iss, dpopKey, {
          noCache: refresh === true,
          allowStale: refresh === false
        });
        return this.createSession(server, sub);
      }
      async revoke(sub) {
        (0, did_resolver_1.assertAtprotoDid)(sub);
        const { dpopKey, tokenSet } = await this.sessionGetter.get(sub, {
          allowStale: true
        });
        try {
          const server = await this.serverFactory.fromIssuer(tokenSet.iss, dpopKey);
          await server.revoke(tokenSet.access_token);
        } finally {
          await this.sessionGetter.delStored(sub, new token_revoked_error_js_1.TokenRevokedError(sub));
        }
      }
      createSession(server, sub) {
        return new oauth_session_js_1.OAuthSession(server, sub, this.sessionGetter, this.fetch);
      }
    };
    exports.OAuthClient = OAuthClient;
  }
});

// node_modules/@atproto/oauth-client/dist/runtime-implementation.js
var require_runtime_implementation = __commonJS({
  "node_modules/@atproto/oauth-client/dist/runtime-implementation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@atproto/oauth-client/dist/state-store.js
var require_state_store = __commonJS({
  "node_modules/@atproto/oauth-client/dist/state-store.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@atproto/oauth-client/dist/index.js
var require_dist14 = __commonJS({
  "node_modules/@atproto/oauth-client/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchResponseError = exports.FetchRequestError = exports.FetchError = void 0;
    __exportStar(require_dist9(), exports);
    var fetch_1 = require_dist8();
    Object.defineProperty(exports, "FetchError", { enumerable: true, get: function() {
      return fetch_1.FetchError;
    } });
    Object.defineProperty(exports, "FetchRequestError", { enumerable: true, get: function() {
      return fetch_1.FetchRequestError;
    } });
    Object.defineProperty(exports, "FetchResponseError", { enumerable: true, get: function() {
      return fetch_1.FetchResponseError;
    } });
    __exportStar(require_dist10(), exports);
    __exportStar(require_dist4(), exports);
    __exportStar(require_dist11(), exports);
    __exportStar(require_oauth_authorization_server_metadata_resolver(), exports);
    __exportStar(require_oauth_callback_error(), exports);
    __exportStar(require_oauth_client(), exports);
    __exportStar(require_oauth_protected_resource_metadata_resolver(), exports);
    __exportStar(require_oauth_resolver_error(), exports);
    __exportStar(require_oauth_response_error(), exports);
    __exportStar(require_oauth_server_agent(), exports);
    __exportStar(require_oauth_server_factory(), exports);
    __exportStar(require_oauth_session(), exports);
    __exportStar(require_runtime_implementation(), exports);
    __exportStar(require_session_getter(), exports);
    __exportStar(require_state_store(), exports);
    __exportStar(require_types3(), exports);
    __exportStar(require_token_invalid_error(), exports);
    __exportStar(require_token_refresh_error(), exports);
    __exportStar(require_token_revoked_error(), exports);
  }
});

// node_modules/@atproto/oauth-client-browser/dist/indexed-db/util.js
var require_util10 = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/indexed-db/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.handleRequest = handleRequest;
    exports.promisify = promisify;
    function handleRequest(request, onSuccess, onError) {
      const cleanup = () => {
        request.removeEventListener("success", success);
        request.removeEventListener("error", error);
      };
      const success = () => {
        onSuccess(request.result);
        cleanup();
      };
      const error = () => {
        onError(request.error || new Error("Unknown error"));
        cleanup();
      };
      request.addEventListener("success", success);
      request.addEventListener("error", error);
    }
    function promisify(request) {
      return new Promise((resolve, reject) => {
        handleRequest(request, resolve, reject);
      });
    }
  }
});

// node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-index.js
var require_db_index = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DBIndex = void 0;
    var util_js_1 = require_util10();
    var DBIndex = class {
      constructor(idbIndex) {
        Object.defineProperty(this, "idbIndex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: idbIndex
        });
      }
      count(query) {
        return (0, util_js_1.promisify)(this.idbIndex.count(query));
      }
      get(query) {
        return (0, util_js_1.promisify)(this.idbIndex.get(query));
      }
      getKey(query) {
        return (0, util_js_1.promisify)(this.idbIndex.getKey(query));
      }
      getAll(query, count) {
        return (0, util_js_1.promisify)(this.idbIndex.getAll(query, count));
      }
      getAllKeys(query, count) {
        return (0, util_js_1.promisify)(this.idbIndex.getAllKeys(query, count));
      }
      deleteAll(query) {
        return new Promise((resolve, reject) => {
          const result = this.idbIndex.openCursor(query);
          result.onsuccess = function(event) {
            const cursor = event.target.result;
            if (cursor) {
              cursor.delete();
              cursor.continue();
            } else {
              resolve();
            }
          };
          result.onerror = function(event) {
            reject(event.target?.error || new Error("Unexpected error"));
          };
        });
      }
    };
    exports.DBIndex = DBIndex;
  }
});

// node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-object-store.js
var require_db_object_store = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-object-store.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DBObjectStore = void 0;
    var db_index_js_1 = require_db_index();
    var util_js_1 = require_util10();
    var DBObjectStore = class {
      constructor(idbObjStore) {
        Object.defineProperty(this, "idbObjStore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: idbObjStore
        });
      }
      get name() {
        return this.idbObjStore.name;
      }
      index(name2) {
        return new db_index_js_1.DBIndex(this.idbObjStore.index(name2));
      }
      get(key) {
        return (0, util_js_1.promisify)(this.idbObjStore.get(key));
      }
      getKey(query) {
        return (0, util_js_1.promisify)(this.idbObjStore.getKey(query));
      }
      getAll(query, count) {
        return (0, util_js_1.promisify)(this.idbObjStore.getAll(query, count));
      }
      getAllKeys(query, count) {
        return (0, util_js_1.promisify)(this.idbObjStore.getAllKeys(query, count));
      }
      add(value, key) {
        return (0, util_js_1.promisify)(this.idbObjStore.add(value, key));
      }
      put(value, key) {
        return (0, util_js_1.promisify)(this.idbObjStore.put(value, key));
      }
      delete(key) {
        return (0, util_js_1.promisify)(this.idbObjStore.delete(key));
      }
      clear() {
        return (0, util_js_1.promisify)(this.idbObjStore.clear());
      }
    };
    exports.DBObjectStore = DBObjectStore;
  }
});

// node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-transaction.js
var require_db_transaction = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/indexed-db/db-transaction.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f5) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f5.call(receiver, value) : f5 ? f5.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f5) {
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f5 : kind === "a" ? f5.call(receiver) : f5 ? f5.value : state.get(receiver);
    };
    var _DBTransaction_tx;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DBTransaction = void 0;
    var db_object_store_js_1 = require_db_object_store();
    var DBTransaction = class {
      constructor(tx) {
        _DBTransaction_tx.set(this, void 0);
        __classPrivateFieldSet(this, _DBTransaction_tx, tx, "f");
        const onAbort = () => {
          cleanup();
        };
        const onComplete = () => {
          cleanup();
        };
        const cleanup = () => {
          __classPrivateFieldSet(this, _DBTransaction_tx, null, "f");
          tx.removeEventListener("abort", onAbort);
          tx.removeEventListener("complete", onComplete);
        };
        tx.addEventListener("abort", onAbort);
        tx.addEventListener("complete", onComplete);
      }
      get tx() {
        if (!__classPrivateFieldGet(this, _DBTransaction_tx, "f"))
          throw new Error("Transaction already ended");
        return __classPrivateFieldGet(this, _DBTransaction_tx, "f");
      }
      async abort() {
        const { tx } = this;
        __classPrivateFieldSet(this, _DBTransaction_tx, null, "f");
        tx.abort();
      }
      async commit() {
        const { tx } = this;
        __classPrivateFieldSet(this, _DBTransaction_tx, null, "f");
        tx.commit?.();
      }
      objectStore(name2) {
        const store = this.tx.objectStore(name2);
        return new db_object_store_js_1.DBObjectStore(store);
      }
      [(_DBTransaction_tx = /* @__PURE__ */ new WeakMap(), Symbol.dispose)]() {
        if (__classPrivateFieldGet(this, _DBTransaction_tx, "f"))
          this.commit();
      }
    };
    exports.DBTransaction = DBTransaction;
  }
});

// node_modules/@atproto/oauth-client-browser/dist/indexed-db/db.js
var require_db = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/indexed-db/db.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f5) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f5.call(receiver, value) : f5 ? f5.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f5) {
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f5 : kind === "a" ? f5.call(receiver) : f5 ? f5.value : state.get(receiver);
    };
    var _DB_db;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DB = void 0;
    var db_transaction_js_1 = require_db_transaction();
    var DB = class _DB {
      static async open(dbName, migrations, txOptions) {
        const db = await new Promise((resolve, reject) => {
          const request = indexedDB.open(dbName, migrations.length);
          request.onerror = () => reject(request.error);
          request.onsuccess = () => resolve(request.result);
          request.onupgradeneeded = ({ oldVersion, newVersion }) => {
            const db2 = request.result;
            try {
              for (let version2 = oldVersion; version2 < (newVersion ?? migrations.length); ++version2) {
                const migration = migrations[version2];
                if (migration)
                  migration(db2);
                else
                  throw new Error(`Missing migration for version ${version2}`);
              }
            } catch (err) {
              db2.close();
              reject(err);
            }
          };
        });
        return new _DB(db, txOptions);
      }
      constructor(db, txOptions) {
        Object.defineProperty(this, "txOptions", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: txOptions
        });
        _DB_db.set(this, void 0);
        __classPrivateFieldSet(this, _DB_db, db, "f");
        const cleanup = () => {
          __classPrivateFieldSet(this, _DB_db, null, "f");
          db.removeEventListener("versionchange", cleanup);
          db.removeEventListener("close", cleanup);
          db.close();
        };
        db.addEventListener("versionchange", cleanup);
        db.addEventListener("close", cleanup);
      }
      get db() {
        if (!__classPrivateFieldGet(this, _DB_db, "f"))
          throw new Error("Database closed");
        return __classPrivateFieldGet(this, _DB_db, "f");
      }
      get name() {
        return this.db.name;
      }
      get objectStoreNames() {
        return this.db.objectStoreNames;
      }
      get version() {
        return this.db.version;
      }
      async transaction(storeNames, mode, run) {
        return new Promise(async (resolve, reject) => {
          try {
            const tx = this.db.transaction(storeNames, mode, this.txOptions);
            let result = { done: false };
            tx.oncomplete = () => {
              if (result.done)
                resolve(result.value);
              else
                reject(new Error("Transaction completed without result"));
            };
            tx.onerror = () => reject(tx.error);
            tx.onabort = () => reject(tx.error || new Error("Transaction aborted"));
            try {
              const value = await run(new db_transaction_js_1.DBTransaction(tx));
              result = { done: true, value };
              tx.commit();
            } catch (err) {
              tx.abort();
              throw err;
            }
          } catch (err) {
            reject(err);
          }
        });
      }
      close() {
        const { db } = this;
        __classPrivateFieldSet(this, _DB_db, null, "f");
        db.close();
      }
      [(_DB_db = /* @__PURE__ */ new WeakMap(), Symbol.dispose)]() {
        if (__classPrivateFieldGet(this, _DB_db, "f"))
          return this.close();
      }
    };
    exports.DB = DB;
  }
});

// node_modules/@atproto/oauth-client-browser/dist/indexed-db/index.js
var require_indexed_db = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/indexed-db/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    require_disposable_polyfill();
    __exportStar(require_db(), exports);
    __exportStar(require_db_index(), exports);
    __exportStar(require_db_object_store(), exports);
    __exportStar(require_db_transaction(), exports);
  }
});

// node_modules/@atproto/oauth-client-browser/dist/browser-oauth-database.js
var require_browser_oauth_database = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/browser-oauth-database.js"(exports) {
    "use strict";
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f5) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f5.call(receiver, value) : f5 ? f5.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f5) {
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f5 : kind === "a" ? f5.call(receiver) : f5 ? f5.value : state.get(receiver);
    };
    var _BrowserOAuthDatabase_dbPromise;
    var _BrowserOAuthDatabase_cleanupInterval;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserOAuthDatabase = void 0;
    var jwk_webcrypto_1 = require_dist3();
    var index_js_1 = require_indexed_db();
    function encodeKey(key) {
      if (!(key instanceof jwk_webcrypto_1.WebcryptoKey) || !key.kid) {
        throw new Error("Invalid key object");
      }
      return {
        keyId: key.kid,
        keyPair: key.cryptoKeyPair
      };
    }
    async function decodeKey(encoded) {
      return jwk_webcrypto_1.WebcryptoKey.fromKeypair(encoded.keyPair, encoded.keyId);
    }
    var STORES = [
      "state",
      "session",
      "didCache",
      "dpopNonceCache",
      "handleCache",
      "authorizationServerMetadataCache",
      "protectedResourceMetadataCache"
    ];
    var BrowserOAuthDatabase = class {
      constructor(options) {
        _BrowserOAuthDatabase_dbPromise.set(this, void 0);
        _BrowserOAuthDatabase_cleanupInterval.set(this, void 0);
        __classPrivateFieldSet(this, _BrowserOAuthDatabase_dbPromise, index_js_1.DB.open(options?.name ?? "@atproto-oauth-client", [
          (db) => {
            for (const name2 of STORES) {
              const store = db.createObjectStore(name2, { autoIncrement: true });
              store.createIndex("expiresAt", "expiresAt", { unique: false });
            }
          }
        ], { durability: options?.durability ?? "strict" }), "f");
        __classPrivateFieldSet(this, _BrowserOAuthDatabase_cleanupInterval, setInterval(() => {
          void this.cleanup();
        }, options?.cleanupInterval ?? 3e4), "f");
      }
      async run(storeName, mode, fn) {
        const db = await __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f");
        return await db.transaction([storeName], mode, (tx) => fn(tx.objectStore(storeName)));
      }
      createStore(name2, { encode: encode7, decode: decode8, expiresAt }) {
        return {
          get: async (key) => {
            const item = await this.run(name2, "readonly", (store) => store.get(key));
            if (item === void 0)
              return void 0;
            if (item.expiresAt != null && new Date(item.expiresAt) < /* @__PURE__ */ new Date()) {
              await this.run(name2, "readwrite", (store) => store.delete(key));
              return void 0;
            }
            return decode8(item.value);
          },
          set: async (key, value) => {
            const item = {
              value: await encode7(value),
              expiresAt: expiresAt(value)?.toISOString()
            };
            await this.run(name2, "readwrite", (store) => store.put(item, key));
          },
          del: async (key) => {
            await this.run(name2, "readwrite", (store) => store.delete(key));
          }
        };
      }
      getSessionStore() {
        return this.createStore("session", {
          expiresAt: ({ tokenSet }) => tokenSet.refresh_token || tokenSet.expires_at == null ? null : new Date(tokenSet.expires_at),
          encode: ({ dpopKey, ...session }) => ({
            ...session,
            dpopKey: encodeKey(dpopKey)
          }),
          decode: async ({ dpopKey, ...encoded }) => ({
            ...encoded,
            dpopKey: await decodeKey(dpopKey)
          })
        });
      }
      getStateStore() {
        return this.createStore("state", {
          expiresAt: (_value) => new Date(Date.now() + 10 * 6e4),
          encode: ({ dpopKey, ...session }) => ({
            ...session,
            dpopKey: encodeKey(dpopKey)
          }),
          decode: async ({ dpopKey, ...encoded }) => ({
            ...encoded,
            dpopKey: await decodeKey(dpopKey)
          })
        });
      }
      getDpopNonceCache() {
        return this.createStore("dpopNonceCache", {
          expiresAt: (_value) => new Date(Date.now() + 6e5),
          encode: (value) => value,
          decode: (encoded) => encoded
        });
      }
      getDidCache() {
        return this.createStore("didCache", {
          expiresAt: (_value) => new Date(Date.now() + 6e4),
          encode: (value) => value,
          decode: (encoded) => encoded
        });
      }
      getHandleCache() {
        return this.createStore("handleCache", {
          expiresAt: (_value) => new Date(Date.now() + 6e4),
          encode: (value) => value,
          decode: (encoded) => encoded
        });
      }
      getAuthorizationServerMetadataCache() {
        return this.createStore("authorizationServerMetadataCache", {
          expiresAt: (_value) => new Date(Date.now() + 6e4),
          encode: (value) => value,
          decode: (encoded) => encoded
        });
      }
      getProtectedResourceMetadataCache() {
        return this.createStore("protectedResourceMetadataCache", {
          expiresAt: (_value) => new Date(Date.now() + 6e4),
          encode: (value) => value,
          decode: (encoded) => encoded
        });
      }
      async cleanup() {
        const db = await __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f");
        for (const name2 of STORES) {
          await db.transaction([name2], "readwrite", (tx) => tx.objectStore(name2).index("expiresAt").deleteAll(IDBKeyRange.upperBound(Date.now())));
        }
      }
      async [(_BrowserOAuthDatabase_dbPromise = /* @__PURE__ */ new WeakMap(), _BrowserOAuthDatabase_cleanupInterval = /* @__PURE__ */ new WeakMap(), Symbol.asyncDispose)]() {
        clearInterval(__classPrivateFieldGet(this, _BrowserOAuthDatabase_cleanupInterval, "f"));
        __classPrivateFieldSet(this, _BrowserOAuthDatabase_cleanupInterval, void 0, "f");
        const dbPromise = __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f");
        __classPrivateFieldSet(this, _BrowserOAuthDatabase_dbPromise, Promise.reject(new Error("Database has been disposed")), "f");
        __classPrivateFieldGet(this, _BrowserOAuthDatabase_dbPromise, "f").catch(() => null);
        const db = await dbPromise.catch(() => null);
        if (db)
          await (db[Symbol.asyncDispose] || db[Symbol.dispose]).call(db);
      }
    };
    exports.BrowserOAuthDatabase = BrowserOAuthDatabase;
  }
});

// node_modules/@atproto/oauth-client-browser/dist/browser-runtime-implementation.js
var require_browser_runtime_implementation = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/browser-runtime-implementation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserRuntimeImplementation = void 0;
    var jwk_webcrypto_1 = require_dist3();
    var nativeRequestLock = navigator.locks?.request ? (name2, fn) => navigator.locks.request(name2, { mode: "exclusive" }, async () => fn()) : void 0;
    var BrowserRuntimeImplementation = class {
      constructor() {
        Object.defineProperty(this, "requestLock", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: nativeRequestLock
        });
        if (typeof crypto !== "object" || !crypto?.subtle) {
          throw new Error("Crypto with CryptoSubtle is required. If running in a browser, make sure the current page is loaded over HTTPS.");
        }
        if (!this.requestLock) {
          console.warn("Locks API not available. You should consider using a more recent browser.");
        }
      }
      async createKey(algs) {
        return jwk_webcrypto_1.WebcryptoKey.generate(algs);
      }
      getRandomValues(byteLength) {
        return crypto.getRandomValues(new Uint8Array(byteLength));
      }
      async digest(data, { name: name2 }) {
        switch (name2) {
          case "sha256":
          case "sha384":
          case "sha512": {
            const buf = await crypto.subtle.digest(`SHA-${name2.slice(3)}`, data);
            return new Uint8Array(buf);
          }
          default:
            throw new Error(`Unsupported digest algorithm: ${name2}`);
        }
      }
    };
    exports.BrowserRuntimeImplementation = BrowserRuntimeImplementation;
  }
});

// node_modules/@atproto/oauth-client-browser/dist/errors.js
var require_errors3 = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LoginContinuedInParentWindowError = void 0;
    var LoginContinuedInParentWindowError = class extends Error {
      constructor() {
        super("Login complete, please close the popup window.");
        Object.defineProperty(this, "code", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: "LOGIN_CONTINUED_IN_PARENT_WINDOW"
        });
      }
    };
    exports.LoginContinuedInParentWindowError = LoginContinuedInParentWindowError;
  }
});

// node_modules/@atproto/oauth-client-browser/dist/util.js
var require_util11 = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildLoopbackClientId = buildLoopbackClientId;
    var oauth_types_1 = require_dist11();
    function buildLoopbackClientId(location2, localhost = "127.0.0.1") {
      if (!(0, oauth_types_1.isLoopbackHost)(location2.hostname)) {
        throw new TypeError(`Expected a loopback host, got ${location2.hostname}`);
      }
      const redirectUri = `http://${location2.hostname === "localhost" ? localhost : location2.hostname}${location2.port && !location2.port.startsWith(":") ? `:${location2.port}` : location2.port}${location2.pathname}`;
      return `http://localhost${location2.pathname === "/" ? "" : location2.pathname}?redirect_uri=${encodeURIComponent(redirectUri)}`;
    }
  }
});

// node_modules/@atproto/oauth-client-browser/dist/browser-oauth-client.js
var require_browser_oauth_client = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/browser-oauth-client.js"(exports) {
    "use strict";
    var _a;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserOAuthClient = void 0;
    var oauth_client_1 = require_dist14();
    var oauth_types_1 = require_dist11();
    var browser_oauth_database_js_1 = require_browser_oauth_database();
    var browser_runtime_implementation_js_1 = require_browser_runtime_implementation();
    var errors_js_1 = require_errors3();
    var util_js_1 = require_util11();
    var NAMESPACE = `@@atproto/oauth-client-browser`;
    var POPUP_CHANNEL_NAME = `${NAMESPACE}(popup-channel)`;
    var POPUP_STATE_PREFIX = `${NAMESPACE}(popup-state):`;
    var syncChannel = new BroadcastChannel(`${NAMESPACE}(synchronization-channel)`);
    var BrowserOAuthClient2 = class _BrowserOAuthClient extends oauth_client_1.OAuthClient {
      static async load({ clientId, ...options }) {
        if (clientId.startsWith("http:")) {
          const clientMetadata = (0, oauth_types_1.atprotoLoopbackClientMetadata)(clientId);
          return new _BrowserOAuthClient({ clientMetadata, ...options });
        } else if (clientId.startsWith("https:")) {
          (0, oauth_types_1.assertOAuthDiscoverableClientId)(clientId);
          const clientMetadata = await oauth_client_1.OAuthClient.fetchMetadata({
            clientId,
            ...options
          });
          return new _BrowserOAuthClient({ clientMetadata, ...options });
        } else {
          throw new TypeError(`Invalid client id: ${clientId}`);
        }
      }
      constructor({
        clientMetadata = (0, oauth_types_1.atprotoLoopbackClientMetadata)((0, util_js_1.buildLoopbackClientId)(window.location)),
        // "fragment" is a safer default as the query params will not be sent to the server
        responseMode = "fragment",
        ...options
      }) {
        if (!globalThis.crypto?.subtle) {
          throw new Error("WebCrypto API is required");
        }
        if (!["query", "fragment"].includes(responseMode)) {
          throw new TypeError(`Invalid response mode: ${responseMode}`);
        }
        const database = new browser_oauth_database_js_1.BrowserOAuthDatabase();
        super({
          ...options,
          clientMetadata,
          responseMode,
          keyset: void 0,
          runtimeImplementation: new browser_runtime_implementation_js_1.BrowserRuntimeImplementation(),
          sessionStore: database.getSessionStore(),
          stateStore: database.getStateStore(),
          didCache: database.getDidCache(),
          handleCache: database.getHandleCache(),
          dpopNonceCache: database.getDpopNonceCache(),
          authorizationServerMetadataCache: database.getAuthorizationServerMetadataCache(),
          protectedResourceMetadataCache: database.getProtectedResourceMetadataCache()
        });
        Object.defineProperty(this, _a, {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        const ac = new AbortController();
        const { signal } = ac;
        this[Symbol.dispose] = () => ac.abort();
        signal.addEventListener("abort", () => database[Symbol.asyncDispose](), {
          once: true
        });
        this.addEventListener("deleted", ({ detail: { sub } }) => {
          if (localStorage.getItem(`${NAMESPACE}(sub)`) === sub) {
            localStorage.removeItem(`${NAMESPACE}(sub)`);
          }
        });
        for (const type of ["deleted", "updated"]) {
          this.sessionGetter.addEventListener(type, ({ detail }) => {
            syncChannel.postMessage([type, detail]);
          });
        }
        syncChannel.addEventListener(
          "message",
          (event) => {
            if (event.source !== window) {
              const [type, detail] = event.data;
              this.dispatchCustomEvent(type, detail);
            }
          },
          // Remove the listener when the client is disposed
          { signal }
        );
      }
      async init(refresh) {
        await fixLocation(this.clientMetadata);
        const signInResult = await this.signInCallback();
        if (signInResult) {
          localStorage.setItem(`${NAMESPACE}(sub)`, signInResult.session.sub);
          return signInResult;
        }
        const sub = localStorage.getItem(`${NAMESPACE}(sub)`);
        if (sub) {
          try {
            const session = await this.restore(sub, refresh);
            return { session };
          } catch (err) {
            localStorage.removeItem(`${NAMESPACE}(sub)`);
            throw err;
          }
        }
      }
      async restore(sub, refresh) {
        const session = await super.restore(sub, refresh);
        localStorage.setItem(`${NAMESPACE}(sub)`, session.sub);
        return session;
      }
      async revoke(sub) {
        localStorage.removeItem(`${NAMESPACE}(sub)`);
        return super.revoke(sub);
      }
      async signIn(input, options) {
        if (options?.display === "popup") {
          return this.signInPopup(input, options);
        } else {
          return this.signInRedirect(input, options);
        }
      }
      async signInRedirect(input, options) {
        const url = await this.authorize(input, options);
        window.location.href = url.href;
        return new Promise((resolve, reject) => {
          setTimeout((err) => {
            this.abortRequest(url).then(() => reject(err), (reason) => reject(new AggregateError([err, reason])));
          }, 5e3, new Error("User navigated back"));
        });
      }
      async signInPopup(input, options) {
        const popupFeatures = "width=600,height=600,menubar=no,toolbar=no";
        let popup = window.open("about:blank", "_blank", popupFeatures);
        const stateKey = `${Math.random().toString(36).slice(2)}`;
        const url = await this.authorize(input, {
          ...options,
          state: `${POPUP_STATE_PREFIX}${stateKey}`,
          display: options?.display ?? "popup"
        });
        options?.signal?.throwIfAborted();
        if (popup) {
          popup.window.location.href = url.href;
        } else {
          popup = window.open(url.href, "_blank", popupFeatures);
        }
        popup?.focus();
        return new Promise((resolve, reject) => {
          const popupChannel = new BroadcastChannel(POPUP_CHANNEL_NAME);
          const cleanup = () => {
            clearTimeout(timeout);
            popupChannel.removeEventListener("message", onMessage);
            popupChannel.close();
            options?.signal?.removeEventListener("abort", cancel);
            popup?.close();
          };
          const cancel = () => {
            reject(new Error(options?.signal?.aborted ? "Aborted" : "Timeout"));
            cleanup();
          };
          options?.signal?.addEventListener("abort", cancel);
          const timeout = setTimeout(cancel, 5 * 6e4);
          const onMessage = async ({ data }) => {
            if (data.key !== stateKey)
              return;
            if (!("result" in data))
              return;
            popupChannel.postMessage({ key: stateKey, ack: true });
            cleanup();
            const { result } = data;
            if (result.status === "fulfilled") {
              const sub = result.value;
              try {
                options?.signal?.throwIfAborted();
                resolve(await this.restore(sub, false));
              } catch (err) {
                reject(err);
                void this.revoke(sub);
              }
            } else {
              const { message: message2, params } = result.reason;
              reject(new oauth_client_1.OAuthCallbackError(new URLSearchParams(params), message2));
            }
          };
          popupChannel.addEventListener("message", onMessage);
        });
      }
      readCallbackParams() {
        const params = this.responseMode === "fragment" ? new URLSearchParams(location.hash.slice(1)) : new URLSearchParams(location.search);
        if (!params.has("state") || !(params.has("code") || params.has("error"))) {
          return null;
        }
        const matchesLocation = (url) => location.origin === url.origin && location.pathname === url.pathname;
        const redirectUrls = this.clientMetadata.redirect_uris.map((uri) => new URL(uri));
        if (!redirectUrls.some(matchesLocation))
          return null;
        return params;
      }
      async signInCallback() {
        const params = this.readCallbackParams();
        if (!params)
          return null;
        if (this.responseMode === "fragment") {
          history.replaceState(null, "", location.pathname + location.search);
        } else if (this.responseMode === "query") {
          history.replaceState(null, "", location.pathname);
        }
        const sendPopupResult = (message2) => {
          const popupChannel = new BroadcastChannel(POPUP_CHANNEL_NAME);
          return new Promise((resolve) => {
            const cleanup = (result) => {
              clearTimeout(timer);
              popupChannel.removeEventListener("message", onMessage);
              popupChannel.close();
              resolve(result);
            };
            const onMessage = ({ data }) => {
              if ("ack" in data && message2.key === data.key)
                cleanup(true);
            };
            popupChannel.addEventListener("message", onMessage);
            popupChannel.postMessage(message2);
            const timer = setTimeout(cleanup, 500, false);
          });
        };
        return this.callback(params).then(async (result) => {
          if (result.state?.startsWith(POPUP_STATE_PREFIX)) {
            const receivedByParent = await sendPopupResult({
              key: result.state.slice(POPUP_STATE_PREFIX.length),
              result: {
                status: "fulfilled",
                value: result.session.sub
              }
            });
            if (!receivedByParent)
              await result.session.signOut();
            throw new errors_js_1.LoginContinuedInParentWindowError();
          }
          return result;
        }).catch(async (err) => {
          if (err instanceof oauth_client_1.OAuthCallbackError && err.state?.startsWith(POPUP_STATE_PREFIX)) {
            await sendPopupResult({
              key: err.state.slice(POPUP_STATE_PREFIX.length),
              result: {
                status: "rejected",
                reason: {
                  message: err.message,
                  params: Array.from(err.params.entries())
                }
              }
            });
            throw new errors_js_1.LoginContinuedInParentWindowError();
          }
          throw err;
        }).catch((err) => {
          if (err instanceof errors_js_1.LoginContinuedInParentWindowError) {
            window.close();
          }
          throw err;
        });
      }
      dispose() {
        this[Symbol.dispose]();
      }
    };
    exports.BrowserOAuthClient = BrowserOAuthClient2;
    _a = Symbol.dispose;
    function fixLocation(clientMetadata) {
      if (!(0, oauth_types_1.isOAuthClientIdLoopback)(clientMetadata.client_id))
        return;
      if (window.location.hostname !== "localhost")
        return;
      const locationUrl = new URL(window.location.href);
      for (const uri of clientMetadata.redirect_uris) {
        const url = new URL(uri);
        if ((url.hostname === "127.0.0.1" || url.hostname === "[::1]") && (!url.port || url.port === locationUrl.port) && url.protocol === locationUrl.protocol && url.pathname === locationUrl.pathname) {
          url.port = locationUrl.port;
          window.location.href = url.href;
          throw new Error("Redirecting to loopback IP...");
        }
      }
      throw new Error(`Please use the loopback IP address instead of ${locationUrl}`);
    }
  }
});

// node_modules/@atproto/oauth-client-browser/dist/index.js
var require_dist15 = __commonJS({
  "node_modules/@atproto/oauth-client-browser/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildLoopbackClientId = void 0;
    require_disposable_polyfill();
    __exportStar(require_dist3(), exports);
    __exportStar(require_dist14(), exports);
    __exportStar(require_browser_oauth_client(), exports);
    __exportStar(require_errors3(), exports);
    var util_js_1 = require_util11();
    Object.defineProperty(exports, "buildLoopbackClientId", { enumerable: true, get: function() {
      return util_js_1.buildLoopbackClientId;
    } });
  }
});

// node_modules/@atproto/lexicon/dist/util.js
var require_util12 = __commonJS({
  "node_modules/@atproto/lexicon/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toLexUri = toLexUri;
    exports.toConcreteTypes = toConcreteTypes;
    exports.requiredPropertiesRefinement = requiredPropertiesRefinement;
    var zod_1 = require_lib2();
    function toLexUri(str, baseUri) {
      if (str.split("#").length > 2) {
        throw new Error("Uri can only have one hash segment");
      }
      if (str.startsWith("lex:")) {
        return str;
      }
      if (str.startsWith("#")) {
        if (!baseUri) {
          throw new Error(`Unable to resolve uri without anchor: ${str}`);
        }
        return `${baseUri}${str}`;
      }
      return `lex:${str}`;
    }
    function toConcreteTypes(lexicons, def) {
      if (def.type === "ref") {
        return [lexicons.getDefOrThrow(def.ref)];
      } else if (def.type === "union") {
        return def.refs.map((ref) => lexicons.getDefOrThrow(ref)).flat();
      } else {
        return [def];
      }
    }
    function requiredPropertiesRefinement(object, ctx) {
      if (object.required === void 0) {
        return;
      }
      if (!Array.isArray(object.required)) {
        ctx.addIssue({
          code: zod_1.z.ZodIssueCode.invalid_type,
          received: typeof object.required,
          expected: "array"
        });
        return;
      }
      if (object.properties === void 0) {
        if (object.required.length > 0) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: `Required fields defined but no properties defined`
          });
        }
        return;
      }
      for (const field of object.required) {
        if (object.properties[field] === void 0) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: `Required field "${field}" not defined`
          });
        }
      }
    }
  }
});

// node_modules/@atproto/lexicon/dist/types.js
var require_types4 = __commonJS({
  "node_modules/@atproto/lexicon/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LexiconDefNotFoundError = exports.InvalidLexiconError = exports.ValidationError = exports.discriminatedObject = exports.lexiconDoc = exports.lexUserType = exports.lexRecord = exports.lexXrpcSubscription = exports.lexXrpcProcedure = exports.lexXrpcQuery = exports.lexXrpcError = exports.lexXrpcSubscriptionMessage = exports.lexXrpcBody = exports.lexXrpcParameters = exports.lexObject = exports.lexToken = exports.lexPrimitiveArray = exports.lexArray = exports.lexBlob = exports.lexRefVariant = exports.lexRefUnion = exports.lexRef = exports.lexIpldType = exports.lexCidLink = exports.lexBytes = exports.lexPrimitive = exports.lexUnknown = exports.lexString = exports.lexStringFormat = exports.lexInteger = exports.lexBoolean = void 0;
    exports.isValidLexiconDoc = isValidLexiconDoc;
    exports.isObj = isObj;
    exports.hasProp = hasProp;
    exports.isDiscriminatedObject = isDiscriminatedObject;
    exports.parseLexiconDoc = parseLexiconDoc;
    var zod_1 = require_lib2();
    var syntax_1 = require_dist12();
    var util_1 = require_util12();
    exports.lexBoolean = zod_1.z.object({
      type: zod_1.z.literal("boolean"),
      description: zod_1.z.string().optional(),
      default: zod_1.z.boolean().optional(),
      const: zod_1.z.boolean().optional()
    }).strict();
    exports.lexInteger = zod_1.z.object({
      type: zod_1.z.literal("integer"),
      description: zod_1.z.string().optional(),
      default: zod_1.z.number().int().optional(),
      minimum: zod_1.z.number().int().optional(),
      maximum: zod_1.z.number().int().optional(),
      enum: zod_1.z.number().int().array().optional(),
      const: zod_1.z.number().int().optional()
    }).strict();
    exports.lexStringFormat = zod_1.z.enum([
      "datetime",
      "uri",
      "at-uri",
      "did",
      "handle",
      "at-identifier",
      "nsid",
      "cid",
      "language",
      "tid",
      "record-key"
    ]);
    exports.lexString = zod_1.z.object({
      type: zod_1.z.literal("string"),
      format: exports.lexStringFormat.optional(),
      description: zod_1.z.string().optional(),
      default: zod_1.z.string().optional(),
      minLength: zod_1.z.number().int().optional(),
      maxLength: zod_1.z.number().int().optional(),
      minGraphemes: zod_1.z.number().int().optional(),
      maxGraphemes: zod_1.z.number().int().optional(),
      enum: zod_1.z.string().array().optional(),
      const: zod_1.z.string().optional(),
      knownValues: zod_1.z.string().array().optional()
    }).strict();
    exports.lexUnknown = zod_1.z.object({
      type: zod_1.z.literal("unknown"),
      description: zod_1.z.string().optional()
    }).strict();
    exports.lexPrimitive = zod_1.z.discriminatedUnion("type", [
      exports.lexBoolean,
      exports.lexInteger,
      exports.lexString,
      exports.lexUnknown
    ]);
    exports.lexBytes = zod_1.z.object({
      type: zod_1.z.literal("bytes"),
      description: zod_1.z.string().optional(),
      maxLength: zod_1.z.number().optional(),
      minLength: zod_1.z.number().optional()
    }).strict();
    exports.lexCidLink = zod_1.z.object({
      type: zod_1.z.literal("cid-link"),
      description: zod_1.z.string().optional()
    }).strict();
    exports.lexIpldType = zod_1.z.discriminatedUnion("type", [exports.lexBytes, exports.lexCidLink]);
    exports.lexRef = zod_1.z.object({
      type: zod_1.z.literal("ref"),
      description: zod_1.z.string().optional(),
      ref: zod_1.z.string()
    }).strict();
    exports.lexRefUnion = zod_1.z.object({
      type: zod_1.z.literal("union"),
      description: zod_1.z.string().optional(),
      refs: zod_1.z.string().array(),
      closed: zod_1.z.boolean().optional()
    }).strict();
    exports.lexRefVariant = zod_1.z.discriminatedUnion("type", [exports.lexRef, exports.lexRefUnion]);
    exports.lexBlob = zod_1.z.object({
      type: zod_1.z.literal("blob"),
      description: zod_1.z.string().optional(),
      accept: zod_1.z.string().array().optional(),
      maxSize: zod_1.z.number().optional()
    }).strict();
    exports.lexArray = zod_1.z.object({
      type: zod_1.z.literal("array"),
      description: zod_1.z.string().optional(),
      items: zod_1.z.discriminatedUnion("type", [
        // lexPrimitive
        exports.lexBoolean,
        exports.lexInteger,
        exports.lexString,
        exports.lexUnknown,
        // lexIpldType
        exports.lexBytes,
        exports.lexCidLink,
        // lexRefVariant
        exports.lexRef,
        exports.lexRefUnion,
        // other
        exports.lexBlob
      ]),
      minLength: zod_1.z.number().int().optional(),
      maxLength: zod_1.z.number().int().optional()
    }).strict();
    exports.lexPrimitiveArray = exports.lexArray.merge(zod_1.z.object({
      items: exports.lexPrimitive
    }).strict());
    exports.lexToken = zod_1.z.object({
      type: zod_1.z.literal("token"),
      description: zod_1.z.string().optional()
    }).strict();
    exports.lexObject = zod_1.z.object({
      type: zod_1.z.literal("object"),
      description: zod_1.z.string().optional(),
      required: zod_1.z.string().array().optional(),
      nullable: zod_1.z.string().array().optional(),
      properties: zod_1.z.record(zod_1.z.discriminatedUnion("type", [
        exports.lexArray,
        // lexPrimitive
        exports.lexBoolean,
        exports.lexInteger,
        exports.lexString,
        exports.lexUnknown,
        // lexIpldType
        exports.lexBytes,
        exports.lexCidLink,
        // lexRefVariant
        exports.lexRef,
        exports.lexRefUnion,
        // other
        exports.lexBlob
      ]))
    }).strict().superRefine(util_1.requiredPropertiesRefinement);
    exports.lexXrpcParameters = zod_1.z.object({
      type: zod_1.z.literal("params"),
      description: zod_1.z.string().optional(),
      required: zod_1.z.string().array().optional(),
      properties: zod_1.z.record(zod_1.z.discriminatedUnion("type", [
        exports.lexPrimitiveArray,
        // lexPrimitive
        exports.lexBoolean,
        exports.lexInteger,
        exports.lexString,
        exports.lexUnknown
      ]))
    }).strict().superRefine(util_1.requiredPropertiesRefinement);
    exports.lexXrpcBody = zod_1.z.object({
      description: zod_1.z.string().optional(),
      encoding: zod_1.z.string(),
      // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
      schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
    }).strict();
    exports.lexXrpcSubscriptionMessage = zod_1.z.object({
      description: zod_1.z.string().optional(),
      // @NOTE using discriminatedUnion with a refined schema requires zod >= 4
      schema: zod_1.z.union([exports.lexRefVariant, exports.lexObject]).optional()
    }).strict();
    exports.lexXrpcError = zod_1.z.object({
      name: zod_1.z.string(),
      description: zod_1.z.string().optional()
    }).strict();
    exports.lexXrpcQuery = zod_1.z.object({
      type: zod_1.z.literal("query"),
      description: zod_1.z.string().optional(),
      parameters: exports.lexXrpcParameters.optional(),
      output: exports.lexXrpcBody.optional(),
      errors: exports.lexXrpcError.array().optional()
    }).strict();
    exports.lexXrpcProcedure = zod_1.z.object({
      type: zod_1.z.literal("procedure"),
      description: zod_1.z.string().optional(),
      parameters: exports.lexXrpcParameters.optional(),
      input: exports.lexXrpcBody.optional(),
      output: exports.lexXrpcBody.optional(),
      errors: exports.lexXrpcError.array().optional()
    }).strict();
    exports.lexXrpcSubscription = zod_1.z.object({
      type: zod_1.z.literal("subscription"),
      description: zod_1.z.string().optional(),
      parameters: exports.lexXrpcParameters.optional(),
      message: exports.lexXrpcSubscriptionMessage.optional(),
      errors: exports.lexXrpcError.array().optional()
    }).strict();
    exports.lexRecord = zod_1.z.object({
      type: zod_1.z.literal("record"),
      description: zod_1.z.string().optional(),
      key: zod_1.z.string().optional(),
      record: exports.lexObject
    }).strict();
    exports.lexUserType = zod_1.z.custom((val) => {
      if (!val || typeof val !== "object") {
        return;
      }
      if (val["type"] === void 0) {
        return;
      }
      switch (val["type"]) {
        case "record":
          return exports.lexRecord.parse(val);
        case "query":
          return exports.lexXrpcQuery.parse(val);
        case "procedure":
          return exports.lexXrpcProcedure.parse(val);
        case "subscription":
          return exports.lexXrpcSubscription.parse(val);
        case "blob":
          return exports.lexBlob.parse(val);
        case "array":
          return exports.lexArray.parse(val);
        case "token":
          return exports.lexToken.parse(val);
        case "object":
          return exports.lexObject.parse(val);
        case "boolean":
          return exports.lexBoolean.parse(val);
        case "integer":
          return exports.lexInteger.parse(val);
        case "string":
          return exports.lexString.parse(val);
        case "bytes":
          return exports.lexBytes.parse(val);
        case "cid-link":
          return exports.lexCidLink.parse(val);
        case "unknown":
          return exports.lexUnknown.parse(val);
      }
    }, (val) => {
      if (!val || typeof val !== "object") {
        return {
          message: "Must be an object",
          fatal: true
        };
      }
      if (val["type"] === void 0) {
        return {
          message: "Must have a type",
          fatal: true
        };
      }
      if (typeof val["type"] !== "string") {
        return {
          message: "Type property must be a string",
          fatal: true
        };
      }
      return {
        message: `Invalid type: ${val["type"]} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,
        fatal: true
      };
    });
    exports.lexiconDoc = zod_1.z.object({
      lexicon: zod_1.z.literal(1),
      id: zod_1.z.string().refine((v2) => syntax_1.NSID.isValid(v2), {
        message: "Must be a valid NSID"
      }),
      revision: zod_1.z.number().optional(),
      description: zod_1.z.string().optional(),
      defs: zod_1.z.record(exports.lexUserType)
    }).strict().superRefine((doc, ctx) => {
      for (const defId in doc.defs) {
        const def = doc.defs[defId];
        if (defId !== "main" && (def.type === "record" || def.type === "procedure" || def.type === "query" || def.type === "subscription")) {
          ctx.addIssue({
            code: zod_1.z.ZodIssueCode.custom,
            message: `Records, procedures, queries, and subscriptions must be the main definition.`
          });
        }
      }
    });
    function isValidLexiconDoc(v2) {
      return exports.lexiconDoc.safeParse(v2).success;
    }
    function isObj(obj) {
      return obj !== null && typeof obj === "object";
    }
    function hasProp(data, prop) {
      return prop in data;
    }
    exports.discriminatedObject = zod_1.z.object({ $type: zod_1.z.string() });
    function isDiscriminatedObject(value) {
      return exports.discriminatedObject.safeParse(value).success;
    }
    function parseLexiconDoc(v2) {
      exports.lexiconDoc.parse(v2);
      return v2;
    }
    var ValidationError = class extends Error {
    };
    exports.ValidationError = ValidationError;
    var InvalidLexiconError = class extends Error {
    };
    exports.InvalidLexiconError = InvalidLexiconError;
    var LexiconDefNotFoundError = class extends Error {
    };
    exports.LexiconDefNotFoundError = LexiconDefNotFoundError;
  }
});

// node_modules/@atproto/common-web/dist/check.js
var require_check = __commonJS({
  "node_modules/@atproto/common-web/dist/check.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObject = exports.assure = exports.create = exports.is = void 0;
    var is = (obj, def) => {
      return def.safeParse(obj).success;
    };
    exports.is = is;
    var create2 = (def) => (v2) => def.safeParse(v2).success;
    exports.create = create2;
    var assure = (def, obj) => {
      return def.parse(obj);
    };
    exports.assure = assure;
    var isObject2 = (obj) => {
      return typeof obj === "object" && obj !== null;
    };
    exports.isObject = isObject2;
  }
});

// node_modules/@atproto/common-web/dist/util.js
var require_util13 = __commonJS({
  "node_modules/@atproto/common-web/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseIntWithFallback = exports.dedupeStrs = exports.range = exports.chunkArray = exports.errHasMsg = exports.isErrnoException = exports.asyncFilter = exports.s32decode = exports.s32encode = exports.streamToBuffer = exports.flattenUint8Arrays = exports.bailableWait = exports.wait = exports.jitter = exports.noUndefinedVals = void 0;
    exports.omit = omit;
    var noUndefinedVals = (obj) => {
      Object.keys(obj).forEach((k2) => {
        if (obj[k2] === void 0) {
          delete obj[k2];
        }
      });
      return obj;
    };
    exports.noUndefinedVals = noUndefinedVals;
    function omit(src2, rejectedKeys) {
      if (!src2)
        return src2;
      const dst = {};
      const srcKeys = Object.keys(src2);
      for (let i9 = 0; i9 < srcKeys.length; i9++) {
        const key = srcKeys[i9];
        if (!rejectedKeys.includes(key)) {
          dst[key] = src2[key];
        }
      }
      return dst;
    }
    var jitter = (maxMs) => {
      return Math.round((Math.random() - 0.5) * maxMs * 2);
    };
    exports.jitter = jitter;
    var wait = (ms) => {
      return new Promise((res) => setTimeout(res, ms));
    };
    exports.wait = wait;
    var bailableWait = (ms) => {
      let bail;
      const waitPromise = new Promise((res) => {
        const timeout = setTimeout(res, ms);
        bail = () => {
          clearTimeout(timeout);
          res();
        };
      });
      return { bail, wait: () => waitPromise };
    };
    exports.bailableWait = bailableWait;
    var flattenUint8Arrays = (arrs) => {
      const length2 = arrs.reduce((acc, cur) => {
        return acc + cur.length;
      }, 0);
      const flattened = new Uint8Array(length2);
      let offset3 = 0;
      arrs.forEach((arr) => {
        flattened.set(arr, offset3);
        offset3 += arr.length;
      });
      return flattened;
    };
    exports.flattenUint8Arrays = flattenUint8Arrays;
    var streamToBuffer = async (stream) => {
      const arrays = [];
      for await (const chunk of stream) {
        arrays.push(chunk);
      }
      return (0, exports.flattenUint8Arrays)(arrays);
    };
    exports.streamToBuffer = streamToBuffer;
    var S32_CHAR = "234567abcdefghijklmnopqrstuvwxyz";
    var s32encode = (i9) => {
      let s4 = "";
      while (i9) {
        const c6 = i9 % 32;
        i9 = Math.floor(i9 / 32);
        s4 = S32_CHAR.charAt(c6) + s4;
      }
      return s4;
    };
    exports.s32encode = s32encode;
    var s32decode = (s4) => {
      let i9 = 0;
      for (const c6 of s4) {
        i9 = i9 * 32 + S32_CHAR.indexOf(c6);
      }
      return i9;
    };
    exports.s32decode = s32decode;
    var asyncFilter = async (arr, fn) => {
      const results = await Promise.all(arr.map((t6) => fn(t6)));
      return arr.filter((_2, i9) => results[i9]);
    };
    exports.asyncFilter = asyncFilter;
    var isErrnoException = (err) => {
      return !!err && err["code"];
    };
    exports.isErrnoException = isErrnoException;
    var errHasMsg = (err, msg) => {
      return !!err && typeof err === "object" && err["message"] === msg;
    };
    exports.errHasMsg = errHasMsg;
    var chunkArray = (arr, chunkSize) => {
      return arr.reduce((acc, cur, i9) => {
        const chunkI = Math.floor(i9 / chunkSize);
        if (!acc[chunkI]) {
          acc[chunkI] = [];
        }
        acc[chunkI].push(cur);
        return acc;
      }, []);
    };
    exports.chunkArray = chunkArray;
    var range = (num) => {
      const nums = [];
      for (let i9 = 0; i9 < num; i9++) {
        nums.push(i9);
      }
      return nums;
    };
    exports.range = range;
    var dedupeStrs = (strs) => {
      return [...new Set(strs)];
    };
    exports.dedupeStrs = dedupeStrs;
    var parseIntWithFallback = (value, fallback2) => {
      const parsed = parseInt(value || "", 10);
      return isNaN(parsed) ? fallback2 : parsed;
    };
    exports.parseIntWithFallback = parseIntWithFallback;
  }
});

// node_modules/@atproto/common-web/dist/arrays.js
var require_arrays = __commonJS({
  "node_modules/@atproto/common-web/dist/arrays.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapDefined = exports.keyBy = void 0;
    var keyBy = (arr, key) => {
      return arr.reduce((acc, cur) => {
        acc[cur[key]] = cur;
        return acc;
      }, {});
    };
    exports.keyBy = keyBy;
    var mapDefined = (arr, fn) => {
      const output = [];
      for (const item of arr) {
        const val = fn(item);
        if (val !== void 0) {
          output.push(val);
        }
      }
      return output;
    };
    exports.mapDefined = mapDefined;
  }
});

// node_modules/@atproto/common-web/dist/async.js
var require_async = __commonJS({
  "node_modules/@atproto/common-web/dist/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncBufferFullError = exports.AsyncBuffer = exports.allComplete = exports.createDeferrables = exports.createDeferrable = exports.readFromGenerator = void 0;
    exports.allFulfilled = allFulfilled;
    exports.handleAllSettledErrors = handleAllSettledErrors;
    exports.isRejectedResult = isRejectedResult;
    exports.isFulfilledResult = isFulfilledResult;
    var util_1 = require_util13();
    var readFromGenerator = async (gen, isDone, waitFor = Promise.resolve(), maxLength = Number.MAX_SAFE_INTEGER) => {
      const evts = [];
      let bail;
      let hasBroke = false;
      const awaitDone = async () => {
        if (await isDone(evts.at(-1))) {
          return true;
        }
        const bailable = (0, util_1.bailableWait)(20);
        await bailable.wait();
        bail = bailable.bail;
        if (hasBroke)
          return false;
        return await awaitDone();
      };
      const breakOn = new Promise((resolve) => {
        waitFor.then(() => {
          awaitDone().then(() => resolve());
        });
      });
      try {
        while (evts.length < maxLength) {
          const maybeEvt = await Promise.race([gen.next(), breakOn]);
          if (!maybeEvt)
            break;
          const evt = maybeEvt;
          if (evt.done)
            break;
          evts.push(evt.value);
        }
      } finally {
        hasBroke = true;
        bail && bail();
      }
      return evts;
    };
    exports.readFromGenerator = readFromGenerator;
    var createDeferrable = () => {
      let resolve;
      const promise = new Promise((res) => {
        resolve = () => res();
      });
      return { resolve, complete: promise };
    };
    exports.createDeferrable = createDeferrable;
    var createDeferrables = (count) => {
      const list = [];
      for (let i9 = 0; i9 < count; i9++) {
        list.push((0, exports.createDeferrable)());
      }
      return list;
    };
    exports.createDeferrables = createDeferrables;
    var allComplete = async (deferrables) => {
      await Promise.all(deferrables.map((d3) => d3.complete));
    };
    exports.allComplete = allComplete;
    var AsyncBuffer = class {
      constructor(maxSize) {
        Object.defineProperty(this, "maxSize", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: maxSize
        });
        Object.defineProperty(this, "buffer", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
        Object.defineProperty(this, "promise", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "resolve", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "closed", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: false
        });
        Object.defineProperty(this, "toThrow", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.promise = Promise.resolve();
        this.resolve = () => null;
        this.resetPromise();
      }
      get curr() {
        return this.buffer;
      }
      get size() {
        return this.buffer.length;
      }
      get isClosed() {
        return this.closed;
      }
      resetPromise() {
        this.promise = new Promise((r10) => this.resolve = r10);
      }
      push(item) {
        this.buffer.push(item);
        this.resolve();
      }
      pushMany(items) {
        items.forEach((i9) => this.buffer.push(i9));
        this.resolve();
      }
      async *events() {
        while (true) {
          if (this.closed && this.buffer.length === 0) {
            if (this.toThrow) {
              throw this.toThrow;
            } else {
              return;
            }
          }
          await this.promise;
          if (this.toThrow) {
            throw this.toThrow;
          }
          if (this.maxSize && this.size > this.maxSize) {
            throw new AsyncBufferFullError(this.maxSize);
          }
          const [first, ...rest] = this.buffer;
          if (first) {
            this.buffer = rest;
            yield first;
          } else {
            this.resetPromise();
          }
        }
      }
      throw(err) {
        this.toThrow = err;
        this.closed = true;
        this.resolve();
      }
      close() {
        this.closed = true;
        this.resolve();
      }
    };
    exports.AsyncBuffer = AsyncBuffer;
    var AsyncBufferFullError = class extends Error {
      constructor(maxSize) {
        super(`ReachedMaxBufferSize: ${maxSize}`);
      }
    };
    exports.AsyncBufferFullError = AsyncBufferFullError;
    function allFulfilled(promises) {
      return Promise.allSettled(promises).then(handleAllSettledErrors);
    }
    function handleAllSettledErrors(results) {
      const errors = results.filter(isRejectedResult).map(extractReason);
      if (errors.length === 0) {
        return results.map(extractValue);
      }
      if (errors.length === 1) {
        throw errors[0];
      }
      throw new AggregateError(errors, `Multiple errors: ${errors.map(stringifyReason).join("\n")}`);
    }
    function isRejectedResult(result) {
      return result.status === "rejected";
    }
    function extractReason(result) {
      return result.reason;
    }
    function isFulfilledResult(result) {
      return result.status === "fulfilled";
    }
    function extractValue(result) {
      return result.value;
    }
    function stringifyReason(reason) {
      if (reason instanceof Error) {
        return reason.message;
      }
      return String(reason);
    }
  }
});

// node_modules/@atproto/common-web/dist/tid.js
var require_tid2 = __commonJS({
  "node_modules/@atproto/common-web/dist/tid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TID = void 0;
    var util_1 = require_util13();
    var TID_LEN = 13;
    var lastTimestamp = 0;
    var timestampCount = 0;
    var clockid = null;
    function dedash(str) {
      return str.replaceAll("-", "");
    }
    var TID = class _TID {
      constructor(str) {
        Object.defineProperty(this, "str", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        const noDashes = dedash(str);
        if (noDashes.length !== TID_LEN) {
          throw new Error(`Poorly formatted TID: ${noDashes.length} length`);
        }
        this.str = noDashes;
      }
      static next(prev) {
        const time = Math.max(Date.now(), lastTimestamp);
        if (time === lastTimestamp) {
          timestampCount++;
        }
        lastTimestamp = time;
        const timestamp = time * 1e3 + timestampCount;
        if (clockid === null) {
          clockid = Math.floor(Math.random() * 32);
        }
        const tid = _TID.fromTime(timestamp, clockid);
        if (!prev || tid.newerThan(prev)) {
          return tid;
        }
        return _TID.fromTime(prev.timestamp() + 1, clockid);
      }
      static nextStr(prev) {
        return _TID.next(prev ? new _TID(prev) : void 0).toString();
      }
      static fromTime(timestamp, clockid2) {
        const str = `${(0, util_1.s32encode)(timestamp)}${(0, util_1.s32encode)(clockid2).padStart(2, "2")}`;
        return new _TID(str);
      }
      static fromStr(str) {
        return new _TID(str);
      }
      static oldestFirst(a4, b3) {
        return a4.compareTo(b3);
      }
      static newestFirst(a4, b3) {
        return b3.compareTo(a4);
      }
      static is(str) {
        return dedash(str).length === TID_LEN;
      }
      timestamp() {
        return (0, util_1.s32decode)(this.str.slice(0, 11));
      }
      clockid() {
        return (0, util_1.s32decode)(this.str.slice(11, 13));
      }
      formatted() {
        const str = this.toString();
        return `${str.slice(0, 4)}-${str.slice(4, 7)}-${str.slice(7, 11)}-${str.slice(11, 13)}`;
      }
      toString() {
        return this.str;
      }
      // newer > older
      compareTo(other) {
        if (this.str > other.str)
          return 1;
        if (this.str < other.str)
          return -1;
        return 0;
      }
      equals(other) {
        return this.str === other.str;
      }
      newerThan(other) {
        return this.compareTo(other) > 0;
      }
      olderThan(other) {
        return this.compareTo(other) < 0;
      }
    };
    exports.TID = TID;
    exports.default = TID;
  }
});

// node_modules/multiformats/esm/vendor/varint.js
function encode4(num, out, offset3) {
  out = out || [];
  offset3 = offset3 || 0;
  var oldOffset = offset3;
  while (num >= INT) {
    out[offset3++] = num & 255 | MSB;
    num /= 128;
  }
  while (num & MSBALL) {
    out[offset3++] = num & 255 | MSB;
    num >>>= 7;
  }
  out[offset3] = num | 0;
  encode4.bytes = offset3 - oldOffset + 1;
  return out;
}
function read(buf, offset3) {
  var res = 0, offset3 = offset3 || 0, shift3 = 0, counter = offset3, b3, l5 = buf.length;
  do {
    if (counter >= l5) {
      read.bytes = 0;
      throw new RangeError("Could not decode varint");
    }
    b3 = buf[counter++];
    res += shift3 < 28 ? (b3 & REST$1) << shift3 : (b3 & REST$1) * Math.pow(2, shift3);
    shift3 += 7;
  } while (b3 >= MSB$1);
  read.bytes = counter - offset3;
  return res;
}
var encode_1, MSB, REST, MSBALL, INT, decode4, MSB$1, REST$1, N1, N2, N3, N4, N5, N6, N7, N8, N9, length, varint, _brrp_varint, varint_default;
var init_varint = __esm({
  "node_modules/multiformats/esm/vendor/varint.js"() {
    encode_1 = encode4;
    MSB = 128;
    REST = 127;
    MSBALL = ~REST;
    INT = Math.pow(2, 31);
    decode4 = read;
    MSB$1 = 128;
    REST$1 = 127;
    N1 = Math.pow(2, 7);
    N2 = Math.pow(2, 14);
    N3 = Math.pow(2, 21);
    N4 = Math.pow(2, 28);
    N5 = Math.pow(2, 35);
    N6 = Math.pow(2, 42);
    N7 = Math.pow(2, 49);
    N8 = Math.pow(2, 56);
    N9 = Math.pow(2, 63);
    length = function(value) {
      return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
    };
    varint = {
      encode: encode_1,
      decode: decode4,
      encodingLength: length
    };
    _brrp_varint = varint;
    varint_default = _brrp_varint;
  }
});

// node_modules/multiformats/esm/src/varint.js
var decode5, encodeTo, encodingLength;
var init_varint2 = __esm({
  "node_modules/multiformats/esm/src/varint.js"() {
    init_varint();
    decode5 = (data, offset3 = 0) => {
      const code2 = varint_default.decode(data, offset3);
      return [
        code2,
        varint_default.decode.bytes
      ];
    };
    encodeTo = (int, target, offset3 = 0) => {
      varint_default.encode(int, target, offset3);
      return target;
    };
    encodingLength = (int) => {
      return varint_default.encodingLength(int);
    };
  }
});

// node_modules/multiformats/esm/src/hashes/digest.js
var create, decode6, equals2, Digest;
var init_digest2 = __esm({
  "node_modules/multiformats/esm/src/hashes/digest.js"() {
    init_bytes();
    init_varint2();
    create = (code2, digest3) => {
      const size3 = digest3.byteLength;
      const sizeOffset = encodingLength(code2);
      const digestOffset = sizeOffset + encodingLength(size3);
      const bytes = new Uint8Array(digestOffset + size3);
      encodeTo(code2, bytes, 0);
      encodeTo(size3, bytes, sizeOffset);
      bytes.set(digest3, digestOffset);
      return new Digest(code2, size3, digest3, bytes);
    };
    decode6 = (multihash) => {
      const bytes = coerce(multihash);
      const [code2, sizeOffset] = decode5(bytes);
      const [size3, digestOffset] = decode5(bytes.subarray(sizeOffset));
      const digest3 = bytes.subarray(sizeOffset + digestOffset);
      if (digest3.byteLength !== size3) {
        throw new Error("Incorrect length");
      }
      return new Digest(code2, size3, digest3, bytes);
    };
    equals2 = (a4, b3) => {
      if (a4 === b3) {
        return true;
      } else {
        return a4.code === b3.code && a4.size === b3.size && equals(a4.bytes, b3.bytes);
      }
    };
    Digest = class {
      constructor(code2, size3, digest3, bytes) {
        this.code = code2;
        this.size = size3;
        this.digest = digest3;
        this.bytes = bytes;
      }
    };
  }
});

// node_modules/multiformats/esm/src/bases/base58.js
var base58_exports = {};
__export(base58_exports, {
  base58btc: () => base58btc,
  base58flickr: () => base58flickr
});
var base58btc, base58flickr;
var init_base58 = __esm({
  "node_modules/multiformats/esm/src/bases/base58.js"() {
    init_base();
    base58btc = baseX({
      name: "base58btc",
      prefix: "z",
      alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
    });
    base58flickr = baseX({
      name: "base58flickr",
      prefix: "Z",
      alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
    });
  }
});

// node_modules/multiformats/esm/src/bases/base32.js
var base32_exports = {};
__export(base32_exports, {
  base32: () => base32,
  base32hex: () => base32hex,
  base32hexpad: () => base32hexpad,
  base32hexpadupper: () => base32hexpadupper,
  base32hexupper: () => base32hexupper,
  base32pad: () => base32pad,
  base32padupper: () => base32padupper,
  base32upper: () => base32upper,
  base32z: () => base32z
});
var base32, base32upper, base32pad, base32padupper, base32hex, base32hexupper, base32hexpad, base32hexpadupper, base32z;
var init_base32 = __esm({
  "node_modules/multiformats/esm/src/bases/base32.js"() {
    init_base();
    base32 = rfc4648({
      prefix: "b",
      name: "base32",
      alphabet: "abcdefghijklmnopqrstuvwxyz234567",
      bitsPerChar: 5
    });
    base32upper = rfc4648({
      prefix: "B",
      name: "base32upper",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
      bitsPerChar: 5
    });
    base32pad = rfc4648({
      prefix: "c",
      name: "base32pad",
      alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
      bitsPerChar: 5
    });
    base32padupper = rfc4648({
      prefix: "C",
      name: "base32padupper",
      alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
      bitsPerChar: 5
    });
    base32hex = rfc4648({
      prefix: "v",
      name: "base32hex",
      alphabet: "0123456789abcdefghijklmnopqrstuv",
      bitsPerChar: 5
    });
    base32hexupper = rfc4648({
      prefix: "V",
      name: "base32hexupper",
      alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
      bitsPerChar: 5
    });
    base32hexpad = rfc4648({
      prefix: "t",
      name: "base32hexpad",
      alphabet: "0123456789abcdefghijklmnopqrstuv=",
      bitsPerChar: 5
    });
    base32hexpadupper = rfc4648({
      prefix: "T",
      name: "base32hexpadupper",
      alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
      bitsPerChar: 5
    });
    base32z = rfc4648({
      prefix: "h",
      name: "base32z",
      alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
      bitsPerChar: 5
    });
  }
});

// node_modules/multiformats/esm/src/cid.js
var cid_exports = {};
__export(cid_exports, {
  CID: () => CID
});
var CID, parseCIDtoBytes, toStringV0, toStringV1, DAG_PB_CODE, SHA_256_CODE, encodeCID, cidSymbol, readonly, hidden, version, deprecate, IS_CID_DEPRECATION;
var init_cid = __esm({
  "node_modules/multiformats/esm/src/cid.js"() {
    init_varint2();
    init_digest2();
    init_base58();
    init_base32();
    init_bytes();
    CID = class _CID {
      constructor(version2, code2, multihash, bytes) {
        this.code = code2;
        this.version = version2;
        this.multihash = multihash;
        this.bytes = bytes;
        this.byteOffset = bytes.byteOffset;
        this.byteLength = bytes.byteLength;
        this.asCID = this;
        this._baseCache = /* @__PURE__ */ new Map();
        Object.defineProperties(this, {
          byteOffset: hidden,
          byteLength: hidden,
          code: readonly,
          version: readonly,
          multihash: readonly,
          bytes: readonly,
          _baseCache: hidden,
          asCID: hidden
        });
      }
      toV0() {
        switch (this.version) {
          case 0: {
            return this;
          }
          default: {
            const { code: code2, multihash } = this;
            if (code2 !== DAG_PB_CODE) {
              throw new Error("Cannot convert a non dag-pb CID to CIDv0");
            }
            if (multihash.code !== SHA_256_CODE) {
              throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
            }
            return _CID.createV0(multihash);
          }
        }
      }
      toV1() {
        switch (this.version) {
          case 0: {
            const { code: code2, digest: digest3 } = this.multihash;
            const multihash = create(code2, digest3);
            return _CID.createV1(this.code, multihash);
          }
          case 1: {
            return this;
          }
          default: {
            throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
          }
        }
      }
      equals(other) {
        return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);
      }
      toString(base3) {
        const { bytes, version: version2, _baseCache } = this;
        switch (version2) {
          case 0:
            return toStringV0(bytes, _baseCache, base3 || base58btc.encoder);
          default:
            return toStringV1(bytes, _baseCache, base3 || base32.encoder);
        }
      }
      toJSON() {
        return {
          code: this.code,
          version: this.version,
          hash: this.multihash.bytes
        };
      }
      get [Symbol.toStringTag]() {
        return "CID";
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return "CID(" + this.toString() + ")";
      }
      static isCID(value) {
        deprecate(/^0\.0/, IS_CID_DEPRECATION);
        return !!(value && (value[cidSymbol] || value.asCID === value));
      }
      get toBaseEncodedString() {
        throw new Error("Deprecated, use .toString()");
      }
      get codec() {
        throw new Error('"codec" property is deprecated, use integer "code" property instead');
      }
      get buffer() {
        throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
      }
      get multibaseName() {
        throw new Error('"multibaseName" property is deprecated');
      }
      get prefix() {
        throw new Error('"prefix" property is deprecated');
      }
      static asCID(value) {
        if (value instanceof _CID) {
          return value;
        } else if (value != null && value.asCID === value) {
          const { version: version2, code: code2, multihash, bytes } = value;
          return new _CID(version2, code2, multihash, bytes || encodeCID(version2, code2, multihash.bytes));
        } else if (value != null && value[cidSymbol] === true) {
          const { version: version2, multihash, code: code2 } = value;
          const digest3 = decode6(multihash);
          return _CID.create(version2, code2, digest3);
        } else {
          return null;
        }
      }
      static create(version2, code2, digest3) {
        if (typeof code2 !== "number") {
          throw new Error("String codecs are no longer supported");
        }
        switch (version2) {
          case 0: {
            if (code2 !== DAG_PB_CODE) {
              throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);
            } else {
              return new _CID(version2, code2, digest3, digest3.bytes);
            }
          }
          case 1: {
            const bytes = encodeCID(version2, code2, digest3.bytes);
            return new _CID(version2, code2, digest3, bytes);
          }
          default: {
            throw new Error("Invalid version");
          }
        }
      }
      static createV0(digest3) {
        return _CID.create(0, DAG_PB_CODE, digest3);
      }
      static createV1(code2, digest3) {
        return _CID.create(1, code2, digest3);
      }
      static decode(bytes) {
        const [cid, remainder] = _CID.decodeFirst(bytes);
        if (remainder.length) {
          throw new Error("Incorrect length");
        }
        return cid;
      }
      static decodeFirst(bytes) {
        const specs = _CID.inspectBytes(bytes);
        const prefixSize = specs.size - specs.multihashSize;
        const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
        if (multihashBytes.byteLength !== specs.multihashSize) {
          throw new Error("Incorrect length");
        }
        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
        const digest3 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
        const cid = specs.version === 0 ? _CID.createV0(digest3) : _CID.createV1(specs.codec, digest3);
        return [
          cid,
          bytes.subarray(specs.size)
        ];
      }
      static inspectBytes(initialBytes) {
        let offset3 = 0;
        const next = () => {
          const [i9, length2] = decode5(initialBytes.subarray(offset3));
          offset3 += length2;
          return i9;
        };
        let version2 = next();
        let codec = DAG_PB_CODE;
        if (version2 === 18) {
          version2 = 0;
          offset3 = 0;
        } else if (version2 === 1) {
          codec = next();
        }
        if (version2 !== 0 && version2 !== 1) {
          throw new RangeError(`Invalid CID version ${version2}`);
        }
        const prefixSize = offset3;
        const multihashCode = next();
        const digestSize = next();
        const size3 = offset3 + digestSize;
        const multihashSize = size3 - prefixSize;
        return {
          version: version2,
          codec,
          multihashCode,
          digestSize,
          multihashSize,
          size: size3
        };
      }
      static parse(source, base3) {
        const [prefix, bytes] = parseCIDtoBytes(source, base3);
        const cid = _CID.decode(bytes);
        cid._baseCache.set(prefix, source);
        return cid;
      }
    };
    parseCIDtoBytes = (source, base3) => {
      switch (source[0]) {
        case "Q": {
          const decoder2 = base3 || base58btc;
          return [
            base58btc.prefix,
            decoder2.decode(`${base58btc.prefix}${source}`)
          ];
        }
        case base58btc.prefix: {
          const decoder2 = base3 || base58btc;
          return [
            base58btc.prefix,
            decoder2.decode(source)
          ];
        }
        case base32.prefix: {
          const decoder2 = base3 || base32;
          return [
            base32.prefix,
            decoder2.decode(source)
          ];
        }
        default: {
          if (base3 == null) {
            throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
          }
          return [
            source[0],
            base3.decode(source)
          ];
        }
      }
    };
    toStringV0 = (bytes, cache, base3) => {
      const { prefix } = base3;
      if (prefix !== base58btc.prefix) {
        throw Error(`Cannot string encode V0 in ${base3.name} encoding`);
      }
      const cid = cache.get(prefix);
      if (cid == null) {
        const cid2 = base3.encode(bytes).slice(1);
        cache.set(prefix, cid2);
        return cid2;
      } else {
        return cid;
      }
    };
    toStringV1 = (bytes, cache, base3) => {
      const { prefix } = base3;
      const cid = cache.get(prefix);
      if (cid == null) {
        const cid2 = base3.encode(bytes);
        cache.set(prefix, cid2);
        return cid2;
      } else {
        return cid;
      }
    };
    DAG_PB_CODE = 112;
    SHA_256_CODE = 18;
    encodeCID = (version2, code2, multihash) => {
      const codeOffset = encodingLength(version2);
      const hashOffset = codeOffset + encodingLength(code2);
      const bytes = new Uint8Array(hashOffset + multihash.byteLength);
      encodeTo(version2, bytes, 0);
      encodeTo(code2, bytes, codeOffset);
      bytes.set(multihash, hashOffset);
      return bytes;
    };
    cidSymbol = Symbol.for("@ipld/js-cid/CID");
    readonly = {
      writable: false,
      configurable: false,
      enumerable: true
    };
    hidden = {
      writable: false,
      enumerable: false,
      configurable: false
    };
    version = "0.0.0-dev";
    deprecate = (range, message2) => {
      if (range.test(version)) {
        console.warn(message2);
      } else {
        throw new Error(message2);
      }
    };
    IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
  }
});

// node_modules/uint8arrays/esm/src/compare.js
function compare(a4, b3) {
  for (let i9 = 0; i9 < a4.byteLength; i9++) {
    if (a4[i9] < b3[i9]) {
      return -1;
    }
    if (a4[i9] > b3[i9]) {
      return 1;
    }
  }
  if (a4.byteLength > b3.byteLength) {
    return 1;
  }
  if (a4.byteLength < b3.byteLength) {
    return -1;
  }
  return 0;
}
var init_compare = __esm({
  "node_modules/uint8arrays/esm/src/compare.js"() {
  }
});

// node_modules/uint8arrays/esm/src/concat.js
function concat2(arrays, length2) {
  if (!length2) {
    length2 = arrays.reduce((acc, curr) => acc + curr.length, 0);
  }
  const output = new Uint8Array(length2);
  let offset3 = 0;
  for (const arr of arrays) {
    output.set(arr, offset3);
    offset3 += arr.length;
  }
  return output;
}
var init_concat = __esm({
  "node_modules/uint8arrays/esm/src/concat.js"() {
  }
});

// node_modules/uint8arrays/esm/src/equals.js
function equals3(a4, b3) {
  if (a4 === b3) {
    return true;
  }
  if (a4.byteLength !== b3.byteLength) {
    return false;
  }
  for (let i9 = 0; i9 < a4.byteLength; i9++) {
    if (a4[i9] !== b3[i9]) {
      return false;
    }
  }
  return true;
}
var init_equals = __esm({
  "node_modules/uint8arrays/esm/src/equals.js"() {
  }
});

// node_modules/multiformats/esm/src/bases/identity.js
var identity_exports = {};
__export(identity_exports, {
  identity: () => identity
});
var identity;
var init_identity = __esm({
  "node_modules/multiformats/esm/src/bases/identity.js"() {
    init_base();
    init_bytes();
    identity = from({
      prefix: "\0",
      name: "identity",
      encode: (buf) => toString(buf),
      decode: (str) => fromString(str)
    });
  }
});

// node_modules/multiformats/esm/src/bases/base2.js
var base2_exports = {};
__export(base2_exports, {
  base2: () => base2
});
var base2;
var init_base2 = __esm({
  "node_modules/multiformats/esm/src/bases/base2.js"() {
    init_base();
    base2 = rfc4648({
      prefix: "0",
      name: "base2",
      alphabet: "01",
      bitsPerChar: 1
    });
  }
});

// node_modules/multiformats/esm/src/bases/base8.js
var base8_exports = {};
__export(base8_exports, {
  base8: () => base8
});
var base8;
var init_base8 = __esm({
  "node_modules/multiformats/esm/src/bases/base8.js"() {
    init_base();
    base8 = rfc4648({
      prefix: "7",
      name: "base8",
      alphabet: "01234567",
      bitsPerChar: 3
    });
  }
});

// node_modules/multiformats/esm/src/bases/base10.js
var base10_exports = {};
__export(base10_exports, {
  base10: () => base10
});
var base10;
var init_base10 = __esm({
  "node_modules/multiformats/esm/src/bases/base10.js"() {
    init_base();
    base10 = baseX({
      prefix: "9",
      name: "base10",
      alphabet: "0123456789"
    });
  }
});

// node_modules/multiformats/esm/src/bases/base16.js
var base16_exports = {};
__export(base16_exports, {
  base16: () => base16,
  base16upper: () => base16upper
});
var base16, base16upper;
var init_base16 = __esm({
  "node_modules/multiformats/esm/src/bases/base16.js"() {
    init_base();
    base16 = rfc4648({
      prefix: "f",
      name: "base16",
      alphabet: "0123456789abcdef",
      bitsPerChar: 4
    });
    base16upper = rfc4648({
      prefix: "F",
      name: "base16upper",
      alphabet: "0123456789ABCDEF",
      bitsPerChar: 4
    });
  }
});

// node_modules/multiformats/esm/src/bases/base36.js
var base36_exports = {};
__export(base36_exports, {
  base36: () => base36,
  base36upper: () => base36upper
});
var base36, base36upper;
var init_base36 = __esm({
  "node_modules/multiformats/esm/src/bases/base36.js"() {
    init_base();
    base36 = baseX({
      prefix: "k",
      name: "base36",
      alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
    });
    base36upper = baseX({
      prefix: "K",
      name: "base36upper",
      alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    });
  }
});

// node_modules/multiformats/esm/src/bases/base256emoji.js
var base256emoji_exports = {};
__export(base256emoji_exports, {
  base256emoji: () => base256emoji
});
function encode5(data) {
  return data.reduce((p3, c6) => {
    p3 += alphabetBytesToChars[c6];
    return p3;
  }, "");
}
function decode7(str) {
  const byts = [];
  for (const char of str) {
    const byt = alphabetCharsToBytes[char.codePointAt(0)];
    if (byt === void 0) {
      throw new Error(`Non-base256emoji character: ${char}`);
    }
    byts.push(byt);
  }
  return new Uint8Array(byts);
}
var alphabet, alphabetBytesToChars, alphabetCharsToBytes, base256emoji;
var init_base256emoji = __esm({
  "node_modules/multiformats/esm/src/bases/base256emoji.js"() {
    init_base();
    alphabet = Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}");
    alphabetBytesToChars = alphabet.reduce((p3, c6, i9) => {
      p3[i9] = c6;
      return p3;
    }, []);
    alphabetCharsToBytes = alphabet.reduce((p3, c6, i9) => {
      p3[c6.codePointAt(0)] = i9;
      return p3;
    }, []);
    base256emoji = from({
      prefix: "\u{1F680}",
      name: "base256emoji",
      encode: encode5,
      decode: decode7
    });
  }
});

// node_modules/multiformats/esm/src/hashes/hasher.js
var from2, Hasher;
var init_hasher = __esm({
  "node_modules/multiformats/esm/src/hashes/hasher.js"() {
    init_digest2();
    from2 = ({ name: name2, code: code2, encode: encode7 }) => new Hasher(name2, code2, encode7);
    Hasher = class {
      constructor(name2, code2, encode7) {
        this.name = name2;
        this.code = code2;
        this.encode = encode7;
      }
      digest(input) {
        if (input instanceof Uint8Array) {
          const result = this.encode(input);
          return result instanceof Uint8Array ? create(this.code, result) : result.then((digest3) => create(this.code, digest3));
        } else {
          throw Error("Unknown type, must be binary type");
        }
      }
    };
  }
});

// node_modules/multiformats/esm/src/hashes/sha2-browser.js
var sha2_browser_exports = {};
__export(sha2_browser_exports, {
  sha256: () => sha256,
  sha512: () => sha512
});
var sha, sha256, sha512;
var init_sha2_browser = __esm({
  "node_modules/multiformats/esm/src/hashes/sha2-browser.js"() {
    init_hasher();
    sha = (name2) => async (data) => new Uint8Array(await crypto.subtle.digest(name2, data));
    sha256 = from2({
      name: "sha2-256",
      code: 18,
      encode: sha("SHA-256")
    });
    sha512 = from2({
      name: "sha2-512",
      code: 19,
      encode: sha("SHA-512")
    });
  }
});

// node_modules/multiformats/esm/src/hashes/identity.js
var identity_exports2 = {};
__export(identity_exports2, {
  identity: () => identity2
});
var code, name, encode6, digest2, identity2;
var init_identity2 = __esm({
  "node_modules/multiformats/esm/src/hashes/identity.js"() {
    init_bytes();
    init_digest2();
    code = 0;
    name = "identity";
    encode6 = coerce;
    digest2 = (input) => create(code, encode6(input));
    identity2 = {
      code,
      name,
      encode: encode6,
      digest: digest2
    };
  }
});

// node_modules/multiformats/esm/src/codecs/raw.js
var init_raw = __esm({
  "node_modules/multiformats/esm/src/codecs/raw.js"() {
    init_bytes();
  }
});

// node_modules/multiformats/esm/src/codecs/json.js
var textEncoder, textDecoder;
var init_json = __esm({
  "node_modules/multiformats/esm/src/codecs/json.js"() {
    textEncoder = new TextEncoder();
    textDecoder = new TextDecoder();
  }
});

// node_modules/multiformats/esm/src/index.js
var init_src = __esm({
  "node_modules/multiformats/esm/src/index.js"() {
    init_cid();
    init_varint2();
    init_bytes();
    init_hasher();
    init_digest2();
  }
});

// node_modules/multiformats/esm/src/basics.js
var bases, hashes;
var init_basics = __esm({
  "node_modules/multiformats/esm/src/basics.js"() {
    init_identity();
    init_base2();
    init_base8();
    init_base10();
    init_base16();
    init_base32();
    init_base36();
    init_base58();
    init_base64();
    init_base256emoji();
    init_sha2_browser();
    init_identity2();
    init_raw();
    init_json();
    init_src();
    bases = {
      ...identity_exports,
      ...base2_exports,
      ...base8_exports,
      ...base10_exports,
      ...base16_exports,
      ...base32_exports,
      ...base36_exports,
      ...base58_exports,
      ...base64_exports,
      ...base256emoji_exports
    };
    hashes = {
      ...sha2_browser_exports,
      ...identity_exports2
    };
  }
});

// node_modules/uint8arrays/esm/src/util/bases.js
function createCodec(name2, prefix, encode7, decode8) {
  return {
    name: name2,
    prefix,
    encoder: {
      name: name2,
      prefix,
      encode: encode7
    },
    decoder: { decode: decode8 }
  };
}
var string, ascii, BASES, bases_default;
var init_bases = __esm({
  "node_modules/uint8arrays/esm/src/util/bases.js"() {
    init_basics();
    string = createCodec("utf8", "u", (buf) => {
      const decoder2 = new TextDecoder("utf8");
      return "u" + decoder2.decode(buf);
    }, (str) => {
      const encoder2 = new TextEncoder();
      return encoder2.encode(str.substring(1));
    });
    ascii = createCodec("ascii", "a", (buf) => {
      let string2 = "a";
      for (let i9 = 0; i9 < buf.length; i9++) {
        string2 += String.fromCharCode(buf[i9]);
      }
      return string2;
    }, (str) => {
      str = str.substring(1);
      const buf = new Uint8Array(str.length);
      for (let i9 = 0; i9 < str.length; i9++) {
        buf[i9] = str.charCodeAt(i9);
      }
      return buf;
    });
    BASES = {
      utf8: string,
      "utf-8": string,
      hex: bases.base16,
      latin1: ascii,
      ascii,
      binary: ascii,
      ...bases
    };
    bases_default = BASES;
  }
});

// node_modules/uint8arrays/esm/src/from-string.js
function fromString2(string2, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  return base3.decoder.decode(`${base3.prefix}${string2}`);
}
var init_from_string = __esm({
  "node_modules/uint8arrays/esm/src/from-string.js"() {
    init_bases();
  }
});

// node_modules/uint8arrays/esm/src/to-string.js
function toString2(array, encoding = "utf8") {
  const base3 = bases_default[encoding];
  if (!base3) {
    throw new Error(`Unsupported encoding "${encoding}"`);
  }
  return base3.encoder.encode(array).substring(1);
}
var init_to_string = __esm({
  "node_modules/uint8arrays/esm/src/to-string.js"() {
    init_bases();
  }
});

// node_modules/uint8arrays/esm/src/xor.js
function xor(a4, b3) {
  if (a4.length !== b3.length) {
    throw new Error("Inputs should have the same length");
  }
  const result = new Uint8Array(a4.length);
  for (let i9 = 0; i9 < a4.length; i9++) {
    result[i9] = a4[i9] ^ b3[i9];
  }
  return result;
}
var init_xor = __esm({
  "node_modules/uint8arrays/esm/src/xor.js"() {
  }
});

// node_modules/uint8arrays/esm/src/index.js
var src_exports = {};
__export(src_exports, {
  compare: () => compare,
  concat: () => concat2,
  equals: () => equals3,
  fromString: () => fromString2,
  toString: () => toString2,
  xor: () => xor
});
var init_src2 = __esm({
  "node_modules/uint8arrays/esm/src/index.js"() {
    init_compare();
    init_concat();
    init_equals();
    init_from_string();
    init_to_string();
    init_xor();
  }
});

// node_modules/@atproto/common-web/dist/ipld.js
var require_ipld = __commonJS({
  "node_modules/@atproto/common-web/dist/ipld.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o13, v2) {
      Object.defineProperty(o13, "default", { enumerable: true, value: v2 });
    } : function(o13, v2) {
      o13["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ipldEquals = exports.ipldToJson = exports.jsonToIpld = void 0;
    var cid_1 = (init_cid(), __toCommonJS(cid_exports));
    var ui8 = __importStar((init_src2(), __toCommonJS(src_exports)));
    var jsonToIpld = (val) => {
      if (Array.isArray(val)) {
        return val.map((item) => (0, exports.jsonToIpld)(item));
      }
      if (val && typeof val === "object") {
        if (typeof val["$link"] === "string" && Object.keys(val).length === 1) {
          return cid_1.CID.parse(val["$link"]);
        }
        if (typeof val["$bytes"] === "string" && Object.keys(val).length === 1) {
          return ui8.fromString(val["$bytes"], "base64");
        }
        const toReturn = {};
        for (const key of Object.keys(val)) {
          toReturn[key] = (0, exports.jsonToIpld)(val[key]);
        }
        return toReturn;
      }
      return val;
    };
    exports.jsonToIpld = jsonToIpld;
    var ipldToJson = (val) => {
      if (Array.isArray(val)) {
        return val.map((item) => (0, exports.ipldToJson)(item));
      }
      if (val && typeof val === "object") {
        if (val instanceof Uint8Array) {
          return {
            $bytes: ui8.toString(val, "base64")
          };
        }
        if (cid_1.CID.asCID(val)) {
          return {
            $link: val.toString()
          };
        }
        const toReturn = {};
        for (const key of Object.keys(val)) {
          toReturn[key] = (0, exports.ipldToJson)(val[key]);
        }
        return toReturn;
      }
      return val;
    };
    exports.ipldToJson = ipldToJson;
    var ipldEquals = (a4, b3) => {
      if (Array.isArray(a4) && Array.isArray(b3)) {
        if (a4.length !== b3.length)
          return false;
        for (let i9 = 0; i9 < a4.length; i9++) {
          if (!(0, exports.ipldEquals)(a4[i9], b3[i9]))
            return false;
        }
        return true;
      }
      if (a4 && b3 && typeof a4 === "object" && typeof b3 === "object") {
        if (a4 instanceof Uint8Array && b3 instanceof Uint8Array) {
          return ui8.equals(a4, b3);
        }
        if (cid_1.CID.asCID(a4) && cid_1.CID.asCID(b3)) {
          return cid_1.CID.asCID(a4)?.equals(cid_1.CID.asCID(b3));
        }
        if (Object.keys(a4).length !== Object.keys(b3).length)
          return false;
        for (const key of Object.keys(a4)) {
          if (!(0, exports.ipldEquals)(a4[key], b3[key]))
            return false;
        }
        return true;
      }
      return a4 === b3;
    };
    exports.ipldEquals = ipldEquals;
  }
});

// node_modules/@atproto/common-web/dist/retry.js
var require_retry = __commonJS({
  "node_modules/@atproto/common-web/dist/retry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.retry = retry;
    exports.createRetryable = createRetryable;
    exports.backoffMs = backoffMs;
    var util_1 = require_util13();
    async function retry(fn, opts = {}) {
      const { maxRetries = 3, retryable = () => true, getWaitMs = backoffMs } = opts;
      let retries = 0;
      let doneError;
      while (!doneError) {
        try {
          return await fn();
        } catch (err) {
          const waitMs = getWaitMs(retries);
          const willRetry = retries < maxRetries && waitMs !== null && retryable(err);
          if (willRetry) {
            retries += 1;
            if (waitMs !== 0) {
              await (0, util_1.wait)(waitMs);
            }
          } else {
            doneError = err;
          }
        }
      }
      throw doneError;
    }
    function createRetryable(retryable) {
      return async (fn, opts) => retry(fn, { ...opts, retryable });
    }
    function backoffMs(n10, multiplier = 100, max2 = 1e3) {
      const exponentialMs = Math.pow(2, n10) * multiplier;
      const ms = Math.min(exponentialMs, max2);
      return jitter(ms);
    }
    function jitter(value) {
      const delta = value * 0.15;
      return value + randomRange(-delta, delta);
    }
    function randomRange(from3, to) {
      const rand = Math.random() * (to - from3);
      return rand + from3;
    }
  }
});

// node_modules/@atproto/common-web/dist/types.js
var require_types5 = __commonJS({
  "node_modules/@atproto/common-web/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.def = exports.schema = void 0;
    var cid_1 = (init_cid(), __toCommonJS(cid_exports));
    var zod_1 = require_lib2();
    var cidSchema = zod_1.z.any().refine((obj) => cid_1.CID.asCID(obj) !== null, {
      message: "Not a CID"
    }).transform((obj) => cid_1.CID.asCID(obj));
    exports.schema = {
      cid: cidSchema,
      bytes: zod_1.z.instanceof(Uint8Array),
      string: zod_1.z.string(),
      array: zod_1.z.array(zod_1.z.unknown()),
      map: zod_1.z.record(zod_1.z.string(), zod_1.z.unknown()),
      unknown: zod_1.z.unknown()
    };
    exports.def = {
      cid: {
        name: "cid",
        schema: exports.schema.cid
      },
      bytes: {
        name: "bytes",
        schema: exports.schema.bytes
      },
      string: {
        name: "string",
        schema: exports.schema.string
      },
      map: {
        name: "map",
        schema: exports.schema.map
      },
      unknown: {
        name: "unknown",
        schema: exports.schema.unknown
      }
    };
  }
});

// node_modules/@atproto/common-web/dist/times.js
var require_times = __commonJS({
  "node_modules/@atproto/common-web/dist/times.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addHoursToDate = exports.lessThanAgoMs = exports.DAY = exports.HOUR = exports.MINUTE = exports.SECOND = void 0;
    exports.SECOND = 1e3;
    exports.MINUTE = exports.SECOND * 60;
    exports.HOUR = exports.MINUTE * 60;
    exports.DAY = exports.HOUR * 24;
    var lessThanAgoMs = (time, range) => {
      return Date.now() < time.getTime() + range;
    };
    exports.lessThanAgoMs = lessThanAgoMs;
    var addHoursToDate = (hours, startingDate) => {
      const currentDate = startingDate ? new Date(startingDate) : /* @__PURE__ */ new Date();
      currentDate.setHours(currentDate.getHours() + hours);
      return currentDate;
    };
    exports.addHoursToDate = addHoursToDate;
  }
});

// node_modules/graphemer/lib/boundaries.js
var require_boundaries = __commonJS({
  "node_modules/graphemer/lib/boundaries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;
    var CLUSTER_BREAK;
    (function(CLUSTER_BREAK2) {
      CLUSTER_BREAK2[CLUSTER_BREAK2["CR"] = 0] = "CR";
      CLUSTER_BREAK2[CLUSTER_BREAK2["LF"] = 1] = "LF";
      CLUSTER_BREAK2[CLUSTER_BREAK2["CONTROL"] = 2] = "CONTROL";
      CLUSTER_BREAK2[CLUSTER_BREAK2["EXTEND"] = 3] = "EXTEND";
      CLUSTER_BREAK2[CLUSTER_BREAK2["REGIONAL_INDICATOR"] = 4] = "REGIONAL_INDICATOR";
      CLUSTER_BREAK2[CLUSTER_BREAK2["SPACINGMARK"] = 5] = "SPACINGMARK";
      CLUSTER_BREAK2[CLUSTER_BREAK2["L"] = 6] = "L";
      CLUSTER_BREAK2[CLUSTER_BREAK2["V"] = 7] = "V";
      CLUSTER_BREAK2[CLUSTER_BREAK2["T"] = 8] = "T";
      CLUSTER_BREAK2[CLUSTER_BREAK2["LV"] = 9] = "LV";
      CLUSTER_BREAK2[CLUSTER_BREAK2["LVT"] = 10] = "LVT";
      CLUSTER_BREAK2[CLUSTER_BREAK2["OTHER"] = 11] = "OTHER";
      CLUSTER_BREAK2[CLUSTER_BREAK2["PREPEND"] = 12] = "PREPEND";
      CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE"] = 13] = "E_BASE";
      CLUSTER_BREAK2[CLUSTER_BREAK2["E_MODIFIER"] = 14] = "E_MODIFIER";
      CLUSTER_BREAK2[CLUSTER_BREAK2["ZWJ"] = 15] = "ZWJ";
      CLUSTER_BREAK2[CLUSTER_BREAK2["GLUE_AFTER_ZWJ"] = 16] = "GLUE_AFTER_ZWJ";
      CLUSTER_BREAK2[CLUSTER_BREAK2["E_BASE_GAZ"] = 17] = "E_BASE_GAZ";
    })(CLUSTER_BREAK = exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));
    exports.EXTENDED_PICTOGRAPHIC = 101;
  }
});

// node_modules/graphemer/lib/GraphemerHelper.js
var require_GraphemerHelper = __commonJS({
  "node_modules/graphemer/lib/GraphemerHelper.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var boundaries_1 = require_boundaries();
    var NotBreak = 0;
    var BreakStart = 1;
    var Break = 2;
    var BreakLastRegional = 3;
    var BreakPenultimateRegional = 4;
    var GraphemerHelper = class {
      /**
       * Check if the the character at the position {pos} of the string is surrogate
       * @param str {string}
       * @param pos {number}
       * @returns {boolean}
       */
      static isSurrogate(str, pos) {
        return 55296 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 56319 && 56320 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 57343;
      }
      /**
       * The String.prototype.codePointAt polyfill
       * Private function, gets a Unicode code point from a JavaScript UTF-16 string
       * handling surrogate pairs appropriately
       * @param str {string}
       * @param idx {number}
       * @returns {number}
       */
      static codePointAt(str, idx) {
        if (idx === void 0) {
          idx = 0;
        }
        const code2 = str.charCodeAt(idx);
        if (55296 <= code2 && code2 <= 56319 && idx < str.length - 1) {
          const hi = code2;
          const low = str.charCodeAt(idx + 1);
          if (56320 <= low && low <= 57343) {
            return (hi - 55296) * 1024 + (low - 56320) + 65536;
          }
          return hi;
        }
        if (56320 <= code2 && code2 <= 57343 && idx >= 1) {
          const hi = str.charCodeAt(idx - 1);
          const low = code2;
          if (55296 <= hi && hi <= 56319) {
            return (hi - 55296) * 1024 + (low - 56320) + 65536;
          }
          return low;
        }
        return code2;
      }
      //
      /**
       * Private function, returns whether a break is allowed between the two given grapheme breaking classes
       * Implemented the UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters
       * @param start {number}
       * @param mid {Array<number>}
       * @param end {number}
       * @param startEmoji {number}
       * @param midEmoji {Array<number>}
       * @param endEmoji {number}
       * @returns {number}
       */
      static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {
        const all = [start].concat(mid).concat([end]);
        const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);
        const previous = all[all.length - 2];
        const next = end;
        const nextEmoji = endEmoji;
        const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);
        if (rIIndex > 0 && all.slice(1, rIIndex).every(function(c6) {
          return c6 === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
        }) && [boundaries_1.CLUSTER_BREAK.PREPEND, boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {
          if (all.filter(function(c6) {
            return c6 === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
          }).length % 2 === 1) {
            return BreakLastRegional;
          } else {
            return BreakPenultimateRegional;
          }
        }
        if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) {
          return NotBreak;
        } else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL || previous === boundaries_1.CLUSTER_BREAK.CR || previous === boundaries_1.CLUSTER_BREAK.LF) {
          return BreakStart;
        } else if (next === boundaries_1.CLUSTER_BREAK.CONTROL || next === boundaries_1.CLUSTER_BREAK.CR || next === boundaries_1.CLUSTER_BREAK.LF) {
          return BreakStart;
        } else if (previous === boundaries_1.CLUSTER_BREAK.L && (next === boundaries_1.CLUSTER_BREAK.L || next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.LV || next === boundaries_1.CLUSTER_BREAK.LVT)) {
          return NotBreak;
        } else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) && (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) {
          return NotBreak;
        } else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) && next === boundaries_1.CLUSTER_BREAK.T) {
          return NotBreak;
        } else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) {
          return NotBreak;
        } else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {
          return NotBreak;
        } else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {
          return NotBreak;
        }
        const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);
        if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC && all.slice(previousNonExtendIndex + 1, -2).every(function(c6) {
          return c6 === boundaries_1.CLUSTER_BREAK.EXTEND;
        }) && previous === boundaries_1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) {
          return NotBreak;
        }
        if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {
          return Break;
        }
        if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR && next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) {
          return NotBreak;
        }
        return BreakStart;
      }
    };
    exports.default = GraphemerHelper;
  }
});

// node_modules/graphemer/lib/GraphemerIterator.js
var require_GraphemerIterator = __commonJS({
  "node_modules/graphemer/lib/GraphemerIterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var GraphemerIterator = class {
      constructor(str, nextBreak) {
        this._index = 0;
        this._str = str;
        this._nextBreak = nextBreak;
      }
      [Symbol.iterator]() {
        return this;
      }
      next() {
        let brk;
        if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {
          const value = this._str.slice(this._index, brk);
          this._index = brk;
          return { value, done: false };
        }
        if (this._index < this._str.length) {
          const value = this._str.slice(this._index);
          this._index = this._str.length;
          return { value, done: false };
        }
        return { value: void 0, done: true };
      }
    };
    exports.default = GraphemerIterator;
  }
});

// node_modules/graphemer/lib/Graphemer.js
var require_Graphemer = __commonJS({
  "node_modules/graphemer/lib/Graphemer.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var boundaries_1 = require_boundaries();
    var GraphemerHelper_1 = __importDefault(require_GraphemerHelper());
    var GraphemerIterator_1 = __importDefault(require_GraphemerIterator());
    var Graphemer = class _Graphemer {
      /**
       * Returns the next grapheme break in the string after the given index
       * @param string {string}
       * @param index {number}
       * @returns {number}
       */
      static nextBreak(string2, index) {
        if (index === void 0) {
          index = 0;
        }
        if (index < 0) {
          return 0;
        }
        if (index >= string2.length - 1) {
          return string2.length;
        }
        const prevCP = GraphemerHelper_1.default.codePointAt(string2, index);
        const prev = _Graphemer.getGraphemeBreakProperty(prevCP);
        const prevEmoji = _Graphemer.getEmojiProperty(prevCP);
        const mid = [];
        const midEmoji = [];
        for (let i9 = index + 1; i9 < string2.length; i9++) {
          if (GraphemerHelper_1.default.isSurrogate(string2, i9 - 1)) {
            continue;
          }
          const nextCP = GraphemerHelper_1.default.codePointAt(string2, i9);
          const next = _Graphemer.getGraphemeBreakProperty(nextCP);
          const nextEmoji = _Graphemer.getEmojiProperty(nextCP);
          if (GraphemerHelper_1.default.shouldBreak(prev, mid, next, prevEmoji, midEmoji, nextEmoji)) {
            return i9;
          }
          mid.push(next);
          midEmoji.push(nextEmoji);
        }
        return string2.length;
      }
      /**
       * Breaks the given string into an array of grapheme clusters
       * @param str {string}
       * @returns {string[]}
       */
      splitGraphemes(str) {
        const res = [];
        let index = 0;
        let brk;
        while ((brk = _Graphemer.nextBreak(str, index)) < str.length) {
          res.push(str.slice(index, brk));
          index = brk;
        }
        if (index < str.length) {
          res.push(str.slice(index));
        }
        return res;
      }
      /**
       * Returns an iterator of grapheme clusters in the given string
       * @param str {string}
       * @returns {GraphemerIterator}
       */
      iterateGraphemes(str) {
        return new GraphemerIterator_1.default(str, _Graphemer.nextBreak);
      }
      /**
       * Returns the number of grapheme clusters in the given string
       * @param str {string}
       * @returns {number}
       */
      countGraphemes(str) {
        let count = 0;
        let index = 0;
        let brk;
        while ((brk = _Graphemer.nextBreak(str, index)) < str.length) {
          index = brk;
          count++;
        }
        if (index < str.length) {
          count++;
        }
        return count;
      }
      /**
       * Given a Unicode code point, determines this symbol's grapheme break property
       * @param code {number} Unicode code point
       * @returns {number}
       */
      static getGraphemeBreakProperty(code2) {
        if (code2 < 48905) {
          if (code2 < 44116) {
            if (code2 < 4141) {
              if (code2 < 2818) {
                if (code2 < 2363) {
                  if (code2 < 1759) {
                    if (code2 < 1471) {
                      if (code2 < 127) {
                        if (code2 < 11) {
                          if (code2 < 10) {
                            if (0 <= code2 && code2 <= 9) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                          } else {
                            if (10 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LF;
                            }
                          }
                        } else {
                          if (code2 < 13) {
                            if (11 <= code2 && code2 <= 12) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                          } else {
                            if (code2 < 14) {
                              if (13 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CR;
                              }
                            } else {
                              if (14 <= code2 && code2 <= 31) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 768) {
                          if (code2 < 173) {
                            if (127 <= code2 && code2 <= 159) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                          } else {
                            if (173 === code2) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                          }
                        } else {
                          if (code2 < 1155) {
                            if (768 <= code2 && code2 <= 879) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 1425) {
                              if (1155 <= code2 && code2 <= 1161) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1425 <= code2 && code2 <= 1469) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 1552) {
                        if (code2 < 1476) {
                          if (code2 < 1473) {
                            if (1471 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (1473 <= code2 && code2 <= 1474) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 1479) {
                            if (1476 <= code2 && code2 <= 1477) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 1536) {
                              if (1479 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1536 <= code2 && code2 <= 1541) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 1648) {
                          if (code2 < 1564) {
                            if (1552 <= code2 && code2 <= 1562) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 1611) {
                              if (1564 === code2) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (1611 <= code2 && code2 <= 1631) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 1750) {
                            if (1648 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 1757) {
                              if (1750 <= code2 && code2 <= 1756) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (1757 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 2075) {
                      if (code2 < 1840) {
                        if (code2 < 1770) {
                          if (code2 < 1767) {
                            if (1759 <= code2 && code2 <= 1764) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (1767 <= code2 && code2 <= 1768) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 1807) {
                            if (1770 <= code2 && code2 <= 1773) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (1807 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                            if (1809 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      } else {
                        if (code2 < 2027) {
                          if (code2 < 1958) {
                            if (1840 <= code2 && code2 <= 1866) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (1958 <= code2 && code2 <= 1968) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 2045) {
                            if (2027 <= code2 && code2 <= 2035) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2070) {
                              if (2045 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2070 <= code2 && code2 <= 2073) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 2200) {
                        if (code2 < 2089) {
                          if (code2 < 2085) {
                            if (2075 <= code2 && code2 <= 2083) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (2085 <= code2 && code2 <= 2087) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 2137) {
                            if (2089 <= code2 && code2 <= 2093) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2192) {
                              if (2137 <= code2 && code2 <= 2139) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2192 <= code2 && code2 <= 2193) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2275) {
                          if (code2 < 2250) {
                            if (2200 <= code2 && code2 <= 2207) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2274) {
                              if (2250 <= code2 && code2 <= 2273) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2274 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 2307) {
                            if (2275 <= code2 && code2 <= 2306) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (2307 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (2362 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 2561) {
                    if (code2 < 2434) {
                      if (code2 < 2381) {
                        if (code2 < 2366) {
                          if (2363 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                          if (2364 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 2369) {
                            if (2366 <= code2 && code2 <= 2368) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 2377) {
                              if (2369 <= code2 && code2 <= 2376) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2377 <= code2 && code2 <= 2380) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2385) {
                          if (code2 < 2382) {
                            if (2381 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (2382 <= code2 && code2 <= 2383) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 2402) {
                            if (2385 <= code2 && code2 <= 2391) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2433) {
                              if (2402 <= code2 && code2 <= 2403) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2433 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 2503) {
                        if (code2 < 2494) {
                          if (code2 < 2492) {
                            if (2434 <= code2 && code2 <= 2435) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (2492 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 2495) {
                            if (2494 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2497) {
                              if (2495 <= code2 && code2 <= 2496) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2497 <= code2 && code2 <= 2500) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2519) {
                          if (code2 < 2507) {
                            if (2503 <= code2 && code2 <= 2504) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 2509) {
                              if (2507 <= code2 && code2 <= 2508) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2509 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 2530) {
                            if (2519 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2558) {
                              if (2530 <= code2 && code2 <= 2531) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2558 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 2691) {
                      if (code2 < 2631) {
                        if (code2 < 2620) {
                          if (code2 < 2563) {
                            if (2561 <= code2 && code2 <= 2562) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (2563 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 2622) {
                            if (2620 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2625) {
                              if (2622 <= code2 && code2 <= 2624) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2625 <= code2 && code2 <= 2626) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2672) {
                          if (code2 < 2635) {
                            if (2631 <= code2 && code2 <= 2632) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2641) {
                              if (2635 <= code2 && code2 <= 2637) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2641 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 2677) {
                            if (2672 <= code2 && code2 <= 2673) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2689) {
                              if (2677 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2689 <= code2 && code2 <= 2690) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 2761) {
                        if (code2 < 2750) {
                          if (2691 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                          if (2748 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 2753) {
                            if (2750 <= code2 && code2 <= 2752) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 2759) {
                              if (2753 <= code2 && code2 <= 2757) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2759 <= code2 && code2 <= 2760) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2786) {
                          if (code2 < 2763) {
                            if (2761 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 2765) {
                              if (2763 <= code2 && code2 <= 2764) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2765 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 2810) {
                            if (2786 <= code2 && code2 <= 2787) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2817) {
                              if (2810 <= code2 && code2 <= 2815) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2817 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 3315) {
                  if (code2 < 3076) {
                    if (code2 < 2946) {
                      if (code2 < 2887) {
                        if (code2 < 2878) {
                          if (code2 < 2876) {
                            if (2818 <= code2 && code2 <= 2819) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (2876 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 2880) {
                            if (2878 <= code2 && code2 <= 2879) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2881) {
                              if (2880 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (2881 <= code2 && code2 <= 2884) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 2893) {
                          if (code2 < 2891) {
                            if (2887 <= code2 && code2 <= 2888) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (2891 <= code2 && code2 <= 2892) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 2901) {
                            if (2893 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 2914) {
                              if (2901 <= code2 && code2 <= 2903) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (2914 <= code2 && code2 <= 2915) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3014) {
                        if (code2 < 3007) {
                          if (2946 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                          if (3006 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 3008) {
                            if (3007 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 3009) {
                              if (3008 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3009 <= code2 && code2 <= 3010) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3031) {
                          if (code2 < 3018) {
                            if (3014 <= code2 && code2 <= 3016) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 3021) {
                              if (3018 <= code2 && code2 <= 3020) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3021 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 3072) {
                            if (3031 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3073) {
                              if (3072 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3073 <= code2 && code2 <= 3075) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 3262) {
                      if (code2 < 3146) {
                        if (code2 < 3134) {
                          if (3076 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                          if (3132 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 3137) {
                            if (3134 <= code2 && code2 <= 3136) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3142) {
                              if (3137 <= code2 && code2 <= 3140) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3142 <= code2 && code2 <= 3144) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3201) {
                          if (code2 < 3157) {
                            if (3146 <= code2 && code2 <= 3149) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3170) {
                              if (3157 <= code2 && code2 <= 3158) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3170 <= code2 && code2 <= 3171) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 3202) {
                            if (3201 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3260) {
                              if (3202 <= code2 && code2 <= 3203) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3260 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3270) {
                        if (code2 < 3264) {
                          if (3262 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                          if (3263 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 3266) {
                            if (3264 <= code2 && code2 <= 3265) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 3267) {
                              if (3266 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3267 <= code2 && code2 <= 3268) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3276) {
                          if (code2 < 3271) {
                            if (3270 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3274) {
                              if (3271 <= code2 && code2 <= 3272) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3274 <= code2 && code2 <= 3275) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 3285) {
                            if (3276 <= code2 && code2 <= 3277) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3298) {
                              if (3285 <= code2 && code2 <= 3286) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3298 <= code2 && code2 <= 3299) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 3551) {
                    if (code2 < 3406) {
                      if (code2 < 3391) {
                        if (code2 < 3330) {
                          if (code2 < 3328) {
                            if (3315 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (3328 <= code2 && code2 <= 3329) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 3387) {
                            if (3330 <= code2 && code2 <= 3331) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 3390) {
                              if (3387 <= code2 && code2 <= 3388) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3390 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3398) {
                          if (code2 < 3393) {
                            if (3391 <= code2 && code2 <= 3392) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (3393 <= code2 && code2 <= 3396) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 3402) {
                            if (3398 <= code2 && code2 <= 3400) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 3405) {
                              if (3402 <= code2 && code2 <= 3404) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3405 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3530) {
                        if (code2 < 3426) {
                          if (3406 === code2) {
                            return boundaries_1.CLUSTER_BREAK.PREPEND;
                          }
                          if (3415 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 3457) {
                            if (3426 <= code2 && code2 <= 3427) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3458) {
                              if (3457 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3458 <= code2 && code2 <= 3459) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3538) {
                          if (code2 < 3535) {
                            if (3530 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3536) {
                              if (3535 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3536 <= code2 && code2 <= 3537) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 3542) {
                            if (3538 <= code2 && code2 <= 3540) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3544) {
                              if (3542 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3544 <= code2 && code2 <= 3550) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 3893) {
                      if (code2 < 3655) {
                        if (code2 < 3633) {
                          if (code2 < 3570) {
                            if (3551 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (3570 <= code2 && code2 <= 3571) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 3635) {
                            if (3633 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3636) {
                              if (3635 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3636 <= code2 && code2 <= 3642) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3764) {
                          if (code2 < 3761) {
                            if (3655 <= code2 && code2 <= 3662) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (3761 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (3763 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 3784) {
                            if (3764 <= code2 && code2 <= 3772) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3864) {
                              if (3784 <= code2 && code2 <= 3790) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3864 <= code2 && code2 <= 3865) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 3967) {
                        if (code2 < 3897) {
                          if (3893 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                          if (3895 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 3902) {
                            if (3897 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 3953) {
                              if (3902 <= code2 && code2 <= 3903) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (3953 <= code2 && code2 <= 3966) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 3981) {
                          if (code2 < 3968) {
                            if (3967 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 3974) {
                              if (3968 <= code2 && code2 <= 3972) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (3974 <= code2 && code2 <= 3975) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 3993) {
                            if (3981 <= code2 && code2 <= 3991) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 4038) {
                              if (3993 <= code2 && code2 <= 4028) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4038 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 7204) {
                if (code2 < 6448) {
                  if (code2 < 5938) {
                    if (code2 < 4226) {
                      if (code2 < 4157) {
                        if (code2 < 4146) {
                          if (code2 < 4145) {
                            if (4141 <= code2 && code2 <= 4144) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (4145 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 4153) {
                            if (4146 <= code2 && code2 <= 4151) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 4155) {
                              if (4153 <= code2 && code2 <= 4154) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4155 <= code2 && code2 <= 4156) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 4184) {
                          if (code2 < 4182) {
                            if (4157 <= code2 && code2 <= 4158) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (4182 <= code2 && code2 <= 4183) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 4190) {
                            if (4184 <= code2 && code2 <= 4185) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 4209) {
                              if (4190 <= code2 && code2 <= 4192) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (4209 <= code2 && code2 <= 4212) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 4352) {
                        if (code2 < 4229) {
                          if (4226 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                          if (4228 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                        } else {
                          if (code2 < 4237) {
                            if (4229 <= code2 && code2 <= 4230) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (4237 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (4253 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      } else {
                        if (code2 < 4957) {
                          if (code2 < 4448) {
                            if (4352 <= code2 && code2 <= 4447) {
                              return boundaries_1.CLUSTER_BREAK.L;
                            }
                          } else {
                            if (code2 < 4520) {
                              if (4448 <= code2 && code2 <= 4519) {
                                return boundaries_1.CLUSTER_BREAK.V;
                              }
                            } else {
                              if (4520 <= code2 && code2 <= 4607) {
                                return boundaries_1.CLUSTER_BREAK.T;
                              }
                            }
                          }
                        } else {
                          if (code2 < 5906) {
                            if (4957 <= code2 && code2 <= 4959) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 5909) {
                              if (5906 <= code2 && code2 <= 5908) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (5909 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 6089) {
                      if (code2 < 6070) {
                        if (code2 < 5970) {
                          if (code2 < 5940) {
                            if (5938 <= code2 && code2 <= 5939) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (5940 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 6002) {
                            if (5970 <= code2 && code2 <= 5971) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 6068) {
                              if (6002 <= code2 && code2 <= 6003) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6068 <= code2 && code2 <= 6069) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6078) {
                          if (code2 < 6071) {
                            if (6070 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (6071 <= code2 && code2 <= 6077) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 6086) {
                            if (6078 <= code2 && code2 <= 6085) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 6087) {
                              if (6086 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6087 <= code2 && code2 <= 6088) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 6277) {
                        if (code2 < 6155) {
                          if (code2 < 6109) {
                            if (6089 <= code2 && code2 <= 6099) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (6109 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 6158) {
                            if (6155 <= code2 && code2 <= 6157) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (6158 === code2) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                            if (6159 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      } else {
                        if (code2 < 6435) {
                          if (code2 < 6313) {
                            if (6277 <= code2 && code2 <= 6278) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 6432) {
                              if (6313 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6432 <= code2 && code2 <= 6434) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 6439) {
                            if (6435 <= code2 && code2 <= 6438) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 6441) {
                              if (6439 <= code2 && code2 <= 6440) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6441 <= code2 && code2 <= 6443) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 6971) {
                    if (code2 < 6744) {
                      if (code2 < 6681) {
                        if (code2 < 6451) {
                          if (code2 < 6450) {
                            if (6448 <= code2 && code2 <= 6449) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (6450 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 6457) {
                            if (6451 <= code2 && code2 <= 6456) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 6679) {
                              if (6457 <= code2 && code2 <= 6459) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6679 <= code2 && code2 <= 6680) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6741) {
                          if (code2 < 6683) {
                            if (6681 <= code2 && code2 <= 6682) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (6683 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 6742) {
                            if (6741 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (6742 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (6743 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 6771) {
                        if (code2 < 6754) {
                          if (code2 < 6752) {
                            if (6744 <= code2 && code2 <= 6750) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (6752 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 6757) {
                            if (6754 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 6765) {
                              if (6757 <= code2 && code2 <= 6764) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6765 <= code2 && code2 <= 6770) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 6912) {
                          if (code2 < 6783) {
                            if (6771 <= code2 && code2 <= 6780) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 6832) {
                              if (6783 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6832 <= code2 && code2 <= 6862) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 6916) {
                            if (6912 <= code2 && code2 <= 6915) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 6964) {
                              if (6916 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (6964 <= code2 && code2 <= 6970) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 7080) {
                      if (code2 < 7019) {
                        if (code2 < 6973) {
                          if (6971 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                          if (6972 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 6978) {
                            if (6973 <= code2 && code2 <= 6977) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 6979) {
                              if (6978 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (6979 <= code2 && code2 <= 6980) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 7073) {
                          if (code2 < 7040) {
                            if (7019 <= code2 && code2 <= 7027) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 7042) {
                              if (7040 <= code2 && code2 <= 7041) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7042 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 7074) {
                            if (7073 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 7078) {
                              if (7074 <= code2 && code2 <= 7077) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7078 <= code2 && code2 <= 7079) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 7144) {
                        if (code2 < 7083) {
                          if (code2 < 7082) {
                            if (7080 <= code2 && code2 <= 7081) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (7082 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 7142) {
                            if (7083 <= code2 && code2 <= 7085) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (7142 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (7143 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        }
                      } else {
                        if (code2 < 7150) {
                          if (code2 < 7146) {
                            if (7144 <= code2 && code2 <= 7145) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 7149) {
                              if (7146 <= code2 && code2 <= 7148) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (7149 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 7151) {
                            if (7150 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 7154) {
                              if (7151 <= code2 && code2 <= 7153) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7154 <= code2 && code2 <= 7155) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 43346) {
                  if (code2 < 11647) {
                    if (code2 < 7415) {
                      if (code2 < 7380) {
                        if (code2 < 7220) {
                          if (code2 < 7212) {
                            if (7204 <= code2 && code2 <= 7211) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (7212 <= code2 && code2 <= 7219) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 7222) {
                            if (7220 <= code2 && code2 <= 7221) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 7376) {
                              if (7222 <= code2 && code2 <= 7223) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (7376 <= code2 && code2 <= 7378) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 7394) {
                          if (code2 < 7393) {
                            if (7380 <= code2 && code2 <= 7392) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (7393 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 7405) {
                            if (7394 <= code2 && code2 <= 7400) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (7405 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (7412 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 8205) {
                        if (code2 < 7616) {
                          if (code2 < 7416) {
                            if (7415 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (7416 <= code2 && code2 <= 7417) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 8203) {
                            if (7616 <= code2 && code2 <= 7679) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (8203 === code2) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                            if (8204 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      } else {
                        if (code2 < 8288) {
                          if (code2 < 8206) {
                            if (8205 === code2) {
                              return boundaries_1.CLUSTER_BREAK.ZWJ;
                            }
                          } else {
                            if (code2 < 8232) {
                              if (8206 <= code2 && code2 <= 8207) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (8232 <= code2 && code2 <= 8238) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            }
                          }
                        } else {
                          if (code2 < 8400) {
                            if (8288 <= code2 && code2 <= 8303) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                          } else {
                            if (code2 < 11503) {
                              if (8400 <= code2 && code2 <= 8432) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (11503 <= code2 && code2 <= 11505) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 43043) {
                      if (code2 < 42612) {
                        if (code2 < 12330) {
                          if (code2 < 11744) {
                            if (11647 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (11744 <= code2 && code2 <= 11775) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 12441) {
                            if (12330 <= code2 && code2 <= 12335) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 42607) {
                              if (12441 <= code2 && code2 <= 12442) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (42607 <= code2 && code2 <= 42610) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43010) {
                          if (code2 < 42654) {
                            if (42612 <= code2 && code2 <= 42621) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 42736) {
                              if (42654 <= code2 && code2 <= 42655) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (42736 <= code2 && code2 <= 42737) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 43014) {
                            if (43010 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (43014 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (43019 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 43188) {
                        if (code2 < 43047) {
                          if (code2 < 43045) {
                            if (43043 <= code2 && code2 <= 43044) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (43045 <= code2 && code2 <= 43046) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 43052) {
                            if (43047 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 43136) {
                              if (43052 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43136 <= code2 && code2 <= 43137) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43263) {
                          if (code2 < 43204) {
                            if (43188 <= code2 && code2 <= 43203) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 43232) {
                              if (43204 <= code2 && code2 <= 43205) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43232 <= code2 && code2 <= 43249) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 43302) {
                            if (43263 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 43335) {
                              if (43302 <= code2 && code2 <= 43309) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43335 <= code2 && code2 <= 43345) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 43698) {
                    if (code2 < 43493) {
                      if (code2 < 43444) {
                        if (code2 < 43392) {
                          if (code2 < 43360) {
                            if (43346 <= code2 && code2 <= 43347) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (43360 <= code2 && code2 <= 43388) {
                              return boundaries_1.CLUSTER_BREAK.L;
                            }
                          }
                        } else {
                          if (code2 < 43395) {
                            if (43392 <= code2 && code2 <= 43394) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (43395 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (43443 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      } else {
                        if (code2 < 43450) {
                          if (code2 < 43446) {
                            if (43444 <= code2 && code2 <= 43445) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (43446 <= code2 && code2 <= 43449) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 43452) {
                            if (43450 <= code2 && code2 <= 43451) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 43454) {
                              if (43452 <= code2 && code2 <= 43453) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43454 <= code2 && code2 <= 43456) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 43573) {
                        if (code2 < 43567) {
                          if (code2 < 43561) {
                            if (43493 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (43561 <= code2 && code2 <= 43566) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 43569) {
                            if (43567 <= code2 && code2 <= 43568) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 43571) {
                              if (43569 <= code2 && code2 <= 43570) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (43571 <= code2 && code2 <= 43572) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 43597) {
                          if (code2 < 43587) {
                            if (43573 <= code2 && code2 <= 43574) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (43587 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (43596 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 43644) {
                            if (43597 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (43644 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (43696 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 44006) {
                      if (code2 < 43756) {
                        if (code2 < 43710) {
                          if (code2 < 43703) {
                            if (43698 <= code2 && code2 <= 43700) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (43703 <= code2 && code2 <= 43704) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 43713) {
                            if (43710 <= code2 && code2 <= 43711) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (43713 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (43755 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        }
                      } else {
                        if (code2 < 43766) {
                          if (code2 < 43758) {
                            if (43756 <= code2 && code2 <= 43757) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 43765) {
                              if (43758 <= code2 && code2 <= 43759) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (43765 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 44003) {
                            if (43766 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 44005) {
                              if (44003 <= code2 && code2 <= 44004) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (44005 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44032) {
                        if (code2 < 44009) {
                          if (code2 < 44008) {
                            if (44006 <= code2 && code2 <= 44007) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (44008 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 44012) {
                            if (44009 <= code2 && code2 <= 44010) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (44012 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (44013 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      } else {
                        if (code2 < 44061) {
                          if (code2 < 44033) {
                            if (44032 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 44060) {
                              if (44033 <= code2 && code2 <= 44059) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44060 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 44088) {
                            if (44061 <= code2 && code2 <= 44087) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 44089) {
                              if (44088 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44089 <= code2 && code2 <= 44115) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (code2 < 46497) {
              if (code2 < 45293) {
                if (code2 < 44704) {
                  if (code2 < 44397) {
                    if (code2 < 44256) {
                      if (code2 < 44173) {
                        if (code2 < 44144) {
                          if (code2 < 44117) {
                            if (44116 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (44117 <= code2 && code2 <= 44143) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 44145) {
                            if (44144 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 44172) {
                              if (44145 <= code2 && code2 <= 44171) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44172 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44201) {
                          if (code2 < 44200) {
                            if (44173 <= code2 && code2 <= 44199) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (44200 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 44228) {
                            if (44201 <= code2 && code2 <= 44227) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 44229) {
                              if (44228 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44229 <= code2 && code2 <= 44255) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44313) {
                        if (code2 < 44284) {
                          if (code2 < 44257) {
                            if (44256 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (44257 <= code2 && code2 <= 44283) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 44285) {
                            if (44284 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 44312) {
                              if (44285 <= code2 && code2 <= 44311) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44312 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44368) {
                          if (code2 < 44340) {
                            if (44313 <= code2 && code2 <= 44339) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 44341) {
                              if (44340 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44341 <= code2 && code2 <= 44367) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 44369) {
                            if (44368 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 44396) {
                              if (44369 <= code2 && code2 <= 44395) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44396 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 44537) {
                      if (code2 < 44480) {
                        if (code2 < 44425) {
                          if (code2 < 44424) {
                            if (44397 <= code2 && code2 <= 44423) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (44424 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 44452) {
                            if (44425 <= code2 && code2 <= 44451) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 44453) {
                              if (44452 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44453 <= code2 && code2 <= 44479) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44508) {
                          if (code2 < 44481) {
                            if (44480 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (44481 <= code2 && code2 <= 44507) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 44509) {
                            if (44508 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 44536) {
                              if (44509 <= code2 && code2 <= 44535) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44536 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44620) {
                        if (code2 < 44565) {
                          if (code2 < 44564) {
                            if (44537 <= code2 && code2 <= 44563) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (44564 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 44592) {
                            if (44565 <= code2 && code2 <= 44591) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 44593) {
                              if (44592 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44593 <= code2 && code2 <= 44619) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44649) {
                          if (code2 < 44621) {
                            if (44620 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 44648) {
                              if (44621 <= code2 && code2 <= 44647) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44648 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 44676) {
                            if (44649 <= code2 && code2 <= 44675) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 44677) {
                              if (44676 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44677 <= code2 && code2 <= 44703) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 44985) {
                    if (code2 < 44844) {
                      if (code2 < 44761) {
                        if (code2 < 44732) {
                          if (code2 < 44705) {
                            if (44704 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (44705 <= code2 && code2 <= 44731) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 44733) {
                            if (44732 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 44760) {
                              if (44733 <= code2 && code2 <= 44759) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44760 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44789) {
                          if (code2 < 44788) {
                            if (44761 <= code2 && code2 <= 44787) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (44788 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 44816) {
                            if (44789 <= code2 && code2 <= 44815) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 44817) {
                              if (44816 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44817 <= code2 && code2 <= 44843) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 44901) {
                        if (code2 < 44872) {
                          if (code2 < 44845) {
                            if (44844 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (44845 <= code2 && code2 <= 44871) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 44873) {
                            if (44872 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 44900) {
                              if (44873 <= code2 && code2 <= 44899) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44900 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 44956) {
                          if (code2 < 44928) {
                            if (44901 <= code2 && code2 <= 44927) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 44929) {
                              if (44928 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (44929 <= code2 && code2 <= 44955) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 44957) {
                            if (44956 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 44984) {
                              if (44957 <= code2 && code2 <= 44983) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (44984 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 45152) {
                      if (code2 < 45068) {
                        if (code2 < 45013) {
                          if (code2 < 45012) {
                            if (44985 <= code2 && code2 <= 45011) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (45012 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 45040) {
                            if (45013 <= code2 && code2 <= 45039) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 45041) {
                              if (45040 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45041 <= code2 && code2 <= 45067) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45097) {
                          if (code2 < 45069) {
                            if (45068 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 45096) {
                              if (45069 <= code2 && code2 <= 45095) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45096 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 45124) {
                            if (45097 <= code2 && code2 <= 45123) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 45125) {
                              if (45124 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45125 <= code2 && code2 <= 45151) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 45209) {
                        if (code2 < 45180) {
                          if (code2 < 45153) {
                            if (45152 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (45153 <= code2 && code2 <= 45179) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 45181) {
                            if (45180 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 45208) {
                              if (45181 <= code2 && code2 <= 45207) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45208 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45264) {
                          if (code2 < 45236) {
                            if (45209 <= code2 && code2 <= 45235) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 45237) {
                              if (45236 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45237 <= code2 && code2 <= 45263) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 45265) {
                            if (45264 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 45292) {
                              if (45265 <= code2 && code2 <= 45291) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45292 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 45908) {
                  if (code2 < 45600) {
                    if (code2 < 45433) {
                      if (code2 < 45376) {
                        if (code2 < 45321) {
                          if (code2 < 45320) {
                            if (45293 <= code2 && code2 <= 45319) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (45320 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 45348) {
                            if (45321 <= code2 && code2 <= 45347) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 45349) {
                              if (45348 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45349 <= code2 && code2 <= 45375) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45404) {
                          if (code2 < 45377) {
                            if (45376 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (45377 <= code2 && code2 <= 45403) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 45405) {
                            if (45404 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 45432) {
                              if (45405 <= code2 && code2 <= 45431) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45432 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 45516) {
                        if (code2 < 45461) {
                          if (code2 < 45460) {
                            if (45433 <= code2 && code2 <= 45459) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (45460 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 45488) {
                            if (45461 <= code2 && code2 <= 45487) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 45489) {
                              if (45488 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45489 <= code2 && code2 <= 45515) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45545) {
                          if (code2 < 45517) {
                            if (45516 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 45544) {
                              if (45517 <= code2 && code2 <= 45543) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45544 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 45572) {
                            if (45545 <= code2 && code2 <= 45571) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 45573) {
                              if (45572 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45573 <= code2 && code2 <= 45599) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 45741) {
                      if (code2 < 45657) {
                        if (code2 < 45628) {
                          if (code2 < 45601) {
                            if (45600 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (45601 <= code2 && code2 <= 45627) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 45629) {
                            if (45628 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 45656) {
                              if (45629 <= code2 && code2 <= 45655) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45656 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45712) {
                          if (code2 < 45684) {
                            if (45657 <= code2 && code2 <= 45683) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 45685) {
                              if (45684 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45685 <= code2 && code2 <= 45711) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 45713) {
                            if (45712 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 45740) {
                              if (45713 <= code2 && code2 <= 45739) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45740 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 45824) {
                        if (code2 < 45769) {
                          if (code2 < 45768) {
                            if (45741 <= code2 && code2 <= 45767) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (45768 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 45796) {
                            if (45769 <= code2 && code2 <= 45795) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 45797) {
                              if (45796 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45797 <= code2 && code2 <= 45823) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45853) {
                          if (code2 < 45825) {
                            if (45824 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 45852) {
                              if (45825 <= code2 && code2 <= 45851) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45852 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 45880) {
                            if (45853 <= code2 && code2 <= 45879) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 45881) {
                              if (45880 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (45881 <= code2 && code2 <= 45907) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 46189) {
                    if (code2 < 46048) {
                      if (code2 < 45965) {
                        if (code2 < 45936) {
                          if (code2 < 45909) {
                            if (45908 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (45909 <= code2 && code2 <= 45935) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 45937) {
                            if (45936 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 45964) {
                              if (45937 <= code2 && code2 <= 45963) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (45964 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 45993) {
                          if (code2 < 45992) {
                            if (45965 <= code2 && code2 <= 45991) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (45992 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 46020) {
                            if (45993 <= code2 && code2 <= 46019) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 46021) {
                              if (46020 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46021 <= code2 && code2 <= 46047) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 46105) {
                        if (code2 < 46076) {
                          if (code2 < 46049) {
                            if (46048 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (46049 <= code2 && code2 <= 46075) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 46077) {
                            if (46076 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 46104) {
                              if (46077 <= code2 && code2 <= 46103) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46104 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46160) {
                          if (code2 < 46132) {
                            if (46105 <= code2 && code2 <= 46131) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 46133) {
                              if (46132 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46133 <= code2 && code2 <= 46159) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 46161) {
                            if (46160 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 46188) {
                              if (46161 <= code2 && code2 <= 46187) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46188 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 46356) {
                      if (code2 < 46272) {
                        if (code2 < 46217) {
                          if (code2 < 46216) {
                            if (46189 <= code2 && code2 <= 46215) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (46216 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 46244) {
                            if (46217 <= code2 && code2 <= 46243) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 46245) {
                              if (46244 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46245 <= code2 && code2 <= 46271) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46301) {
                          if (code2 < 46273) {
                            if (46272 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 46300) {
                              if (46273 <= code2 && code2 <= 46299) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46300 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 46328) {
                            if (46301 <= code2 && code2 <= 46327) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 46329) {
                              if (46328 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46329 <= code2 && code2 <= 46355) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 46413) {
                        if (code2 < 46384) {
                          if (code2 < 46357) {
                            if (46356 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (46357 <= code2 && code2 <= 46383) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 46385) {
                            if (46384 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 46412) {
                              if (46385 <= code2 && code2 <= 46411) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46412 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46468) {
                          if (code2 < 46440) {
                            if (46413 <= code2 && code2 <= 46439) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 46441) {
                              if (46440 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46441 <= code2 && code2 <= 46467) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 46469) {
                            if (46468 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 46496) {
                              if (46469 <= code2 && code2 <= 46495) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46496 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 47701) {
                if (code2 < 47112) {
                  if (code2 < 46804) {
                    if (code2 < 46637) {
                      if (code2 < 46580) {
                        if (code2 < 46525) {
                          if (code2 < 46524) {
                            if (46497 <= code2 && code2 <= 46523) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (46524 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 46552) {
                            if (46525 <= code2 && code2 <= 46551) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 46553) {
                              if (46552 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46553 <= code2 && code2 <= 46579) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46608) {
                          if (code2 < 46581) {
                            if (46580 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (46581 <= code2 && code2 <= 46607) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 46609) {
                            if (46608 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 46636) {
                              if (46609 <= code2 && code2 <= 46635) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46636 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 46720) {
                        if (code2 < 46665) {
                          if (code2 < 46664) {
                            if (46637 <= code2 && code2 <= 46663) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (46664 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 46692) {
                            if (46665 <= code2 && code2 <= 46691) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 46693) {
                              if (46692 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46693 <= code2 && code2 <= 46719) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46749) {
                          if (code2 < 46721) {
                            if (46720 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 46748) {
                              if (46721 <= code2 && code2 <= 46747) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46748 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 46776) {
                            if (46749 <= code2 && code2 <= 46775) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 46777) {
                              if (46776 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46777 <= code2 && code2 <= 46803) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 46945) {
                      if (code2 < 46861) {
                        if (code2 < 46832) {
                          if (code2 < 46805) {
                            if (46804 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (46805 <= code2 && code2 <= 46831) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 46833) {
                            if (46832 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 46860) {
                              if (46833 <= code2 && code2 <= 46859) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46860 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 46916) {
                          if (code2 < 46888) {
                            if (46861 <= code2 && code2 <= 46887) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 46889) {
                              if (46888 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (46889 <= code2 && code2 <= 46915) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 46917) {
                            if (46916 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 46944) {
                              if (46917 <= code2 && code2 <= 46943) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (46944 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 47028) {
                        if (code2 < 46973) {
                          if (code2 < 46972) {
                            if (46945 <= code2 && code2 <= 46971) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (46972 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 47e3) {
                            if (46973 <= code2 && code2 <= 46999) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 47001) {
                              if (47e3 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47001 <= code2 && code2 <= 47027) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47057) {
                          if (code2 < 47029) {
                            if (47028 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 47056) {
                              if (47029 <= code2 && code2 <= 47055) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47056 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 47084) {
                            if (47057 <= code2 && code2 <= 47083) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 47085) {
                              if (47084 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47085 <= code2 && code2 <= 47111) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 47393) {
                    if (code2 < 47252) {
                      if (code2 < 47169) {
                        if (code2 < 47140) {
                          if (code2 < 47113) {
                            if (47112 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (47113 <= code2 && code2 <= 47139) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 47141) {
                            if (47140 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 47168) {
                              if (47141 <= code2 && code2 <= 47167) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47168 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47197) {
                          if (code2 < 47196) {
                            if (47169 <= code2 && code2 <= 47195) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (47196 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 47224) {
                            if (47197 <= code2 && code2 <= 47223) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 47225) {
                              if (47224 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47225 <= code2 && code2 <= 47251) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 47309) {
                        if (code2 < 47280) {
                          if (code2 < 47253) {
                            if (47252 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (47253 <= code2 && code2 <= 47279) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 47281) {
                            if (47280 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 47308) {
                              if (47281 <= code2 && code2 <= 47307) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47308 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47364) {
                          if (code2 < 47336) {
                            if (47309 <= code2 && code2 <= 47335) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 47337) {
                              if (47336 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47337 <= code2 && code2 <= 47363) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 47365) {
                            if (47364 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 47392) {
                              if (47365 <= code2 && code2 <= 47391) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47392 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 47560) {
                      if (code2 < 47476) {
                        if (code2 < 47421) {
                          if (code2 < 47420) {
                            if (47393 <= code2 && code2 <= 47419) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (47420 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 47448) {
                            if (47421 <= code2 && code2 <= 47447) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 47449) {
                              if (47448 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47449 <= code2 && code2 <= 47475) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47505) {
                          if (code2 < 47477) {
                            if (47476 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 47504) {
                              if (47477 <= code2 && code2 <= 47503) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47504 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 47532) {
                            if (47505 <= code2 && code2 <= 47531) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 47533) {
                              if (47532 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47533 <= code2 && code2 <= 47559) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 47617) {
                        if (code2 < 47588) {
                          if (code2 < 47561) {
                            if (47560 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (47561 <= code2 && code2 <= 47587) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 47589) {
                            if (47588 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 47616) {
                              if (47589 <= code2 && code2 <= 47615) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47616 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47672) {
                          if (code2 < 47644) {
                            if (47617 <= code2 && code2 <= 47643) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 47645) {
                              if (47644 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47645 <= code2 && code2 <= 47671) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 47673) {
                            if (47672 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 47700) {
                              if (47673 <= code2 && code2 <= 47699) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47700 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 48316) {
                  if (code2 < 48008) {
                    if (code2 < 47841) {
                      if (code2 < 47784) {
                        if (code2 < 47729) {
                          if (code2 < 47728) {
                            if (47701 <= code2 && code2 <= 47727) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (47728 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 47756) {
                            if (47729 <= code2 && code2 <= 47755) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 47757) {
                              if (47756 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47757 <= code2 && code2 <= 47783) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47812) {
                          if (code2 < 47785) {
                            if (47784 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (47785 <= code2 && code2 <= 47811) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 47813) {
                            if (47812 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 47840) {
                              if (47813 <= code2 && code2 <= 47839) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47840 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 47924) {
                        if (code2 < 47869) {
                          if (code2 < 47868) {
                            if (47841 <= code2 && code2 <= 47867) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (47868 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 47896) {
                            if (47869 <= code2 && code2 <= 47895) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 47897) {
                              if (47896 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47897 <= code2 && code2 <= 47923) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 47953) {
                          if (code2 < 47925) {
                            if (47924 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 47952) {
                              if (47925 <= code2 && code2 <= 47951) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (47952 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 47980) {
                            if (47953 <= code2 && code2 <= 47979) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 47981) {
                              if (47980 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (47981 <= code2 && code2 <= 48007) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 48149) {
                      if (code2 < 48065) {
                        if (code2 < 48036) {
                          if (code2 < 48009) {
                            if (48008 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (48009 <= code2 && code2 <= 48035) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 48037) {
                            if (48036 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 48064) {
                              if (48037 <= code2 && code2 <= 48063) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48064 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48120) {
                          if (code2 < 48092) {
                            if (48065 <= code2 && code2 <= 48091) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 48093) {
                              if (48092 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48093 <= code2 && code2 <= 48119) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 48121) {
                            if (48120 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 48148) {
                              if (48121 <= code2 && code2 <= 48147) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48148 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48232) {
                        if (code2 < 48177) {
                          if (code2 < 48176) {
                            if (48149 <= code2 && code2 <= 48175) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (48176 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 48204) {
                            if (48177 <= code2 && code2 <= 48203) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 48205) {
                              if (48204 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48205 <= code2 && code2 <= 48231) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48261) {
                          if (code2 < 48233) {
                            if (48232 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 48260) {
                              if (48233 <= code2 && code2 <= 48259) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48260 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 48288) {
                            if (48261 <= code2 && code2 <= 48287) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 48289) {
                              if (48288 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48289 <= code2 && code2 <= 48315) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 48597) {
                    if (code2 < 48456) {
                      if (code2 < 48373) {
                        if (code2 < 48344) {
                          if (code2 < 48317) {
                            if (48316 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (48317 <= code2 && code2 <= 48343) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 48345) {
                            if (48344 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 48372) {
                              if (48345 <= code2 && code2 <= 48371) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48372 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48401) {
                          if (code2 < 48400) {
                            if (48373 <= code2 && code2 <= 48399) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (48400 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 48428) {
                            if (48401 <= code2 && code2 <= 48427) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 48429) {
                              if (48428 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48429 <= code2 && code2 <= 48455) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48513) {
                        if (code2 < 48484) {
                          if (code2 < 48457) {
                            if (48456 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (48457 <= code2 && code2 <= 48483) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 48485) {
                            if (48484 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 48512) {
                              if (48485 <= code2 && code2 <= 48511) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48512 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48568) {
                          if (code2 < 48540) {
                            if (48513 <= code2 && code2 <= 48539) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 48541) {
                              if (48540 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48541 <= code2 && code2 <= 48567) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 48569) {
                            if (48568 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 48596) {
                              if (48569 <= code2 && code2 <= 48595) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48596 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 48764) {
                      if (code2 < 48680) {
                        if (code2 < 48625) {
                          if (code2 < 48624) {
                            if (48597 <= code2 && code2 <= 48623) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (48624 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 48652) {
                            if (48625 <= code2 && code2 <= 48651) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 48653) {
                              if (48652 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48653 <= code2 && code2 <= 48679) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48709) {
                          if (code2 < 48681) {
                            if (48680 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 48708) {
                              if (48681 <= code2 && code2 <= 48707) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48708 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 48736) {
                            if (48709 <= code2 && code2 <= 48735) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 48737) {
                              if (48736 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48737 <= code2 && code2 <= 48763) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 48821) {
                        if (code2 < 48792) {
                          if (code2 < 48765) {
                            if (48764 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (48765 <= code2 && code2 <= 48791) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 48793) {
                            if (48792 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 48820) {
                              if (48793 <= code2 && code2 <= 48819) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48820 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 48876) {
                          if (code2 < 48848) {
                            if (48821 <= code2 && code2 <= 48847) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 48849) {
                              if (48848 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48849 <= code2 && code2 <= 48875) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 48877) {
                            if (48876 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 48904) {
                              if (48877 <= code2 && code2 <= 48903) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (48904 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          if (code2 < 53720) {
            if (code2 < 51312) {
              if (code2 < 50108) {
                if (code2 < 49493) {
                  if (code2 < 49212) {
                    if (code2 < 49045) {
                      if (code2 < 48988) {
                        if (code2 < 48933) {
                          if (code2 < 48932) {
                            if (48905 <= code2 && code2 <= 48931) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (48932 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 48960) {
                            if (48933 <= code2 && code2 <= 48959) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 48961) {
                              if (48960 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (48961 <= code2 && code2 <= 48987) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49016) {
                          if (code2 < 48989) {
                            if (48988 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (48989 <= code2 && code2 <= 49015) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 49017) {
                            if (49016 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 49044) {
                              if (49017 <= code2 && code2 <= 49043) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49044 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 49128) {
                        if (code2 < 49073) {
                          if (code2 < 49072) {
                            if (49045 <= code2 && code2 <= 49071) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (49072 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 49100) {
                            if (49073 <= code2 && code2 <= 49099) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 49101) {
                              if (49100 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49101 <= code2 && code2 <= 49127) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49157) {
                          if (code2 < 49129) {
                            if (49128 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 49156) {
                              if (49129 <= code2 && code2 <= 49155) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49156 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 49184) {
                            if (49157 <= code2 && code2 <= 49183) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 49185) {
                              if (49184 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49185 <= code2 && code2 <= 49211) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 49352) {
                      if (code2 < 49269) {
                        if (code2 < 49240) {
                          if (code2 < 49213) {
                            if (49212 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (49213 <= code2 && code2 <= 49239) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 49241) {
                            if (49240 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 49268) {
                              if (49241 <= code2 && code2 <= 49267) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49268 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49297) {
                          if (code2 < 49296) {
                            if (49269 <= code2 && code2 <= 49295) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (49296 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 49324) {
                            if (49297 <= code2 && code2 <= 49323) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 49325) {
                              if (49324 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49325 <= code2 && code2 <= 49351) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 49409) {
                        if (code2 < 49380) {
                          if (code2 < 49353) {
                            if (49352 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (49353 <= code2 && code2 <= 49379) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 49381) {
                            if (49380 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 49408) {
                              if (49381 <= code2 && code2 <= 49407) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49408 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49464) {
                          if (code2 < 49436) {
                            if (49409 <= code2 && code2 <= 49435) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 49437) {
                              if (49436 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49437 <= code2 && code2 <= 49463) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 49465) {
                            if (49464 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 49492) {
                              if (49465 <= code2 && code2 <= 49491) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49492 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 49800) {
                    if (code2 < 49633) {
                      if (code2 < 49576) {
                        if (code2 < 49521) {
                          if (code2 < 49520) {
                            if (49493 <= code2 && code2 <= 49519) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (49520 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 49548) {
                            if (49521 <= code2 && code2 <= 49547) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 49549) {
                              if (49548 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49549 <= code2 && code2 <= 49575) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49604) {
                          if (code2 < 49577) {
                            if (49576 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (49577 <= code2 && code2 <= 49603) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 49605) {
                            if (49604 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 49632) {
                              if (49605 <= code2 && code2 <= 49631) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49632 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 49716) {
                        if (code2 < 49661) {
                          if (code2 < 49660) {
                            if (49633 <= code2 && code2 <= 49659) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (49660 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 49688) {
                            if (49661 <= code2 && code2 <= 49687) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 49689) {
                              if (49688 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49689 <= code2 && code2 <= 49715) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49745) {
                          if (code2 < 49717) {
                            if (49716 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 49744) {
                              if (49717 <= code2 && code2 <= 49743) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49744 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 49772) {
                            if (49745 <= code2 && code2 <= 49771) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 49773) {
                              if (49772 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49773 <= code2 && code2 <= 49799) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 49941) {
                      if (code2 < 49857) {
                        if (code2 < 49828) {
                          if (code2 < 49801) {
                            if (49800 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (49801 <= code2 && code2 <= 49827) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 49829) {
                            if (49828 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 49856) {
                              if (49829 <= code2 && code2 <= 49855) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49856 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 49912) {
                          if (code2 < 49884) {
                            if (49857 <= code2 && code2 <= 49883) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 49885) {
                              if (49884 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49885 <= code2 && code2 <= 49911) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 49913) {
                            if (49912 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 49940) {
                              if (49913 <= code2 && code2 <= 49939) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (49940 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 50024) {
                        if (code2 < 49969) {
                          if (code2 < 49968) {
                            if (49941 <= code2 && code2 <= 49967) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (49968 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 49996) {
                            if (49969 <= code2 && code2 <= 49995) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 49997) {
                              if (49996 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (49997 <= code2 && code2 <= 50023) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50053) {
                          if (code2 < 50025) {
                            if (50024 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 50052) {
                              if (50025 <= code2 && code2 <= 50051) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50052 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 50080) {
                            if (50053 <= code2 && code2 <= 50079) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 50081) {
                              if (50080 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50081 <= code2 && code2 <= 50107) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 50697) {
                  if (code2 < 50389) {
                    if (code2 < 50248) {
                      if (code2 < 50165) {
                        if (code2 < 50136) {
                          if (code2 < 50109) {
                            if (50108 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (50109 <= code2 && code2 <= 50135) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 50137) {
                            if (50136 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 50164) {
                              if (50137 <= code2 && code2 <= 50163) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50164 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50193) {
                          if (code2 < 50192) {
                            if (50165 <= code2 && code2 <= 50191) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (50192 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 50220) {
                            if (50193 <= code2 && code2 <= 50219) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 50221) {
                              if (50220 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50221 <= code2 && code2 <= 50247) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 50305) {
                        if (code2 < 50276) {
                          if (code2 < 50249) {
                            if (50248 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (50249 <= code2 && code2 <= 50275) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 50277) {
                            if (50276 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 50304) {
                              if (50277 <= code2 && code2 <= 50303) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50304 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50360) {
                          if (code2 < 50332) {
                            if (50305 <= code2 && code2 <= 50331) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 50333) {
                              if (50332 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50333 <= code2 && code2 <= 50359) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 50361) {
                            if (50360 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 50388) {
                              if (50361 <= code2 && code2 <= 50387) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50388 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 50556) {
                      if (code2 < 50472) {
                        if (code2 < 50417) {
                          if (code2 < 50416) {
                            if (50389 <= code2 && code2 <= 50415) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (50416 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 50444) {
                            if (50417 <= code2 && code2 <= 50443) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 50445) {
                              if (50444 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50445 <= code2 && code2 <= 50471) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50501) {
                          if (code2 < 50473) {
                            if (50472 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 50500) {
                              if (50473 <= code2 && code2 <= 50499) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50500 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 50528) {
                            if (50501 <= code2 && code2 <= 50527) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 50529) {
                              if (50528 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50529 <= code2 && code2 <= 50555) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 50613) {
                        if (code2 < 50584) {
                          if (code2 < 50557) {
                            if (50556 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (50557 <= code2 && code2 <= 50583) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 50585) {
                            if (50584 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 50612) {
                              if (50585 <= code2 && code2 <= 50611) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50612 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50668) {
                          if (code2 < 50640) {
                            if (50613 <= code2 && code2 <= 50639) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 50641) {
                              if (50640 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50641 <= code2 && code2 <= 50667) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 50669) {
                            if (50668 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 50696) {
                              if (50669 <= code2 && code2 <= 50695) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50696 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 51004) {
                    if (code2 < 50837) {
                      if (code2 < 50780) {
                        if (code2 < 50725) {
                          if (code2 < 50724) {
                            if (50697 <= code2 && code2 <= 50723) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (50724 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 50752) {
                            if (50725 <= code2 && code2 <= 50751) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 50753) {
                              if (50752 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50753 <= code2 && code2 <= 50779) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50808) {
                          if (code2 < 50781) {
                            if (50780 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (50781 <= code2 && code2 <= 50807) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 50809) {
                            if (50808 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 50836) {
                              if (50809 <= code2 && code2 <= 50835) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50836 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 50920) {
                        if (code2 < 50865) {
                          if (code2 < 50864) {
                            if (50837 <= code2 && code2 <= 50863) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (50864 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 50892) {
                            if (50865 <= code2 && code2 <= 50891) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 50893) {
                              if (50892 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50893 <= code2 && code2 <= 50919) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 50949) {
                          if (code2 < 50921) {
                            if (50920 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 50948) {
                              if (50921 <= code2 && code2 <= 50947) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (50948 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 50976) {
                            if (50949 <= code2 && code2 <= 50975) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 50977) {
                              if (50976 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (50977 <= code2 && code2 <= 51003) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 51145) {
                      if (code2 < 51061) {
                        if (code2 < 51032) {
                          if (code2 < 51005) {
                            if (51004 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (51005 <= code2 && code2 <= 51031) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 51033) {
                            if (51032 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 51060) {
                              if (51033 <= code2 && code2 <= 51059) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51060 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51116) {
                          if (code2 < 51088) {
                            if (51061 <= code2 && code2 <= 51087) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 51089) {
                              if (51088 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51089 <= code2 && code2 <= 51115) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 51117) {
                            if (51116 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 51144) {
                              if (51117 <= code2 && code2 <= 51143) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51144 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 51228) {
                        if (code2 < 51173) {
                          if (code2 < 51172) {
                            if (51145 <= code2 && code2 <= 51171) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (51172 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 51200) {
                            if (51173 <= code2 && code2 <= 51199) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 51201) {
                              if (51200 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51201 <= code2 && code2 <= 51227) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51257) {
                          if (code2 < 51229) {
                            if (51228 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 51256) {
                              if (51229 <= code2 && code2 <= 51255) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51256 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 51284) {
                            if (51257 <= code2 && code2 <= 51283) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 51285) {
                              if (51284 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51285 <= code2 && code2 <= 51311) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 52516) {
                if (code2 < 51901) {
                  if (code2 < 51593) {
                    if (code2 < 51452) {
                      if (code2 < 51369) {
                        if (code2 < 51340) {
                          if (code2 < 51313) {
                            if (51312 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (51313 <= code2 && code2 <= 51339) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 51341) {
                            if (51340 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 51368) {
                              if (51341 <= code2 && code2 <= 51367) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51368 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51397) {
                          if (code2 < 51396) {
                            if (51369 <= code2 && code2 <= 51395) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (51396 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 51424) {
                            if (51397 <= code2 && code2 <= 51423) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 51425) {
                              if (51424 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51425 <= code2 && code2 <= 51451) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 51509) {
                        if (code2 < 51480) {
                          if (code2 < 51453) {
                            if (51452 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (51453 <= code2 && code2 <= 51479) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 51481) {
                            if (51480 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 51508) {
                              if (51481 <= code2 && code2 <= 51507) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51508 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51564) {
                          if (code2 < 51536) {
                            if (51509 <= code2 && code2 <= 51535) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 51537) {
                              if (51536 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51537 <= code2 && code2 <= 51563) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 51565) {
                            if (51564 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 51592) {
                              if (51565 <= code2 && code2 <= 51591) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51592 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 51760) {
                      if (code2 < 51676) {
                        if (code2 < 51621) {
                          if (code2 < 51620) {
                            if (51593 <= code2 && code2 <= 51619) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (51620 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 51648) {
                            if (51621 <= code2 && code2 <= 51647) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 51649) {
                              if (51648 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51649 <= code2 && code2 <= 51675) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51705) {
                          if (code2 < 51677) {
                            if (51676 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 51704) {
                              if (51677 <= code2 && code2 <= 51703) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51704 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 51732) {
                            if (51705 <= code2 && code2 <= 51731) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 51733) {
                              if (51732 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51733 <= code2 && code2 <= 51759) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 51817) {
                        if (code2 < 51788) {
                          if (code2 < 51761) {
                            if (51760 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (51761 <= code2 && code2 <= 51787) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 51789) {
                            if (51788 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 51816) {
                              if (51789 <= code2 && code2 <= 51815) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51816 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 51872) {
                          if (code2 < 51844) {
                            if (51817 <= code2 && code2 <= 51843) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 51845) {
                              if (51844 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51845 <= code2 && code2 <= 51871) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 51873) {
                            if (51872 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 51900) {
                              if (51873 <= code2 && code2 <= 51899) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (51900 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 52208) {
                    if (code2 < 52041) {
                      if (code2 < 51984) {
                        if (code2 < 51929) {
                          if (code2 < 51928) {
                            if (51901 <= code2 && code2 <= 51927) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (51928 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 51956) {
                            if (51929 <= code2 && code2 <= 51955) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 51957) {
                              if (51956 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (51957 <= code2 && code2 <= 51983) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52012) {
                          if (code2 < 51985) {
                            if (51984 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (51985 <= code2 && code2 <= 52011) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 52013) {
                            if (52012 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 52040) {
                              if (52013 <= code2 && code2 <= 52039) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52040 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 52124) {
                        if (code2 < 52069) {
                          if (code2 < 52068) {
                            if (52041 <= code2 && code2 <= 52067) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (52068 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 52096) {
                            if (52069 <= code2 && code2 <= 52095) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 52097) {
                              if (52096 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52097 <= code2 && code2 <= 52123) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52153) {
                          if (code2 < 52125) {
                            if (52124 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 52152) {
                              if (52125 <= code2 && code2 <= 52151) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52152 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 52180) {
                            if (52153 <= code2 && code2 <= 52179) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 52181) {
                              if (52180 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52181 <= code2 && code2 <= 52207) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 52349) {
                      if (code2 < 52265) {
                        if (code2 < 52236) {
                          if (code2 < 52209) {
                            if (52208 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (52209 <= code2 && code2 <= 52235) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 52237) {
                            if (52236 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 52264) {
                              if (52237 <= code2 && code2 <= 52263) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52264 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52320) {
                          if (code2 < 52292) {
                            if (52265 <= code2 && code2 <= 52291) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 52293) {
                              if (52292 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52293 <= code2 && code2 <= 52319) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 52321) {
                            if (52320 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 52348) {
                              if (52321 <= code2 && code2 <= 52347) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52348 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 52432) {
                        if (code2 < 52377) {
                          if (code2 < 52376) {
                            if (52349 <= code2 && code2 <= 52375) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (52376 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 52404) {
                            if (52377 <= code2 && code2 <= 52403) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 52405) {
                              if (52404 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52405 <= code2 && code2 <= 52431) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52461) {
                          if (code2 < 52433) {
                            if (52432 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 52460) {
                              if (52433 <= code2 && code2 <= 52459) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52460 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 52488) {
                            if (52461 <= code2 && code2 <= 52487) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 52489) {
                              if (52488 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52489 <= code2 && code2 <= 52515) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 53105) {
                  if (code2 < 52797) {
                    if (code2 < 52656) {
                      if (code2 < 52573) {
                        if (code2 < 52544) {
                          if (code2 < 52517) {
                            if (52516 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (52517 <= code2 && code2 <= 52543) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 52545) {
                            if (52544 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 52572) {
                              if (52545 <= code2 && code2 <= 52571) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52572 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52601) {
                          if (code2 < 52600) {
                            if (52573 <= code2 && code2 <= 52599) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (52600 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 52628) {
                            if (52601 <= code2 && code2 <= 52627) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 52629) {
                              if (52628 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52629 <= code2 && code2 <= 52655) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 52713) {
                        if (code2 < 52684) {
                          if (code2 < 52657) {
                            if (52656 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (52657 <= code2 && code2 <= 52683) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 52685) {
                            if (52684 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 52712) {
                              if (52685 <= code2 && code2 <= 52711) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52712 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52768) {
                          if (code2 < 52740) {
                            if (52713 <= code2 && code2 <= 52739) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 52741) {
                              if (52740 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52741 <= code2 && code2 <= 52767) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 52769) {
                            if (52768 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 52796) {
                              if (52769 <= code2 && code2 <= 52795) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52796 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 52964) {
                      if (code2 < 52880) {
                        if (code2 < 52825) {
                          if (code2 < 52824) {
                            if (52797 <= code2 && code2 <= 52823) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (52824 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 52852) {
                            if (52825 <= code2 && code2 <= 52851) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 52853) {
                              if (52852 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52853 <= code2 && code2 <= 52879) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 52909) {
                          if (code2 < 52881) {
                            if (52880 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 52908) {
                              if (52881 <= code2 && code2 <= 52907) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (52908 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 52936) {
                            if (52909 <= code2 && code2 <= 52935) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 52937) {
                              if (52936 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (52937 <= code2 && code2 <= 52963) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 53021) {
                        if (code2 < 52992) {
                          if (code2 < 52965) {
                            if (52964 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (52965 <= code2 && code2 <= 52991) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 52993) {
                            if (52992 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 53020) {
                              if (52993 <= code2 && code2 <= 53019) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53020 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53076) {
                          if (code2 < 53048) {
                            if (53021 <= code2 && code2 <= 53047) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 53049) {
                              if (53048 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53049 <= code2 && code2 <= 53075) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 53077) {
                            if (53076 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 53104) {
                              if (53077 <= code2 && code2 <= 53103) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53104 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 53412) {
                    if (code2 < 53245) {
                      if (code2 < 53188) {
                        if (code2 < 53133) {
                          if (code2 < 53132) {
                            if (53105 <= code2 && code2 <= 53131) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (53132 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 53160) {
                            if (53133 <= code2 && code2 <= 53159) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 53161) {
                              if (53160 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53161 <= code2 && code2 <= 53187) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53216) {
                          if (code2 < 53189) {
                            if (53188 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (53189 <= code2 && code2 <= 53215) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 53217) {
                            if (53216 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 53244) {
                              if (53217 <= code2 && code2 <= 53243) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53244 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 53328) {
                        if (code2 < 53273) {
                          if (code2 < 53272) {
                            if (53245 <= code2 && code2 <= 53271) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (53272 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 53300) {
                            if (53273 <= code2 && code2 <= 53299) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 53301) {
                              if (53300 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53301 <= code2 && code2 <= 53327) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53357) {
                          if (code2 < 53329) {
                            if (53328 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 53356) {
                              if (53329 <= code2 && code2 <= 53355) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53356 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 53384) {
                            if (53357 <= code2 && code2 <= 53383) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 53385) {
                              if (53384 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53385 <= code2 && code2 <= 53411) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 53553) {
                      if (code2 < 53469) {
                        if (code2 < 53440) {
                          if (code2 < 53413) {
                            if (53412 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (53413 <= code2 && code2 <= 53439) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 53441) {
                            if (53440 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 53468) {
                              if (53441 <= code2 && code2 <= 53467) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53468 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53524) {
                          if (code2 < 53496) {
                            if (53469 <= code2 && code2 <= 53495) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 53497) {
                              if (53496 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53497 <= code2 && code2 <= 53523) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 53525) {
                            if (53524 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 53552) {
                              if (53525 <= code2 && code2 <= 53551) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53552 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 53636) {
                        if (code2 < 53581) {
                          if (code2 < 53580) {
                            if (53553 <= code2 && code2 <= 53579) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (53580 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 53608) {
                            if (53581 <= code2 && code2 <= 53607) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 53609) {
                              if (53608 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53609 <= code2 && code2 <= 53635) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53665) {
                          if (code2 < 53637) {
                            if (53636 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 53664) {
                              if (53637 <= code2 && code2 <= 53663) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53664 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 53692) {
                            if (53665 <= code2 && code2 <= 53691) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 53693) {
                              if (53692 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53693 <= code2 && code2 <= 53719) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (code2 < 70459) {
              if (code2 < 54897) {
                if (code2 < 54308) {
                  if (code2 < 54001) {
                    if (code2 < 53860) {
                      if (code2 < 53777) {
                        if (code2 < 53748) {
                          if (code2 < 53721) {
                            if (53720 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (53721 <= code2 && code2 <= 53747) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 53749) {
                            if (53748 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 53776) {
                              if (53749 <= code2 && code2 <= 53775) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53776 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53805) {
                          if (code2 < 53804) {
                            if (53777 <= code2 && code2 <= 53803) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (53804 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 53832) {
                            if (53805 <= code2 && code2 <= 53831) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 53833) {
                              if (53832 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53833 <= code2 && code2 <= 53859) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 53917) {
                        if (code2 < 53888) {
                          if (code2 < 53861) {
                            if (53860 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (53861 <= code2 && code2 <= 53887) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 53889) {
                            if (53888 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 53916) {
                              if (53889 <= code2 && code2 <= 53915) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (53916 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 53972) {
                          if (code2 < 53944) {
                            if (53917 <= code2 && code2 <= 53943) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 53945) {
                              if (53944 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (53945 <= code2 && code2 <= 53971) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 53973) {
                            if (53972 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 54e3) {
                              if (53973 <= code2 && code2 <= 53999) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54e3 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 54141) {
                      if (code2 < 54084) {
                        if (code2 < 54029) {
                          if (code2 < 54028) {
                            if (54001 <= code2 && code2 <= 54027) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (54028 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 54056) {
                            if (54029 <= code2 && code2 <= 54055) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 54057) {
                              if (54056 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54057 <= code2 && code2 <= 54083) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54112) {
                          if (code2 < 54085) {
                            if (54084 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (54085 <= code2 && code2 <= 54111) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 54113) {
                            if (54112 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 54140) {
                              if (54113 <= code2 && code2 <= 54139) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54140 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 54224) {
                        if (code2 < 54169) {
                          if (code2 < 54168) {
                            if (54141 <= code2 && code2 <= 54167) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (54168 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 54196) {
                            if (54169 <= code2 && code2 <= 54195) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 54197) {
                              if (54196 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54197 <= code2 && code2 <= 54223) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54253) {
                          if (code2 < 54225) {
                            if (54224 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 54252) {
                              if (54225 <= code2 && code2 <= 54251) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54252 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 54280) {
                            if (54253 <= code2 && code2 <= 54279) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 54281) {
                              if (54280 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54281 <= code2 && code2 <= 54307) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 54589) {
                    if (code2 < 54448) {
                      if (code2 < 54365) {
                        if (code2 < 54336) {
                          if (code2 < 54309) {
                            if (54308 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (54309 <= code2 && code2 <= 54335) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 54337) {
                            if (54336 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 54364) {
                              if (54337 <= code2 && code2 <= 54363) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54364 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54393) {
                          if (code2 < 54392) {
                            if (54365 <= code2 && code2 <= 54391) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (54392 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 54420) {
                            if (54393 <= code2 && code2 <= 54419) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 54421) {
                              if (54420 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54421 <= code2 && code2 <= 54447) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 54505) {
                        if (code2 < 54476) {
                          if (code2 < 54449) {
                            if (54448 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (54449 <= code2 && code2 <= 54475) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 54477) {
                            if (54476 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 54504) {
                              if (54477 <= code2 && code2 <= 54503) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54504 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54560) {
                          if (code2 < 54532) {
                            if (54505 <= code2 && code2 <= 54531) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 54533) {
                              if (54532 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54533 <= code2 && code2 <= 54559) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 54561) {
                            if (54560 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 54588) {
                              if (54561 <= code2 && code2 <= 54587) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54588 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 54756) {
                      if (code2 < 54672) {
                        if (code2 < 54617) {
                          if (code2 < 54616) {
                            if (54589 <= code2 && code2 <= 54615) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (54616 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 54644) {
                            if (54617 <= code2 && code2 <= 54643) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 54645) {
                              if (54644 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54645 <= code2 && code2 <= 54671) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54701) {
                          if (code2 < 54673) {
                            if (54672 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 54700) {
                              if (54673 <= code2 && code2 <= 54699) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54700 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 54728) {
                            if (54701 <= code2 && code2 <= 54727) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 54729) {
                              if (54728 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54729 <= code2 && code2 <= 54755) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 54813) {
                        if (code2 < 54784) {
                          if (code2 < 54757) {
                            if (54756 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (54757 <= code2 && code2 <= 54783) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 54785) {
                            if (54784 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 54812) {
                              if (54785 <= code2 && code2 <= 54811) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54812 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 54868) {
                          if (code2 < 54840) {
                            if (54813 <= code2 && code2 <= 54839) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 54841) {
                              if (54840 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54841 <= code2 && code2 <= 54867) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        } else {
                          if (code2 < 54869) {
                            if (54868 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 54896) {
                              if (54869 <= code2 && code2 <= 54895) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (54896 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 69632) {
                  if (code2 < 55216) {
                    if (code2 < 55037) {
                      if (code2 < 54980) {
                        if (code2 < 54925) {
                          if (code2 < 54924) {
                            if (54897 <= code2 && code2 <= 54923) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (54924 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 54952) {
                            if (54925 <= code2 && code2 <= 54951) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 54953) {
                              if (54952 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (54953 <= code2 && code2 <= 54979) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 55008) {
                          if (code2 < 54981) {
                            if (54980 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (54981 <= code2 && code2 <= 55007) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          }
                        } else {
                          if (code2 < 55009) {
                            if (55008 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 55036) {
                              if (55009 <= code2 && code2 <= 55035) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (55036 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 55120) {
                        if (code2 < 55065) {
                          if (code2 < 55064) {
                            if (55037 <= code2 && code2 <= 55063) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (55064 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          }
                        } else {
                          if (code2 < 55092) {
                            if (55065 <= code2 && code2 <= 55091) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 55093) {
                              if (55092 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (55093 <= code2 && code2 <= 55119) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 55149) {
                          if (code2 < 55121) {
                            if (55120 === code2) {
                              return boundaries_1.CLUSTER_BREAK.LV;
                            }
                          } else {
                            if (code2 < 55148) {
                              if (55121 <= code2 && code2 <= 55147) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            } else {
                              if (55148 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            }
                          }
                        } else {
                          if (code2 < 55176) {
                            if (55149 <= code2 && code2 <= 55175) {
                              return boundaries_1.CLUSTER_BREAK.LVT;
                            }
                          } else {
                            if (code2 < 55177) {
                              if (55176 === code2) {
                                return boundaries_1.CLUSTER_BREAK.LV;
                              }
                            } else {
                              if (55177 <= code2 && code2 <= 55203) {
                                return boundaries_1.CLUSTER_BREAK.LVT;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 68097) {
                      if (code2 < 65279) {
                        if (code2 < 64286) {
                          if (code2 < 55243) {
                            if (55216 <= code2 && code2 <= 55238) {
                              return boundaries_1.CLUSTER_BREAK.V;
                            }
                          } else {
                            if (55243 <= code2 && code2 <= 55291) {
                              return boundaries_1.CLUSTER_BREAK.T;
                            }
                          }
                        } else {
                          if (code2 < 65024) {
                            if (64286 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 65056) {
                              if (65024 <= code2 && code2 <= 65039) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (65056 <= code2 && code2 <= 65071) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 66045) {
                          if (code2 < 65438) {
                            if (65279 === code2) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                          } else {
                            if (code2 < 65520) {
                              if (65438 <= code2 && code2 <= 65439) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (65520 <= code2 && code2 <= 65531) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            }
                          }
                        } else {
                          if (code2 < 66272) {
                            if (66045 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 66422) {
                              if (66272 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (66422 <= code2 && code2 <= 66426) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 68325) {
                        if (code2 < 68108) {
                          if (code2 < 68101) {
                            if (68097 <= code2 && code2 <= 68099) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (68101 <= code2 && code2 <= 68102) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 68152) {
                            if (68108 <= code2 && code2 <= 68111) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 68159) {
                              if (68152 <= code2 && code2 <= 68154) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (68159 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 69373) {
                          if (code2 < 68900) {
                            if (68325 <= code2 && code2 <= 68326) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 69291) {
                              if (68900 <= code2 && code2 <= 68903) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (69291 <= code2 && code2 <= 69292) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 69446) {
                            if (69373 <= code2 && code2 <= 69375) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 69506) {
                              if (69446 <= code2 && code2 <= 69456) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (69506 <= code2 && code2 <= 69509) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 70016) {
                    if (code2 < 69815) {
                      if (code2 < 69747) {
                        if (code2 < 69634) {
                          if (69632 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                          if (69633 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 69688) {
                            if (69634 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 69744) {
                              if (69688 <= code2 && code2 <= 69702) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (69744 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 69762) {
                          if (code2 < 69759) {
                            if (69747 <= code2 && code2 <= 69748) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (69759 <= code2 && code2 <= 69761) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 69808) {
                            if (69762 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 69811) {
                              if (69808 <= code2 && code2 <= 69810) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (69811 <= code2 && code2 <= 69814) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 69888) {
                        if (code2 < 69821) {
                          if (code2 < 69817) {
                            if (69815 <= code2 && code2 <= 69816) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (69817 <= code2 && code2 <= 69818) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 69826) {
                            if (69821 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                          } else {
                            if (69826 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (69837 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                          }
                        }
                      } else {
                        if (code2 < 69933) {
                          if (code2 < 69927) {
                            if (69888 <= code2 && code2 <= 69890) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 69932) {
                              if (69927 <= code2 && code2 <= 69931) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (69932 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 69957) {
                            if (69933 <= code2 && code2 <= 69940) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70003) {
                              if (69957 <= code2 && code2 <= 69958) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70003 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 70194) {
                      if (code2 < 70082) {
                        if (code2 < 70067) {
                          if (code2 < 70018) {
                            if (70016 <= code2 && code2 <= 70017) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (70018 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 70070) {
                            if (70067 <= code2 && code2 <= 70069) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 70079) {
                              if (70070 <= code2 && code2 <= 70078) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70079 <= code2 && code2 <= 70080) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70095) {
                          if (code2 < 70089) {
                            if (70082 <= code2 && code2 <= 70083) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                          } else {
                            if (code2 < 70094) {
                              if (70089 <= code2 && code2 <= 70092) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70094 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 70188) {
                            if (70095 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70191) {
                              if (70188 <= code2 && code2 <= 70190) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70191 <= code2 && code2 <= 70193) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 70209) {
                        if (code2 < 70197) {
                          if (code2 < 70196) {
                            if (70194 <= code2 && code2 <= 70195) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (70196 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 70198) {
                            if (70197 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 70206) {
                              if (70198 <= code2 && code2 <= 70199) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70206 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70371) {
                          if (code2 < 70367) {
                            if (70209 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70368) {
                              if (70367 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70368 <= code2 && code2 <= 70370) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 70400) {
                            if (70371 <= code2 && code2 <= 70378) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70402) {
                              if (70400 <= code2 && code2 <= 70401) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70402 <= code2 && code2 <= 70403) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 72343) {
                if (code2 < 71339) {
                  if (code2 < 70841) {
                    if (code2 < 70512) {
                      if (code2 < 70471) {
                        if (code2 < 70463) {
                          if (code2 < 70462) {
                            if (70459 <= code2 && code2 <= 70460) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (70462 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 70464) {
                            if (70463 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 70465) {
                              if (70464 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (70465 <= code2 && code2 <= 70468) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70487) {
                          if (code2 < 70475) {
                            if (70471 <= code2 && code2 <= 70472) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (70475 <= code2 && code2 <= 70477) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 70498) {
                            if (70487 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70502) {
                              if (70498 <= code2 && code2 <= 70499) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70502 <= code2 && code2 <= 70508) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 70725) {
                        if (code2 < 70712) {
                          if (code2 < 70709) {
                            if (70512 <= code2 && code2 <= 70516) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (70709 <= code2 && code2 <= 70711) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 70720) {
                            if (70712 <= code2 && code2 <= 70719) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70722) {
                              if (70720 <= code2 && code2 <= 70721) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70722 <= code2 && code2 <= 70724) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 70832) {
                          if (code2 < 70726) {
                            if (70725 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (70726 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (70750 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 70833) {
                            if (70832 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70835) {
                              if (70833 <= code2 && code2 <= 70834) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70835 <= code2 && code2 <= 70840) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 71096) {
                      if (code2 < 70847) {
                        if (code2 < 70843) {
                          if (70841 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                          if (70842 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 70845) {
                            if (70843 <= code2 && code2 <= 70844) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (70845 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (70846 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        }
                      } else {
                        if (code2 < 71087) {
                          if (code2 < 70849) {
                            if (70847 <= code2 && code2 <= 70848) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 70850) {
                              if (70849 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (70850 <= code2 && code2 <= 70851) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 71088) {
                            if (71087 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 71090) {
                              if (71088 <= code2 && code2 <= 71089) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (71090 <= code2 && code2 <= 71093) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 71216) {
                        if (code2 < 71102) {
                          if (code2 < 71100) {
                            if (71096 <= code2 && code2 <= 71099) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (71100 <= code2 && code2 <= 71101) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 71103) {
                            if (71102 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 71132) {
                              if (71103 <= code2 && code2 <= 71104) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (71132 <= code2 && code2 <= 71133) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71229) {
                          if (code2 < 71219) {
                            if (71216 <= code2 && code2 <= 71218) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 71227) {
                              if (71219 <= code2 && code2 <= 71226) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (71227 <= code2 && code2 <= 71228) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 71230) {
                            if (71229 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 71231) {
                              if (71230 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (71231 <= code2 && code2 <= 71232) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 71999) {
                    if (code2 < 71463) {
                      if (code2 < 71350) {
                        if (code2 < 71341) {
                          if (71339 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                          if (71340 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                        } else {
                          if (code2 < 71342) {
                            if (71341 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 71344) {
                              if (71342 <= code2 && code2 <= 71343) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (71344 <= code2 && code2 <= 71349) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71453) {
                          if (71350 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                          if (71351 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 71458) {
                            if (71453 <= code2 && code2 <= 71455) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 71462) {
                              if (71458 <= code2 && code2 <= 71461) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (71462 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 71984) {
                        if (code2 < 71727) {
                          if (code2 < 71724) {
                            if (71463 <= code2 && code2 <= 71467) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (71724 <= code2 && code2 <= 71726) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 71736) {
                            if (71727 <= code2 && code2 <= 71735) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 71737) {
                              if (71736 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (71737 <= code2 && code2 <= 71738) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 71995) {
                          if (code2 < 71985) {
                            if (71984 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 71991) {
                              if (71985 <= code2 && code2 <= 71989) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (71991 <= code2 && code2 <= 71992) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 71997) {
                            if (71995 <= code2 && code2 <= 71996) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (71997 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (71998 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 72193) {
                      if (code2 < 72145) {
                        if (code2 < 72001) {
                          if (71999 === code2) {
                            return boundaries_1.CLUSTER_BREAK.PREPEND;
                          }
                          if (72e3 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                        } else {
                          if (code2 < 72002) {
                            if (72001 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                          } else {
                            if (72002 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (72003 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      } else {
                        if (code2 < 72156) {
                          if (code2 < 72148) {
                            if (72145 <= code2 && code2 <= 72147) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 72154) {
                              if (72148 <= code2 && code2 <= 72151) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (72154 <= code2 && code2 <= 72155) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 72160) {
                            if (72156 <= code2 && code2 <= 72159) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (72160 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (72164 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 72263) {
                        if (code2 < 72249) {
                          if (code2 < 72243) {
                            if (72193 <= code2 && code2 <= 72202) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (72243 <= code2 && code2 <= 72248) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 72250) {
                            if (72249 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 72251) {
                              if (72250 === code2) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (72251 <= code2 && code2 <= 72254) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 72281) {
                          if (code2 < 72273) {
                            if (72263 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 72279) {
                              if (72273 <= code2 && code2 <= 72278) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (72279 <= code2 && code2 <= 72280) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        } else {
                          if (code2 < 72324) {
                            if (72281 <= code2 && code2 <= 72283) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 72330) {
                              if (72324 <= code2 && code2 <= 72329) {
                                return boundaries_1.CLUSTER_BREAK.PREPEND;
                              }
                            } else {
                              if (72330 <= code2 && code2 <= 72342) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              } else {
                if (code2 < 94033) {
                  if (code2 < 73104) {
                    if (code2 < 72881) {
                      if (code2 < 72766) {
                        if (code2 < 72751) {
                          if (code2 < 72344) {
                            if (72343 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (72344 <= code2 && code2 <= 72345) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 72752) {
                            if (72751 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 72760) {
                              if (72752 <= code2 && code2 <= 72758) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (72760 <= code2 && code2 <= 72765) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 72850) {
                          if (72766 === code2) {
                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                          }
                          if (72767 === code2) {
                            return boundaries_1.CLUSTER_BREAK.EXTEND;
                          }
                        } else {
                          if (code2 < 72873) {
                            if (72850 <= code2 && code2 <= 72871) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 72874) {
                              if (72873 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (72874 <= code2 && code2 <= 72880) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 73018) {
                        if (code2 < 72884) {
                          if (code2 < 72882) {
                            if (72881 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (72882 <= code2 && code2 <= 72883) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 72885) {
                            if (72884 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (code2 < 73009) {
                              if (72885 <= code2 && code2 <= 72886) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73009 <= code2 && code2 <= 73014) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 73030) {
                          if (code2 < 73020) {
                            if (73018 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 73023) {
                              if (73020 <= code2 && code2 <= 73021) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73023 <= code2 && code2 <= 73029) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 73031) {
                            if (73030 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                          } else {
                            if (code2 < 73098) {
                              if (73031 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (73098 <= code2 && code2 <= 73102) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 73526) {
                      if (code2 < 73459) {
                        if (code2 < 73109) {
                          if (code2 < 73107) {
                            if (73104 <= code2 && code2 <= 73105) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (73107 <= code2 && code2 <= 73108) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 73110) {
                            if (73109 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (73110 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (73111 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      } else {
                        if (code2 < 73474) {
                          if (code2 < 73461) {
                            if (73459 <= code2 && code2 <= 73460) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 73472) {
                              if (73461 <= code2 && code2 <= 73462) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (73472 <= code2 && code2 <= 73473) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 73475) {
                            if (73474 === code2) {
                              return boundaries_1.CLUSTER_BREAK.PREPEND;
                            }
                          } else {
                            if (code2 < 73524) {
                              if (73475 === code2) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (73524 <= code2 && code2 <= 73525) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 78896) {
                        if (code2 < 73536) {
                          if (code2 < 73534) {
                            if (73526 <= code2 && code2 <= 73530) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (73534 <= code2 && code2 <= 73535) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 73537) {
                            if (73536 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (73537 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                            if (73538 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        }
                      } else {
                        if (code2 < 92912) {
                          if (code2 < 78912) {
                            if (78896 <= code2 && code2 <= 78911) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                          } else {
                            if (code2 < 78919) {
                              if (78912 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (78919 <= code2 && code2 <= 78933) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 92976) {
                            if (92912 <= code2 && code2 <= 92916) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 94031) {
                              if (92976 <= code2 && code2 <= 92982) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (94031 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                } else {
                  if (code2 < 121476) {
                    if (code2 < 119143) {
                      if (code2 < 113824) {
                        if (code2 < 94180) {
                          if (code2 < 94095) {
                            if (94033 <= code2 && code2 <= 94087) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          } else {
                            if (94095 <= code2 && code2 <= 94098) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 94192) {
                            if (94180 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 113821) {
                              if (94192 <= code2 && code2 <= 94193) {
                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                              }
                            } else {
                              if (113821 <= code2 && code2 <= 113822) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 118576) {
                          if (code2 < 118528) {
                            if (113824 <= code2 && code2 <= 113827) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                          } else {
                            if (118528 <= code2 && code2 <= 118573) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 119141) {
                            if (118576 <= code2 && code2 <= 118598) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (119141 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                            if (119142 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 119173) {
                        if (code2 < 119150) {
                          if (code2 < 119149) {
                            if (119143 <= code2 && code2 <= 119145) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (119149 === code2) {
                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;
                            }
                          }
                        } else {
                          if (code2 < 119155) {
                            if (119150 <= code2 && code2 <= 119154) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 119163) {
                              if (119155 <= code2 && code2 <= 119162) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (119163 <= code2 && code2 <= 119170) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 121344) {
                          if (code2 < 119210) {
                            if (119173 <= code2 && code2 <= 119179) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 119362) {
                              if (119210 <= code2 && code2 <= 119213) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (119362 <= code2 && code2 <= 119364) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 121403) {
                            if (121344 <= code2 && code2 <= 121398) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 121461) {
                              if (121403 <= code2 && code2 <= 121452) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (121461 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    }
                  } else {
                    if (code2 < 123628) {
                      if (code2 < 122907) {
                        if (code2 < 121505) {
                          if (code2 < 121499) {
                            if (121476 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (121499 <= code2 && code2 <= 121503) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 122880) {
                            if (121505 <= code2 && code2 <= 121519) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 122888) {
                              if (122880 <= code2 && code2 <= 122886) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (122888 <= code2 && code2 <= 122904) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 123023) {
                          if (code2 < 122915) {
                            if (122907 <= code2 && code2 <= 122913) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 122918) {
                              if (122915 <= code2 && code2 <= 122916) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (122918 <= code2 && code2 <= 122922) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 123184) {
                            if (123023 === code2) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 123566) {
                              if (123184 <= code2 && code2 <= 123190) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (123566 === code2) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        }
                      }
                    } else {
                      if (code2 < 127995) {
                        if (code2 < 125136) {
                          if (code2 < 124140) {
                            if (123628 <= code2 && code2 <= 123631) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (124140 <= code2 && code2 <= 124143) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          }
                        } else {
                          if (code2 < 125252) {
                            if (125136 <= code2 && code2 <= 125142) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 127462) {
                              if (125252 <= code2 && code2 <= 125258) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (127462 <= code2 && code2 <= 127487) {
                                return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;
                              }
                            }
                          }
                        }
                      } else {
                        if (code2 < 917632) {
                          if (code2 < 917504) {
                            if (127995 <= code2 && code2 <= 127999) {
                              return boundaries_1.CLUSTER_BREAK.EXTEND;
                            }
                          } else {
                            if (code2 < 917536) {
                              if (917504 <= code2 && code2 <= 917535) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            } else {
                              if (917536 <= code2 && code2 <= 917631) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            }
                          }
                        } else {
                          if (code2 < 917760) {
                            if (917632 <= code2 && code2 <= 917759) {
                              return boundaries_1.CLUSTER_BREAK.CONTROL;
                            }
                          } else {
                            if (code2 < 918e3) {
                              if (917760 <= code2 && code2 <= 917999) {
                                return boundaries_1.CLUSTER_BREAK.EXTEND;
                              }
                            } else {
                              if (918e3 <= code2 && code2 <= 921599) {
                                return boundaries_1.CLUSTER_BREAK.CONTROL;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return boundaries_1.CLUSTER_BREAK.OTHER;
      }
      /**
       * Given a Unicode code point, returns if symbol is an extended pictographic or some other break
       * @param code {number} Unicode code point
       * @returns {number}
       */
      static getEmojiProperty(code2) {
        if (code2 < 10160) {
          if (code2 < 9728) {
            if (code2 < 9e3) {
              if (code2 < 8482) {
                if (code2 < 8252) {
                  if (169 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                  if (174 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                } else {
                  if (8252 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                  if (8265 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                }
              } else {
                if (code2 < 8596) {
                  if (8482 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                  if (8505 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                } else {
                  if (code2 < 8617) {
                    if (8596 <= code2 && code2 <= 8601) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 8986) {
                      if (8617 <= code2 && code2 <= 8618) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (8986 <= code2 && code2 <= 8987) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 9410) {
                if (code2 < 9167) {
                  if (9e3 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                  if (9096 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                } else {
                  if (code2 < 9193) {
                    if (9167 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 9208) {
                      if (9193 <= code2 && code2 <= 9203) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (9208 <= code2 && code2 <= 9210) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 9654) {
                  if (code2 < 9642) {
                    if (9410 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (9642 <= code2 && code2 <= 9643) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 9664) {
                    if (9654 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 9723) {
                      if (9664 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (9723 <= code2 && code2 <= 9726) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (code2 < 10035) {
              if (code2 < 10004) {
                if (code2 < 9748) {
                  if (code2 < 9735) {
                    if (9728 <= code2 && code2 <= 9733) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (9735 <= code2 && code2 <= 9746) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 9872) {
                    if (9748 <= code2 && code2 <= 9861) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 9992) {
                      if (9872 <= code2 && code2 <= 9989) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (9992 <= code2 && code2 <= 10002) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 10013) {
                  if (10004 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                  if (10006 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                } else {
                  if (code2 < 10017) {
                    if (10013 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (10017 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (10024 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                }
              }
            } else {
              if (code2 < 10067) {
                if (code2 < 10055) {
                  if (code2 < 10052) {
                    if (10035 <= code2 && code2 <= 10036) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (10052 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 10060) {
                    if (10055 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (10060 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (10062 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                }
              } else {
                if (code2 < 10083) {
                  if (code2 < 10071) {
                    if (10067 <= code2 && code2 <= 10069) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (10071 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 10133) {
                    if (10083 <= code2 && code2 <= 10087) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 10145) {
                      if (10133 <= code2 && code2 <= 10135) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (10145 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          if (code2 < 127489) {
            if (code2 < 12951) {
              if (code2 < 11035) {
                if (code2 < 10548) {
                  if (10160 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                  if (10175 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                } else {
                  if (code2 < 11013) {
                    if (10548 <= code2 && code2 <= 10549) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (11013 <= code2 && code2 <= 11015) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                }
              } else {
                if (code2 < 11093) {
                  if (code2 < 11088) {
                    if (11035 <= code2 && code2 <= 11036) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (11088 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 12336) {
                    if (11093 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (12336 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                    if (12349 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                }
              }
            } else {
              if (code2 < 127340) {
                if (code2 < 126976) {
                  if (12951 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                  if (12953 === code2) {
                    return boundaries_1.EXTENDED_PICTOGRAPHIC;
                  }
                } else {
                  if (code2 < 127245) {
                    if (126976 <= code2 && code2 <= 127231) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 127279) {
                      if (127245 <= code2 && code2 <= 127247) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (127279 === code2) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 127374) {
                  if (code2 < 127358) {
                    if (127340 <= code2 && code2 <= 127345) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (127358 <= code2 && code2 <= 127359) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 127377) {
                    if (127374 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 127405) {
                      if (127377 <= code2 && code2 <= 127386) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (127405 <= code2 && code2 <= 127461) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              }
            }
          } else {
            if (code2 < 128981) {
              if (code2 < 127561) {
                if (code2 < 127535) {
                  if (code2 < 127514) {
                    if (127489 <= code2 && code2 <= 127503) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (127514 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 127538) {
                    if (127535 === code2) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 127548) {
                      if (127538 <= code2 && code2 <= 127546) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (127548 <= code2 && code2 <= 127551) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 128326) {
                  if (code2 < 128e3) {
                    if (127561 <= code2 && code2 <= 127994) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (128e3 <= code2 && code2 <= 128317) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 128640) {
                    if (128326 <= code2 && code2 <= 128591) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 128884) {
                      if (128640 <= code2 && code2 <= 128767) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (128884 <= code2 && code2 <= 128895) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              }
            } else {
              if (code2 < 129198) {
                if (code2 < 129096) {
                  if (code2 < 129036) {
                    if (128981 <= code2 && code2 <= 129023) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (129036 <= code2 && code2 <= 129039) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 129114) {
                    if (129096 <= code2 && code2 <= 129103) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 129160) {
                      if (129114 <= code2 && code2 <= 129119) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (129160 <= code2 && code2 <= 129167) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              } else {
                if (code2 < 129340) {
                  if (code2 < 129292) {
                    if (129198 <= code2 && code2 <= 129279) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (129292 <= code2 && code2 <= 129338) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  }
                } else {
                  if (code2 < 129351) {
                    if (129340 <= code2 && code2 <= 129349) {
                      return boundaries_1.EXTENDED_PICTOGRAPHIC;
                    }
                  } else {
                    if (code2 < 130048) {
                      if (129351 <= code2 && code2 <= 129791) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    } else {
                      if (130048 <= code2 && code2 <= 131069) {
                        return boundaries_1.EXTENDED_PICTOGRAPHIC;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return boundaries_1.CLUSTER_BREAK.OTHER;
      }
    };
    exports.default = Graphemer;
  }
});

// node_modules/graphemer/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/graphemer/lib/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var Graphemer_1 = __importDefault(require_Graphemer());
    exports.default = Graphemer_1.default;
  }
});

// node_modules/@atproto/common-web/dist/strings.js
var require_strings = __commonJS({
  "node_modules/@atproto/common-web/dist/strings.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o13, v2) {
      Object.defineProperty(o13, "default", { enumerable: true, value: v2 });
    } : function(o13, v2) {
      o13["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateLanguage = exports.parseLanguage = exports.b64UrlToUtf8 = exports.utf8ToB64Url = exports.graphemeLen = exports.utf8Len = void 0;
    var graphemer_1 = __importDefault(require_lib3());
    var ui8 = __importStar((init_src2(), __toCommonJS(src_exports)));
    var utf8Len = (str) => {
      return new TextEncoder().encode(str).byteLength;
    };
    exports.utf8Len = utf8Len;
    var graphemeLen = (str) => {
      const splitter = new graphemer_1.default();
      return splitter.countGraphemes(str);
    };
    exports.graphemeLen = graphemeLen;
    var utf8ToB64Url = (utf8) => {
      return ui8.toString(ui8.fromString(utf8, "utf8"), "base64url");
    };
    exports.utf8ToB64Url = utf8ToB64Url;
    var b64UrlToUtf8 = (b64) => {
      return ui8.toString(ui8.fromString(b64, "base64url"), "utf8");
    };
    exports.b64UrlToUtf8 = b64UrlToUtf8;
    var parseLanguage = (langTag) => {
      const parsed = langTag.match(bcp47Regexp);
      if (!parsed?.groups)
        return null;
      const parts = parsed.groups;
      return {
        grandfathered: parts.grandfathered,
        language: parts.language,
        extlang: parts.extlang,
        script: parts.script,
        region: parts.region,
        variant: parts.variant,
        extension: parts.extension,
        privateUse: parts.privateUseA || parts.privateUseB
      };
    };
    exports.parseLanguage = parseLanguage;
    var validateLanguage = (langTag) => {
      return bcp47Regexp.test(langTag);
    };
    exports.validateLanguage = validateLanguage;
    var bcp47Regexp = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;
  }
});

// node_modules/@atproto/common-web/dist/did-doc.js
var require_did_doc = __commonJS({
  "node_modules/@atproto/common-web/dist/did-doc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.didDocument = exports.getServiceEndpoint = exports.getNotifEndpoint = exports.getFeedGenEndpoint = exports.getPdsEndpoint = exports.getSigningDidKey = exports.getVerificationMaterial = exports.getSigningKey = exports.getHandle = exports.getDid = exports.isValidDidDoc = void 0;
    var zod_1 = require_lib2();
    var isValidDidDoc = (doc) => {
      return exports.didDocument.safeParse(doc).success;
    };
    exports.isValidDidDoc = isValidDidDoc;
    var getDid = (doc) => {
      const id3 = doc.id;
      if (typeof id3 !== "string") {
        throw new Error("No `id` on document");
      }
      return id3;
    };
    exports.getDid = getDid;
    var getHandle = (doc) => {
      const aka = doc.alsoKnownAs;
      if (aka) {
        for (let i9 = 0; i9 < aka.length; i9++) {
          const alias = aka[i9];
          if (alias.startsWith("at://")) {
            return alias.slice(5);
          }
        }
      }
      return void 0;
    };
    exports.getHandle = getHandle;
    var getSigningKey = (doc) => {
      return (0, exports.getVerificationMaterial)(doc, "atproto");
    };
    exports.getSigningKey = getSigningKey;
    var getVerificationMaterial = (doc, keyId) => {
      const key = findItemById(doc, "verificationMethod", `#${keyId}`);
      if (!key) {
        return void 0;
      }
      if (!key.publicKeyMultibase) {
        return void 0;
      }
      return {
        type: key.type,
        publicKeyMultibase: key.publicKeyMultibase
      };
    };
    exports.getVerificationMaterial = getVerificationMaterial;
    var getSigningDidKey = (doc) => {
      const parsed = (0, exports.getSigningKey)(doc);
      if (!parsed)
        return;
      return `did:key:${parsed.publicKeyMultibase}`;
    };
    exports.getSigningDidKey = getSigningDidKey;
    var getPdsEndpoint = (doc) => {
      return (0, exports.getServiceEndpoint)(doc, {
        id: "#atproto_pds",
        type: "AtprotoPersonalDataServer"
      });
    };
    exports.getPdsEndpoint = getPdsEndpoint;
    var getFeedGenEndpoint = (doc) => {
      return (0, exports.getServiceEndpoint)(doc, {
        id: "#bsky_fg",
        type: "BskyFeedGenerator"
      });
    };
    exports.getFeedGenEndpoint = getFeedGenEndpoint;
    var getNotifEndpoint = (doc) => {
      return (0, exports.getServiceEndpoint)(doc, {
        id: "#bsky_notif",
        type: "BskyNotificationService"
      });
    };
    exports.getNotifEndpoint = getNotifEndpoint;
    var getServiceEndpoint = (doc, opts) => {
      const service2 = findItemById(doc, "service", opts.id);
      if (!service2) {
        return void 0;
      }
      if (opts.type && service2.type !== opts.type) {
        return void 0;
      }
      if (typeof service2.serviceEndpoint !== "string") {
        return void 0;
      }
      return validateUrl(service2.serviceEndpoint);
    };
    exports.getServiceEndpoint = getServiceEndpoint;
    function findItemById(doc, type, id3) {
      const items = doc[type];
      if (items) {
        for (let i9 = 0; i9 < items.length; i9++) {
          const item = items[i9];
          const itemId = item.id;
          if (itemId[0] === "#" ? itemId === id3 : (
            // Optimized version of: itemId === `${doc.id}${id}`
            itemId.length === doc.id.length + id3.length && itemId[doc.id.length] === "#" && itemId.endsWith(id3) && itemId.startsWith(doc.id)
          )) {
            return item;
          }
        }
      }
      return void 0;
    }
    var validateUrl = (urlStr) => {
      if (!urlStr.startsWith("http://") && !urlStr.startsWith("https://")) {
        return void 0;
      }
      if (!canParseUrl(urlStr)) {
        return void 0;
      }
      return urlStr;
    };
    var canParseUrl = URL.canParse ?? // URL.canParse is not available in Node.js < 18.17.0
    ((urlStr) => {
      try {
        new URL(urlStr);
        return true;
      } catch {
        return false;
      }
    });
    var verificationMethod = zod_1.z.object({
      id: zod_1.z.string(),
      type: zod_1.z.string(),
      controller: zod_1.z.string(),
      publicKeyMultibase: zod_1.z.string().optional()
    });
    var service = zod_1.z.object({
      id: zod_1.z.string(),
      type: zod_1.z.string(),
      serviceEndpoint: zod_1.z.union([zod_1.z.string(), zod_1.z.record(zod_1.z.unknown())])
    });
    exports.didDocument = zod_1.z.object({
      id: zod_1.z.string(),
      alsoKnownAs: zod_1.z.array(zod_1.z.string()).optional(),
      verificationMethod: zod_1.z.array(verificationMethod).optional(),
      service: zod_1.z.array(service).optional()
    });
  }
});

// node_modules/@atproto/common-web/dist/index.js
var require_dist16 = __commonJS({
  "node_modules/@atproto/common-web/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o13, v2) {
      Object.defineProperty(o13, "default", { enumerable: true, value: v2 });
    } : function(o13, v2) {
      o13["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.util = exports.check = void 0;
    exports.check = __importStar(require_check());
    exports.util = __importStar(require_util13());
    __exportStar(require_arrays(), exports);
    __exportStar(require_async(), exports);
    __exportStar(require_util13(), exports);
    __exportStar(require_tid2(), exports);
    __exportStar(require_ipld(), exports);
    __exportStar(require_retry(), exports);
    __exportStar(require_types5(), exports);
    __exportStar(require_times(), exports);
    __exportStar(require_strings(), exports);
    __exportStar(require_did_doc(), exports);
  }
});

// node_modules/@atproto/lexicon/dist/blob-refs.js
var require_blob_refs = __commonJS({
  "node_modules/@atproto/lexicon/dist/blob-refs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlobRef = exports.jsonBlobRef = exports.untypedJsonBlobRef = exports.typedJsonBlobRef = void 0;
    var common_web_1 = require_dist16();
    var cid_1 = (init_cid(), __toCommonJS(cid_exports));
    var zod_1 = require_lib2();
    exports.typedJsonBlobRef = zod_1.z.object({
      $type: zod_1.z.literal("blob"),
      ref: common_web_1.schema.cid,
      mimeType: zod_1.z.string(),
      size: zod_1.z.number()
    }).strict();
    exports.untypedJsonBlobRef = zod_1.z.object({
      cid: zod_1.z.string(),
      mimeType: zod_1.z.string()
    }).strict();
    exports.jsonBlobRef = zod_1.z.union([exports.typedJsonBlobRef, exports.untypedJsonBlobRef]);
    var BlobRef = class _BlobRef {
      constructor(ref, mimeType, size3, original) {
        Object.defineProperty(this, "ref", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: ref
        });
        Object.defineProperty(this, "mimeType", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: mimeType
        });
        Object.defineProperty(this, "size", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: size3
        });
        Object.defineProperty(this, "original", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.original = original ?? {
          $type: "blob",
          ref,
          mimeType,
          size: size3
        };
      }
      static asBlobRef(obj) {
        if (common_web_1.check.is(obj, exports.jsonBlobRef)) {
          return _BlobRef.fromJsonRef(obj);
        }
        return null;
      }
      static fromJsonRef(json) {
        if (common_web_1.check.is(json, exports.typedJsonBlobRef)) {
          return new _BlobRef(json.ref, json.mimeType, json.size);
        } else {
          return new _BlobRef(cid_1.CID.parse(json.cid), json.mimeType, -1, json);
        }
      }
      ipld() {
        return {
          $type: "blob",
          ref: this.ref,
          mimeType: this.mimeType,
          size: this.size
        };
      }
      toJSON() {
        return (0, common_web_1.ipldToJson)(this.ipld());
      }
    };
    exports.BlobRef = BlobRef;
  }
});

// node_modules/@atproto/lexicon/dist/validators/blob.js
var require_blob = __commonJS({
  "node_modules/@atproto/lexicon/dist/validators/blob.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.blob = blob;
    var blob_refs_1 = require_blob_refs();
    var types_1 = require_types4();
    function blob(lexicons, path, def, value) {
      if (!value || !(value instanceof blob_refs_1.BlobRef)) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} should be a blob ref`)
        };
      }
      return { success: true, value };
    }
  }
});

// node_modules/iso-datestring-validator/dist/index.js
var require_dist17 = __commonJS({
  "node_modules/iso-datestring-validator/dist/index.js"(exports) {
    (() => {
      "use strict";
      var e12 = { d: (t7, r11) => {
        for (var n11 in r11) e12.o(r11, n11) && !e12.o(t7, n11) && Object.defineProperty(t7, n11, { enumerable: true, get: r11[n11] });
      }, o: (e13, t7) => Object.prototype.hasOwnProperty.call(e13, t7), r: (e13) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e13, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e13, "__esModule", { value: true });
      } }, t6 = {};
      function r10(e13, t7) {
        return void 0 === t7 && (t7 = "-"), new RegExp("^(?!0{4}" + t7 + "0{2}" + t7 + "0{2})((?=[0-9]{4}" + t7 + "(((0[^2])|1[0-2])|02(?=" + t7 + "(([0-1][0-9])|2[0-8])))" + t7 + "[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))" + t7 + "02" + t7 + "29))([0-9]{4})" + t7 + "(?!((0[469])|11)" + t7 + "31)((0[1,3-9]|1[0-2])|(02(?!" + t7 + "3)))" + t7 + "(0[1-9]|[1-2][0-9]|3[0-1])$").test(e13);
      }
      function n10(e13) {
        var t7 = /\D/.exec(e13);
        return t7 ? t7[0] : "";
      }
      function i9(e13, t7, r11) {
        void 0 === t7 && (t7 = ":"), void 0 === r11 && (r11 = false);
        var i10 = new RegExp("^([0-1]|2(?=([0-3])|4" + t7 + "00))[0-9]" + t7 + "[0-5][0-9](" + t7 + "([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$");
        if (!r11 || !/[Z+\-]/.test(e13)) return i10.test(e13);
        if (/Z$/.test(e13)) return i10.test(e13.replace("Z", ""));
        var o14 = e13.includes("+"), a5 = e13.split(/[+-]/), u6 = a5[0], d4 = a5[1];
        return i10.test(u6) && function(e14, t8, r12) {
          return void 0 === r12 && (r12 = ":"), new RegExp(t8 ? "^(0(?!(2" + r12 + "4)|0" + r12 + "3)|1(?=([0-1]|2(?=" + r12 + "[04])|[34](?=" + r12 + "0))))([03469](?=" + r12 + "[03])|[17](?=" + r12 + "0)|2(?=" + r12 + "[04])|5(?=" + r12 + "[034])|8(?=" + r12 + "[04]))" + r12 + "([03](?=0)|4(?=5))[05]$" : "^(0(?=[^0])|1(?=[0-2]))([39](?=" + r12 + "[03])|[0-24-8](?=" + r12 + "00))" + r12 + "[03]0$").test(e14);
        }(d4, o14, n10(d4));
      }
      function o13(e13) {
        var t7 = e13.split("T"), o14 = t7[0], a5 = t7[1], u6 = r10(o14, n10(o14));
        if (!a5) return false;
        var d4, s4 = (d4 = a5.match(/([^Z+\-\d])(?=\d+\1)/), Array.isArray(d4) ? d4[0] : "");
        return u6 && i9(a5, s4, true);
      }
      function a4(e13, t7) {
        return void 0 === t7 && (t7 = "-"), new RegExp("^[0-9]{4}" + t7 + "(0(?=[^0])|1(?=[0-2]))[0-9]$").test(e13);
      }
      e12.r(t6), e12.d(t6, { isValidDate: () => r10, isValidISODateString: () => o13, isValidTime: () => i9, isValidYearMonth: () => a4 });
      var u5 = exports;
      for (var d3 in t6) u5[d3] = t6[d3];
      t6.__esModule && Object.defineProperty(u5, "__esModule", { value: true });
    })();
  }
});

// node_modules/@atproto/lexicon/dist/validators/formats.js
var require_formats = __commonJS({
  "node_modules/@atproto/lexicon/dist/validators/formats.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.datetime = datetime;
    exports.uri = uri;
    exports.atUri = atUri;
    exports.did = did;
    exports.handle = handle;
    exports.atIdentifier = atIdentifier;
    exports.nsid = nsid;
    exports.cid = cid;
    exports.language = language;
    exports.tid = tid;
    exports.recordKey = recordKey;
    var iso_datestring_validator_1 = require_dist17();
    var cid_1 = (init_cid(), __toCommonJS(cid_exports));
    var types_1 = require_types4();
    var syntax_1 = require_dist12();
    var common_web_1 = require_dist16();
    function datetime(path, value) {
      try {
        if (!(0, iso_datestring_validator_1.isValidISODateString)(value)) {
          throw new Error();
        }
      } catch {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`)
        };
      }
      return { success: true, value };
    }
    function uri(path, value) {
      const isUri = value.match(/^\w+:(?:\/\/)?[^\s/][^\s]*$/) !== null;
      if (!isUri) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a uri`)
        };
      }
      return { success: true, value };
    }
    function atUri(path, value) {
      try {
        (0, syntax_1.ensureValidAtUri)(value);
      } catch {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a valid at-uri`)
        };
      }
      return { success: true, value };
    }
    function did(path, value) {
      try {
        (0, syntax_1.ensureValidDid)(value);
      } catch {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a valid did`)
        };
      }
      return { success: true, value };
    }
    function handle(path, value) {
      try {
        (0, syntax_1.ensureValidHandle)(value);
      } catch {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a valid handle`)
        };
      }
      return { success: true, value };
    }
    function atIdentifier(path, value) {
      if (value.startsWith("did:")) {
        const didResult = did(path, value);
        if (didResult.success)
          return didResult;
      } else {
        const handleResult = handle(path, value);
        if (handleResult.success)
          return handleResult;
      }
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a valid did or a handle`)
      };
    }
    function nsid(path, value) {
      try {
        (0, syntax_1.ensureValidNsid)(value);
      } catch {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a valid nsid`)
        };
      }
      return { success: true, value };
    }
    function cid(path, value) {
      try {
        cid_1.CID.parse(value);
      } catch {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a cid string`)
        };
      }
      return { success: true, value };
    }
    function language(path, value) {
      if ((0, common_web_1.validateLanguage)(value)) {
        return { success: true, value };
      }
      return {
        success: false,
        error: new types_1.ValidationError(`${path} must be a well-formed BCP 47 language tag`)
      };
    }
    function tid(path, value) {
      try {
        (0, syntax_1.ensureValidTid)(value);
      } catch {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a valid TID (timestamp identifier)`)
        };
      }
      return { success: true, value };
    }
    function recordKey(path, value) {
      try {
        (0, syntax_1.ensureValidRecordKey)(value);
      } catch {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a valid Record Key`)
        };
      }
      return { success: true, value };
    }
  }
});

// node_modules/@atproto/lexicon/dist/validators/primitives.js
var require_primitives = __commonJS({
  "node_modules/@atproto/lexicon/dist/validators/primitives.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o13, v2) {
      Object.defineProperty(o13, "default", { enumerable: true, value: v2 });
    } : function(o13, v2) {
      o13["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validate = validate;
    exports.boolean = boolean;
    exports.integer = integer;
    exports.string = string2;
    exports.bytes = bytes;
    exports.cidLink = cidLink;
    exports.unknown = unknown;
    var common_web_1 = require_dist16();
    var cid_1 = (init_cid(), __toCommonJS(cid_exports));
    var formats = __importStar(require_formats());
    var types_1 = require_types4();
    function validate(lexicons, path, def, value) {
      switch (def.type) {
        case "boolean":
          return boolean(lexicons, path, def, value);
        case "integer":
          return integer(lexicons, path, def, value);
        case "string":
          return string2(lexicons, path, def, value);
        case "bytes":
          return bytes(lexicons, path, def, value);
        case "cid-link":
          return cidLink(lexicons, path, def, value);
        case "unknown":
          return unknown(lexicons, path, def, value);
        default:
          return {
            success: false,
            error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
          };
      }
    }
    function boolean(lexicons, path, def, value) {
      def = def;
      const type = typeof value;
      if (type === "undefined") {
        if (typeof def.default === "boolean") {
          return { success: true, value: def.default };
        }
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a boolean`)
        };
      } else if (type !== "boolean") {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a boolean`)
        };
      }
      if (typeof def.const === "boolean") {
        if (value !== def.const) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be ${def.const}`)
          };
        }
      }
      return { success: true, value };
    }
    function integer(lexicons, path, def, value) {
      def = def;
      const type = typeof value;
      if (type === "undefined") {
        if (typeof def.default === "number") {
          return { success: true, value: def.default };
        }
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be an integer`)
        };
      } else if (!Number.isInteger(value)) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be an integer`)
        };
      }
      if (typeof def.const === "number") {
        if (value !== def.const) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be ${def.const}`)
          };
        }
      }
      if (Array.isArray(def.enum)) {
        if (!def.enum.includes(value)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be one of (${def.enum.join("|")})`)
          };
        }
      }
      if (typeof def.maximum === "number") {
        if (value > def.maximum) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} can not be greater than ${def.maximum}`)
          };
        }
      }
      if (typeof def.minimum === "number") {
        if (value < def.minimum) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} can not be less than ${def.minimum}`)
          };
        }
      }
      return { success: true, value };
    }
    function string2(lexicons, path, def, value) {
      def = def;
      if (typeof value === "undefined") {
        if (typeof def.default === "string") {
          return { success: true, value: def.default };
        }
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a string`)
        };
      } else if (typeof value !== "string") {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a string`)
        };
      }
      if (typeof def.const === "string") {
        if (value !== def.const) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be ${def.const}`)
          };
        }
      }
      if (Array.isArray(def.enum)) {
        if (!def.enum.includes(value)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be one of (${def.enum.join("|")})`)
          };
        }
      }
      if (typeof def.minLength === "number" || typeof def.maxLength === "number") {
        if (typeof def.minLength === "number" && value.length * 3 < def.minLength) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
          };
        }
        let canSkipUtf8LenChecks = false;
        if (typeof def.minLength === "undefined" && typeof def.maxLength === "number" && value.length * 3 <= def.maxLength) {
          canSkipUtf8LenChecks = true;
        }
        if (!canSkipUtf8LenChecks) {
          const len = (0, common_web_1.utf8Len)(value);
          if (typeof def.maxLength === "number") {
            if (len > def.maxLength) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} must not be longer than ${def.maxLength} characters`)
              };
            }
          }
          if (typeof def.minLength === "number") {
            if (len < def.minLength) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} must not be shorter than ${def.minLength} characters`)
              };
            }
          }
        }
      }
      if (typeof def.maxGraphemes === "number" || typeof def.minGraphemes === "number") {
        let needsMaxGraphemesCheck = false;
        let needsMinGraphemesCheck = false;
        if (typeof def.maxGraphemes === "number") {
          if (value.length <= def.maxGraphemes) {
            needsMaxGraphemesCheck = false;
          } else {
            needsMaxGraphemesCheck = true;
          }
        }
        if (typeof def.minGraphemes === "number") {
          if (value.length < def.minGraphemes) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
            };
          } else {
            needsMinGraphemesCheck = true;
          }
        }
        if (needsMaxGraphemesCheck || needsMinGraphemesCheck) {
          const len = (0, common_web_1.graphemeLen)(value);
          if (typeof def.maxGraphemes === "number") {
            if (len > def.maxGraphemes) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} must not be longer than ${def.maxGraphemes} graphemes`)
              };
            }
          }
          if (typeof def.minGraphemes === "number") {
            if (len < def.minGraphemes) {
              return {
                success: false,
                error: new types_1.ValidationError(`${path} must not be shorter than ${def.minGraphemes} graphemes`)
              };
            }
          }
        }
      }
      if (typeof def.format === "string") {
        switch (def.format) {
          case "datetime":
            return formats.datetime(path, value);
          case "uri":
            return formats.uri(path, value);
          case "at-uri":
            return formats.atUri(path, value);
          case "did":
            return formats.did(path, value);
          case "handle":
            return formats.handle(path, value);
          case "at-identifier":
            return formats.atIdentifier(path, value);
          case "nsid":
            return formats.nsid(path, value);
          case "cid":
            return formats.cid(path, value);
          case "language":
            return formats.language(path, value);
          case "tid":
            return formats.tid(path, value);
          case "record-key":
            return formats.recordKey(path, value);
        }
      }
      return { success: true, value };
    }
    function bytes(lexicons, path, def, value) {
      def = def;
      if (!value || !(value instanceof Uint8Array)) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a byte array`)
        };
      }
      if (typeof def.maxLength === "number") {
        if (value.byteLength > def.maxLength) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must not be larger than ${def.maxLength} bytes`)
          };
        }
      }
      if (typeof def.minLength === "number") {
        if (value.byteLength < def.minLength) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must not be smaller than ${def.minLength} bytes`)
          };
        }
      }
      return { success: true, value };
    }
    function cidLink(lexicons, path, def, value) {
      if (cid_1.CID.asCID(value) === null) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be a CID`)
        };
      }
      return { success: true, value };
    }
    function unknown(lexicons, path, def, value) {
      if (!value || typeof value !== "object") {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be an object`)
        };
      }
      return { success: true, value };
    }
  }
});

// node_modules/@atproto/lexicon/dist/validators/complex.js
var require_complex = __commonJS({
  "node_modules/@atproto/lexicon/dist/validators/complex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validate = validate;
    exports.array = array;
    exports.object = object;
    exports.validateOneOf = validateOneOf;
    var types_1 = require_types4();
    var util_1 = require_util12();
    var blob_1 = require_blob();
    var primitives_1 = require_primitives();
    function validate(lexicons, path, def, value) {
      switch (def.type) {
        case "boolean":
          return (0, primitives_1.boolean)(lexicons, path, def, value);
        case "integer":
          return (0, primitives_1.integer)(lexicons, path, def, value);
        case "string":
          return (0, primitives_1.string)(lexicons, path, def, value);
        case "bytes":
          return (0, primitives_1.bytes)(lexicons, path, def, value);
        case "cid-link":
          return (0, primitives_1.cidLink)(lexicons, path, def, value);
        case "unknown":
          return (0, primitives_1.unknown)(lexicons, path, def, value);
        case "object":
          return object(lexicons, path, def, value);
        case "array":
          return array(lexicons, path, def, value);
        case "blob":
          return (0, blob_1.blob)(lexicons, path, def, value);
        default:
          return {
            success: false,
            error: new types_1.ValidationError(`Unexpected lexicon type: ${def.type}`)
          };
      }
    }
    function array(lexicons, path, def, value) {
      if (!Array.isArray(value)) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be an array`)
        };
      }
      if (typeof def.maxLength === "number") {
        if (value.length > def.maxLength) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must not have more than ${def.maxLength} elements`)
          };
        }
      }
      if (typeof def.minLength === "number") {
        if (value.length < def.minLength) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must not have fewer than ${def.minLength} elements`)
          };
        }
      }
      const itemsDef = def.items;
      for (let i9 = 0; i9 < value.length; i9++) {
        const itemValue = value[i9];
        const itemPath = `${path}/${i9}`;
        const res = validateOneOf(lexicons, itemPath, itemsDef, itemValue);
        if (!res.success) {
          return res;
        }
      }
      return { success: true, value };
    }
    function object(lexicons, path, def, value) {
      def = def;
      if (!value || typeof value !== "object") {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} must be an object`)
        };
      }
      const requiredProps = new Set(def.required);
      const nullableProps = new Set(def.nullable);
      let resultValue = value;
      if (typeof def.properties === "object") {
        for (const key in def.properties) {
          if (value[key] === null && nullableProps.has(key)) {
            continue;
          }
          const propDef = def.properties[key];
          if (typeof value[key] === "undefined" && !requiredProps.has(key)) {
            if (propDef.type === "integer" || propDef.type === "boolean" || propDef.type === "string") {
              if (typeof propDef.default === "undefined") {
                continue;
              }
            } else {
              continue;
            }
          }
          const propPath = `${path}/${key}`;
          const validated = validateOneOf(lexicons, propPath, propDef, value[key]);
          const propValue = validated.success ? validated.value : value[key];
          const propIsUndefined = typeof propValue === "undefined";
          if (propIsUndefined && requiredProps.has(key)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must have the property "${key}"`)
            };
          } else if (!propIsUndefined && !validated.success) {
            return validated;
          }
          if (propValue !== value[key]) {
            if (resultValue === value) {
              resultValue = { ...value };
            }
            resultValue[key] = propValue;
          }
        }
      }
      return { success: true, value: resultValue };
    }
    function validateOneOf(lexicons, path, def, value, mustBeObj = false) {
      let error;
      let concreteDefs;
      if (def.type === "union") {
        if (!(0, types_1.isDiscriminatedObject)(value)) {
          return {
            success: false,
            error: new types_1.ValidationError(`${path} must be an object which includes the "$type" property`)
          };
        }
        if (!refsContainType(def.refs, value.$type)) {
          if (def.closed) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} $type must be one of ${def.refs.join(", ")}`)
            };
          }
          return { success: true, value };
        } else {
          concreteDefs = (0, util_1.toConcreteTypes)(lexicons, {
            type: "ref",
            ref: value.$type
          });
        }
      } else {
        concreteDefs = (0, util_1.toConcreteTypes)(lexicons, def);
      }
      for (const concreteDef of concreteDefs) {
        const result = mustBeObj ? object(lexicons, path, concreteDef, value) : validate(lexicons, path, concreteDef, value);
        if (result.success) {
          return result;
        }
        error ?? (error = result.error);
      }
      if (concreteDefs.length > 1) {
        return {
          success: false,
          error: new types_1.ValidationError(`${path} did not match any of the expected definitions`)
        };
      }
      return { success: false, error };
    }
    var refsContainType = (refs, type) => {
      const lexUri = (0, util_1.toLexUri)(type);
      if (refs.includes(lexUri)) {
        return true;
      }
      if (lexUri.endsWith("#main")) {
        return refs.includes(lexUri.replace("#main", ""));
      } else {
        return refs.includes(lexUri + "#main");
      }
    };
  }
});

// node_modules/@atproto/lexicon/dist/validators/xrpc.js
var require_xrpc = __commonJS({
  "node_modules/@atproto/lexicon/dist/validators/xrpc.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o13, v2) {
      Object.defineProperty(o13, "default", { enumerable: true, value: v2 });
    } : function(o13, v2) {
      o13["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.params = params;
    var types_1 = require_types4();
    var PrimitiveValidators = __importStar(require_primitives());
    var complex_1 = require_complex();
    function params(lexicons, path, def, val) {
      const value = val && typeof val === "object" ? val : {};
      const requiredProps = new Set(def.required ?? []);
      let resultValue = value;
      if (typeof def.properties === "object") {
        for (const key in def.properties) {
          const propDef = def.properties[key];
          const validated = propDef.type === "array" ? (0, complex_1.array)(lexicons, key, propDef, value[key]) : PrimitiveValidators.validate(lexicons, key, propDef, value[key]);
          const propValue = validated.success ? validated.value : value[key];
          const propIsUndefined = typeof propValue === "undefined";
          if (propIsUndefined && requiredProps.has(key)) {
            return {
              success: false,
              error: new types_1.ValidationError(`${path} must have the property "${key}"`)
            };
          } else if (!propIsUndefined && !validated.success) {
            return validated;
          }
          if (propValue !== value[key]) {
            if (resultValue === value) {
              resultValue = { ...value };
            }
            resultValue[key] = propValue;
          }
        }
      }
      return { success: true, value: resultValue };
    }
  }
});

// node_modules/@atproto/lexicon/dist/validation.js
var require_validation = __commonJS({
  "node_modules/@atproto/lexicon/dist/validation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertValidRecord = assertValidRecord;
    exports.assertValidXrpcParams = assertValidXrpcParams;
    exports.assertValidXrpcInput = assertValidXrpcInput;
    exports.assertValidXrpcOutput = assertValidXrpcOutput;
    exports.assertValidXrpcMessage = assertValidXrpcMessage;
    var complex_1 = require_complex();
    var xrpc_1 = require_xrpc();
    function assertValidRecord(lexicons, def, value) {
      const res = (0, complex_1.object)(lexicons, "Record", def.record, value);
      if (!res.success)
        throw res.error;
      return res.value;
    }
    function assertValidXrpcParams(lexicons, def, value) {
      if (def.parameters) {
        const res = (0, xrpc_1.params)(lexicons, "Params", def.parameters, value);
        if (!res.success)
          throw res.error;
        return res.value;
      }
    }
    function assertValidXrpcInput(lexicons, def, value) {
      if (def.input?.schema) {
        return assertValidOneOf(lexicons, "Input", def.input.schema, value, true);
      }
    }
    function assertValidXrpcOutput(lexicons, def, value) {
      if (def.output?.schema) {
        return assertValidOneOf(lexicons, "Output", def.output.schema, value, true);
      }
    }
    function assertValidXrpcMessage(lexicons, def, value) {
      if (def.message?.schema) {
        return assertValidOneOf(lexicons, "Message", def.message.schema, value, true);
      }
    }
    function assertValidOneOf(lexicons, path, def, value, mustBeObj = false) {
      const res = (0, complex_1.validateOneOf)(lexicons, path, def, value, mustBeObj);
      if (!res.success)
        throw res.error;
      return res.value;
    }
  }
});

// node_modules/@atproto/lexicon/dist/lexicons.js
var require_lexicons = __commonJS({
  "node_modules/@atproto/lexicon/dist/lexicons.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o13, v2) {
      Object.defineProperty(o13, "default", { enumerable: true, value: v2 });
    } : function(o13, v2) {
      o13["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lexicons = void 0;
    var types_1 = require_types4();
    var validation_1 = require_validation();
    var util_1 = require_util12();
    var ComplexValidators = __importStar(require_complex());
    var Lexicons = class {
      constructor(docs) {
        Object.defineProperty(this, "docs", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: /* @__PURE__ */ new Map()
        });
        Object.defineProperty(this, "defs", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: /* @__PURE__ */ new Map()
        });
        if (docs) {
          for (const doc of docs) {
            this.add(doc);
          }
        }
      }
      /**
       * @example clone a lexicon:
       * ```ts
       * const clone = new Lexicons(originalLexicon)
       * ```
       *
       * @example get docs array:
       * ```ts
       * const docs = Array.from(lexicons)
       * ```
       */
      [Symbol.iterator]() {
        return this.docs.values();
      }
      /**
       * Add a lexicon doc.
       */
      add(doc) {
        const uri = (0, util_1.toLexUri)(doc.id);
        if (this.docs.has(uri)) {
          throw new Error(`${uri} has already been registered`);
        }
        resolveRefUris(doc, uri);
        this.docs.set(uri, doc);
        for (const [defUri, def] of iterDefs(doc)) {
          this.defs.set(defUri, def);
        }
      }
      /**
       * Remove a lexicon doc.
       */
      remove(uri) {
        uri = (0, util_1.toLexUri)(uri);
        const doc = this.docs.get(uri);
        if (!doc) {
          throw new Error(`Unable to remove "${uri}": does not exist`);
        }
        for (const [defUri, _def] of iterDefs(doc)) {
          this.defs.delete(defUri);
        }
        this.docs.delete(uri);
      }
      /**
       * Get a lexicon doc.
       */
      get(uri) {
        uri = (0, util_1.toLexUri)(uri);
        return this.docs.get(uri);
      }
      /**
       * Get a definition.
       */
      getDef(uri) {
        uri = (0, util_1.toLexUri)(uri);
        return this.defs.get(uri);
      }
      getDefOrThrow(uri, types2) {
        const def = this.getDef(uri);
        if (!def) {
          throw new types_1.LexiconDefNotFoundError(`Lexicon not found: ${uri}`);
        }
        if (types2 && !types2.includes(def.type)) {
          throw new types_1.InvalidLexiconError(`Not a ${types2.join(" or ")} lexicon: ${uri}`);
        }
        return def;
      }
      /**
       * Validate a record or object.
       */
      validate(lexUri, value) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUri, ["record", "object"]);
        if (!(0, types_1.isObj)(value)) {
          throw new types_1.ValidationError(`Value must be an object`);
        }
        if (def.type === "record") {
          return ComplexValidators.object(this, "Record", def.record, value);
        } else if (def.type === "object") {
          return ComplexValidators.object(this, "Object", def, value);
        } else {
          throw new types_1.InvalidLexiconError("Definition must be a record or object");
        }
      }
      /**
       * Validate a record and throw on any error.
       */
      assertValidRecord(lexUri, value) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUri, ["record"]);
        if (!(0, types_1.isObj)(value)) {
          throw new types_1.ValidationError(`Record must be an object`);
        }
        if (!(0, types_1.hasProp)(value, "$type") || typeof value.$type !== "string") {
          throw new types_1.ValidationError(`Record/$type must be a string`);
        }
        const $type = value.$type || "";
        if ((0, util_1.toLexUri)($type) !== lexUri) {
          throw new types_1.ValidationError(`Invalid $type: must be ${lexUri}, got ${$type}`);
        }
        return (0, validation_1.assertValidRecord)(this, def, value);
      }
      /**
       * Validate xrpc query params and throw on any error.
       */
      assertValidXrpcParams(lexUri, value) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUri, [
          "query",
          "procedure",
          "subscription"
        ]);
        return (0, validation_1.assertValidXrpcParams)(this, def, value);
      }
      /**
       * Validate xrpc input body and throw on any error.
       */
      assertValidXrpcInput(lexUri, value) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUri, ["procedure"]);
        return (0, validation_1.assertValidXrpcInput)(this, def, value);
      }
      /**
       * Validate xrpc output body and throw on any error.
       */
      assertValidXrpcOutput(lexUri, value) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUri, ["query", "procedure"]);
        return (0, validation_1.assertValidXrpcOutput)(this, def, value);
      }
      /**
       * Validate xrpc subscription message and throw on any error.
       */
      assertValidXrpcMessage(lexUri, value) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        const def = this.getDefOrThrow(lexUri, ["subscription"]);
        return (0, validation_1.assertValidXrpcMessage)(this, def, value);
      }
      /**
       * Resolve a lex uri given a ref
       */
      resolveLexUri(lexUri, ref) {
        lexUri = (0, util_1.toLexUri)(lexUri);
        return (0, util_1.toLexUri)(ref, lexUri);
      }
    };
    exports.Lexicons = Lexicons;
    function* iterDefs(doc) {
      for (const defId in doc.defs) {
        yield [`lex:${doc.id}#${defId}`, doc.defs[defId]];
        if (defId === "main") {
          yield [`lex:${doc.id}`, doc.defs[defId]];
        }
      }
    }
    function resolveRefUris(obj, baseUri) {
      for (const k2 in obj) {
        if (obj.type === "ref") {
          obj.ref = (0, util_1.toLexUri)(obj.ref, baseUri);
        } else if (obj.type === "union") {
          obj.refs = obj.refs.map((ref) => (0, util_1.toLexUri)(ref, baseUri));
        } else if (Array.isArray(obj[k2])) {
          obj[k2] = obj[k2].map((item) => {
            if (typeof item === "string") {
              return item.startsWith("#") ? (0, util_1.toLexUri)(item, baseUri) : item;
            } else if (item && typeof item === "object") {
              return resolveRefUris(item, baseUri);
            }
            return item;
          });
        } else if (obj[k2] && typeof obj[k2] === "object") {
          obj[k2] = resolveRefUris(obj[k2], baseUri);
        }
      }
      return obj;
    }
  }
});

// node_modules/@atproto/lexicon/dist/serialize.js
var require_serialize = __commonJS({
  "node_modules/@atproto/lexicon/dist/serialize.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.ipldToLex = exports.lexToIpld = void 0;
    var common_web_1 = require_dist16();
    var cid_1 = (init_cid(), __toCommonJS(cid_exports));
    var blob_refs_1 = require_blob_refs();
    var lexToIpld = (val) => {
      if (Array.isArray(val)) {
        return val.map((item) => (0, exports.lexToIpld)(item));
      }
      if (val && typeof val === "object") {
        if (val instanceof blob_refs_1.BlobRef) {
          return val.original;
        }
        if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
          return val;
        }
        const toReturn = {};
        for (const key of Object.keys(val)) {
          toReturn[key] = (0, exports.lexToIpld)(val[key]);
        }
        return toReturn;
      }
      return val;
    };
    exports.lexToIpld = lexToIpld;
    var ipldToLex = (val) => {
      if (Array.isArray(val)) {
        return val.map((item) => (0, exports.ipldToLex)(item));
      }
      if (val && typeof val === "object") {
        if ((val["$type"] === "blob" || typeof val["cid"] === "string" && typeof val["mimeType"] === "string") && common_web_1.check.is(val, blob_refs_1.jsonBlobRef)) {
          return blob_refs_1.BlobRef.fromJsonRef(val);
        }
        if (cid_1.CID.asCID(val) || val instanceof Uint8Array) {
          return val;
        }
        const toReturn = {};
        for (const key of Object.keys(val)) {
          toReturn[key] = (0, exports.ipldToLex)(val[key]);
        }
        return toReturn;
      }
      return val;
    };
    exports.ipldToLex = ipldToLex;
    var lexToJson = (val) => {
      return (0, common_web_1.ipldToJson)((0, exports.lexToIpld)(val));
    };
    exports.lexToJson = lexToJson;
    var stringifyLex = (val) => {
      return JSON.stringify((0, exports.lexToJson)(val));
    };
    exports.stringifyLex = stringifyLex;
    var jsonToLex = (val) => {
      return (0, exports.ipldToLex)((0, common_web_1.jsonToIpld)(val));
    };
    exports.jsonToLex = jsonToLex;
    var jsonStringToLex = (val) => {
      return (0, exports.jsonToLex)(JSON.parse(val));
    };
    exports.jsonStringToLex = jsonStringToLex;
  }
});

// node_modules/@atproto/lexicon/dist/index.js
var require_dist18 = __commonJS({
  "node_modules/@atproto/lexicon/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_types4(), exports);
    __exportStar(require_lexicons(), exports);
    __exportStar(require_blob_refs(), exports);
    __exportStar(require_serialize(), exports);
  }
});

// node_modules/@atproto/api/dist/client/lexicons.js
var require_lexicons2 = __commonJS({
  "node_modules/@atproto/api/dist/client/lexicons.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ids = exports.lexicons = exports.schemas = exports.schemaDict = void 0;
    var lexicon_1 = require_dist18();
    exports.schemaDict = {
      ComAtprotoAdminDefs: {
        lexicon: 1,
        id: "com.atproto.admin.defs",
        defs: {
          statusAttr: {
            type: "object",
            required: ["applied"],
            properties: {
              applied: {
                type: "boolean"
              },
              ref: {
                type: "string"
              }
            }
          },
          accountView: {
            type: "object",
            required: ["did", "handle", "indexedAt"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              handle: {
                type: "string",
                format: "handle"
              },
              email: {
                type: "string"
              },
              relatedRecords: {
                type: "array",
                items: {
                  type: "unknown"
                }
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              invitedBy: {
                type: "ref",
                ref: "lex:com.atproto.server.defs#inviteCode"
              },
              invites: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                }
              },
              invitesDisabled: {
                type: "boolean"
              },
              emailConfirmedAt: {
                type: "string",
                format: "datetime"
              },
              inviteNote: {
                type: "string"
              },
              deactivatedAt: {
                type: "string",
                format: "datetime"
              },
              threatSignatures: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#threatSignature"
                }
              }
            }
          },
          repoRef: {
            type: "object",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              }
            }
          },
          repoBlobRef: {
            type: "object",
            required: ["did", "cid"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              recordUri: {
                type: "string",
                format: "at-uri"
              }
            }
          },
          threatSignature: {
            type: "object",
            required: ["property", "value"],
            properties: {
              property: {
                type: "string"
              },
              value: {
                type: "string"
              }
            }
          }
        }
      },
      ComAtprotoAdminDeleteAccount: {
        lexicon: 1,
        id: "com.atproto.admin.deleteAccount",
        defs: {
          main: {
            type: "procedure",
            description: "Delete a user account as an administrator.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminDisableAccountInvites: {
        lexicon: 1,
        id: "com.atproto.admin.disableAccountInvites",
        defs: {
          main: {
            type: "procedure",
            description: "Disable an account from receiving new invite codes, but does not invalidate existing codes.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["account"],
                properties: {
                  account: {
                    type: "string",
                    format: "did"
                  },
                  note: {
                    type: "string",
                    description: "Optional reason for disabled invites."
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminDisableInviteCodes: {
        lexicon: 1,
        id: "com.atproto.admin.disableInviteCodes",
        defs: {
          main: {
            type: "procedure",
            description: "Disable some set of codes and/or all codes associated with a set of users.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {
                  codes: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  accounts: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminEnableAccountInvites: {
        lexicon: 1,
        id: "com.atproto.admin.enableAccountInvites",
        defs: {
          main: {
            type: "procedure",
            description: "Re-enable an account's ability to receive invite codes.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["account"],
                properties: {
                  account: {
                    type: "string",
                    format: "did"
                  },
                  note: {
                    type: "string",
                    description: "Optional reason for enabled invites."
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminGetAccountInfo: {
        lexicon: 1,
        id: "com.atproto.admin.getAccountInfo",
        defs: {
          main: {
            type: "query",
            description: "Get details about an account.",
            parameters: {
              type: "params",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:com.atproto.admin.defs#accountView"
              }
            }
          }
        }
      },
      ComAtprotoAdminGetAccountInfos: {
        lexicon: 1,
        id: "com.atproto.admin.getAccountInfos",
        defs: {
          main: {
            type: "query",
            description: "Get details about some accounts.",
            parameters: {
              type: "params",
              required: ["dids"],
              properties: {
                dids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["infos"],
                properties: {
                  infos: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#accountView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminGetInviteCodes: {
        lexicon: 1,
        id: "com.atproto.admin.getInviteCodes",
        defs: {
          main: {
            type: "query",
            description: "Get an admin view of invite codes.",
            parameters: {
              type: "params",
              properties: {
                sort: {
                  type: "string",
                  knownValues: ["recent", "usage"],
                  default: "recent"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 500,
                  default: 100
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["codes"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  codes: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.server.defs#inviteCode"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminGetSubjectStatus: {
        lexicon: 1,
        id: "com.atproto.admin.getSubjectStatus",
        defs: {
          main: {
            type: "query",
            description: "Get the service-specific admin status of a subject (account, record, or blob).",
            parameters: {
              type: "params",
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                blob: {
                  type: "string",
                  format: "cid"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["subject"],
                properties: {
                  subject: {
                    type: "union",
                    refs: [
                      "lex:com.atproto.admin.defs#repoRef",
                      "lex:com.atproto.repo.strongRef",
                      "lex:com.atproto.admin.defs#repoBlobRef"
                    ]
                  },
                  takedown: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#statusAttr"
                  },
                  deactivated: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#statusAttr"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminSearchAccounts: {
        lexicon: 1,
        id: "com.atproto.admin.searchAccounts",
        defs: {
          main: {
            type: "query",
            description: "Get list of accounts that matches your search query.",
            parameters: {
              type: "params",
              properties: {
                email: {
                  type: "string"
                },
                cursor: {
                  type: "string"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["accounts"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  accounts: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#accountView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminSendEmail: {
        lexicon: 1,
        id: "com.atproto.admin.sendEmail",
        defs: {
          main: {
            type: "procedure",
            description: "Send email to a user's account email address.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["recipientDid", "content", "senderDid"],
                properties: {
                  recipientDid: {
                    type: "string",
                    format: "did"
                  },
                  content: {
                    type: "string"
                  },
                  subject: {
                    type: "string"
                  },
                  senderDid: {
                    type: "string",
                    format: "did"
                  },
                  comment: {
                    type: "string",
                    description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["sent"],
                properties: {
                  sent: {
                    type: "boolean"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminUpdateAccountEmail: {
        lexicon: 1,
        id: "com.atproto.admin.updateAccountEmail",
        defs: {
          main: {
            type: "procedure",
            description: "Administrative action to update an account's email.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["account", "email"],
                properties: {
                  account: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo."
                  },
                  email: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminUpdateAccountHandle: {
        lexicon: 1,
        id: "com.atproto.admin.updateAccountHandle",
        defs: {
          main: {
            type: "procedure",
            description: "Administrative action to update an account's handle.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did", "handle"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  handle: {
                    type: "string",
                    format: "handle"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminUpdateAccountPassword: {
        lexicon: 1,
        id: "com.atproto.admin.updateAccountPassword",
        defs: {
          main: {
            type: "procedure",
            description: "Update the password for a user account as an administrator.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did", "password"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  password: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoAdminUpdateSubjectStatus: {
        lexicon: 1,
        id: "com.atproto.admin.updateSubjectStatus",
        defs: {
          main: {
            type: "procedure",
            description: "Update the service-specific admin status of a subject (account, record, or blob).",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["subject"],
                properties: {
                  subject: {
                    type: "union",
                    refs: [
                      "lex:com.atproto.admin.defs#repoRef",
                      "lex:com.atproto.repo.strongRef",
                      "lex:com.atproto.admin.defs#repoBlobRef"
                    ]
                  },
                  takedown: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#statusAttr"
                  },
                  deactivated: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#statusAttr"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["subject"],
                properties: {
                  subject: {
                    type: "union",
                    refs: [
                      "lex:com.atproto.admin.defs#repoRef",
                      "lex:com.atproto.repo.strongRef",
                      "lex:com.atproto.admin.defs#repoBlobRef"
                    ]
                  },
                  takedown: {
                    type: "ref",
                    ref: "lex:com.atproto.admin.defs#statusAttr"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoIdentityGetRecommendedDidCredentials: {
        lexicon: 1,
        id: "com.atproto.identity.getRecommendedDidCredentials",
        defs: {
          main: {
            type: "query",
            description: "Describe the credentials that should be included in the DID doc of an account that is migrating to this service.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {
                  rotationKeys: {
                    description: "Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.",
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  alsoKnownAs: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  verificationMethods: {
                    type: "unknown"
                  },
                  services: {
                    type: "unknown"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoIdentityRequestPlcOperationSignature: {
        lexicon: 1,
        id: "com.atproto.identity.requestPlcOperationSignature",
        defs: {
          main: {
            type: "procedure",
            description: "Request an email with a code to in order to request a signed PLC operation. Requires Auth."
          }
        }
      },
      ComAtprotoIdentityResolveHandle: {
        lexicon: 1,
        id: "com.atproto.identity.resolveHandle",
        defs: {
          main: {
            type: "query",
            description: "Resolves a handle (domain name) to a DID.",
            parameters: {
              type: "params",
              required: ["handle"],
              properties: {
                handle: {
                  type: "string",
                  format: "handle",
                  description: "The handle to resolve."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoIdentitySignPlcOperation: {
        lexicon: 1,
        id: "com.atproto.identity.signPlcOperation",
        defs: {
          main: {
            type: "procedure",
            description: "Signs a PLC operation to update some value(s) in the requesting DID's document.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {
                  token: {
                    description: "A token received through com.atproto.identity.requestPlcOperationSignature",
                    type: "string"
                  },
                  rotationKeys: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  alsoKnownAs: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  verificationMethods: {
                    type: "unknown"
                  },
                  services: {
                    type: "unknown"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["operation"],
                properties: {
                  operation: {
                    type: "unknown",
                    description: "A signed DID PLC operation."
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoIdentitySubmitPlcOperation: {
        lexicon: 1,
        id: "com.atproto.identity.submitPlcOperation",
        defs: {
          main: {
            type: "procedure",
            description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["operation"],
                properties: {
                  operation: {
                    type: "unknown"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoIdentityUpdateHandle: {
        lexicon: 1,
        id: "com.atproto.identity.updateHandle",
        defs: {
          main: {
            type: "procedure",
            description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["handle"],
                properties: {
                  handle: {
                    type: "string",
                    format: "handle",
                    description: "The new handle."
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoLabelDefs: {
        lexicon: 1,
        id: "com.atproto.label.defs",
        defs: {
          label: {
            type: "object",
            description: "Metadata tag on an atproto resource (eg, repo or record).",
            required: ["src", "uri", "val", "cts"],
            properties: {
              ver: {
                type: "integer",
                description: "The AT Protocol version of the label object."
              },
              src: {
                type: "string",
                format: "did",
                description: "DID of the actor who created this label."
              },
              uri: {
                type: "string",
                format: "uri",
                description: "AT URI of the record, repository (account), or other resource that this label applies to."
              },
              cid: {
                type: "string",
                format: "cid",
                description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to."
              },
              val: {
                type: "string",
                maxLength: 128,
                description: "The short string name of the value or type of this label."
              },
              neg: {
                type: "boolean",
                description: "If true, this is a negation label, overwriting a previous label."
              },
              cts: {
                type: "string",
                format: "datetime",
                description: "Timestamp when this label was created."
              },
              exp: {
                type: "string",
                format: "datetime",
                description: "Timestamp at which this label expires (no longer applies)."
              },
              sig: {
                type: "bytes",
                description: "Signature of dag-cbor encoded label."
              }
            }
          },
          selfLabels: {
            type: "object",
            description: "Metadata tags on an atproto record, published by the author within the record.",
            required: ["values"],
            properties: {
              values: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#selfLabel"
                },
                maxLength: 10
              }
            }
          },
          selfLabel: {
            type: "object",
            description: "Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.",
            required: ["val"],
            properties: {
              val: {
                type: "string",
                maxLength: 128,
                description: "The short string name of the value or type of this label."
              }
            }
          },
          labelValueDefinition: {
            type: "object",
            description: "Declares a label value and its expected interpretations and behaviors.",
            required: ["identifier", "severity", "blurs", "locales"],
            properties: {
              identifier: {
                type: "string",
                description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).",
                maxLength: 100,
                maxGraphemes: 100
              },
              severity: {
                type: "string",
                description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.",
                knownValues: ["inform", "alert", "none"]
              },
              blurs: {
                type: "string",
                description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.",
                knownValues: ["content", "media", "none"]
              },
              defaultSetting: {
                type: "string",
                description: "The default setting for this label.",
                knownValues: ["ignore", "warn", "hide"],
                default: "warn"
              },
              adultOnly: {
                type: "boolean",
                description: "Does the user need to have adult content enabled in order to configure this label?"
              },
              locales: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#labelValueDefinitionStrings"
                }
              }
            }
          },
          labelValueDefinitionStrings: {
            type: "object",
            description: "Strings which describe the label in the UI, localized into a specific language.",
            required: ["lang", "name", "description"],
            properties: {
              lang: {
                type: "string",
                description: "The code of the language these strings are written in.",
                format: "language"
              },
              name: {
                type: "string",
                description: "A short human-readable name for the label.",
                maxGraphemes: 64,
                maxLength: 640
              },
              description: {
                type: "string",
                description: "A longer description of what the label means and why it might be applied.",
                maxGraphemes: 1e4,
                maxLength: 1e5
              }
            }
          },
          labelValue: {
            type: "string",
            knownValues: [
              "!hide",
              "!no-promote",
              "!warn",
              "!no-unauthenticated",
              "dmca-violation",
              "doxxing",
              "porn",
              "sexual",
              "nudity",
              "nsfl",
              "gore"
            ]
          }
        }
      },
      ComAtprotoLabelQueryLabels: {
        lexicon: 1,
        id: "com.atproto.label.queryLabels",
        defs: {
          main: {
            type: "query",
            description: "Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.",
            parameters: {
              type: "params",
              required: ["uriPatterns"],
              properties: {
                uriPatterns: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI."
                },
                sources: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "did"
                  },
                  description: "Optional list of label sources (DIDs) to filter on."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 250,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["labels"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  labels: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.label.defs#label"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoLabelSubscribeLabels: {
        lexicon: 1,
        id: "com.atproto.label.subscribeLabels",
        defs: {
          main: {
            type: "subscription",
            description: "Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.",
            parameters: {
              type: "params",
              properties: {
                cursor: {
                  type: "integer",
                  description: "The last known event seq number to backfill from."
                }
              }
            },
            message: {
              schema: {
                type: "union",
                refs: [
                  "lex:com.atproto.label.subscribeLabels#labels",
                  "lex:com.atproto.label.subscribeLabels#info"
                ]
              }
            },
            errors: [
              {
                name: "FutureCursor"
              }
            ]
          },
          labels: {
            type: "object",
            required: ["seq", "labels"],
            properties: {
              seq: {
                type: "integer"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              }
            }
          },
          info: {
            type: "object",
            required: ["name"],
            properties: {
              name: {
                type: "string",
                knownValues: ["OutdatedCursor"]
              },
              message: {
                type: "string"
              }
            }
          }
        }
      },
      ComAtprotoModerationCreateReport: {
        lexicon: 1,
        id: "com.atproto.moderation.createReport",
        defs: {
          main: {
            type: "procedure",
            description: "Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["reasonType", "subject"],
                properties: {
                  reasonType: {
                    type: "ref",
                    description: "Indicates the broad category of violation the report is for.",
                    ref: "lex:com.atproto.moderation.defs#reasonType"
                  },
                  reason: {
                    type: "string",
                    maxGraphemes: 2e3,
                    maxLength: 2e4,
                    description: "Additional context about the content and violation."
                  },
                  subject: {
                    type: "union",
                    refs: [
                      "lex:com.atproto.admin.defs#repoRef",
                      "lex:com.atproto.repo.strongRef"
                    ]
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: [
                  "id",
                  "reasonType",
                  "subject",
                  "reportedBy",
                  "createdAt"
                ],
                properties: {
                  id: {
                    type: "integer"
                  },
                  reasonType: {
                    type: "ref",
                    ref: "lex:com.atproto.moderation.defs#reasonType"
                  },
                  reason: {
                    type: "string",
                    maxGraphemes: 2e3,
                    maxLength: 2e4
                  },
                  subject: {
                    type: "union",
                    refs: [
                      "lex:com.atproto.admin.defs#repoRef",
                      "lex:com.atproto.repo.strongRef"
                    ]
                  },
                  reportedBy: {
                    type: "string",
                    format: "did"
                  },
                  createdAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoModerationDefs: {
        lexicon: 1,
        id: "com.atproto.moderation.defs",
        defs: {
          reasonType: {
            type: "string",
            knownValues: [
              "com.atproto.moderation.defs#reasonSpam",
              "com.atproto.moderation.defs#reasonViolation",
              "com.atproto.moderation.defs#reasonMisleading",
              "com.atproto.moderation.defs#reasonSexual",
              "com.atproto.moderation.defs#reasonRude",
              "com.atproto.moderation.defs#reasonOther",
              "com.atproto.moderation.defs#reasonAppeal"
            ]
          },
          reasonSpam: {
            type: "token",
            description: "Spam: frequent unwanted promotion, replies, mentions"
          },
          reasonViolation: {
            type: "token",
            description: "Direct violation of server rules, laws, terms of service"
          },
          reasonMisleading: {
            type: "token",
            description: "Misleading identity, affiliation, or content"
          },
          reasonSexual: {
            type: "token",
            description: "Unwanted or mislabeled sexual content"
          },
          reasonRude: {
            type: "token",
            description: "Rude, harassing, explicit, or otherwise unwelcoming behavior"
          },
          reasonOther: {
            type: "token",
            description: "Other: reports not falling under another report category"
          },
          reasonAppeal: {
            type: "token",
            description: "Appeal: appeal a previously taken moderation action"
          }
        }
      },
      ComAtprotoRepoApplyWrites: {
        lexicon: 1,
        id: "com.atproto.repo.applyWrites",
        defs: {
          main: {
            type: "procedure",
            description: "Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["repo", "writes"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo (aka, current account)."
                  },
                  validate: {
                    type: "boolean",
                    description: "Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons."
                  },
                  writes: {
                    type: "array",
                    items: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.repo.applyWrites#create",
                        "lex:com.atproto.repo.applyWrites#update",
                        "lex:com.atproto.repo.applyWrites#delete"
                      ],
                      closed: true
                    }
                  },
                  swapCommit: {
                    type: "string",
                    description: "If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.",
                    format: "cid"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: [],
                properties: {
                  commit: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.defs#commitMeta"
                  },
                  results: {
                    type: "array",
                    items: {
                      type: "union",
                      refs: [
                        "lex:com.atproto.repo.applyWrites#createResult",
                        "lex:com.atproto.repo.applyWrites#updateResult",
                        "lex:com.atproto.repo.applyWrites#deleteResult"
                      ],
                      closed: true
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "InvalidSwap",
                description: "Indicates that the 'swapCommit' parameter did not match current commit."
              }
            ]
          },
          create: {
            type: "object",
            description: "Operation which creates a new record.",
            required: ["collection", "value"],
            properties: {
              collection: {
                type: "string",
                format: "nsid"
              },
              rkey: {
                type: "string",
                maxLength: 512
              },
              value: {
                type: "unknown"
              }
            }
          },
          update: {
            type: "object",
            description: "Operation which updates an existing record.",
            required: ["collection", "rkey", "value"],
            properties: {
              collection: {
                type: "string",
                format: "nsid"
              },
              rkey: {
                type: "string"
              },
              value: {
                type: "unknown"
              }
            }
          },
          delete: {
            type: "object",
            description: "Operation which deletes an existing record.",
            required: ["collection", "rkey"],
            properties: {
              collection: {
                type: "string",
                format: "nsid"
              },
              rkey: {
                type: "string"
              }
            }
          },
          createResult: {
            type: "object",
            required: ["uri", "cid"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              validationStatus: {
                type: "string",
                knownValues: ["valid", "unknown"]
              }
            }
          },
          updateResult: {
            type: "object",
            required: ["uri", "cid"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              validationStatus: {
                type: "string",
                knownValues: ["valid", "unknown"]
              }
            }
          },
          deleteResult: {
            type: "object",
            required: [],
            properties: {}
          }
        }
      },
      ComAtprotoRepoCreateRecord: {
        lexicon: 1,
        id: "com.atproto.repo.createRecord",
        defs: {
          main: {
            type: "procedure",
            description: "Create a single new repository record. Requires auth, implemented by PDS.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["repo", "collection", "record"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo (aka, current account)."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record collection."
                  },
                  rkey: {
                    type: "string",
                    description: "The Record Key.",
                    maxLength: 512
                  },
                  validate: {
                    type: "boolean",
                    description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."
                  },
                  record: {
                    type: "unknown",
                    description: "The record itself. Must contain a $type field."
                  },
                  swapCommit: {
                    type: "string",
                    format: "cid",
                    description: "Compare and swap with the previous commit by CID."
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["uri", "cid"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  },
                  commit: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.defs#commitMeta"
                  },
                  validationStatus: {
                    type: "string",
                    knownValues: ["valid", "unknown"]
                  }
                }
              }
            },
            errors: [
              {
                name: "InvalidSwap",
                description: "Indicates that 'swapCommit' didn't match current repo commit."
              }
            ]
          }
        }
      },
      ComAtprotoRepoDefs: {
        lexicon: 1,
        id: "com.atproto.repo.defs",
        defs: {
          commitMeta: {
            type: "object",
            required: ["cid", "rev"],
            properties: {
              cid: {
                type: "string",
                format: "cid"
              },
              rev: {
                type: "string"
              }
            }
          }
        }
      },
      ComAtprotoRepoDeleteRecord: {
        lexicon: 1,
        id: "com.atproto.repo.deleteRecord",
        defs: {
          main: {
            type: "procedure",
            description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["repo", "collection", "rkey"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo (aka, current account)."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record collection."
                  },
                  rkey: {
                    type: "string",
                    description: "The Record Key."
                  },
                  swapRecord: {
                    type: "string",
                    format: "cid",
                    description: "Compare and swap with the previous record by CID."
                  },
                  swapCommit: {
                    type: "string",
                    format: "cid",
                    description: "Compare and swap with the previous commit by CID."
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {
                  commit: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.defs#commitMeta"
                  }
                }
              }
            },
            errors: [
              {
                name: "InvalidSwap"
              }
            ]
          }
        }
      },
      ComAtprotoRepoDescribeRepo: {
        lexicon: 1,
        id: "com.atproto.repo.describeRepo",
        defs: {
          main: {
            type: "query",
            description: "Get information about an account and repository, including the list of collections. Does not require auth.",
            parameters: {
              type: "params",
              required: ["repo"],
              properties: {
                repo: {
                  type: "string",
                  format: "at-identifier",
                  description: "The handle or DID of the repo."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: [
                  "handle",
                  "did",
                  "didDoc",
                  "collections",
                  "handleIsCorrect"
                ],
                properties: {
                  handle: {
                    type: "string",
                    format: "handle"
                  },
                  did: {
                    type: "string",
                    format: "did"
                  },
                  didDoc: {
                    type: "unknown",
                    description: "The complete DID document for this account."
                  },
                  collections: {
                    type: "array",
                    description: "List of all the collections (NSIDs) for which this repo contains at least one record.",
                    items: {
                      type: "string",
                      format: "nsid"
                    }
                  },
                  handleIsCorrect: {
                    type: "boolean",
                    description: "Indicates if handle is currently valid (resolves bi-directionally)"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoRepoGetRecord: {
        lexicon: 1,
        id: "com.atproto.repo.getRecord",
        defs: {
          main: {
            type: "query",
            description: "Get a single record from a repository. Does not require auth.",
            parameters: {
              type: "params",
              required: ["repo", "collection", "rkey"],
              properties: {
                repo: {
                  type: "string",
                  format: "at-identifier",
                  description: "The handle or DID of the repo."
                },
                collection: {
                  type: "string",
                  format: "nsid",
                  description: "The NSID of the record collection."
                },
                rkey: {
                  type: "string",
                  description: "The Record Key."
                },
                cid: {
                  type: "string",
                  format: "cid",
                  description: "The CID of the version of the record. If not specified, then return the most recent version."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["uri", "value"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  },
                  value: {
                    type: "unknown"
                  }
                }
              }
            },
            errors: [
              {
                name: "RecordNotFound"
              }
            ]
          }
        }
      },
      ComAtprotoRepoImportRepo: {
        lexicon: 1,
        id: "com.atproto.repo.importRepo",
        defs: {
          main: {
            type: "procedure",
            description: "Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.",
            input: {
              encoding: "application/vnd.ipld.car"
            }
          }
        }
      },
      ComAtprotoRepoListMissingBlobs: {
        lexicon: 1,
        id: "com.atproto.repo.listMissingBlobs",
        defs: {
          main: {
            type: "query",
            description: "Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 1e3,
                  default: 500
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["blobs"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  blobs: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.repo.listMissingBlobs#recordBlob"
                    }
                  }
                }
              }
            }
          },
          recordBlob: {
            type: "object",
            required: ["cid", "recordUri"],
            properties: {
              cid: {
                type: "string",
                format: "cid"
              },
              recordUri: {
                type: "string",
                format: "at-uri"
              }
            }
          }
        }
      },
      ComAtprotoRepoListRecords: {
        lexicon: 1,
        id: "com.atproto.repo.listRecords",
        defs: {
          main: {
            type: "query",
            description: "List a range of records in a repository, matching a specific collection. Does not require auth.",
            parameters: {
              type: "params",
              required: ["repo", "collection"],
              properties: {
                repo: {
                  type: "string",
                  format: "at-identifier",
                  description: "The handle or DID of the repo."
                },
                collection: {
                  type: "string",
                  format: "nsid",
                  description: "The NSID of the record type."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50,
                  description: "The number of records to return."
                },
                cursor: {
                  type: "string"
                },
                rkeyStart: {
                  type: "string",
                  description: "DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)"
                },
                rkeyEnd: {
                  type: "string",
                  description: "DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)"
                },
                reverse: {
                  type: "boolean",
                  description: "Flag to reverse the order of the returned records."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["records"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  records: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.repo.listRecords#record"
                    }
                  }
                }
              }
            }
          },
          record: {
            type: "object",
            required: ["uri", "cid", "value"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              value: {
                type: "unknown"
              }
            }
          }
        }
      },
      ComAtprotoRepoPutRecord: {
        lexicon: 1,
        id: "com.atproto.repo.putRecord",
        defs: {
          main: {
            type: "procedure",
            description: "Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["repo", "collection", "rkey", "record"],
                nullable: ["swapRecord"],
                properties: {
                  repo: {
                    type: "string",
                    format: "at-identifier",
                    description: "The handle or DID of the repo (aka, current account)."
                  },
                  collection: {
                    type: "string",
                    format: "nsid",
                    description: "The NSID of the record collection."
                  },
                  rkey: {
                    type: "string",
                    description: "The Record Key.",
                    maxLength: 512
                  },
                  validate: {
                    type: "boolean",
                    description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons."
                  },
                  record: {
                    type: "unknown",
                    description: "The record to write."
                  },
                  swapRecord: {
                    type: "string",
                    format: "cid",
                    description: "Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation"
                  },
                  swapCommit: {
                    type: "string",
                    format: "cid",
                    description: "Compare and swap with the previous commit by CID."
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["uri", "cid"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  },
                  commit: {
                    type: "ref",
                    ref: "lex:com.atproto.repo.defs#commitMeta"
                  },
                  validationStatus: {
                    type: "string",
                    knownValues: ["valid", "unknown"]
                  }
                }
              }
            },
            errors: [
              {
                name: "InvalidSwap"
              }
            ]
          }
        }
      },
      ComAtprotoRepoStrongRef: {
        lexicon: 1,
        id: "com.atproto.repo.strongRef",
        description: "A URI with a content-hash fingerprint.",
        defs: {
          main: {
            type: "object",
            required: ["uri", "cid"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              }
            }
          }
        }
      },
      ComAtprotoRepoUploadBlob: {
        lexicon: 1,
        id: "com.atproto.repo.uploadBlob",
        defs: {
          main: {
            type: "procedure",
            description: "Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.",
            input: {
              encoding: "*/*"
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["blob"],
                properties: {
                  blob: {
                    type: "blob"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerActivateAccount: {
        lexicon: 1,
        id: "com.atproto.server.activateAccount",
        defs: {
          main: {
            type: "procedure",
            description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup."
          }
        }
      },
      ComAtprotoServerCheckAccountStatus: {
        lexicon: 1,
        id: "com.atproto.server.checkAccountStatus",
        defs: {
          main: {
            type: "query",
            description: "Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: [
                  "activated",
                  "validDid",
                  "repoCommit",
                  "repoRev",
                  "repoBlocks",
                  "indexedRecords",
                  "privateStateValues",
                  "expectedBlobs",
                  "importedBlobs"
                ],
                properties: {
                  activated: {
                    type: "boolean"
                  },
                  validDid: {
                    type: "boolean"
                  },
                  repoCommit: {
                    type: "string",
                    format: "cid"
                  },
                  repoRev: {
                    type: "string"
                  },
                  repoBlocks: {
                    type: "integer"
                  },
                  indexedRecords: {
                    type: "integer"
                  },
                  privateStateValues: {
                    type: "integer"
                  },
                  expectedBlobs: {
                    type: "integer"
                  },
                  importedBlobs: {
                    type: "integer"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerConfirmEmail: {
        lexicon: 1,
        id: "com.atproto.server.confirmEmail",
        defs: {
          main: {
            type: "procedure",
            description: "Confirm an email using a token from com.atproto.server.requestEmailConfirmation.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["email", "token"],
                properties: {
                  email: {
                    type: "string"
                  },
                  token: {
                    type: "string"
                  }
                }
              }
            },
            errors: [
              {
                name: "AccountNotFound"
              },
              {
                name: "ExpiredToken"
              },
              {
                name: "InvalidToken"
              },
              {
                name: "InvalidEmail"
              }
            ]
          }
        }
      },
      ComAtprotoServerCreateAccount: {
        lexicon: 1,
        id: "com.atproto.server.createAccount",
        defs: {
          main: {
            type: "procedure",
            description: "Create an account. Implemented by PDS.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["handle"],
                properties: {
                  email: {
                    type: "string"
                  },
                  handle: {
                    type: "string",
                    format: "handle",
                    description: "Requested handle for the account."
                  },
                  did: {
                    type: "string",
                    format: "did",
                    description: "Pre-existing atproto DID, being imported to a new account."
                  },
                  inviteCode: {
                    type: "string"
                  },
                  verificationCode: {
                    type: "string"
                  },
                  verificationPhone: {
                    type: "string"
                  },
                  password: {
                    type: "string",
                    description: "Initial account password. May need to meet instance-specific password strength requirements."
                  },
                  recoveryKey: {
                    type: "string",
                    description: "DID PLC rotation key (aka, recovery key) to be included in PLC creation operation."
                  },
                  plcOp: {
                    type: "unknown",
                    description: "A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented."
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                description: "Account login session returned on successful account creation.",
                required: ["accessJwt", "refreshJwt", "handle", "did"],
                properties: {
                  accessJwt: {
                    type: "string"
                  },
                  refreshJwt: {
                    type: "string"
                  },
                  handle: {
                    type: "string",
                    format: "handle"
                  },
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID of the new account."
                  },
                  didDoc: {
                    type: "unknown",
                    description: "Complete DID document."
                  }
                }
              }
            },
            errors: [
              {
                name: "InvalidHandle"
              },
              {
                name: "InvalidPassword"
              },
              {
                name: "InvalidInviteCode"
              },
              {
                name: "HandleNotAvailable"
              },
              {
                name: "UnsupportedDomain"
              },
              {
                name: "UnresolvableDid"
              },
              {
                name: "IncompatibleDidDoc"
              }
            ]
          }
        }
      },
      ComAtprotoServerCreateAppPassword: {
        lexicon: 1,
        id: "com.atproto.server.createAppPassword",
        defs: {
          main: {
            type: "procedure",
            description: "Create an App Password.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["name"],
                properties: {
                  name: {
                    type: "string",
                    description: "A short name for the App Password, to help distinguish them."
                  },
                  privileged: {
                    type: "boolean",
                    description: "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients."
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:com.atproto.server.createAppPassword#appPassword"
              }
            },
            errors: [
              {
                name: "AccountTakedown"
              }
            ]
          },
          appPassword: {
            type: "object",
            required: ["name", "password", "createdAt"],
            properties: {
              name: {
                type: "string"
              },
              password: {
                type: "string"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              privileged: {
                type: "boolean"
              }
            }
          }
        }
      },
      ComAtprotoServerCreateInviteCode: {
        lexicon: 1,
        id: "com.atproto.server.createInviteCode",
        defs: {
          main: {
            type: "procedure",
            description: "Create an invite code.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["useCount"],
                properties: {
                  useCount: {
                    type: "integer"
                  },
                  forAccount: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["code"],
                properties: {
                  code: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerCreateInviteCodes: {
        lexicon: 1,
        id: "com.atproto.server.createInviteCodes",
        defs: {
          main: {
            type: "procedure",
            description: "Create invite codes.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["codeCount", "useCount"],
                properties: {
                  codeCount: {
                    type: "integer",
                    default: 1
                  },
                  useCount: {
                    type: "integer"
                  },
                  forAccounts: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "did"
                    }
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["codes"],
                properties: {
                  codes: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.server.createInviteCodes#accountCodes"
                    }
                  }
                }
              }
            }
          },
          accountCodes: {
            type: "object",
            required: ["account", "codes"],
            properties: {
              account: {
                type: "string"
              },
              codes: {
                type: "array",
                items: {
                  type: "string"
                }
              }
            }
          }
        }
      },
      ComAtprotoServerCreateSession: {
        lexicon: 1,
        id: "com.atproto.server.createSession",
        defs: {
          main: {
            type: "procedure",
            description: "Create an authentication session.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["identifier", "password"],
                properties: {
                  identifier: {
                    type: "string",
                    description: "Handle or other identifier supported by the server for the authenticating user."
                  },
                  password: {
                    type: "string"
                  },
                  authFactorToken: {
                    type: "string"
                  },
                  allowTakendown: {
                    type: "boolean",
                    description: "When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["accessJwt", "refreshJwt", "handle", "did"],
                properties: {
                  accessJwt: {
                    type: "string"
                  },
                  refreshJwt: {
                    type: "string"
                  },
                  handle: {
                    type: "string",
                    format: "handle"
                  },
                  did: {
                    type: "string",
                    format: "did"
                  },
                  didDoc: {
                    type: "unknown"
                  },
                  email: {
                    type: "string"
                  },
                  emailConfirmed: {
                    type: "boolean"
                  },
                  emailAuthFactor: {
                    type: "boolean"
                  },
                  active: {
                    type: "boolean"
                  },
                  status: {
                    type: "string",
                    description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                    knownValues: ["takendown", "suspended", "deactivated"]
                  }
                }
              }
            },
            errors: [
              {
                name: "AccountTakedown"
              },
              {
                name: "AuthFactorTokenRequired"
              }
            ]
          }
        }
      },
      ComAtprotoServerDeactivateAccount: {
        lexicon: 1,
        id: "com.atproto.server.deactivateAccount",
        defs: {
          main: {
            type: "procedure",
            description: "Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {
                  deleteAfter: {
                    type: "string",
                    format: "datetime",
                    description: "A recommendation to server as to how long they should hold onto the deactivated account before deleting."
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerDefs: {
        lexicon: 1,
        id: "com.atproto.server.defs",
        defs: {
          inviteCode: {
            type: "object",
            required: [
              "code",
              "available",
              "disabled",
              "forAccount",
              "createdBy",
              "createdAt",
              "uses"
            ],
            properties: {
              code: {
                type: "string"
              },
              available: {
                type: "integer"
              },
              disabled: {
                type: "boolean"
              },
              forAccount: {
                type: "string"
              },
              createdBy: {
                type: "string"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              uses: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCodeUse"
                }
              }
            }
          },
          inviteCodeUse: {
            type: "object",
            required: ["usedBy", "usedAt"],
            properties: {
              usedBy: {
                type: "string",
                format: "did"
              },
              usedAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      },
      ComAtprotoServerDeleteAccount: {
        lexicon: 1,
        id: "com.atproto.server.deleteAccount",
        defs: {
          main: {
            type: "procedure",
            description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did", "password", "token"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  password: {
                    type: "string"
                  },
                  token: {
                    type: "string"
                  }
                }
              }
            },
            errors: [
              {
                name: "ExpiredToken"
              },
              {
                name: "InvalidToken"
              }
            ]
          }
        }
      },
      ComAtprotoServerDeleteSession: {
        lexicon: 1,
        id: "com.atproto.server.deleteSession",
        defs: {
          main: {
            type: "procedure",
            description: "Delete the current session. Requires auth."
          }
        }
      },
      ComAtprotoServerDescribeServer: {
        lexicon: 1,
        id: "com.atproto.server.describeServer",
        defs: {
          main: {
            type: "query",
            description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did", "availableUserDomains"],
                properties: {
                  inviteCodeRequired: {
                    type: "boolean",
                    description: "If true, an invite code must be supplied to create an account on this instance."
                  },
                  phoneVerificationRequired: {
                    type: "boolean",
                    description: "If true, a phone verification token must be supplied to create an account on this instance."
                  },
                  availableUserDomains: {
                    type: "array",
                    description: "List of domain suffixes that can be used in account handles.",
                    items: {
                      type: "string"
                    }
                  },
                  links: {
                    type: "ref",
                    description: "URLs of service policy documents.",
                    ref: "lex:com.atproto.server.describeServer#links"
                  },
                  contact: {
                    type: "ref",
                    description: "Contact information",
                    ref: "lex:com.atproto.server.describeServer#contact"
                  },
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            }
          },
          links: {
            type: "object",
            properties: {
              privacyPolicy: {
                type: "string",
                format: "uri"
              },
              termsOfService: {
                type: "string",
                format: "uri"
              }
            }
          },
          contact: {
            type: "object",
            properties: {
              email: {
                type: "string"
              }
            }
          }
        }
      },
      ComAtprotoServerGetAccountInviteCodes: {
        lexicon: 1,
        id: "com.atproto.server.getAccountInviteCodes",
        defs: {
          main: {
            type: "query",
            description: "Get all invite codes for the current account. Requires auth.",
            parameters: {
              type: "params",
              properties: {
                includeUsed: {
                  type: "boolean",
                  default: true
                },
                createAvailable: {
                  type: "boolean",
                  default: true,
                  description: "Controls whether any new 'earned' but not 'created' invites should be created."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["codes"],
                properties: {
                  codes: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.server.defs#inviteCode"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "DuplicateCreate"
              }
            ]
          }
        }
      },
      ComAtprotoServerGetServiceAuth: {
        lexicon: 1,
        id: "com.atproto.server.getServiceAuth",
        defs: {
          main: {
            type: "query",
            description: "Get a signed token on behalf of the requesting DID for the requested service.",
            parameters: {
              type: "params",
              required: ["aud"],
              properties: {
                aud: {
                  type: "string",
                  format: "did",
                  description: "The DID of the service that the token will be used to authenticate with"
                },
                exp: {
                  type: "integer",
                  description: "The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope."
                },
                lxm: {
                  type: "string",
                  format: "nsid",
                  description: "Lexicon (XRPC) method to bind the requested token to"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["token"],
                properties: {
                  token: {
                    type: "string"
                  }
                }
              }
            },
            errors: [
              {
                name: "BadExpiration",
                description: "Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes."
              }
            ]
          }
        }
      },
      ComAtprotoServerGetSession: {
        lexicon: 1,
        id: "com.atproto.server.getSession",
        defs: {
          main: {
            type: "query",
            description: "Get information about the current auth session. Requires auth.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["handle", "did"],
                properties: {
                  handle: {
                    type: "string",
                    format: "handle"
                  },
                  did: {
                    type: "string",
                    format: "did"
                  },
                  email: {
                    type: "string"
                  },
                  emailConfirmed: {
                    type: "boolean"
                  },
                  emailAuthFactor: {
                    type: "boolean"
                  },
                  didDoc: {
                    type: "unknown"
                  },
                  active: {
                    type: "boolean"
                  },
                  status: {
                    type: "string",
                    description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                    knownValues: ["takendown", "suspended", "deactivated"]
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerListAppPasswords: {
        lexicon: 1,
        id: "com.atproto.server.listAppPasswords",
        defs: {
          main: {
            type: "query",
            description: "List all App Passwords.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["passwords"],
                properties: {
                  passwords: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.server.listAppPasswords#appPassword"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "AccountTakedown"
              }
            ]
          },
          appPassword: {
            type: "object",
            required: ["name", "createdAt"],
            properties: {
              name: {
                type: "string"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              privileged: {
                type: "boolean"
              }
            }
          }
        }
      },
      ComAtprotoServerRefreshSession: {
        lexicon: 1,
        id: "com.atproto.server.refreshSession",
        defs: {
          main: {
            type: "procedure",
            description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["accessJwt", "refreshJwt", "handle", "did"],
                properties: {
                  accessJwt: {
                    type: "string"
                  },
                  refreshJwt: {
                    type: "string"
                  },
                  handle: {
                    type: "string",
                    format: "handle"
                  },
                  did: {
                    type: "string",
                    format: "did"
                  },
                  didDoc: {
                    type: "unknown"
                  },
                  active: {
                    type: "boolean"
                  },
                  status: {
                    type: "string",
                    description: "Hosting status of the account. If not specified, then assume 'active'.",
                    knownValues: ["takendown", "suspended", "deactivated"]
                  }
                }
              }
            },
            errors: [
              {
                name: "AccountTakedown"
              }
            ]
          }
        }
      },
      ComAtprotoServerRequestAccountDelete: {
        lexicon: 1,
        id: "com.atproto.server.requestAccountDelete",
        defs: {
          main: {
            type: "procedure",
            description: "Initiate a user account deletion via email."
          }
        }
      },
      ComAtprotoServerRequestEmailConfirmation: {
        lexicon: 1,
        id: "com.atproto.server.requestEmailConfirmation",
        defs: {
          main: {
            type: "procedure",
            description: "Request an email with a code to confirm ownership of email."
          }
        }
      },
      ComAtprotoServerRequestEmailUpdate: {
        lexicon: 1,
        id: "com.atproto.server.requestEmailUpdate",
        defs: {
          main: {
            type: "procedure",
            description: "Request a token in order to update email.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["tokenRequired"],
                properties: {
                  tokenRequired: {
                    type: "boolean"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerRequestPasswordReset: {
        lexicon: 1,
        id: "com.atproto.server.requestPasswordReset",
        defs: {
          main: {
            type: "procedure",
            description: "Initiate a user account password reset via email.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["email"],
                properties: {
                  email: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerReserveSigningKey: {
        lexicon: 1,
        id: "com.atproto.server.reserveSigningKey",
        defs: {
          main: {
            type: "procedure",
            description: "Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {
                  did: {
                    type: "string",
                    format: "did",
                    description: "The DID to reserve a key for."
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["signingKey"],
                properties: {
                  signingKey: {
                    type: "string",
                    description: "The public key for the reserved signing key, in did:key serialization."
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerResetPassword: {
        lexicon: 1,
        id: "com.atproto.server.resetPassword",
        defs: {
          main: {
            type: "procedure",
            description: "Reset a user account password using a token.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["token", "password"],
                properties: {
                  token: {
                    type: "string"
                  },
                  password: {
                    type: "string"
                  }
                }
              }
            },
            errors: [
              {
                name: "ExpiredToken"
              },
              {
                name: "InvalidToken"
              }
            ]
          }
        }
      },
      ComAtprotoServerRevokeAppPassword: {
        lexicon: 1,
        id: "com.atproto.server.revokeAppPassword",
        defs: {
          main: {
            type: "procedure",
            description: "Revoke an App Password by name.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["name"],
                properties: {
                  name: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoServerUpdateEmail: {
        lexicon: 1,
        id: "com.atproto.server.updateEmail",
        defs: {
          main: {
            type: "procedure",
            description: "Update an account's email.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["email"],
                properties: {
                  email: {
                    type: "string"
                  },
                  emailAuthFactor: {
                    type: "boolean"
                  },
                  token: {
                    type: "string",
                    description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed."
                  }
                }
              }
            },
            errors: [
              {
                name: "ExpiredToken"
              },
              {
                name: "InvalidToken"
              },
              {
                name: "TokenRequired"
              }
            ]
          }
        }
      },
      ComAtprotoSyncGetBlob: {
        lexicon: 1,
        id: "com.atproto.sync.getBlob",
        defs: {
          main: {
            type: "query",
            description: "Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.",
            parameters: {
              type: "params",
              required: ["did", "cid"],
              properties: {
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID of the account."
                },
                cid: {
                  type: "string",
                  format: "cid",
                  description: "The CID of the blob to fetch"
                }
              }
            },
            output: {
              encoding: "*/*"
            },
            errors: [
              {
                name: "BlobNotFound"
              },
              {
                name: "RepoNotFound"
              },
              {
                name: "RepoTakendown"
              },
              {
                name: "RepoSuspended"
              },
              {
                name: "RepoDeactivated"
              }
            ]
          }
        }
      },
      ComAtprotoSyncGetBlocks: {
        lexicon: 1,
        id: "com.atproto.sync.getBlocks",
        defs: {
          main: {
            type: "query",
            description: "Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.",
            parameters: {
              type: "params",
              required: ["did", "cids"],
              properties: {
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID of the repo."
                },
                cids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "cid"
                  }
                }
              }
            },
            output: {
              encoding: "application/vnd.ipld.car"
            },
            errors: [
              {
                name: "BlockNotFound"
              },
              {
                name: "RepoNotFound"
              },
              {
                name: "RepoTakendown"
              },
              {
                name: "RepoSuspended"
              },
              {
                name: "RepoDeactivated"
              }
            ]
          }
        }
      },
      ComAtprotoSyncGetCheckout: {
        lexicon: 1,
        id: "com.atproto.sync.getCheckout",
        defs: {
          main: {
            type: "query",
            description: "DEPRECATED - please use com.atproto.sync.getRepo instead",
            parameters: {
              type: "params",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID of the repo."
                }
              }
            },
            output: {
              encoding: "application/vnd.ipld.car"
            }
          }
        }
      },
      ComAtprotoSyncGetHead: {
        lexicon: 1,
        id: "com.atproto.sync.getHead",
        defs: {
          main: {
            type: "query",
            description: "DEPRECATED - please use com.atproto.sync.getLatestCommit instead",
            parameters: {
              type: "params",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID of the repo."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["root"],
                properties: {
                  root: {
                    type: "string",
                    format: "cid"
                  }
                }
              }
            },
            errors: [
              {
                name: "HeadNotFound"
              }
            ]
          }
        }
      },
      ComAtprotoSyncGetLatestCommit: {
        lexicon: 1,
        id: "com.atproto.sync.getLatestCommit",
        defs: {
          main: {
            type: "query",
            description: "Get the current commit CID & revision of the specified repo. Does not require auth.",
            parameters: {
              type: "params",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID of the repo."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["cid", "rev"],
                properties: {
                  cid: {
                    type: "string",
                    format: "cid"
                  },
                  rev: {
                    type: "string"
                  }
                }
              }
            },
            errors: [
              {
                name: "RepoNotFound"
              },
              {
                name: "RepoTakendown"
              },
              {
                name: "RepoSuspended"
              },
              {
                name: "RepoDeactivated"
              }
            ]
          }
        }
      },
      ComAtprotoSyncGetRecord: {
        lexicon: 1,
        id: "com.atproto.sync.getRecord",
        defs: {
          main: {
            type: "query",
            description: "Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.",
            parameters: {
              type: "params",
              required: ["did", "collection", "rkey"],
              properties: {
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID of the repo."
                },
                collection: {
                  type: "string",
                  format: "nsid"
                },
                rkey: {
                  type: "string",
                  description: "Record Key"
                },
                commit: {
                  type: "string",
                  format: "cid",
                  description: "DEPRECATED: referenced a repo commit by CID, and retrieved record as of that commit"
                }
              }
            },
            output: {
              encoding: "application/vnd.ipld.car"
            },
            errors: [
              {
                name: "RecordNotFound"
              },
              {
                name: "RepoNotFound"
              },
              {
                name: "RepoTakendown"
              },
              {
                name: "RepoSuspended"
              },
              {
                name: "RepoDeactivated"
              }
            ]
          }
        }
      },
      ComAtprotoSyncGetRepo: {
        lexicon: 1,
        id: "com.atproto.sync.getRepo",
        defs: {
          main: {
            type: "query",
            description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.",
            parameters: {
              type: "params",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID of the repo."
                },
                since: {
                  type: "string",
                  description: "The revision ('rev') of the repo to create a diff from."
                }
              }
            },
            output: {
              encoding: "application/vnd.ipld.car"
            },
            errors: [
              {
                name: "RepoNotFound"
              },
              {
                name: "RepoTakendown"
              },
              {
                name: "RepoSuspended"
              },
              {
                name: "RepoDeactivated"
              }
            ]
          }
        }
      },
      ComAtprotoSyncGetRepoStatus: {
        lexicon: 1,
        id: "com.atproto.sync.getRepoStatus",
        defs: {
          main: {
            type: "query",
            description: "Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.",
            parameters: {
              type: "params",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID of the repo."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did", "active"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  active: {
                    type: "boolean"
                  },
                  status: {
                    type: "string",
                    description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                    knownValues: ["takendown", "suspended", "deactivated"]
                  },
                  rev: {
                    type: "string",
                    description: "Optional field, the current rev of the repo, if active=true"
                  }
                }
              }
            },
            errors: [
              {
                name: "RepoNotFound"
              }
            ]
          }
        }
      },
      ComAtprotoSyncListBlobs: {
        lexicon: 1,
        id: "com.atproto.sync.listBlobs",
        defs: {
          main: {
            type: "query",
            description: "List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.",
            parameters: {
              type: "params",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did",
                  description: "The DID of the repo."
                },
                since: {
                  type: "string",
                  description: "Optional revision of the repo to list blobs since."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 1e3,
                  default: 500
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["cids"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  cids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "cid"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "RepoNotFound"
              },
              {
                name: "RepoTakendown"
              },
              {
                name: "RepoSuspended"
              },
              {
                name: "RepoDeactivated"
              }
            ]
          }
        }
      },
      ComAtprotoSyncListRepos: {
        lexicon: 1,
        id: "com.atproto.sync.listRepos",
        defs: {
          main: {
            type: "query",
            description: "Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 1e3,
                  default: 500
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["repos"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  repos: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.sync.listRepos#repo"
                    }
                  }
                }
              }
            }
          },
          repo: {
            type: "object",
            required: ["did", "head", "rev"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              head: {
                type: "string",
                format: "cid",
                description: "Current repo commit CID"
              },
              rev: {
                type: "string"
              },
              active: {
                type: "boolean"
              },
              status: {
                type: "string",
                description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.",
                knownValues: ["takendown", "suspended", "deactivated"]
              }
            }
          }
        }
      },
      ComAtprotoSyncNotifyOfUpdate: {
        lexicon: 1,
        id: "com.atproto.sync.notifyOfUpdate",
        defs: {
          main: {
            type: "procedure",
            description: "Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["hostname"],
                properties: {
                  hostname: {
                    type: "string",
                    description: "Hostname of the current service (usually a PDS) that is notifying of update."
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoSyncRequestCrawl: {
        lexicon: 1,
        id: "com.atproto.sync.requestCrawl",
        defs: {
          main: {
            type: "procedure",
            description: "Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["hostname"],
                properties: {
                  hostname: {
                    type: "string",
                    description: "Hostname of the current service (eg, PDS) that is requesting to be crawled."
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoSyncSubscribeRepos: {
        lexicon: 1,
        id: "com.atproto.sync.subscribeRepos",
        defs: {
          main: {
            type: "subscription",
            description: "Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.",
            parameters: {
              type: "params",
              properties: {
                cursor: {
                  type: "integer",
                  description: "The last known event seq number to backfill from."
                }
              }
            },
            message: {
              schema: {
                type: "union",
                refs: [
                  "lex:com.atproto.sync.subscribeRepos#commit",
                  "lex:com.atproto.sync.subscribeRepos#identity",
                  "lex:com.atproto.sync.subscribeRepos#account",
                  "lex:com.atproto.sync.subscribeRepos#handle",
                  "lex:com.atproto.sync.subscribeRepos#migrate",
                  "lex:com.atproto.sync.subscribeRepos#tombstone",
                  "lex:com.atproto.sync.subscribeRepos#info"
                ]
              }
            },
            errors: [
              {
                name: "FutureCursor"
              },
              {
                name: "ConsumerTooSlow",
                description: "If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection."
              }
            ]
          },
          commit: {
            type: "object",
            description: "Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.",
            required: [
              "seq",
              "rebase",
              "tooBig",
              "repo",
              "commit",
              "rev",
              "since",
              "blocks",
              "ops",
              "blobs",
              "time"
            ],
            nullable: ["prev", "since"],
            properties: {
              seq: {
                type: "integer",
                description: "The stream sequence number of this message."
              },
              rebase: {
                type: "boolean",
                description: "DEPRECATED -- unused"
              },
              tooBig: {
                type: "boolean",
                description: "Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data."
              },
              repo: {
                type: "string",
                format: "did",
                description: "The repo this event comes from."
              },
              commit: {
                type: "cid-link",
                description: "Repo commit object CID."
              },
              prev: {
                type: "cid-link",
                description: "DEPRECATED -- unused. WARNING -- nullable and optional; stick with optional to ensure golang interoperability."
              },
              rev: {
                type: "string",
                description: "The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event."
              },
              since: {
                type: "string",
                description: "The rev of the last emitted commit from this repo (if any)."
              },
              blocks: {
                type: "bytes",
                description: "CAR file containing relevant blocks, as a diff since the previous repo state.",
                maxLength: 1e6
              },
              ops: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.sync.subscribeRepos#repoOp",
                  description: "List of repo mutation operations in this commit (eg, records created, updated, or deleted)."
                },
                maxLength: 200
              },
              blobs: {
                type: "array",
                items: {
                  type: "cid-link",
                  description: "List of new blobs (by CID) referenced by records in this commit."
                }
              },
              time: {
                type: "string",
                format: "datetime",
                description: "Timestamp of when this message was originally broadcast."
              }
            }
          },
          identity: {
            type: "object",
            description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.",
            required: ["seq", "did", "time"],
            properties: {
              seq: {
                type: "integer"
              },
              did: {
                type: "string",
                format: "did"
              },
              time: {
                type: "string",
                format: "datetime"
              },
              handle: {
                type: "string",
                format: "handle",
                description: "The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details."
              }
            }
          },
          account: {
            type: "object",
            description: "Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.",
            required: ["seq", "did", "time", "active"],
            properties: {
              seq: {
                type: "integer"
              },
              did: {
                type: "string",
                format: "did"
              },
              time: {
                type: "string",
                format: "datetime"
              },
              active: {
                type: "boolean",
                description: "Indicates that the account has a repository which can be fetched from the host that emitted this event."
              },
              status: {
                type: "string",
                description: "If active=false, this optional field indicates a reason for why the account is not active.",
                knownValues: ["takendown", "suspended", "deleted", "deactivated"]
              }
            }
          },
          handle: {
            type: "object",
            description: "DEPRECATED -- Use #identity event instead",
            required: ["seq", "did", "handle", "time"],
            properties: {
              seq: {
                type: "integer"
              },
              did: {
                type: "string",
                format: "did"
              },
              handle: {
                type: "string",
                format: "handle"
              },
              time: {
                type: "string",
                format: "datetime"
              }
            }
          },
          migrate: {
            type: "object",
            description: "DEPRECATED -- Use #account event instead",
            required: ["seq", "did", "migrateTo", "time"],
            nullable: ["migrateTo"],
            properties: {
              seq: {
                type: "integer"
              },
              did: {
                type: "string",
                format: "did"
              },
              migrateTo: {
                type: "string"
              },
              time: {
                type: "string",
                format: "datetime"
              }
            }
          },
          tombstone: {
            type: "object",
            description: "DEPRECATED -- Use #account event instead",
            required: ["seq", "did", "time"],
            properties: {
              seq: {
                type: "integer"
              },
              did: {
                type: "string",
                format: "did"
              },
              time: {
                type: "string",
                format: "datetime"
              }
            }
          },
          info: {
            type: "object",
            required: ["name"],
            properties: {
              name: {
                type: "string",
                knownValues: ["OutdatedCursor"]
              },
              message: {
                type: "string"
              }
            }
          },
          repoOp: {
            type: "object",
            description: "A repo operation, ie a mutation of a single record.",
            required: ["action", "path", "cid"],
            nullable: ["cid"],
            properties: {
              action: {
                type: "string",
                knownValues: ["create", "update", "delete"]
              },
              path: {
                type: "string"
              },
              cid: {
                type: "cid-link",
                description: "For creates and updates, the new record CID. For deletions, null."
              }
            }
          }
        }
      },
      ComAtprotoTempAddReservedHandle: {
        lexicon: 1,
        id: "com.atproto.temp.addReservedHandle",
        defs: {
          main: {
            type: "procedure",
            description: "Add a handle to the set of reserved handles.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["handle"],
                properties: {
                  handle: {
                    type: "string"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {}
              }
            }
          }
        }
      },
      ComAtprotoTempCheckSignupQueue: {
        lexicon: 1,
        id: "com.atproto.temp.checkSignupQueue",
        defs: {
          main: {
            type: "query",
            description: "Check accounts location in signup queue.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["activated"],
                properties: {
                  activated: {
                    type: "boolean"
                  },
                  placeInQueue: {
                    type: "integer"
                  },
                  estimatedTimeMs: {
                    type: "integer"
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoTempFetchLabels: {
        lexicon: 1,
        id: "com.atproto.temp.fetchLabels",
        defs: {
          main: {
            type: "query",
            description: "DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.",
            parameters: {
              type: "params",
              properties: {
                since: {
                  type: "integer"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 250,
                  default: 50
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["labels"],
                properties: {
                  labels: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.label.defs#label"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ComAtprotoTempRequestPhoneVerification: {
        lexicon: 1,
        id: "com.atproto.temp.requestPhoneVerification",
        defs: {
          main: {
            type: "procedure",
            description: "Request a verification code to be sent to the supplied phone number",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["phoneNumber"],
                properties: {
                  phoneNumber: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorDefs: {
        lexicon: 1,
        id: "app.bsky.actor.defs",
        defs: {
          profileViewBasic: {
            type: "object",
            required: ["did", "handle"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              handle: {
                type: "string",
                format: "handle"
              },
              displayName: {
                type: "string",
                maxGraphemes: 64,
                maxLength: 640
              },
              avatar: {
                type: "string",
                format: "uri"
              },
              associated: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileAssociated"
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#viewerState"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          profileView: {
            type: "object",
            required: ["did", "handle"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              handle: {
                type: "string",
                format: "handle"
              },
              displayName: {
                type: "string",
                maxGraphemes: 64,
                maxLength: 640
              },
              description: {
                type: "string",
                maxGraphemes: 256,
                maxLength: 2560
              },
              avatar: {
                type: "string",
                format: "uri"
              },
              associated: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileAssociated"
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#viewerState"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              }
            }
          },
          profileViewDetailed: {
            type: "object",
            required: ["did", "handle"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              handle: {
                type: "string",
                format: "handle"
              },
              displayName: {
                type: "string",
                maxGraphemes: 64,
                maxLength: 640
              },
              description: {
                type: "string",
                maxGraphemes: 256,
                maxLength: 2560
              },
              avatar: {
                type: "string",
                format: "uri"
              },
              banner: {
                type: "string",
                format: "uri"
              },
              followersCount: {
                type: "integer"
              },
              followsCount: {
                type: "integer"
              },
              postsCount: {
                type: "integer"
              },
              associated: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileAssociated"
              },
              joinedViaStarterPack: {
                type: "ref",
                ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#viewerState"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              pinnedPost: {
                type: "ref",
                ref: "lex:com.atproto.repo.strongRef"
              }
            }
          },
          profileAssociated: {
            type: "object",
            properties: {
              lists: {
                type: "integer"
              },
              feedgens: {
                type: "integer"
              },
              starterPacks: {
                type: "integer"
              },
              labeler: {
                type: "boolean"
              },
              chat: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileAssociatedChat"
              }
            }
          },
          profileAssociatedChat: {
            type: "object",
            required: ["allowIncoming"],
            properties: {
              allowIncoming: {
                type: "string",
                knownValues: ["all", "none", "following"]
              }
            }
          },
          viewerState: {
            type: "object",
            description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.",
            properties: {
              muted: {
                type: "boolean"
              },
              mutedByList: {
                type: "ref",
                ref: "lex:app.bsky.graph.defs#listViewBasic"
              },
              blockedBy: {
                type: "boolean"
              },
              blocking: {
                type: "string",
                format: "at-uri"
              },
              blockingByList: {
                type: "ref",
                ref: "lex:app.bsky.graph.defs#listViewBasic"
              },
              following: {
                type: "string",
                format: "at-uri"
              },
              followedBy: {
                type: "string",
                format: "at-uri"
              },
              knownFollowers: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#knownFollowers"
              }
            }
          },
          knownFollowers: {
            type: "object",
            description: "The subject's followers whom you also follow",
            required: ["count", "followers"],
            properties: {
              count: {
                type: "integer"
              },
              followers: {
                type: "array",
                minLength: 0,
                maxLength: 5,
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#profileViewBasic"
                }
              }
            }
          },
          preferences: {
            type: "array",
            items: {
              type: "union",
              refs: [
                "lex:app.bsky.actor.defs#adultContentPref",
                "lex:app.bsky.actor.defs#contentLabelPref",
                "lex:app.bsky.actor.defs#savedFeedsPref",
                "lex:app.bsky.actor.defs#savedFeedsPrefV2",
                "lex:app.bsky.actor.defs#personalDetailsPref",
                "lex:app.bsky.actor.defs#feedViewPref",
                "lex:app.bsky.actor.defs#threadViewPref",
                "lex:app.bsky.actor.defs#interestsPref",
                "lex:app.bsky.actor.defs#mutedWordsPref",
                "lex:app.bsky.actor.defs#hiddenPostsPref",
                "lex:app.bsky.actor.defs#bskyAppStatePref",
                "lex:app.bsky.actor.defs#labelersPref"
              ]
            }
          },
          adultContentPref: {
            type: "object",
            required: ["enabled"],
            properties: {
              enabled: {
                type: "boolean",
                default: false
              }
            }
          },
          contentLabelPref: {
            type: "object",
            required: ["label", "visibility"],
            properties: {
              labelerDid: {
                type: "string",
                description: "Which labeler does this preference apply to? If undefined, applies globally.",
                format: "did"
              },
              label: {
                type: "string"
              },
              visibility: {
                type: "string",
                knownValues: ["ignore", "show", "warn", "hide"]
              }
            }
          },
          savedFeed: {
            type: "object",
            required: ["id", "type", "value", "pinned"],
            properties: {
              id: {
                type: "string"
              },
              type: {
                type: "string",
                knownValues: ["feed", "list", "timeline"]
              },
              value: {
                type: "string"
              },
              pinned: {
                type: "boolean"
              }
            }
          },
          savedFeedsPrefV2: {
            type: "object",
            required: ["items"],
            properties: {
              items: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#savedFeed"
                }
              }
            }
          },
          savedFeedsPref: {
            type: "object",
            required: ["pinned", "saved"],
            properties: {
              pinned: {
                type: "array",
                items: {
                  type: "string",
                  format: "at-uri"
                }
              },
              saved: {
                type: "array",
                items: {
                  type: "string",
                  format: "at-uri"
                }
              },
              timelineIndex: {
                type: "integer"
              }
            }
          },
          personalDetailsPref: {
            type: "object",
            properties: {
              birthDate: {
                type: "string",
                format: "datetime",
                description: "The birth date of account owner."
              }
            }
          },
          feedViewPref: {
            type: "object",
            required: ["feed"],
            properties: {
              feed: {
                type: "string",
                description: "The URI of the feed, or an identifier which describes the feed."
              },
              hideReplies: {
                type: "boolean",
                description: "Hide replies in the feed."
              },
              hideRepliesByUnfollowed: {
                type: "boolean",
                description: "Hide replies in the feed if they are not by followed users.",
                default: true
              },
              hideRepliesByLikeCount: {
                type: "integer",
                description: "Hide replies in the feed if they do not have this number of likes."
              },
              hideReposts: {
                type: "boolean",
                description: "Hide reposts in the feed."
              },
              hideQuotePosts: {
                type: "boolean",
                description: "Hide quote posts in the feed."
              }
            }
          },
          threadViewPref: {
            type: "object",
            properties: {
              sort: {
                type: "string",
                description: "Sorting mode for threads.",
                knownValues: [
                  "oldest",
                  "newest",
                  "most-likes",
                  "random",
                  "hotness"
                ]
              },
              prioritizeFollowedUsers: {
                type: "boolean",
                description: "Show followed users at the top of all replies."
              }
            }
          },
          interestsPref: {
            type: "object",
            required: ["tags"],
            properties: {
              tags: {
                type: "array",
                maxLength: 100,
                items: {
                  type: "string",
                  maxLength: 640,
                  maxGraphemes: 64
                },
                description: "A list of tags which describe the account owner's interests gathered during onboarding."
              }
            }
          },
          mutedWordTarget: {
            type: "string",
            knownValues: ["content", "tag"],
            maxLength: 640,
            maxGraphemes: 64
          },
          mutedWord: {
            type: "object",
            description: "A word that the account owner has muted.",
            required: ["value", "targets"],
            properties: {
              id: {
                type: "string"
              },
              value: {
                type: "string",
                description: "The muted word itself.",
                maxLength: 1e4,
                maxGraphemes: 1e3
              },
              targets: {
                type: "array",
                description: "The intended targets of the muted word.",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#mutedWordTarget"
                }
              },
              actorTarget: {
                type: "string",
                description: "Groups of users to apply the muted word to. If undefined, applies to all users.",
                knownValues: ["all", "exclude-following"],
                default: "all"
              },
              expiresAt: {
                type: "string",
                format: "datetime",
                description: "The date and time at which the muted word will expire and no longer be applied."
              }
            }
          },
          mutedWordsPref: {
            type: "object",
            required: ["items"],
            properties: {
              items: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#mutedWord"
                },
                description: "A list of words the account owner has muted."
              }
            }
          },
          hiddenPostsPref: {
            type: "object",
            required: ["items"],
            properties: {
              items: {
                type: "array",
                items: {
                  type: "string",
                  format: "at-uri"
                },
                description: "A list of URIs of posts the account owner has hidden."
              }
            }
          },
          labelersPref: {
            type: "object",
            required: ["labelers"],
            properties: {
              labelers: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#labelerPrefItem"
                }
              }
            }
          },
          labelerPrefItem: {
            type: "object",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              }
            }
          },
          bskyAppStatePref: {
            description: "A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.",
            type: "object",
            properties: {
              activeProgressGuide: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#bskyAppProgressGuide"
              },
              queuedNudges: {
                description: "An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.",
                type: "array",
                maxLength: 1e3,
                items: {
                  type: "string",
                  maxLength: 100
                }
              },
              nuxs: {
                description: "Storage for NUXs the user has encountered.",
                type: "array",
                maxLength: 100,
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.actor.defs#nux"
                }
              }
            }
          },
          bskyAppProgressGuide: {
            description: "If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.",
            type: "object",
            required: ["guide"],
            properties: {
              guide: {
                type: "string",
                maxLength: 100
              }
            }
          },
          nux: {
            type: "object",
            description: "A new user experiences (NUX) storage object",
            required: ["id", "completed"],
            properties: {
              id: {
                type: "string",
                maxLength: 100
              },
              completed: {
                type: "boolean",
                default: false
              },
              data: {
                description: "Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.",
                type: "string",
                maxLength: 3e3,
                maxGraphemes: 300
              },
              expiresAt: {
                type: "string",
                format: "datetime",
                description: "The date and time at which the NUX will expire and should be considered completed."
              }
            }
          }
        }
      },
      AppBskyActorGetPreferences: {
        lexicon: 1,
        id: "app.bsky.actor.getPreferences",
        defs: {
          main: {
            type: "query",
            description: "Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.",
            parameters: {
              type: "params",
              properties: {}
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["preferences"],
                properties: {
                  preferences: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#preferences"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorGetProfile: {
        lexicon: 1,
        id: "app.bsky.actor.getProfile",
        defs: {
          main: {
            type: "query",
            description: "Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier",
                  description: "Handle or DID of account to fetch profile of."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileViewDetailed"
              }
            }
          }
        }
      },
      AppBskyActorGetProfiles: {
        lexicon: 1,
        id: "app.bsky.actor.getProfiles",
        defs: {
          main: {
            type: "query",
            description: "Get detailed profile views of multiple actors.",
            parameters: {
              type: "params",
              required: ["actors"],
              properties: {
                actors: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-identifier"
                  },
                  maxLength: 25
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["profiles"],
                properties: {
                  profiles: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileViewDetailed"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorGetSuggestions: {
        lexicon: 1,
        id: "app.bsky.actor.getSuggestions",
        defs: {
          main: {
            type: "query",
            description: "Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["actors"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  actors: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorProfile: {
        lexicon: 1,
        id: "app.bsky.actor.profile",
        defs: {
          main: {
            type: "record",
            description: "A declaration of a Bluesky account profile.",
            key: "literal:self",
            record: {
              type: "object",
              properties: {
                displayName: {
                  type: "string",
                  maxGraphemes: 64,
                  maxLength: 640
                },
                description: {
                  type: "string",
                  description: "Free-form profile description text.",
                  maxGraphemes: 256,
                  maxLength: 2560
                },
                avatar: {
                  type: "blob",
                  description: "Small image to be displayed next to posts from account. AKA, 'profile picture'",
                  accept: ["image/png", "image/jpeg"],
                  maxSize: 1e6
                },
                banner: {
                  type: "blob",
                  description: "Larger horizontal image to display behind profile view.",
                  accept: ["image/png", "image/jpeg"],
                  maxSize: 1e6
                },
                labels: {
                  type: "union",
                  description: "Self-label values, specific to the Bluesky application, on the overall account.",
                  refs: ["lex:com.atproto.label.defs#selfLabels"]
                },
                joinedViaStarterPack: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                },
                pinnedPost: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      },
      AppBskyActorPutPreferences: {
        lexicon: 1,
        id: "app.bsky.actor.putPreferences",
        defs: {
          main: {
            type: "procedure",
            description: "Set the private preferences attached to the account.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["preferences"],
                properties: {
                  preferences: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#preferences"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorSearchActors: {
        lexicon: 1,
        id: "app.bsky.actor.searchActors",
        defs: {
          main: {
            type: "query",
            description: "Find actors (profiles) matching search criteria. Does not require auth.",
            parameters: {
              type: "params",
              properties: {
                term: {
                  type: "string",
                  description: "DEPRECATED: use 'q' instead."
                },
                q: {
                  type: "string",
                  description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 25
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["actors"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  actors: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyActorSearchActorsTypeahead: {
        lexicon: 1,
        id: "app.bsky.actor.searchActorsTypeahead",
        defs: {
          main: {
            type: "query",
            description: "Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.",
            parameters: {
              type: "params",
              properties: {
                term: {
                  type: "string",
                  description: "DEPRECATED: use 'q' instead."
                },
                q: {
                  type: "string",
                  description: "Search query prefix; not a full query string."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 10
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["actors"],
                properties: {
                  actors: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileViewBasic"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyEmbedDefs: {
        lexicon: 1,
        id: "app.bsky.embed.defs",
        defs: {
          aspectRatio: {
            type: "object",
            description: "width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.",
            required: ["width", "height"],
            properties: {
              width: {
                type: "integer",
                minimum: 1
              },
              height: {
                type: "integer",
                minimum: 1
              }
            }
          }
        }
      },
      AppBskyEmbedExternal: {
        lexicon: 1,
        id: "app.bsky.embed.external",
        defs: {
          main: {
            type: "object",
            description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).",
            required: ["external"],
            properties: {
              external: {
                type: "ref",
                ref: "lex:app.bsky.embed.external#external"
              }
            }
          },
          external: {
            type: "object",
            required: ["uri", "title", "description"],
            properties: {
              uri: {
                type: "string",
                format: "uri"
              },
              title: {
                type: "string"
              },
              description: {
                type: "string"
              },
              thumb: {
                type: "blob",
                accept: ["image/*"],
                maxSize: 1e6
              }
            }
          },
          view: {
            type: "object",
            required: ["external"],
            properties: {
              external: {
                type: "ref",
                ref: "lex:app.bsky.embed.external#viewExternal"
              }
            }
          },
          viewExternal: {
            type: "object",
            required: ["uri", "title", "description"],
            properties: {
              uri: {
                type: "string",
                format: "uri"
              },
              title: {
                type: "string"
              },
              description: {
                type: "string"
              },
              thumb: {
                type: "string",
                format: "uri"
              }
            }
          }
        }
      },
      AppBskyEmbedImages: {
        lexicon: 1,
        id: "app.bsky.embed.images",
        description: "A set of images embedded in a Bluesky record (eg, a post).",
        defs: {
          main: {
            type: "object",
            required: ["images"],
            properties: {
              images: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.images#image"
                },
                maxLength: 4
              }
            }
          },
          image: {
            type: "object",
            required: ["image", "alt"],
            properties: {
              image: {
                type: "blob",
                accept: ["image/*"],
                maxSize: 1e6
              },
              alt: {
                type: "string",
                description: "Alt text description of the image, for accessibility."
              },
              aspectRatio: {
                type: "ref",
                ref: "lex:app.bsky.embed.defs#aspectRatio"
              }
            }
          },
          view: {
            type: "object",
            required: ["images"],
            properties: {
              images: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.images#viewImage"
                },
                maxLength: 4
              }
            }
          },
          viewImage: {
            type: "object",
            required: ["thumb", "fullsize", "alt"],
            properties: {
              thumb: {
                type: "string",
                format: "uri",
                description: "Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View."
              },
              fullsize: {
                type: "string",
                format: "uri",
                description: "Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View."
              },
              alt: {
                type: "string",
                description: "Alt text description of the image, for accessibility."
              },
              aspectRatio: {
                type: "ref",
                ref: "lex:app.bsky.embed.defs#aspectRatio"
              }
            }
          }
        }
      },
      AppBskyEmbedRecord: {
        lexicon: 1,
        id: "app.bsky.embed.record",
        description: "A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.",
        defs: {
          main: {
            type: "object",
            required: ["record"],
            properties: {
              record: {
                type: "ref",
                ref: "lex:com.atproto.repo.strongRef"
              }
            }
          },
          view: {
            type: "object",
            required: ["record"],
            properties: {
              record: {
                type: "union",
                refs: [
                  "lex:app.bsky.embed.record#viewRecord",
                  "lex:app.bsky.embed.record#viewNotFound",
                  "lex:app.bsky.embed.record#viewBlocked",
                  "lex:app.bsky.embed.record#viewDetached",
                  "lex:app.bsky.feed.defs#generatorView",
                  "lex:app.bsky.graph.defs#listView",
                  "lex:app.bsky.labeler.defs#labelerView",
                  "lex:app.bsky.graph.defs#starterPackViewBasic"
                ]
              }
            }
          },
          viewRecord: {
            type: "object",
            required: ["uri", "cid", "author", "value", "indexedAt"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              author: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileViewBasic"
              },
              value: {
                type: "unknown",
                description: "The record data itself."
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              replyCount: {
                type: "integer"
              },
              repostCount: {
                type: "integer"
              },
              likeCount: {
                type: "integer"
              },
              quoteCount: {
                type: "integer"
              },
              embeds: {
                type: "array",
                items: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images#view",
                    "lex:app.bsky.embed.video#view",
                    "lex:app.bsky.embed.external#view",
                    "lex:app.bsky.embed.record#view",
                    "lex:app.bsky.embed.recordWithMedia#view"
                  ]
                }
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          viewNotFound: {
            type: "object",
            required: ["uri", "notFound"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              notFound: {
                type: "boolean",
                const: true
              }
            }
          },
          viewBlocked: {
            type: "object",
            required: ["uri", "blocked", "author"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              blocked: {
                type: "boolean",
                const: true
              },
              author: {
                type: "ref",
                ref: "lex:app.bsky.feed.defs#blockedAuthor"
              }
            }
          },
          viewDetached: {
            type: "object",
            required: ["uri", "detached"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              detached: {
                type: "boolean",
                const: true
              }
            }
          }
        }
      },
      AppBskyEmbedRecordWithMedia: {
        lexicon: 1,
        id: "app.bsky.embed.recordWithMedia",
        description: "A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.",
        defs: {
          main: {
            type: "object",
            required: ["record", "media"],
            properties: {
              record: {
                type: "ref",
                ref: "lex:app.bsky.embed.record"
              },
              media: {
                type: "union",
                refs: [
                  "lex:app.bsky.embed.images",
                  "lex:app.bsky.embed.video",
                  "lex:app.bsky.embed.external"
                ]
              }
            }
          },
          view: {
            type: "object",
            required: ["record", "media"],
            properties: {
              record: {
                type: "ref",
                ref: "lex:app.bsky.embed.record#view"
              },
              media: {
                type: "union",
                refs: [
                  "lex:app.bsky.embed.images#view",
                  "lex:app.bsky.embed.video#view",
                  "lex:app.bsky.embed.external#view"
                ]
              }
            }
          }
        }
      },
      AppBskyEmbedVideo: {
        lexicon: 1,
        id: "app.bsky.embed.video",
        description: "A video embedded in a Bluesky record (eg, a post).",
        defs: {
          main: {
            type: "object",
            required: ["video"],
            properties: {
              video: {
                type: "blob",
                accept: ["video/mp4"],
                maxSize: 5e7
              },
              captions: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.embed.video#caption"
                },
                maxLength: 20
              },
              alt: {
                type: "string",
                description: "Alt text description of the video, for accessibility.",
                maxGraphemes: 1e3,
                maxLength: 1e4
              },
              aspectRatio: {
                type: "ref",
                ref: "lex:app.bsky.embed.defs#aspectRatio"
              }
            }
          },
          caption: {
            type: "object",
            required: ["lang", "file"],
            properties: {
              lang: {
                type: "string",
                format: "language"
              },
              file: {
                type: "blob",
                accept: ["text/vtt"],
                maxSize: 2e4
              }
            }
          },
          view: {
            type: "object",
            required: ["cid", "playlist"],
            properties: {
              cid: {
                type: "string",
                format: "cid"
              },
              playlist: {
                type: "string",
                format: "uri"
              },
              thumbnail: {
                type: "string",
                format: "uri"
              },
              alt: {
                type: "string",
                maxGraphemes: 1e3,
                maxLength: 1e4
              },
              aspectRatio: {
                type: "ref",
                ref: "lex:app.bsky.embed.defs#aspectRatio"
              }
            }
          }
        }
      },
      AppBskyFeedDefs: {
        lexicon: 1,
        id: "app.bsky.feed.defs",
        defs: {
          postView: {
            type: "object",
            required: ["uri", "cid", "author", "record", "indexedAt"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              author: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileViewBasic"
              },
              record: {
                type: "unknown"
              },
              embed: {
                type: "union",
                refs: [
                  "lex:app.bsky.embed.images#view",
                  "lex:app.bsky.embed.video#view",
                  "lex:app.bsky.embed.external#view",
                  "lex:app.bsky.embed.record#view",
                  "lex:app.bsky.embed.recordWithMedia#view"
                ]
              },
              replyCount: {
                type: "integer"
              },
              repostCount: {
                type: "integer"
              },
              likeCount: {
                type: "integer"
              },
              quoteCount: {
                type: "integer"
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.feed.defs#viewerState"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              threadgate: {
                type: "ref",
                ref: "lex:app.bsky.feed.defs#threadgateView"
              }
            }
          },
          viewerState: {
            type: "object",
            description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.",
            properties: {
              repost: {
                type: "string",
                format: "at-uri"
              },
              like: {
                type: "string",
                format: "at-uri"
              },
              threadMuted: {
                type: "boolean"
              },
              replyDisabled: {
                type: "boolean"
              },
              embeddingDisabled: {
                type: "boolean"
              },
              pinned: {
                type: "boolean"
              }
            }
          },
          feedViewPost: {
            type: "object",
            required: ["post"],
            properties: {
              post: {
                type: "ref",
                ref: "lex:app.bsky.feed.defs#postView"
              },
              reply: {
                type: "ref",
                ref: "lex:app.bsky.feed.defs#replyRef"
              },
              reason: {
                type: "union",
                refs: [
                  "lex:app.bsky.feed.defs#reasonRepost",
                  "lex:app.bsky.feed.defs#reasonPin"
                ]
              },
              feedContext: {
                type: "string",
                description: "Context provided by feed generator that may be passed back alongside interactions.",
                maxLength: 2e3
              }
            }
          },
          replyRef: {
            type: "object",
            required: ["root", "parent"],
            properties: {
              root: {
                type: "union",
                refs: [
                  "lex:app.bsky.feed.defs#postView",
                  "lex:app.bsky.feed.defs#notFoundPost",
                  "lex:app.bsky.feed.defs#blockedPost"
                ]
              },
              parent: {
                type: "union",
                refs: [
                  "lex:app.bsky.feed.defs#postView",
                  "lex:app.bsky.feed.defs#notFoundPost",
                  "lex:app.bsky.feed.defs#blockedPost"
                ]
              },
              grandparentAuthor: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileViewBasic",
                description: "When parent is a reply to another post, this is the author of that post."
              }
            }
          },
          reasonRepost: {
            type: "object",
            required: ["by", "indexedAt"],
            properties: {
              by: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileViewBasic"
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          reasonPin: {
            type: "object",
            properties: {}
          },
          threadViewPost: {
            type: "object",
            required: ["post"],
            properties: {
              post: {
                type: "ref",
                ref: "lex:app.bsky.feed.defs#postView"
              },
              parent: {
                type: "union",
                refs: [
                  "lex:app.bsky.feed.defs#threadViewPost",
                  "lex:app.bsky.feed.defs#notFoundPost",
                  "lex:app.bsky.feed.defs#blockedPost"
                ]
              },
              replies: {
                type: "array",
                items: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.feed.defs#threadViewPost",
                    "lex:app.bsky.feed.defs#notFoundPost",
                    "lex:app.bsky.feed.defs#blockedPost"
                  ]
                }
              }
            }
          },
          notFoundPost: {
            type: "object",
            required: ["uri", "notFound"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              notFound: {
                type: "boolean",
                const: true
              }
            }
          },
          blockedPost: {
            type: "object",
            required: ["uri", "blocked", "author"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              blocked: {
                type: "boolean",
                const: true
              },
              author: {
                type: "ref",
                ref: "lex:app.bsky.feed.defs#blockedAuthor"
              }
            }
          },
          blockedAuthor: {
            type: "object",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#viewerState"
              }
            }
          },
          generatorView: {
            type: "object",
            required: ["uri", "cid", "did", "creator", "displayName", "indexedAt"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              did: {
                type: "string",
                format: "did"
              },
              creator: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileView"
              },
              displayName: {
                type: "string"
              },
              description: {
                type: "string",
                maxGraphemes: 300,
                maxLength: 3e3
              },
              descriptionFacets: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet"
                }
              },
              avatar: {
                type: "string",
                format: "uri"
              },
              likeCount: {
                type: "integer",
                minimum: 0
              },
              acceptsInteractions: {
                type: "boolean"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.feed.defs#generatorViewerState"
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          generatorViewerState: {
            type: "object",
            properties: {
              like: {
                type: "string",
                format: "at-uri"
              }
            }
          },
          skeletonFeedPost: {
            type: "object",
            required: ["post"],
            properties: {
              post: {
                type: "string",
                format: "at-uri"
              },
              reason: {
                type: "union",
                refs: [
                  "lex:app.bsky.feed.defs#skeletonReasonRepost",
                  "lex:app.bsky.feed.defs#skeletonReasonPin"
                ]
              },
              feedContext: {
                type: "string",
                description: "Context that will be passed through to client and may be passed to feed generator back alongside interactions.",
                maxLength: 2e3
              }
            }
          },
          skeletonReasonRepost: {
            type: "object",
            required: ["repost"],
            properties: {
              repost: {
                type: "string",
                format: "at-uri"
              }
            }
          },
          skeletonReasonPin: {
            type: "object",
            properties: {}
          },
          threadgateView: {
            type: "object",
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              record: {
                type: "unknown"
              },
              lists: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listViewBasic"
                }
              }
            }
          },
          interaction: {
            type: "object",
            properties: {
              item: {
                type: "string",
                format: "at-uri"
              },
              event: {
                type: "string",
                knownValues: [
                  "app.bsky.feed.defs#requestLess",
                  "app.bsky.feed.defs#requestMore",
                  "app.bsky.feed.defs#clickthroughItem",
                  "app.bsky.feed.defs#clickthroughAuthor",
                  "app.bsky.feed.defs#clickthroughReposter",
                  "app.bsky.feed.defs#clickthroughEmbed",
                  "app.bsky.feed.defs#interactionSeen",
                  "app.bsky.feed.defs#interactionLike",
                  "app.bsky.feed.defs#interactionRepost",
                  "app.bsky.feed.defs#interactionReply",
                  "app.bsky.feed.defs#interactionQuote",
                  "app.bsky.feed.defs#interactionShare"
                ]
              },
              feedContext: {
                type: "string",
                description: "Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.",
                maxLength: 2e3
              }
            }
          },
          requestLess: {
            type: "token",
            description: "Request that less content like the given feed item be shown in the feed"
          },
          requestMore: {
            type: "token",
            description: "Request that more content like the given feed item be shown in the feed"
          },
          clickthroughItem: {
            type: "token",
            description: "User clicked through to the feed item"
          },
          clickthroughAuthor: {
            type: "token",
            description: "User clicked through to the author of the feed item"
          },
          clickthroughReposter: {
            type: "token",
            description: "User clicked through to the reposter of the feed item"
          },
          clickthroughEmbed: {
            type: "token",
            description: "User clicked through to the embedded content of the feed item"
          },
          interactionSeen: {
            type: "token",
            description: "Feed item was seen by user"
          },
          interactionLike: {
            type: "token",
            description: "User liked the feed item"
          },
          interactionRepost: {
            type: "token",
            description: "User reposted the feed item"
          },
          interactionReply: {
            type: "token",
            description: "User replied to the feed item"
          },
          interactionQuote: {
            type: "token",
            description: "User quoted the feed item"
          },
          interactionShare: {
            type: "token",
            description: "User shared the feed item"
          }
        }
      },
      AppBskyFeedDescribeFeedGenerator: {
        lexicon: 1,
        id: "app.bsky.feed.describeFeedGenerator",
        defs: {
          main: {
            type: "query",
            description: "Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did", "feeds"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  feeds: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.describeFeedGenerator#feed"
                    }
                  },
                  links: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.describeFeedGenerator#links"
                  }
                }
              }
            }
          },
          feed: {
            type: "object",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              }
            }
          },
          links: {
            type: "object",
            properties: {
              privacyPolicy: {
                type: "string"
              },
              termsOfService: {
                type: "string"
              }
            }
          }
        }
      },
      AppBskyFeedGenerator: {
        lexicon: 1,
        id: "app.bsky.feed.generator",
        defs: {
          main: {
            type: "record",
            description: "Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.",
            key: "any",
            record: {
              type: "object",
              required: ["did", "displayName", "createdAt"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                displayName: {
                  type: "string",
                  maxGraphemes: 24,
                  maxLength: 240
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                avatar: {
                  type: "blob",
                  accept: ["image/png", "image/jpeg"],
                  maxSize: 1e6
                },
                acceptsInteractions: {
                  type: "boolean",
                  description: "Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions"
                },
                labels: {
                  type: "union",
                  description: "Self-label values",
                  refs: ["lex:com.atproto.label.defs#selfLabels"]
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetActorFeeds: {
        lexicon: 1,
        id: "app.bsky.feed.getActorFeeds",
        defs: {
          main: {
            type: "query",
            description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["feeds"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  feeds: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#generatorView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetActorLikes: {
        lexicon: 1,
        id: "app.bsky.feed.getActorLikes",
        defs: {
          main: {
            type: "query",
            description: "Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["feed"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  feed: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#feedViewPost"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "BlockedActor"
              },
              {
                name: "BlockedByActor"
              }
            ]
          }
        }
      },
      AppBskyFeedGetAuthorFeed: {
        lexicon: 1,
        id: "app.bsky.feed.getAuthorFeed",
        defs: {
          main: {
            type: "query",
            description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                },
                filter: {
                  type: "string",
                  description: "Combinations of post/repost types to include in response.",
                  knownValues: [
                    "posts_with_replies",
                    "posts_no_replies",
                    "posts_with_media",
                    "posts_and_author_threads"
                  ],
                  default: "posts_with_replies"
                },
                includePins: {
                  type: "boolean",
                  default: false
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["feed"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  feed: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#feedViewPost"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "BlockedActor"
              },
              {
                name: "BlockedByActor"
              }
            ]
          }
        }
      },
      AppBskyFeedGetFeed: {
        lexicon: 1,
        id: "app.bsky.feed.getFeed",
        defs: {
          main: {
            type: "query",
            description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.",
            parameters: {
              type: "params",
              required: ["feed"],
              properties: {
                feed: {
                  type: "string",
                  format: "at-uri"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["feed"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  feed: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#feedViewPost"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "UnknownFeed"
              }
            ]
          }
        }
      },
      AppBskyFeedGetFeedGenerator: {
        lexicon: 1,
        id: "app.bsky.feed.getFeedGenerator",
        defs: {
          main: {
            type: "query",
            description: "Get information about a feed generator. Implemented by AppView.",
            parameters: {
              type: "params",
              required: ["feed"],
              properties: {
                feed: {
                  type: "string",
                  format: "at-uri",
                  description: "AT-URI of the feed generator record."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["view", "isOnline", "isValid"],
                properties: {
                  view: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#generatorView"
                  },
                  isOnline: {
                    type: "boolean",
                    description: "Indicates whether the feed generator service has been online recently, or else seems to be inactive."
                  },
                  isValid: {
                    type: "boolean",
                    description: "Indicates whether the feed generator service is compatible with the record declaration."
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetFeedGenerators: {
        lexicon: 1,
        id: "app.bsky.feed.getFeedGenerators",
        defs: {
          main: {
            type: "query",
            description: "Get information about a list of feed generators.",
            parameters: {
              type: "params",
              required: ["feeds"],
              properties: {
                feeds: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["feeds"],
                properties: {
                  feeds: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#generatorView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetFeedSkeleton: {
        lexicon: 1,
        id: "app.bsky.feed.getFeedSkeleton",
        defs: {
          main: {
            type: "query",
            description: "Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.",
            parameters: {
              type: "params",
              required: ["feed"],
              properties: {
                feed: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference to feed generator record describing the specific feed being requested."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["feed"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  feed: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#skeletonFeedPost"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "UnknownFeed"
              }
            ]
          }
        }
      },
      AppBskyFeedGetLikes: {
        lexicon: 1,
        id: "app.bsky.feed.getLikes",
        defs: {
          main: {
            type: "query",
            description: "Get like records which reference a subject (by AT-URI and CID).",
            parameters: {
              type: "params",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri",
                  description: "AT-URI of the subject (eg, a post record)."
                },
                cid: {
                  type: "string",
                  format: "cid",
                  description: "CID of the subject record (aka, specific version of record), to filter likes."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["uri", "likes"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  },
                  cursor: {
                    type: "string"
                  },
                  likes: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.getLikes#like"
                    }
                  }
                }
              }
            }
          },
          like: {
            type: "object",
            required: ["indexedAt", "createdAt", "actor"],
            properties: {
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              actor: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileView"
              }
            }
          }
        }
      },
      AppBskyFeedGetListFeed: {
        lexicon: 1,
        id: "app.bsky.feed.getListFeed",
        defs: {
          main: {
            type: "query",
            description: "Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.",
            parameters: {
              type: "params",
              required: ["list"],
              properties: {
                list: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) to the list record."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["feed"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  feed: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#feedViewPost"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "UnknownList"
              }
            ]
          }
        }
      },
      AppBskyFeedGetPostThread: {
        lexicon: 1,
        id: "app.bsky.feed.getPostThread",
        defs: {
          main: {
            type: "query",
            description: "Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.",
            parameters: {
              type: "params",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) to post record."
                },
                depth: {
                  type: "integer",
                  description: "How many levels of reply depth should be included in response.",
                  default: 6,
                  minimum: 0,
                  maximum: 1e3
                },
                parentHeight: {
                  type: "integer",
                  description: "How many levels of parent (and grandparent, etc) post to include.",
                  default: 80,
                  minimum: 0,
                  maximum: 1e3
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["thread"],
                properties: {
                  thread: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.feed.defs#threadViewPost",
                      "lex:app.bsky.feed.defs#notFoundPost",
                      "lex:app.bsky.feed.defs#blockedPost"
                    ]
                  },
                  threadgate: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.defs#threadgateView"
                  }
                }
              }
            },
            errors: [
              {
                name: "NotFound"
              }
            ]
          }
        }
      },
      AppBskyFeedGetPosts: {
        lexicon: 1,
        id: "app.bsky.feed.getPosts",
        defs: {
          main: {
            type: "query",
            description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.",
            parameters: {
              type: "params",
              required: ["uris"],
              properties: {
                uris: {
                  type: "array",
                  description: "List of post AT-URIs to return hydrated views for.",
                  items: {
                    type: "string",
                    format: "at-uri"
                  },
                  maxLength: 25
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["posts"],
                properties: {
                  posts: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#postView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetQuotes: {
        lexicon: 1,
        id: "app.bsky.feed.getQuotes",
        defs: {
          main: {
            type: "query",
            description: "Get a list of quotes for a given post.",
            parameters: {
              type: "params",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) of post record"
                },
                cid: {
                  type: "string",
                  format: "cid",
                  description: "If supplied, filters to quotes of specific version (by CID) of the post record."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["uri", "posts"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  },
                  cursor: {
                    type: "string"
                  },
                  posts: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#postView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetRepostedBy: {
        lexicon: 1,
        id: "app.bsky.feed.getRepostedBy",
        defs: {
          main: {
            type: "query",
            description: "Get a list of reposts for a given post.",
            parameters: {
              type: "params",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) of post record"
                },
                cid: {
                  type: "string",
                  format: "cid",
                  description: "If supplied, filters to reposts of specific version (by CID) of the post record."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["uri", "repostedBy"],
                properties: {
                  uri: {
                    type: "string",
                    format: "at-uri"
                  },
                  cid: {
                    type: "string",
                    format: "cid"
                  },
                  cursor: {
                    type: "string"
                  },
                  repostedBy: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetSuggestedFeeds: {
        lexicon: 1,
        id: "app.bsky.feed.getSuggestedFeeds",
        defs: {
          main: {
            type: "query",
            description: "Get a list of suggested feeds (feed generators) for the requesting account.",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["feeds"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  feeds: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#generatorView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedGetTimeline: {
        lexicon: 1,
        id: "app.bsky.feed.getTimeline",
        defs: {
          main: {
            type: "query",
            description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.",
            parameters: {
              type: "params",
              properties: {
                algorithm: {
                  type: "string",
                  description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["feed"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  feed: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#feedViewPost"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyFeedLike: {
        lexicon: 1,
        id: "app.bsky.feed.like",
        defs: {
          main: {
            type: "record",
            description: "Record declaring a 'like' of a piece of subject content.",
            key: "tid",
            record: {
              type: "object",
              required: ["subject", "createdAt"],
              properties: {
                subject: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      },
      AppBskyFeedPost: {
        lexicon: 1,
        id: "app.bsky.feed.post",
        defs: {
          main: {
            type: "record",
            description: "Record containing a Bluesky post.",
            key: "tid",
            record: {
              type: "object",
              required: ["text", "createdAt"],
              properties: {
                text: {
                  type: "string",
                  maxLength: 3e3,
                  maxGraphemes: 300,
                  description: "The primary post content. May be an empty string, if there are embeds."
                },
                entities: {
                  type: "array",
                  description: "DEPRECATED: replaced by app.bsky.richtext.facet.",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.feed.post#entity"
                  }
                },
                facets: {
                  type: "array",
                  description: "Annotations of text (mentions, URLs, hashtags, etc)",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                reply: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.post#replyRef"
                },
                embed: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.embed.images",
                    "lex:app.bsky.embed.video",
                    "lex:app.bsky.embed.external",
                    "lex:app.bsky.embed.record",
                    "lex:app.bsky.embed.recordWithMedia"
                  ]
                },
                langs: {
                  type: "array",
                  description: "Indicates human language of post primary text content.",
                  maxLength: 3,
                  items: {
                    type: "string",
                    format: "language"
                  }
                },
                labels: {
                  type: "union",
                  description: "Self-label values for this post. Effectively content warnings.",
                  refs: ["lex:com.atproto.label.defs#selfLabels"]
                },
                tags: {
                  type: "array",
                  description: "Additional hashtags, in addition to any included in post text and facets.",
                  maxLength: 8,
                  items: {
                    type: "string",
                    maxLength: 640,
                    maxGraphemes: 64
                  }
                },
                createdAt: {
                  type: "string",
                  format: "datetime",
                  description: "Client-declared timestamp when this post was originally created."
                }
              }
            }
          },
          replyRef: {
            type: "object",
            required: ["root", "parent"],
            properties: {
              root: {
                type: "ref",
                ref: "lex:com.atproto.repo.strongRef"
              },
              parent: {
                type: "ref",
                ref: "lex:com.atproto.repo.strongRef"
              }
            }
          },
          entity: {
            type: "object",
            description: "Deprecated: use facets instead.",
            required: ["index", "type", "value"],
            properties: {
              index: {
                type: "ref",
                ref: "lex:app.bsky.feed.post#textSlice"
              },
              type: {
                type: "string",
                description: "Expected values are 'mention' and 'link'."
              },
              value: {
                type: "string"
              }
            }
          },
          textSlice: {
            type: "object",
            description: "Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.",
            required: ["start", "end"],
            properties: {
              start: {
                type: "integer",
                minimum: 0
              },
              end: {
                type: "integer",
                minimum: 0
              }
            }
          }
        }
      },
      AppBskyFeedPostgate: {
        lexicon: 1,
        id: "app.bsky.feed.postgate",
        defs: {
          main: {
            type: "record",
            key: "tid",
            description: "Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.",
            record: {
              type: "object",
              required: ["post", "createdAt"],
              properties: {
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                post: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) to the post record."
                },
                detachedEmbeddingUris: {
                  type: "array",
                  maxLength: 50,
                  items: {
                    type: "string",
                    format: "at-uri"
                  },
                  description: "List of AT-URIs embedding this post that the author has detached from."
                },
                embeddingRules: {
                  type: "array",
                  maxLength: 5,
                  items: {
                    type: "union",
                    refs: ["lex:app.bsky.feed.postgate#disableRule"]
                  }
                }
              }
            }
          },
          disableRule: {
            type: "object",
            description: "Disables embedding of this post.",
            properties: {}
          }
        }
      },
      AppBskyFeedRepost: {
        lexicon: 1,
        id: "app.bsky.feed.repost",
        defs: {
          main: {
            description: "Record representing a 'repost' of an existing Bluesky post.",
            type: "record",
            key: "tid",
            record: {
              type: "object",
              required: ["subject", "createdAt"],
              properties: {
                subject: {
                  type: "ref",
                  ref: "lex:com.atproto.repo.strongRef"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      },
      AppBskyFeedSearchPosts: {
        lexicon: 1,
        id: "app.bsky.feed.searchPosts",
        defs: {
          main: {
            type: "query",
            description: "Find posts matching search criteria, returning views of those posts.",
            parameters: {
              type: "params",
              required: ["q"],
              properties: {
                q: {
                  type: "string",
                  description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                },
                sort: {
                  type: "string",
                  knownValues: ["top", "latest"],
                  default: "latest",
                  description: "Specifies the ranking order of results."
                },
                since: {
                  type: "string",
                  description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
                },
                until: {
                  type: "string",
                  description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
                },
                mentions: {
                  type: "string",
                  format: "at-identifier",
                  description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions."
                },
                author: {
                  type: "string",
                  format: "at-identifier",
                  description: "Filter to posts by the given account. Handles are resolved to DID before query-time."
                },
                lang: {
                  type: "string",
                  format: "language",
                  description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection."
                },
                domain: {
                  type: "string",
                  description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization."
                },
                url: {
                  type: "string",
                  format: "uri",
                  description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching."
                },
                tag: {
                  type: "array",
                  items: {
                    type: "string",
                    maxLength: 640,
                    maxGraphemes: 64
                  },
                  description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 25
                },
                cursor: {
                  type: "string",
                  description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["posts"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  hitsTotal: {
                    type: "integer",
                    description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                  },
                  posts: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#postView"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "BadQueryString"
              }
            ]
          }
        }
      },
      AppBskyFeedSendInteractions: {
        lexicon: 1,
        id: "app.bsky.feed.sendInteractions",
        defs: {
          main: {
            type: "procedure",
            description: "Send information about interactions with feed items back to the feed generator that served them.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["interactions"],
                properties: {
                  interactions: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#interaction"
                    }
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {}
              }
            }
          }
        }
      },
      AppBskyFeedThreadgate: {
        lexicon: 1,
        id: "app.bsky.feed.threadgate",
        defs: {
          main: {
            type: "record",
            key: "tid",
            description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository.",
            record: {
              type: "object",
              required: ["post", "createdAt"],
              properties: {
                post: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) to the post record."
                },
                allow: {
                  type: "array",
                  maxLength: 5,
                  items: {
                    type: "union",
                    refs: [
                      "lex:app.bsky.feed.threadgate#mentionRule",
                      "lex:app.bsky.feed.threadgate#followingRule",
                      "lex:app.bsky.feed.threadgate#listRule"
                    ]
                  }
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                },
                hiddenReplies: {
                  type: "array",
                  maxLength: 50,
                  items: {
                    type: "string",
                    format: "at-uri"
                  },
                  description: "List of hidden reply URIs."
                }
              }
            }
          },
          mentionRule: {
            type: "object",
            description: "Allow replies from actors mentioned in your post.",
            properties: {}
          },
          followingRule: {
            type: "object",
            description: "Allow replies from actors you follow.",
            properties: {}
          },
          listRule: {
            type: "object",
            description: "Allow replies from actors on a list.",
            required: ["list"],
            properties: {
              list: {
                type: "string",
                format: "at-uri"
              }
            }
          }
        }
      },
      AppBskyGraphBlock: {
        lexicon: 1,
        id: "app.bsky.graph.block",
        defs: {
          main: {
            type: "record",
            description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.",
            key: "tid",
            record: {
              type: "object",
              required: ["subject", "createdAt"],
              properties: {
                subject: {
                  type: "string",
                  format: "did",
                  description: "DID of the account to be blocked."
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      },
      AppBskyGraphDefs: {
        lexicon: 1,
        id: "app.bsky.graph.defs",
        defs: {
          listViewBasic: {
            type: "object",
            required: ["uri", "cid", "name", "purpose"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              name: {
                type: "string",
                maxLength: 64,
                minLength: 1
              },
              purpose: {
                type: "ref",
                ref: "lex:app.bsky.graph.defs#listPurpose"
              },
              avatar: {
                type: "string",
                format: "uri"
              },
              listItemCount: {
                type: "integer",
                minimum: 0
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.graph.defs#listViewerState"
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          listView: {
            type: "object",
            required: ["uri", "cid", "creator", "name", "purpose", "indexedAt"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              creator: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileView"
              },
              name: {
                type: "string",
                maxLength: 64,
                minLength: 1
              },
              purpose: {
                type: "ref",
                ref: "lex:app.bsky.graph.defs#listPurpose"
              },
              description: {
                type: "string",
                maxGraphemes: 300,
                maxLength: 3e3
              },
              descriptionFacets: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet"
                }
              },
              avatar: {
                type: "string",
                format: "uri"
              },
              listItemCount: {
                type: "integer",
                minimum: 0
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.graph.defs#listViewerState"
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          listItemView: {
            type: "object",
            required: ["uri", "subject"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              subject: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileView"
              }
            }
          },
          starterPackView: {
            type: "object",
            required: ["uri", "cid", "record", "creator", "indexedAt"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              record: {
                type: "unknown"
              },
              creator: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileViewBasic"
              },
              list: {
                type: "ref",
                ref: "lex:app.bsky.graph.defs#listViewBasic"
              },
              listItemsSample: {
                type: "array",
                maxLength: 12,
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.graph.defs#listItemView"
                }
              },
              feeds: {
                type: "array",
                maxLength: 3,
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.feed.defs#generatorView"
                }
              },
              joinedWeekCount: {
                type: "integer",
                minimum: 0
              },
              joinedAllTimeCount: {
                type: "integer",
                minimum: 0
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          starterPackViewBasic: {
            type: "object",
            required: ["uri", "cid", "record", "creator", "indexedAt"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              record: {
                type: "unknown"
              },
              creator: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileViewBasic"
              },
              listItemCount: {
                type: "integer",
                minimum: 0
              },
              joinedWeekCount: {
                type: "integer",
                minimum: 0
              },
              joinedAllTimeCount: {
                type: "integer",
                minimum: 0
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          listPurpose: {
            type: "string",
            knownValues: [
              "app.bsky.graph.defs#modlist",
              "app.bsky.graph.defs#curatelist",
              "app.bsky.graph.defs#referencelist"
            ]
          },
          modlist: {
            type: "token",
            description: "A list of actors to apply an aggregate moderation action (mute/block) on."
          },
          curatelist: {
            type: "token",
            description: "A list of actors used for curation purposes such as list feeds or interaction gating."
          },
          referencelist: {
            type: "token",
            description: "A list of actors used for only for reference purposes such as within a starter pack."
          },
          listViewerState: {
            type: "object",
            properties: {
              muted: {
                type: "boolean"
              },
              blocked: {
                type: "string",
                format: "at-uri"
              }
            }
          },
          notFoundActor: {
            type: "object",
            description: "indicates that a handle or DID could not be resolved",
            required: ["actor", "notFound"],
            properties: {
              actor: {
                type: "string",
                format: "at-identifier"
              },
              notFound: {
                type: "boolean",
                const: true
              }
            }
          },
          relationship: {
            type: "object",
            description: "lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              following: {
                type: "string",
                format: "at-uri",
                description: "if the actor follows this DID, this is the AT-URI of the follow record"
              },
              followedBy: {
                type: "string",
                format: "at-uri",
                description: "if the actor is followed by this DID, contains the AT-URI of the follow record"
              }
            }
          }
        }
      },
      AppBskyGraphFollow: {
        lexicon: 1,
        id: "app.bsky.graph.follow",
        defs: {
          main: {
            type: "record",
            description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.",
            key: "tid",
            record: {
              type: "object",
              required: ["subject", "createdAt"],
              properties: {
                subject: {
                  type: "string",
                  format: "did"
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetActorStarterPacks: {
        lexicon: 1,
        id: "app.bsky.graph.getActorStarterPacks",
        defs: {
          main: {
            type: "query",
            description: "Get a list of starter packs created by the actor.",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["starterPacks"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  starterPacks: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetBlocks: {
        lexicon: 1,
        id: "app.bsky.graph.getBlocks",
        defs: {
          main: {
            type: "query",
            description: "Enumerates which accounts the requesting account is currently blocking. Requires auth.",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["blocks"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  blocks: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetFollowers: {
        lexicon: 1,
        id: "app.bsky.graph.getFollowers",
        defs: {
          main: {
            type: "query",
            description: "Enumerates accounts which follow a specified account (actor).",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["subject", "followers"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  },
                  cursor: {
                    type: "string"
                  },
                  followers: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetFollows: {
        lexicon: 1,
        id: "app.bsky.graph.getFollows",
        defs: {
          main: {
            type: "query",
            description: "Enumerates accounts which a specified account (actor) follows.",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["subject", "follows"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  },
                  cursor: {
                    type: "string"
                  },
                  follows: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetKnownFollowers: {
        lexicon: 1,
        id: "app.bsky.graph.getKnownFollowers",
        defs: {
          main: {
            type: "query",
            description: "Enumerates accounts which follow a specified account (actor) and are followed by the viewer.",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["subject", "followers"],
                properties: {
                  subject: {
                    type: "ref",
                    ref: "lex:app.bsky.actor.defs#profileView"
                  },
                  cursor: {
                    type: "string"
                  },
                  followers: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetList: {
        lexicon: 1,
        id: "app.bsky.graph.getList",
        defs: {
          main: {
            type: "query",
            description: "Gets a 'view' (with additional context) of a specified list.",
            parameters: {
              type: "params",
              required: ["list"],
              properties: {
                list: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) of the list record to hydrate."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["list", "items"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  list: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#listView"
                  },
                  items: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#listItemView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetListBlocks: {
        lexicon: 1,
        id: "app.bsky.graph.getListBlocks",
        defs: {
          main: {
            type: "query",
            description: "Get mod lists that the requesting account (actor) is blocking. Requires auth.",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["lists"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  lists: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#listView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetListMutes: {
        lexicon: 1,
        id: "app.bsky.graph.getListMutes",
        defs: {
          main: {
            type: "query",
            description: "Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["lists"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  lists: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#listView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetLists: {
        lexicon: 1,
        id: "app.bsky.graph.getLists",
        defs: {
          main: {
            type: "query",
            description: "Enumerates the lists created by a specified account (actor).",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier",
                  description: "The account (actor) to enumerate lists from."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["lists"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  lists: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#listView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetMutes: {
        lexicon: 1,
        id: "app.bsky.graph.getMutes",
        defs: {
          main: {
            type: "query",
            description: "Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["mutes"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  mutes: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetRelationships: {
        lexicon: 1,
        id: "app.bsky.graph.getRelationships",
        defs: {
          main: {
            type: "query",
            description: "Enumerates public relationships between one account, and a list of other accounts. Does not require auth.",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier",
                  description: "Primary account requesting relationships for."
                },
                others: {
                  type: "array",
                  description: "List of 'other' accounts to be related back to the primary.",
                  maxLength: 30,
                  items: {
                    type: "string",
                    format: "at-identifier"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["relationships"],
                properties: {
                  actor: {
                    type: "string",
                    format: "did"
                  },
                  relationships: {
                    type: "array",
                    items: {
                      type: "union",
                      refs: [
                        "lex:app.bsky.graph.defs#relationship",
                        "lex:app.bsky.graph.defs#notFoundActor"
                      ]
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "ActorNotFound",
                description: "the primary actor at-identifier could not be resolved"
              }
            ]
          }
        }
      },
      AppBskyGraphGetStarterPack: {
        lexicon: 1,
        id: "app.bsky.graph.getStarterPack",
        defs: {
          main: {
            type: "query",
            description: "Gets a view of a starter pack.",
            parameters: {
              type: "params",
              required: ["starterPack"],
              properties: {
                starterPack: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) of the starter pack record."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["starterPack"],
                properties: {
                  starterPack: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.defs#starterPackView"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetStarterPacks: {
        lexicon: 1,
        id: "app.bsky.graph.getStarterPacks",
        defs: {
          main: {
            type: "query",
            description: "Get views for a list of starter packs.",
            parameters: {
              type: "params",
              required: ["uris"],
              properties: {
                uris: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "at-uri"
                  },
                  maxLength: 25
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["starterPacks"],
                properties: {
                  starterPacks: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphGetSuggestedFollowsByActor: {
        lexicon: 1,
        id: "app.bsky.graph.getSuggestedFollowsByActor",
        defs: {
          main: {
            type: "query",
            description: "Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "at-identifier"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["suggestions"],
                properties: {
                  suggestions: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.actor.defs#profileView"
                    }
                  },
                  isFallback: {
                    type: "boolean",
                    description: "If true, response has fallen-back to generic results, and is not scoped using relativeToDid",
                    default: false
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphList: {
        lexicon: 1,
        id: "app.bsky.graph.list",
        defs: {
          main: {
            type: "record",
            description: "Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.",
            key: "tid",
            record: {
              type: "object",
              required: ["name", "purpose", "createdAt"],
              properties: {
                purpose: {
                  type: "ref",
                  description: "Defines the purpose of the list (aka, moderation-oriented or curration-oriented)",
                  ref: "lex:app.bsky.graph.defs#listPurpose"
                },
                name: {
                  type: "string",
                  maxLength: 64,
                  minLength: 1,
                  description: "Display name for list; can not be empty."
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                avatar: {
                  type: "blob",
                  accept: ["image/png", "image/jpeg"],
                  maxSize: 1e6
                },
                labels: {
                  type: "union",
                  refs: ["lex:com.atproto.label.defs#selfLabels"]
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      },
      AppBskyGraphListblock: {
        lexicon: 1,
        id: "app.bsky.graph.listblock",
        defs: {
          main: {
            type: "record",
            description: "Record representing a block relationship against an entire an entire list of accounts (actors).",
            key: "tid",
            record: {
              type: "object",
              required: ["subject", "createdAt"],
              properties: {
                subject: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) to the mod list record."
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      },
      AppBskyGraphListitem: {
        lexicon: 1,
        id: "app.bsky.graph.listitem",
        defs: {
          main: {
            type: "record",
            description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.",
            key: "tid",
            record: {
              type: "object",
              required: ["subject", "list", "createdAt"],
              properties: {
                subject: {
                  type: "string",
                  format: "did",
                  description: "The account which is included on the list."
                },
                list: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) to the list record (app.bsky.graph.list)."
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      },
      AppBskyGraphMuteActor: {
        lexicon: 1,
        id: "app.bsky.graph.muteActor",
        defs: {
          main: {
            type: "procedure",
            description: "Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphMuteActorList: {
        lexicon: 1,
        id: "app.bsky.graph.muteActorList",
        defs: {
          main: {
            type: "procedure",
            description: "Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["list"],
                properties: {
                  list: {
                    type: "string",
                    format: "at-uri"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphMuteThread: {
        lexicon: 1,
        id: "app.bsky.graph.muteThread",
        defs: {
          main: {
            type: "procedure",
            description: "Mutes a thread preventing notifications from the thread and any of its children. Mutes are private in Bluesky. Requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["root"],
                properties: {
                  root: {
                    type: "string",
                    format: "at-uri"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphSearchStarterPacks: {
        lexicon: 1,
        id: "app.bsky.graph.searchStarterPacks",
        defs: {
          main: {
            type: "query",
            description: "Find starter packs matching search criteria. Does not require auth.",
            parameters: {
              type: "params",
              required: ["q"],
              properties: {
                q: {
                  type: "string",
                  description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 25
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["starterPacks"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  starterPacks: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.graph.defs#starterPackViewBasic"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphStarterpack: {
        lexicon: 1,
        id: "app.bsky.graph.starterpack",
        defs: {
          main: {
            type: "record",
            description: "Record defining a starter pack of actors and feeds for new users.",
            key: "tid",
            record: {
              type: "object",
              required: ["name", "list", "createdAt"],
              properties: {
                name: {
                  type: "string",
                  maxGraphemes: 50,
                  maxLength: 500,
                  minLength: 1,
                  description: "Display name for starter pack; can not be empty."
                },
                description: {
                  type: "string",
                  maxGraphemes: 300,
                  maxLength: 3e3
                },
                descriptionFacets: {
                  type: "array",
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.richtext.facet"
                  }
                },
                list: {
                  type: "string",
                  format: "at-uri",
                  description: "Reference (AT-URI) to the list record."
                },
                feeds: {
                  type: "array",
                  maxLength: 3,
                  items: {
                    type: "ref",
                    ref: "lex:app.bsky.graph.starterpack#feedItem"
                  }
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          },
          feedItem: {
            type: "object",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              }
            }
          }
        }
      },
      AppBskyGraphUnmuteActor: {
        lexicon: 1,
        id: "app.bsky.graph.unmuteActor",
        defs: {
          main: {
            type: "procedure",
            description: "Unmutes the specified account. Requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["actor"],
                properties: {
                  actor: {
                    type: "string",
                    format: "at-identifier"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphUnmuteActorList: {
        lexicon: 1,
        id: "app.bsky.graph.unmuteActorList",
        defs: {
          main: {
            type: "procedure",
            description: "Unmutes the specified list of accounts. Requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["list"],
                properties: {
                  list: {
                    type: "string",
                    format: "at-uri"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyGraphUnmuteThread: {
        lexicon: 1,
        id: "app.bsky.graph.unmuteThread",
        defs: {
          main: {
            type: "procedure",
            description: "Unmutes the specified thread. Requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["root"],
                properties: {
                  root: {
                    type: "string",
                    format: "at-uri"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyLabelerDefs: {
        lexicon: 1,
        id: "app.bsky.labeler.defs",
        defs: {
          labelerView: {
            type: "object",
            required: ["uri", "cid", "creator", "indexedAt"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              creator: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileView"
              },
              likeCount: {
                type: "integer",
                minimum: 0
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.labeler.defs#labelerViewerState"
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              }
            }
          },
          labelerViewDetailed: {
            type: "object",
            required: ["uri", "cid", "creator", "policies", "indexedAt"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              creator: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileView"
              },
              policies: {
                type: "ref",
                ref: "lex:app.bsky.labeler.defs#labelerPolicies"
              },
              likeCount: {
                type: "integer",
                minimum: 0
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.labeler.defs#labelerViewerState"
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              }
            }
          },
          labelerViewerState: {
            type: "object",
            properties: {
              like: {
                type: "string",
                format: "at-uri"
              }
            }
          },
          labelerPolicies: {
            type: "object",
            required: ["labelValues"],
            properties: {
              labelValues: {
                type: "array",
                description: "The label values which this labeler publishes. May include global or custom labels.",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#labelValue"
                }
              },
              labelValueDefinitions: {
                type: "array",
                description: "Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#labelValueDefinition"
                }
              }
            }
          }
        }
      },
      AppBskyLabelerGetServices: {
        lexicon: 1,
        id: "app.bsky.labeler.getServices",
        defs: {
          main: {
            type: "query",
            description: "Get information about a list of labeler services.",
            parameters: {
              type: "params",
              required: ["dids"],
              properties: {
                dids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "did"
                  }
                },
                detailed: {
                  type: "boolean",
                  default: false
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["views"],
                properties: {
                  views: {
                    type: "array",
                    items: {
                      type: "union",
                      refs: [
                        "lex:app.bsky.labeler.defs#labelerView",
                        "lex:app.bsky.labeler.defs#labelerViewDetailed"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyLabelerService: {
        lexicon: 1,
        id: "app.bsky.labeler.service",
        defs: {
          main: {
            type: "record",
            description: "A declaration of the existence of labeler service.",
            key: "literal:self",
            record: {
              type: "object",
              required: ["policies", "createdAt"],
              properties: {
                policies: {
                  type: "ref",
                  ref: "lex:app.bsky.labeler.defs#labelerPolicies"
                },
                labels: {
                  type: "union",
                  refs: ["lex:com.atproto.label.defs#selfLabels"]
                },
                createdAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            }
          }
        }
      },
      AppBskyNotificationGetUnreadCount: {
        lexicon: 1,
        id: "app.bsky.notification.getUnreadCount",
        defs: {
          main: {
            type: "query",
            description: "Count the number of unread notifications for the requesting account. Requires auth.",
            parameters: {
              type: "params",
              properties: {
                priority: {
                  type: "boolean"
                },
                seenAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["count"],
                properties: {
                  count: {
                    type: "integer"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyNotificationListNotifications: {
        lexicon: 1,
        id: "app.bsky.notification.listNotifications",
        defs: {
          main: {
            type: "query",
            description: "Enumerate notifications for the requesting account. Requires auth.",
            parameters: {
              type: "params",
              properties: {
                reasons: {
                  description: "Notification reasons to include in response.",
                  type: "array",
                  items: {
                    type: "string",
                    description: "A reason that matches the reason property of #notification."
                  }
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                priority: {
                  type: "boolean"
                },
                cursor: {
                  type: "string"
                },
                seenAt: {
                  type: "string",
                  format: "datetime"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["notifications"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  notifications: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.notification.listNotifications#notification"
                    }
                  },
                  priority: {
                    type: "boolean"
                  },
                  seenAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          },
          notification: {
            type: "object",
            required: [
              "uri",
              "cid",
              "author",
              "reason",
              "record",
              "isRead",
              "indexedAt"
            ],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              author: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileView"
              },
              reason: {
                type: "string",
                description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.",
                knownValues: [
                  "like",
                  "repost",
                  "follow",
                  "mention",
                  "reply",
                  "quote",
                  "starterpack-joined"
                ]
              },
              reasonSubject: {
                type: "string",
                format: "at-uri"
              },
              record: {
                type: "unknown"
              },
              isRead: {
                type: "boolean"
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              }
            }
          }
        }
      },
      AppBskyNotificationPutPreferences: {
        lexicon: 1,
        id: "app.bsky.notification.putPreferences",
        defs: {
          main: {
            type: "procedure",
            description: "Set notification-related preferences for an account. Requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["priority"],
                properties: {
                  priority: {
                    type: "boolean"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyNotificationRegisterPush: {
        lexicon: 1,
        id: "app.bsky.notification.registerPush",
        defs: {
          main: {
            type: "procedure",
            description: "Register to receive push notifications, via a specified service, for the requesting account. Requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["serviceDid", "token", "platform", "appId"],
                properties: {
                  serviceDid: {
                    type: "string",
                    format: "did"
                  },
                  token: {
                    type: "string"
                  },
                  platform: {
                    type: "string",
                    knownValues: ["ios", "android", "web"]
                  },
                  appId: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyNotificationUpdateSeen: {
        lexicon: 1,
        id: "app.bsky.notification.updateSeen",
        defs: {
          main: {
            type: "procedure",
            description: "Notify server that the requesting account has seen notifications. Requires auth.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["seenAt"],
                properties: {
                  seenAt: {
                    type: "string",
                    format: "datetime"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyRichtextFacet: {
        lexicon: 1,
        id: "app.bsky.richtext.facet",
        defs: {
          main: {
            type: "object",
            description: "Annotation of a sub-string within rich text.",
            required: ["index", "features"],
            properties: {
              index: {
                type: "ref",
                ref: "lex:app.bsky.richtext.facet#byteSlice"
              },
              features: {
                type: "array",
                items: {
                  type: "union",
                  refs: [
                    "lex:app.bsky.richtext.facet#mention",
                    "lex:app.bsky.richtext.facet#link",
                    "lex:app.bsky.richtext.facet#tag"
                  ]
                }
              }
            }
          },
          mention: {
            type: "object",
            description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              }
            }
          },
          link: {
            type: "object",
            description: "Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "uri"
              }
            }
          },
          tag: {
            type: "object",
            description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').",
            required: ["tag"],
            properties: {
              tag: {
                type: "string",
                maxLength: 640,
                maxGraphemes: 64
              }
            }
          },
          byteSlice: {
            type: "object",
            description: "Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.",
            required: ["byteStart", "byteEnd"],
            properties: {
              byteStart: {
                type: "integer",
                minimum: 0
              },
              byteEnd: {
                type: "integer",
                minimum: 0
              }
            }
          }
        }
      },
      AppBskyUnspeccedDefs: {
        lexicon: 1,
        id: "app.bsky.unspecced.defs",
        defs: {
          skeletonSearchPost: {
            type: "object",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              }
            }
          },
          skeletonSearchActor: {
            type: "object",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              }
            }
          },
          skeletonSearchStarterPack: {
            type: "object",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              }
            }
          },
          trendingTopic: {
            type: "object",
            required: ["topic", "link"],
            properties: {
              topic: {
                type: "string"
              },
              displayName: {
                type: "string"
              },
              description: {
                type: "string"
              },
              link: {
                type: "string"
              }
            }
          }
        }
      },
      AppBskyUnspeccedGetConfig: {
        lexicon: 1,
        id: "app.bsky.unspecced.getConfig",
        defs: {
          main: {
            type: "query",
            description: "Get miscellaneous runtime configuration.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: [],
                properties: {
                  checkEmailConfirmed: {
                    type: "boolean"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyUnspeccedGetPopularFeedGenerators: {
        lexicon: 1,
        id: "app.bsky.unspecced.getPopularFeedGenerators",
        defs: {
          main: {
            type: "query",
            description: "An unspecced view of globally popular feed generators.",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                },
                query: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["feeds"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  feeds: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.feed.defs#generatorView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyUnspeccedGetSuggestionsSkeleton: {
        lexicon: 1,
        id: "app.bsky.unspecced.getSuggestionsSkeleton",
        defs: {
          main: {
            type: "query",
            description: "Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions",
            parameters: {
              type: "params",
              properties: {
                viewer: {
                  type: "string",
                  format: "did",
                  description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                },
                relativeToDid: {
                  type: "string",
                  format: "did",
                  description: "DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["actors"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  actors: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor"
                    }
                  },
                  relativeToDid: {
                    type: "string",
                    format: "did",
                    description: "DID of the account these suggestions are relative to. If this is returned undefined, suggestions are based on the viewer."
                  }
                }
              }
            }
          }
        }
      },
      AppBskyUnspeccedGetTaggedSuggestions: {
        lexicon: 1,
        id: "app.bsky.unspecced.getTaggedSuggestions",
        defs: {
          main: {
            type: "query",
            description: "Get a list of suggestions (feeds and users) tagged with categories",
            parameters: {
              type: "params",
              properties: {}
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["suggestions"],
                properties: {
                  suggestions: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.unspecced.getTaggedSuggestions#suggestion"
                    }
                  }
                }
              }
            }
          },
          suggestion: {
            type: "object",
            required: ["tag", "subjectType", "subject"],
            properties: {
              tag: {
                type: "string"
              },
              subjectType: {
                type: "string",
                knownValues: ["actor", "feed"]
              },
              subject: {
                type: "string",
                format: "uri"
              }
            }
          }
        }
      },
      AppBskyUnspeccedGetTrendingTopics: {
        lexicon: 1,
        id: "app.bsky.unspecced.getTrendingTopics",
        defs: {
          main: {
            type: "query",
            description: "Get a list of trending topics",
            parameters: {
              type: "params",
              properties: {
                viewer: {
                  type: "string",
                  format: "did",
                  description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 25,
                  default: 10
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["topics", "suggested"],
                properties: {
                  topics: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.unspecced.defs#trendingTopic"
                    }
                  },
                  suggested: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.unspecced.defs#trendingTopic"
                    }
                  }
                }
              }
            }
          }
        }
      },
      AppBskyUnspeccedSearchActorsSkeleton: {
        lexicon: 1,
        id: "app.bsky.unspecced.searchActorsSkeleton",
        defs: {
          main: {
            type: "query",
            description: "Backend Actors (profile) search, returns only skeleton.",
            parameters: {
              type: "params",
              required: ["q"],
              properties: {
                q: {
                  type: "string",
                  description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax."
                },
                viewer: {
                  type: "string",
                  format: "did",
                  description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking."
                },
                typeahead: {
                  type: "boolean",
                  description: "If true, acts as fast/simple 'typeahead' query."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 25
                },
                cursor: {
                  type: "string",
                  description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["actors"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  hitsTotal: {
                    type: "integer",
                    description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                  },
                  actors: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "BadQueryString"
              }
            ]
          }
        }
      },
      AppBskyUnspeccedSearchPostsSkeleton: {
        lexicon: 1,
        id: "app.bsky.unspecced.searchPostsSkeleton",
        defs: {
          main: {
            type: "query",
            description: "Backend Posts search, returns only skeleton",
            parameters: {
              type: "params",
              required: ["q"],
              properties: {
                q: {
                  type: "string",
                  description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                },
                sort: {
                  type: "string",
                  knownValues: ["top", "latest"],
                  default: "latest",
                  description: "Specifies the ranking order of results."
                },
                since: {
                  type: "string",
                  description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD)."
                },
                until: {
                  type: "string",
                  description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD)."
                },
                mentions: {
                  type: "string",
                  format: "at-identifier",
                  description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions."
                },
                author: {
                  type: "string",
                  format: "at-identifier",
                  description: "Filter to posts by the given account. Handles are resolved to DID before query-time."
                },
                lang: {
                  type: "string",
                  format: "language",
                  description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection."
                },
                domain: {
                  type: "string",
                  description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization."
                },
                url: {
                  type: "string",
                  format: "uri",
                  description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching."
                },
                tag: {
                  type: "array",
                  items: {
                    type: "string",
                    maxLength: 640,
                    maxGraphemes: 64
                  },
                  description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching."
                },
                viewer: {
                  type: "string",
                  format: "did",
                  description: "DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 25
                },
                cursor: {
                  type: "string",
                  description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["posts"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  hitsTotal: {
                    type: "integer",
                    description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                  },
                  posts: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.unspecced.defs#skeletonSearchPost"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "BadQueryString"
              }
            ]
          }
        }
      },
      AppBskyUnspeccedSearchStarterPacksSkeleton: {
        lexicon: 1,
        id: "app.bsky.unspecced.searchStarterPacksSkeleton",
        defs: {
          main: {
            type: "query",
            description: "Backend Starter Pack search, returns only skeleton.",
            parameters: {
              type: "params",
              required: ["q"],
              properties: {
                q: {
                  type: "string",
                  description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended."
                },
                viewer: {
                  type: "string",
                  format: "did",
                  description: "DID of the account making the request (not included for public/unauthenticated queries)."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 25
                },
                cursor: {
                  type: "string",
                  description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["starterPacks"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  hitsTotal: {
                    type: "integer",
                    description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits."
                  },
                  starterPacks: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:app.bsky.unspecced.defs#skeletonSearchStarterPack"
                    }
                  }
                }
              }
            },
            errors: [
              {
                name: "BadQueryString"
              }
            ]
          }
        }
      },
      AppBskyVideoDefs: {
        lexicon: 1,
        id: "app.bsky.video.defs",
        defs: {
          jobStatus: {
            type: "object",
            required: ["jobId", "did", "state"],
            properties: {
              jobId: {
                type: "string"
              },
              did: {
                type: "string",
                format: "did"
              },
              state: {
                type: "string",
                description: "The state of the video processing job. All values not listed as a known value indicate that the job is in process.",
                knownValues: ["JOB_STATE_COMPLETED", "JOB_STATE_FAILED"]
              },
              progress: {
                type: "integer",
                minimum: 0,
                maximum: 100,
                description: "Progress within the current processing state."
              },
              blob: {
                type: "blob"
              },
              error: {
                type: "string"
              },
              message: {
                type: "string"
              }
            }
          }
        }
      },
      AppBskyVideoGetJobStatus: {
        lexicon: 1,
        id: "app.bsky.video.getJobStatus",
        defs: {
          main: {
            type: "query",
            description: "Get status details for a video processing job.",
            parameters: {
              type: "params",
              required: ["jobId"],
              properties: {
                jobId: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["jobStatus"],
                properties: {
                  jobStatus: {
                    type: "ref",
                    ref: "lex:app.bsky.video.defs#jobStatus"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyVideoGetUploadLimits: {
        lexicon: 1,
        id: "app.bsky.video.getUploadLimits",
        defs: {
          main: {
            type: "query",
            description: "Get video upload limits for the authenticated user.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["canUpload"],
                properties: {
                  canUpload: {
                    type: "boolean"
                  },
                  remainingDailyVideos: {
                    type: "integer"
                  },
                  remainingDailyBytes: {
                    type: "integer"
                  },
                  message: {
                    type: "string"
                  },
                  error: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      AppBskyVideoUploadVideo: {
        lexicon: 1,
        id: "app.bsky.video.uploadVideo",
        defs: {
          main: {
            type: "procedure",
            description: "Upload a video to be processed then stored on the PDS.",
            input: {
              encoding: "video/mp4"
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["jobStatus"],
                properties: {
                  jobStatus: {
                    type: "ref",
                    ref: "lex:app.bsky.video.defs#jobStatus"
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyActorDeclaration: {
        lexicon: 1,
        id: "chat.bsky.actor.declaration",
        defs: {
          main: {
            type: "record",
            description: "A declaration of a Bluesky chat account.",
            key: "literal:self",
            record: {
              type: "object",
              required: ["allowIncoming"],
              properties: {
                allowIncoming: {
                  type: "string",
                  knownValues: ["all", "none", "following"]
                }
              }
            }
          }
        }
      },
      ChatBskyActorDefs: {
        lexicon: 1,
        id: "chat.bsky.actor.defs",
        defs: {
          profileViewBasic: {
            type: "object",
            required: ["did", "handle"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              handle: {
                type: "string",
                format: "handle"
              },
              displayName: {
                type: "string",
                maxGraphemes: 64,
                maxLength: 640
              },
              avatar: {
                type: "string",
                format: "uri"
              },
              associated: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileAssociated"
              },
              viewer: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#viewerState"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              chatDisabled: {
                type: "boolean",
                description: "Set to true when the actor cannot actively participate in converations"
              }
            }
          }
        }
      },
      ChatBskyActorDeleteAccount: {
        lexicon: 1,
        id: "chat.bsky.actor.deleteAccount",
        defs: {
          main: {
            type: "procedure",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {}
              }
            }
          }
        }
      },
      ChatBskyActorExportAccountData: {
        lexicon: 1,
        id: "chat.bsky.actor.exportAccountData",
        defs: {
          main: {
            type: "query",
            output: {
              encoding: "application/jsonl"
            }
          }
        }
      },
      ChatBskyConvoDefs: {
        lexicon: 1,
        id: "chat.bsky.convo.defs",
        defs: {
          messageRef: {
            type: "object",
            required: ["did", "messageId", "convoId"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              convoId: {
                type: "string"
              },
              messageId: {
                type: "string"
              }
            }
          },
          messageInput: {
            type: "object",
            required: ["text"],
            properties: {
              text: {
                type: "string",
                maxLength: 1e4,
                maxGraphemes: 1e3
              },
              facets: {
                type: "array",
                description: "Annotations of text (mentions, URLs, hashtags, etc)",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet"
                }
              },
              embed: {
                type: "union",
                refs: ["lex:app.bsky.embed.record"]
              }
            }
          },
          messageView: {
            type: "object",
            required: ["id", "rev", "text", "sender", "sentAt"],
            properties: {
              id: {
                type: "string"
              },
              rev: {
                type: "string"
              },
              text: {
                type: "string",
                maxLength: 1e4,
                maxGraphemes: 1e3
              },
              facets: {
                type: "array",
                description: "Annotations of text (mentions, URLs, hashtags, etc)",
                items: {
                  type: "ref",
                  ref: "lex:app.bsky.richtext.facet"
                }
              },
              embed: {
                type: "union",
                refs: ["lex:app.bsky.embed.record#view"]
              },
              sender: {
                type: "ref",
                ref: "lex:chat.bsky.convo.defs#messageViewSender"
              },
              sentAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          deletedMessageView: {
            type: "object",
            required: ["id", "rev", "sender", "sentAt"],
            properties: {
              id: {
                type: "string"
              },
              rev: {
                type: "string"
              },
              sender: {
                type: "ref",
                ref: "lex:chat.bsky.convo.defs#messageViewSender"
              },
              sentAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          messageViewSender: {
            type: "object",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              }
            }
          },
          convoView: {
            type: "object",
            required: ["id", "rev", "members", "muted", "unreadCount"],
            properties: {
              id: {
                type: "string"
              },
              rev: {
                type: "string"
              },
              members: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:chat.bsky.actor.defs#profileViewBasic"
                }
              },
              lastMessage: {
                type: "union",
                refs: [
                  "lex:chat.bsky.convo.defs#messageView",
                  "lex:chat.bsky.convo.defs#deletedMessageView"
                ]
              },
              muted: {
                type: "boolean"
              },
              opened: {
                type: "boolean"
              },
              unreadCount: {
                type: "integer"
              }
            }
          },
          logBeginConvo: {
            type: "object",
            required: ["rev", "convoId"],
            properties: {
              rev: {
                type: "string"
              },
              convoId: {
                type: "string"
              }
            }
          },
          logLeaveConvo: {
            type: "object",
            required: ["rev", "convoId"],
            properties: {
              rev: {
                type: "string"
              },
              convoId: {
                type: "string"
              }
            }
          },
          logCreateMessage: {
            type: "object",
            required: ["rev", "convoId", "message"],
            properties: {
              rev: {
                type: "string"
              },
              convoId: {
                type: "string"
              },
              message: {
                type: "union",
                refs: [
                  "lex:chat.bsky.convo.defs#messageView",
                  "lex:chat.bsky.convo.defs#deletedMessageView"
                ]
              }
            }
          },
          logDeleteMessage: {
            type: "object",
            required: ["rev", "convoId", "message"],
            properties: {
              rev: {
                type: "string"
              },
              convoId: {
                type: "string"
              },
              message: {
                type: "union",
                refs: [
                  "lex:chat.bsky.convo.defs#messageView",
                  "lex:chat.bsky.convo.defs#deletedMessageView"
                ]
              }
            }
          }
        }
      },
      ChatBskyConvoDeleteMessageForSelf: {
        lexicon: 1,
        id: "chat.bsky.convo.deleteMessageForSelf",
        defs: {
          main: {
            type: "procedure",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convoId", "messageId"],
                properties: {
                  convoId: {
                    type: "string"
                  },
                  messageId: {
                    type: "string"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:chat.bsky.convo.defs#deletedMessageView"
              }
            }
          }
        }
      },
      ChatBskyConvoGetConvo: {
        lexicon: 1,
        id: "chat.bsky.convo.getConvo",
        defs: {
          main: {
            type: "query",
            parameters: {
              type: "params",
              required: ["convoId"],
              properties: {
                convoId: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convo"],
                properties: {
                  convo: {
                    type: "ref",
                    ref: "lex:chat.bsky.convo.defs#convoView"
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyConvoGetConvoForMembers: {
        lexicon: 1,
        id: "chat.bsky.convo.getConvoForMembers",
        defs: {
          main: {
            type: "query",
            parameters: {
              type: "params",
              required: ["members"],
              properties: {
                members: {
                  type: "array",
                  minLength: 1,
                  maxLength: 10,
                  items: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convo"],
                properties: {
                  convo: {
                    type: "ref",
                    ref: "lex:chat.bsky.convo.defs#convoView"
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyConvoGetLog: {
        lexicon: 1,
        id: "chat.bsky.convo.getLog",
        defs: {
          main: {
            type: "query",
            parameters: {
              type: "params",
              required: [],
              properties: {
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["logs"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  logs: {
                    type: "array",
                    items: {
                      type: "union",
                      refs: [
                        "lex:chat.bsky.convo.defs#logBeginConvo",
                        "lex:chat.bsky.convo.defs#logLeaveConvo",
                        "lex:chat.bsky.convo.defs#logCreateMessage",
                        "lex:chat.bsky.convo.defs#logDeleteMessage"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyConvoGetMessages: {
        lexicon: 1,
        id: "chat.bsky.convo.getMessages",
        defs: {
          main: {
            type: "query",
            parameters: {
              type: "params",
              required: ["convoId"],
              properties: {
                convoId: {
                  type: "string"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["messages"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  messages: {
                    type: "array",
                    items: {
                      type: "union",
                      refs: [
                        "lex:chat.bsky.convo.defs#messageView",
                        "lex:chat.bsky.convo.defs#deletedMessageView"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyConvoLeaveConvo: {
        lexicon: 1,
        id: "chat.bsky.convo.leaveConvo",
        defs: {
          main: {
            type: "procedure",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convoId"],
                properties: {
                  convoId: {
                    type: "string"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convoId", "rev"],
                properties: {
                  convoId: {
                    type: "string"
                  },
                  rev: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyConvoListConvos: {
        lexicon: 1,
        id: "chat.bsky.convo.listConvos",
        defs: {
          main: {
            type: "query",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convos"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  convos: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#convoView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyConvoMuteConvo: {
        lexicon: 1,
        id: "chat.bsky.convo.muteConvo",
        defs: {
          main: {
            type: "procedure",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convoId"],
                properties: {
                  convoId: {
                    type: "string"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convo"],
                properties: {
                  convo: {
                    type: "ref",
                    ref: "lex:chat.bsky.convo.defs#convoView"
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyConvoSendMessage: {
        lexicon: 1,
        id: "chat.bsky.convo.sendMessage",
        defs: {
          main: {
            type: "procedure",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convoId", "message"],
                properties: {
                  convoId: {
                    type: "string"
                  },
                  message: {
                    type: "ref",
                    ref: "lex:chat.bsky.convo.defs#messageInput"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:chat.bsky.convo.defs#messageView"
              }
            }
          }
        }
      },
      ChatBskyConvoSendMessageBatch: {
        lexicon: 1,
        id: "chat.bsky.convo.sendMessageBatch",
        defs: {
          main: {
            type: "procedure",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["items"],
                properties: {
                  items: {
                    type: "array",
                    maxLength: 100,
                    items: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.sendMessageBatch#batchItem"
                    }
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["items"],
                properties: {
                  items: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:chat.bsky.convo.defs#messageView"
                    }
                  }
                }
              }
            }
          },
          batchItem: {
            type: "object",
            required: ["convoId", "message"],
            properties: {
              convoId: {
                type: "string"
              },
              message: {
                type: "ref",
                ref: "lex:chat.bsky.convo.defs#messageInput"
              }
            }
          }
        }
      },
      ChatBskyConvoUnmuteConvo: {
        lexicon: 1,
        id: "chat.bsky.convo.unmuteConvo",
        defs: {
          main: {
            type: "procedure",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convoId"],
                properties: {
                  convoId: {
                    type: "string"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convo"],
                properties: {
                  convo: {
                    type: "ref",
                    ref: "lex:chat.bsky.convo.defs#convoView"
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyConvoUpdateRead: {
        lexicon: 1,
        id: "chat.bsky.convo.updateRead",
        defs: {
          main: {
            type: "procedure",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convoId"],
                properties: {
                  convoId: {
                    type: "string"
                  },
                  messageId: {
                    type: "string"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["convo"],
                properties: {
                  convo: {
                    type: "ref",
                    ref: "lex:chat.bsky.convo.defs#convoView"
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyModerationGetActorMetadata: {
        lexicon: 1,
        id: "chat.bsky.moderation.getActorMetadata",
        defs: {
          main: {
            type: "query",
            parameters: {
              type: "params",
              required: ["actor"],
              properties: {
                actor: {
                  type: "string",
                  format: "did"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["day", "month", "all"],
                properties: {
                  day: {
                    type: "ref",
                    ref: "lex:chat.bsky.moderation.getActorMetadata#metadata"
                  },
                  month: {
                    type: "ref",
                    ref: "lex:chat.bsky.moderation.getActorMetadata#metadata"
                  },
                  all: {
                    type: "ref",
                    ref: "lex:chat.bsky.moderation.getActorMetadata#metadata"
                  }
                }
              }
            }
          },
          metadata: {
            type: "object",
            required: [
              "messagesSent",
              "messagesReceived",
              "convos",
              "convosStarted"
            ],
            properties: {
              messagesSent: {
                type: "integer"
              },
              messagesReceived: {
                type: "integer"
              },
              convos: {
                type: "integer"
              },
              convosStarted: {
                type: "integer"
              }
            }
          }
        }
      },
      ChatBskyModerationGetMessageContext: {
        lexicon: 1,
        id: "chat.bsky.moderation.getMessageContext",
        defs: {
          main: {
            type: "query",
            parameters: {
              type: "params",
              required: ["messageId"],
              properties: {
                convoId: {
                  type: "string",
                  description: "Conversation that the message is from. NOTE: this field will eventually be required."
                },
                messageId: {
                  type: "string"
                },
                before: {
                  type: "integer",
                  default: 5
                },
                after: {
                  type: "integer",
                  default: 5
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["messages"],
                properties: {
                  messages: {
                    type: "array",
                    items: {
                      type: "union",
                      refs: [
                        "lex:chat.bsky.convo.defs#messageView",
                        "lex:chat.bsky.convo.defs#deletedMessageView"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      ChatBskyModerationUpdateActorAccess: {
        lexicon: 1,
        id: "chat.bsky.moderation.updateActorAccess",
        defs: {
          main: {
            type: "procedure",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["actor", "allowAccess"],
                properties: {
                  actor: {
                    type: "string",
                    format: "did"
                  },
                  allowAccess: {
                    type: "boolean"
                  },
                  ref: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneCommunicationCreateTemplate: {
        lexicon: 1,
        id: "tools.ozone.communication.createTemplate",
        defs: {
          main: {
            type: "procedure",
            description: "Administrative action to create a new, re-usable communication (email for now) template.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["subject", "contentMarkdown", "name"],
                properties: {
                  name: {
                    type: "string",
                    description: "Name of the template."
                  },
                  contentMarkdown: {
                    type: "string",
                    description: "Content of the template, markdown supported, can contain variable placeholders."
                  },
                  subject: {
                    type: "string",
                    description: "Subject of the message, used in emails."
                  },
                  lang: {
                    type: "string",
                    format: "language",
                    description: "Message language."
                  },
                  createdBy: {
                    type: "string",
                    format: "did",
                    description: "DID of the user who is creating the template."
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:tools.ozone.communication.defs#templateView"
              }
            },
            errors: [
              {
                name: "DuplicateTemplateName"
              }
            ]
          }
        }
      },
      ToolsOzoneCommunicationDefs: {
        lexicon: 1,
        id: "tools.ozone.communication.defs",
        defs: {
          templateView: {
            type: "object",
            required: [
              "id",
              "name",
              "contentMarkdown",
              "disabled",
              "lastUpdatedBy",
              "createdAt",
              "updatedAt"
            ],
            properties: {
              id: {
                type: "string"
              },
              name: {
                type: "string",
                description: "Name of the template."
              },
              subject: {
                type: "string",
                description: "Content of the template, can contain markdown and variable placeholders."
              },
              contentMarkdown: {
                type: "string",
                description: "Subject of the message, used in emails."
              },
              disabled: {
                type: "boolean"
              },
              lang: {
                type: "string",
                format: "language",
                description: "Message language."
              },
              lastUpdatedBy: {
                type: "string",
                format: "did",
                description: "DID of the user who last updated the template."
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              updatedAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      },
      ToolsOzoneCommunicationDeleteTemplate: {
        lexicon: 1,
        id: "tools.ozone.communication.deleteTemplate",
        defs: {
          main: {
            type: "procedure",
            description: "Delete a communication template.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["id"],
                properties: {
                  id: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneCommunicationListTemplates: {
        lexicon: 1,
        id: "tools.ozone.communication.listTemplates",
        defs: {
          main: {
            type: "query",
            description: "Get list of all communication templates.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["communicationTemplates"],
                properties: {
                  communicationTemplates: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:tools.ozone.communication.defs#templateView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneCommunicationUpdateTemplate: {
        lexicon: 1,
        id: "tools.ozone.communication.updateTemplate",
        defs: {
          main: {
            type: "procedure",
            description: "Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["id"],
                properties: {
                  id: {
                    type: "string",
                    description: "ID of the template to be updated."
                  },
                  name: {
                    type: "string",
                    description: "Name of the template."
                  },
                  lang: {
                    type: "string",
                    format: "language",
                    description: "Message language."
                  },
                  contentMarkdown: {
                    type: "string",
                    description: "Content of the template, markdown supported, can contain variable placeholders."
                  },
                  subject: {
                    type: "string",
                    description: "Subject of the message, used in emails."
                  },
                  updatedBy: {
                    type: "string",
                    format: "did",
                    description: "DID of the user who is updating the template."
                  },
                  disabled: {
                    type: "boolean"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:tools.ozone.communication.defs#templateView"
              }
            },
            errors: [
              {
                name: "DuplicateTemplateName"
              }
            ]
          }
        }
      },
      ToolsOzoneModerationDefs: {
        lexicon: 1,
        id: "tools.ozone.moderation.defs",
        defs: {
          modEventView: {
            type: "object",
            required: [
              "id",
              "event",
              "subject",
              "subjectBlobCids",
              "createdBy",
              "createdAt"
            ],
            properties: {
              id: {
                type: "integer"
              },
              event: {
                type: "union",
                refs: [
                  "lex:tools.ozone.moderation.defs#modEventTakedown",
                  "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                  "lex:tools.ozone.moderation.defs#modEventComment",
                  "lex:tools.ozone.moderation.defs#modEventReport",
                  "lex:tools.ozone.moderation.defs#modEventLabel",
                  "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                  "lex:tools.ozone.moderation.defs#modEventEscalate",
                  "lex:tools.ozone.moderation.defs#modEventMute",
                  "lex:tools.ozone.moderation.defs#modEventUnmute",
                  "lex:tools.ozone.moderation.defs#modEventMuteReporter",
                  "lex:tools.ozone.moderation.defs#modEventUnmuteReporter",
                  "lex:tools.ozone.moderation.defs#modEventEmail",
                  "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                  "lex:tools.ozone.moderation.defs#modEventDivert",
                  "lex:tools.ozone.moderation.defs#modEventTag",
                  "lex:tools.ozone.moderation.defs#accountEvent",
                  "lex:tools.ozone.moderation.defs#identityEvent",
                  "lex:tools.ozone.moderation.defs#recordEvent"
                ]
              },
              subject: {
                type: "union",
                refs: [
                  "lex:com.atproto.admin.defs#repoRef",
                  "lex:com.atproto.repo.strongRef",
                  "lex:chat.bsky.convo.defs#messageRef"
                ]
              },
              subjectBlobCids: {
                type: "array",
                items: {
                  type: "string"
                }
              },
              createdBy: {
                type: "string",
                format: "did"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              creatorHandle: {
                type: "string"
              },
              subjectHandle: {
                type: "string"
              }
            }
          },
          modEventViewDetail: {
            type: "object",
            required: [
              "id",
              "event",
              "subject",
              "subjectBlobs",
              "createdBy",
              "createdAt"
            ],
            properties: {
              id: {
                type: "integer"
              },
              event: {
                type: "union",
                refs: [
                  "lex:tools.ozone.moderation.defs#modEventTakedown",
                  "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                  "lex:tools.ozone.moderation.defs#modEventComment",
                  "lex:tools.ozone.moderation.defs#modEventReport",
                  "lex:tools.ozone.moderation.defs#modEventLabel",
                  "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                  "lex:tools.ozone.moderation.defs#modEventEscalate",
                  "lex:tools.ozone.moderation.defs#modEventMute",
                  "lex:tools.ozone.moderation.defs#modEventUnmute",
                  "lex:tools.ozone.moderation.defs#modEventMuteReporter",
                  "lex:tools.ozone.moderation.defs#modEventUnmuteReporter",
                  "lex:tools.ozone.moderation.defs#modEventEmail",
                  "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                  "lex:tools.ozone.moderation.defs#modEventDivert",
                  "lex:tools.ozone.moderation.defs#modEventTag",
                  "lex:tools.ozone.moderation.defs#accountEvent",
                  "lex:tools.ozone.moderation.defs#identityEvent",
                  "lex:tools.ozone.moderation.defs#recordEvent"
                ]
              },
              subject: {
                type: "union",
                refs: [
                  "lex:tools.ozone.moderation.defs#repoView",
                  "lex:tools.ozone.moderation.defs#repoViewNotFound",
                  "lex:tools.ozone.moderation.defs#recordView",
                  "lex:tools.ozone.moderation.defs#recordViewNotFound"
                ]
              },
              subjectBlobs: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#blobView"
                }
              },
              createdBy: {
                type: "string",
                format: "did"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          subjectStatusView: {
            type: "object",
            required: ["id", "subject", "createdAt", "updatedAt", "reviewState"],
            properties: {
              id: {
                type: "integer"
              },
              subject: {
                type: "union",
                refs: [
                  "lex:com.atproto.admin.defs#repoRef",
                  "lex:com.atproto.repo.strongRef"
                ]
              },
              hosting: {
                type: "union",
                refs: [
                  "lex:tools.ozone.moderation.defs#accountHosting",
                  "lex:tools.ozone.moderation.defs#recordHosting"
                ]
              },
              subjectBlobCids: {
                type: "array",
                items: {
                  type: "string",
                  format: "cid"
                }
              },
              subjectRepoHandle: {
                type: "string"
              },
              updatedAt: {
                type: "string",
                format: "datetime",
                description: "Timestamp referencing when the last update was made to the moderation status of the subject"
              },
              createdAt: {
                type: "string",
                format: "datetime",
                description: "Timestamp referencing the first moderation status impacting event was emitted on the subject"
              },
              reviewState: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#subjectReviewState"
              },
              comment: {
                type: "string",
                description: "Sticky comment on the subject."
              },
              muteUntil: {
                type: "string",
                format: "datetime"
              },
              muteReportingUntil: {
                type: "string",
                format: "datetime"
              },
              lastReviewedBy: {
                type: "string",
                format: "did"
              },
              lastReviewedAt: {
                type: "string",
                format: "datetime"
              },
              lastReportedAt: {
                type: "string",
                format: "datetime"
              },
              lastAppealedAt: {
                type: "string",
                format: "datetime",
                description: "Timestamp referencing when the author of the subject appealed a moderation action"
              },
              takendown: {
                type: "boolean"
              },
              appealed: {
                type: "boolean",
                description: "True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators."
              },
              suspendUntil: {
                type: "string",
                format: "datetime"
              },
              tags: {
                type: "array",
                items: {
                  type: "string"
                }
              }
            }
          },
          subjectReviewState: {
            type: "string",
            knownValues: [
              "lex:tools.ozone.moderation.defs#reviewOpen",
              "lex:tools.ozone.moderation.defs#reviewEscalated",
              "lex:tools.ozone.moderation.defs#reviewClosed",
              "lex:tools.ozone.moderation.defs#reviewNone"
            ]
          },
          reviewOpen: {
            type: "token",
            description: "Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator"
          },
          reviewEscalated: {
            type: "token",
            description: "Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator"
          },
          reviewClosed: {
            type: "token",
            description: "Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator"
          },
          reviewNone: {
            type: "token",
            description: "Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it"
          },
          modEventTakedown: {
            type: "object",
            description: "Take down a subject permanently or temporarily",
            properties: {
              comment: {
                type: "string"
              },
              durationInHours: {
                type: "integer",
                description: "Indicates how long the takedown should be in effect before automatically expiring."
              },
              acknowledgeAccountSubjects: {
                type: "boolean",
                description: "If true, all other reports on content authored by this account will be resolved (acknowledged)."
              },
              policies: {
                type: "array",
                maxLength: 5,
                items: {
                  type: "string"
                },
                description: "Names/Keywords of the policies that drove the decision."
              }
            }
          },
          modEventReverseTakedown: {
            type: "object",
            description: "Revert take down action on a subject",
            properties: {
              comment: {
                type: "string",
                description: "Describe reasoning behind the reversal."
              }
            }
          },
          modEventResolveAppeal: {
            type: "object",
            description: "Resolve appeal on a subject",
            properties: {
              comment: {
                type: "string",
                description: "Describe resolution."
              }
            }
          },
          modEventComment: {
            type: "object",
            description: "Add a comment to a subject",
            required: ["comment"],
            properties: {
              comment: {
                type: "string"
              },
              sticky: {
                type: "boolean",
                description: "Make the comment persistent on the subject"
              }
            }
          },
          modEventReport: {
            type: "object",
            description: "Report a subject",
            required: ["reportType"],
            properties: {
              comment: {
                type: "string"
              },
              isReporterMuted: {
                type: "boolean",
                description: "Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject."
              },
              reportType: {
                type: "ref",
                ref: "lex:com.atproto.moderation.defs#reasonType"
              }
            }
          },
          modEventLabel: {
            type: "object",
            description: "Apply/Negate labels on a subject",
            required: ["createLabelVals", "negateLabelVals"],
            properties: {
              comment: {
                type: "string"
              },
              createLabelVals: {
                type: "array",
                items: {
                  type: "string"
                }
              },
              negateLabelVals: {
                type: "array",
                items: {
                  type: "string"
                }
              }
            }
          },
          modEventAcknowledge: {
            type: "object",
            properties: {
              comment: {
                type: "string"
              },
              acknowledgeAccountSubjects: {
                type: "boolean",
                description: "If true, all other reports on content authored by this account will be resolved (acknowledged)."
              }
            }
          },
          modEventEscalate: {
            type: "object",
            properties: {
              comment: {
                type: "string"
              }
            }
          },
          modEventMute: {
            type: "object",
            description: "Mute incoming reports on a subject",
            required: ["durationInHours"],
            properties: {
              comment: {
                type: "string"
              },
              durationInHours: {
                type: "integer",
                description: "Indicates how long the subject should remain muted."
              }
            }
          },
          modEventUnmute: {
            type: "object",
            description: "Unmute action on a subject",
            properties: {
              comment: {
                type: "string",
                description: "Describe reasoning behind the reversal."
              }
            }
          },
          modEventMuteReporter: {
            type: "object",
            description: "Mute incoming reports from an account",
            properties: {
              comment: {
                type: "string"
              },
              durationInHours: {
                type: "integer",
                description: "Indicates how long the account should remain muted. Falsy value here means a permanent mute."
              }
            }
          },
          modEventUnmuteReporter: {
            type: "object",
            description: "Unmute incoming reports from an account",
            properties: {
              comment: {
                type: "string",
                description: "Describe reasoning behind the reversal."
              }
            }
          },
          modEventEmail: {
            type: "object",
            description: "Keep a log of outgoing email to a user",
            required: ["subjectLine"],
            properties: {
              subjectLine: {
                type: "string",
                description: "The subject line of the email sent to the user."
              },
              content: {
                type: "string",
                description: "The content of the email sent to the user."
              },
              comment: {
                type: "string",
                description: "Additional comment about the outgoing comm."
              }
            }
          },
          modEventDivert: {
            type: "object",
            description: "Divert a record's blobs to a 3rd party service for further scanning/tagging",
            properties: {
              comment: {
                type: "string"
              }
            }
          },
          modEventTag: {
            type: "object",
            description: "Add/Remove a tag on a subject",
            required: ["add", "remove"],
            properties: {
              add: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "Tags to be added to the subject. If already exists, won't be duplicated."
              },
              remove: {
                type: "array",
                items: {
                  type: "string"
                },
                description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated."
              },
              comment: {
                type: "string",
                description: "Additional comment about added/removed tags."
              }
            }
          },
          accountEvent: {
            type: "object",
            description: "Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.",
            required: ["timestamp", "active"],
            properties: {
              comment: {
                type: "string"
              },
              active: {
                type: "boolean",
                description: "Indicates that the account has a repository which can be fetched from the host that emitted this event."
              },
              status: {
                type: "string",
                knownValues: [
                  "unknown",
                  "deactivated",
                  "deleted",
                  "takendown",
                  "suspended",
                  "tombstoned"
                ]
              },
              timestamp: {
                type: "string",
                format: "datetime"
              }
            }
          },
          identityEvent: {
            type: "object",
            description: "Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.",
            required: ["timestamp"],
            properties: {
              comment: {
                type: "string"
              },
              handle: {
                type: "string",
                format: "handle"
              },
              pdsHost: {
                type: "string",
                format: "uri"
              },
              tombstone: {
                type: "boolean"
              },
              timestamp: {
                type: "string",
                format: "datetime"
              }
            }
          },
          recordEvent: {
            type: "object",
            description: "Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.",
            required: ["timestamp", "op"],
            properties: {
              comment: {
                type: "string"
              },
              op: {
                type: "string",
                knownValues: ["create", "update", "delete"]
              },
              cid: {
                type: "string",
                format: "cid"
              },
              timestamp: {
                type: "string",
                format: "datetime"
              }
            }
          },
          repoView: {
            type: "object",
            required: [
              "did",
              "handle",
              "relatedRecords",
              "indexedAt",
              "moderation"
            ],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              handle: {
                type: "string",
                format: "handle"
              },
              email: {
                type: "string"
              },
              relatedRecords: {
                type: "array",
                items: {
                  type: "unknown"
                }
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              moderation: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#moderation"
              },
              invitedBy: {
                type: "ref",
                ref: "lex:com.atproto.server.defs#inviteCode"
              },
              invitesDisabled: {
                type: "boolean"
              },
              inviteNote: {
                type: "string"
              },
              deactivatedAt: {
                type: "string",
                format: "datetime"
              },
              threatSignatures: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#threatSignature"
                }
              }
            }
          },
          repoViewDetail: {
            type: "object",
            required: [
              "did",
              "handle",
              "relatedRecords",
              "indexedAt",
              "moderation"
            ],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              handle: {
                type: "string",
                format: "handle"
              },
              email: {
                type: "string"
              },
              relatedRecords: {
                type: "array",
                items: {
                  type: "unknown"
                }
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              moderation: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#moderationDetail"
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              invitedBy: {
                type: "ref",
                ref: "lex:com.atproto.server.defs#inviteCode"
              },
              invites: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.server.defs#inviteCode"
                }
              },
              invitesDisabled: {
                type: "boolean"
              },
              inviteNote: {
                type: "string"
              },
              emailConfirmedAt: {
                type: "string",
                format: "datetime"
              },
              deactivatedAt: {
                type: "string",
                format: "datetime"
              },
              threatSignatures: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.admin.defs#threatSignature"
                }
              }
            }
          },
          repoViewNotFound: {
            type: "object",
            required: ["did"],
            properties: {
              did: {
                type: "string",
                format: "did"
              }
            }
          },
          recordView: {
            type: "object",
            required: [
              "uri",
              "cid",
              "value",
              "blobCids",
              "indexedAt",
              "moderation",
              "repo"
            ],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              value: {
                type: "unknown"
              },
              blobCids: {
                type: "array",
                items: {
                  type: "string",
                  format: "cid"
                }
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              moderation: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#moderation"
              },
              repo: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#repoView"
              }
            }
          },
          recordViewDetail: {
            type: "object",
            required: [
              "uri",
              "cid",
              "value",
              "blobs",
              "indexedAt",
              "moderation",
              "repo"
            ],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              },
              cid: {
                type: "string",
                format: "cid"
              },
              value: {
                type: "unknown"
              },
              blobs: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:tools.ozone.moderation.defs#blobView"
                }
              },
              labels: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:com.atproto.label.defs#label"
                }
              },
              indexedAt: {
                type: "string",
                format: "datetime"
              },
              moderation: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#moderationDetail"
              },
              repo: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#repoView"
              }
            }
          },
          recordViewNotFound: {
            type: "object",
            required: ["uri"],
            properties: {
              uri: {
                type: "string",
                format: "at-uri"
              }
            }
          },
          moderation: {
            type: "object",
            properties: {
              subjectStatus: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
              }
            }
          },
          moderationDetail: {
            type: "object",
            properties: {
              subjectStatus: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
              }
            }
          },
          blobView: {
            type: "object",
            required: ["cid", "mimeType", "size", "createdAt"],
            properties: {
              cid: {
                type: "string",
                format: "cid"
              },
              mimeType: {
                type: "string"
              },
              size: {
                type: "integer"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              details: {
                type: "union",
                refs: [
                  "lex:tools.ozone.moderation.defs#imageDetails",
                  "lex:tools.ozone.moderation.defs#videoDetails"
                ]
              },
              moderation: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#moderation"
              }
            }
          },
          imageDetails: {
            type: "object",
            required: ["width", "height"],
            properties: {
              width: {
                type: "integer"
              },
              height: {
                type: "integer"
              }
            }
          },
          videoDetails: {
            type: "object",
            required: ["width", "height", "length"],
            properties: {
              width: {
                type: "integer"
              },
              height: {
                type: "integer"
              },
              length: {
                type: "integer"
              }
            }
          },
          accountHosting: {
            type: "object",
            required: ["status"],
            properties: {
              status: {
                type: "string",
                knownValues: [
                  "takendown",
                  "suspended",
                  "deleted",
                  "deactivated",
                  "unknown"
                ]
              },
              updatedAt: {
                type: "string",
                format: "datetime"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              deletedAt: {
                type: "string",
                format: "datetime"
              },
              deactivatedAt: {
                type: "string",
                format: "datetime"
              },
              reactivatedAt: {
                type: "string",
                format: "datetime"
              }
            }
          },
          recordHosting: {
            type: "object",
            required: ["status"],
            properties: {
              status: {
                type: "string",
                knownValues: ["deleted", "unknown"]
              },
              updatedAt: {
                type: "string",
                format: "datetime"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              deletedAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      },
      ToolsOzoneModerationEmitEvent: {
        lexicon: 1,
        id: "tools.ozone.moderation.emitEvent",
        defs: {
          main: {
            type: "procedure",
            description: "Take a moderation action on an actor.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["event", "subject", "createdBy"],
                properties: {
                  event: {
                    type: "union",
                    refs: [
                      "lex:tools.ozone.moderation.defs#modEventTakedown",
                      "lex:tools.ozone.moderation.defs#modEventAcknowledge",
                      "lex:tools.ozone.moderation.defs#modEventEscalate",
                      "lex:tools.ozone.moderation.defs#modEventComment",
                      "lex:tools.ozone.moderation.defs#modEventLabel",
                      "lex:tools.ozone.moderation.defs#modEventReport",
                      "lex:tools.ozone.moderation.defs#modEventMute",
                      "lex:tools.ozone.moderation.defs#modEventUnmute",
                      "lex:tools.ozone.moderation.defs#modEventMuteReporter",
                      "lex:tools.ozone.moderation.defs#modEventUnmuteReporter",
                      "lex:tools.ozone.moderation.defs#modEventReverseTakedown",
                      "lex:tools.ozone.moderation.defs#modEventResolveAppeal",
                      "lex:tools.ozone.moderation.defs#modEventEmail",
                      "lex:tools.ozone.moderation.defs#modEventTag",
                      "lex:tools.ozone.moderation.defs#accountEvent",
                      "lex:tools.ozone.moderation.defs#identityEvent",
                      "lex:tools.ozone.moderation.defs#recordEvent"
                    ]
                  },
                  subject: {
                    type: "union",
                    refs: [
                      "lex:com.atproto.admin.defs#repoRef",
                      "lex:com.atproto.repo.strongRef"
                    ]
                  },
                  subjectBlobCids: {
                    type: "array",
                    items: {
                      type: "string",
                      format: "cid"
                    }
                  },
                  createdBy: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#modEventView"
              }
            },
            errors: [
              {
                name: "SubjectHasAction"
              }
            ]
          }
        }
      },
      ToolsOzoneModerationGetEvent: {
        lexicon: 1,
        id: "tools.ozone.moderation.getEvent",
        defs: {
          main: {
            type: "query",
            description: "Get details about a moderation event.",
            parameters: {
              type: "params",
              required: ["id"],
              properties: {
                id: {
                  type: "integer"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#modEventViewDetail"
              }
            }
          }
        }
      },
      ToolsOzoneModerationGetRecord: {
        lexicon: 1,
        id: "tools.ozone.moderation.getRecord",
        defs: {
          main: {
            type: "query",
            description: "Get details about a record.",
            parameters: {
              type: "params",
              required: ["uri"],
              properties: {
                uri: {
                  type: "string",
                  format: "at-uri"
                },
                cid: {
                  type: "string",
                  format: "cid"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#recordViewDetail"
              }
            },
            errors: [
              {
                name: "RecordNotFound"
              }
            ]
          }
        }
      },
      ToolsOzoneModerationGetRecords: {
        lexicon: 1,
        id: "tools.ozone.moderation.getRecords",
        defs: {
          main: {
            type: "query",
            description: "Get details about some records.",
            parameters: {
              type: "params",
              required: ["uris"],
              properties: {
                uris: {
                  type: "array",
                  maxLength: 100,
                  items: {
                    type: "string",
                    format: "at-uri"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["records"],
                properties: {
                  records: {
                    type: "array",
                    items: {
                      type: "union",
                      refs: [
                        "lex:tools.ozone.moderation.defs#recordViewDetail",
                        "lex:tools.ozone.moderation.defs#recordViewNotFound"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneModerationGetRepo: {
        lexicon: 1,
        id: "tools.ozone.moderation.getRepo",
        defs: {
          main: {
            type: "query",
            description: "Get details about a repository.",
            parameters: {
              type: "params",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:tools.ozone.moderation.defs#repoViewDetail"
              }
            },
            errors: [
              {
                name: "RepoNotFound"
              }
            ]
          }
        }
      },
      ToolsOzoneModerationGetRepos: {
        lexicon: 1,
        id: "tools.ozone.moderation.getRepos",
        defs: {
          main: {
            type: "query",
            description: "Get details about some repositories.",
            parameters: {
              type: "params",
              required: ["dids"],
              properties: {
                dids: {
                  type: "array",
                  maxLength: 100,
                  items: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["repos"],
                properties: {
                  repos: {
                    type: "array",
                    items: {
                      type: "union",
                      refs: [
                        "lex:tools.ozone.moderation.defs#repoViewDetail",
                        "lex:tools.ozone.moderation.defs#repoViewNotFound"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneModerationQueryEvents: {
        lexicon: 1,
        id: "tools.ozone.moderation.queryEvents",
        defs: {
          main: {
            type: "query",
            description: "List moderation events related to a subject.",
            parameters: {
              type: "params",
              properties: {
                types: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned."
                },
                createdBy: {
                  type: "string",
                  format: "did"
                },
                sortDirection: {
                  type: "string",
                  default: "desc",
                  enum: ["asc", "desc"],
                  description: "Sort direction for the events. Defaults to descending order of created at timestamp."
                },
                createdAfter: {
                  type: "string",
                  format: "datetime",
                  description: "Retrieve events created after a given timestamp"
                },
                createdBefore: {
                  type: "string",
                  format: "datetime",
                  description: "Retrieve events created before a given timestamp"
                },
                subject: {
                  type: "string",
                  format: "uri"
                },
                collections: {
                  type: "array",
                  maxLength: 20,
                  description: "If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
                  items: {
                    type: "string",
                    format: "nsid"
                  }
                },
                subjectType: {
                  type: "string",
                  description: "If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
                  knownValues: ["account", "record"]
                },
                includeAllUserRecords: {
                  type: "boolean",
                  default: false,
                  description: "If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned."
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                hasComment: {
                  type: "boolean",
                  description: "If true, only events with comments are returned"
                },
                comment: {
                  type: "string",
                  description: "If specified, only events with comments containing the keyword are returned. Apply || separator to use multiple keywords and match using OR condition."
                },
                addedLabels: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "If specified, only events where all of these labels were added are returned"
                },
                removedLabels: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "If specified, only events where all of these labels were removed are returned"
                },
                addedTags: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "If specified, only events where all of these tags were added are returned"
                },
                removedTags: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "If specified, only events where all of these tags were removed are returned"
                },
                reportTypes: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                policies: {
                  type: "array",
                  items: {
                    type: "string",
                    description: "If specified, only events where the action policies match any of the given policies are returned"
                  }
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["events"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  events: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:tools.ozone.moderation.defs#modEventView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneModerationQueryStatuses: {
        lexicon: 1,
        id: "tools.ozone.moderation.queryStatuses",
        defs: {
          main: {
            type: "query",
            description: "View moderation statuses of subjects (record or repo).",
            parameters: {
              type: "params",
              properties: {
                queueCount: {
                  type: "integer",
                  description: "Number of queues being used by moderators. Subjects will be split among all queues."
                },
                queueIndex: {
                  type: "integer",
                  description: "Index of the queue to fetch subjects from. Works only when queueCount value is specified."
                },
                queueSeed: {
                  type: "string",
                  description: "A seeder to shuffle/balance the queue items."
                },
                includeAllUserRecords: {
                  type: "boolean",
                  description: "All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned."
                },
                subject: {
                  type: "string",
                  format: "uri",
                  description: "The subject to get the status for."
                },
                comment: {
                  type: "string",
                  description: "Search subjects by keyword from comments"
                },
                reportedAfter: {
                  type: "string",
                  format: "datetime",
                  description: "Search subjects reported after a given timestamp"
                },
                reportedBefore: {
                  type: "string",
                  format: "datetime",
                  description: "Search subjects reported before a given timestamp"
                },
                reviewedAfter: {
                  type: "string",
                  format: "datetime",
                  description: "Search subjects reviewed after a given timestamp"
                },
                hostingDeletedAfter: {
                  type: "string",
                  format: "datetime",
                  description: "Search subjects where the associated record/account was deleted after a given timestamp"
                },
                hostingDeletedBefore: {
                  type: "string",
                  format: "datetime",
                  description: "Search subjects where the associated record/account was deleted before a given timestamp"
                },
                hostingUpdatedAfter: {
                  type: "string",
                  format: "datetime",
                  description: "Search subjects where the associated record/account was updated after a given timestamp"
                },
                hostingUpdatedBefore: {
                  type: "string",
                  format: "datetime",
                  description: "Search subjects where the associated record/account was updated before a given timestamp"
                },
                hostingStatuses: {
                  type: "array",
                  items: {
                    type: "string"
                  },
                  description: "Search subjects by the status of the associated record/account"
                },
                reviewedBefore: {
                  type: "string",
                  format: "datetime",
                  description: "Search subjects reviewed before a given timestamp"
                },
                includeMuted: {
                  type: "boolean",
                  description: "By default, we don't include muted subjects in the results. Set this to true to include them."
                },
                onlyMuted: {
                  type: "boolean",
                  description: "When set to true, only muted subjects and reporters will be returned."
                },
                reviewState: {
                  type: "string",
                  description: "Specify when fetching subjects in a certain state"
                },
                ignoreSubjects: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "uri"
                  }
                },
                lastReviewedBy: {
                  type: "string",
                  format: "did",
                  description: "Get all subject statuses that were reviewed by a specific moderator"
                },
                sortField: {
                  type: "string",
                  default: "lastReportedAt",
                  enum: ["lastReviewedAt", "lastReportedAt"]
                },
                sortDirection: {
                  type: "string",
                  default: "desc",
                  enum: ["asc", "desc"]
                },
                takendown: {
                  type: "boolean",
                  description: "Get subjects that were taken down"
                },
                appealed: {
                  type: "boolean",
                  description: "Get subjects in unresolved appealed status"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                tags: {
                  type: "array",
                  maxLength: 25,
                  items: {
                    type: "string",
                    description: "Items in this array are applied with OR filters. To apply AND filter, put all tags in the same string and separate using && characters"
                  }
                },
                excludeTags: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                cursor: {
                  type: "string"
                },
                collections: {
                  type: "array",
                  maxLength: 20,
                  description: "If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.",
                  items: {
                    type: "string",
                    format: "nsid"
                  }
                },
                subjectType: {
                  type: "string",
                  description: "If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.",
                  knownValues: ["account", "record"]
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["subjectStatuses"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  subjectStatuses: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:tools.ozone.moderation.defs#subjectStatusView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneModerationSearchRepos: {
        lexicon: 1,
        id: "tools.ozone.moderation.searchRepos",
        defs: {
          main: {
            type: "query",
            description: "Find repositories based on a search term.",
            parameters: {
              type: "params",
              properties: {
                term: {
                  type: "string",
                  description: "DEPRECATED: use 'q' instead"
                },
                q: {
                  type: "string"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["repos"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  repos: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:tools.ozone.moderation.defs#repoView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneServerGetConfig: {
        lexicon: 1,
        id: "tools.ozone.server.getConfig",
        defs: {
          main: {
            type: "query",
            description: "Get details about ozone's server configuration.",
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {
                  appview: {
                    type: "ref",
                    ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                  },
                  pds: {
                    type: "ref",
                    ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                  },
                  blobDivert: {
                    type: "ref",
                    ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                  },
                  chat: {
                    type: "ref",
                    ref: "lex:tools.ozone.server.getConfig#serviceConfig"
                  },
                  viewer: {
                    type: "ref",
                    ref: "lex:tools.ozone.server.getConfig#viewerConfig"
                  }
                }
              }
            }
          },
          serviceConfig: {
            type: "object",
            properties: {
              url: {
                type: "string",
                format: "uri"
              }
            }
          },
          viewerConfig: {
            type: "object",
            properties: {
              role: {
                type: "string",
                knownValues: [
                  "tools.ozone.team.defs#roleAdmin",
                  "tools.ozone.team.defs#roleModerator",
                  "tools.ozone.team.defs#roleTriage"
                ]
              }
            }
          }
        }
      },
      ToolsOzoneSetAddValues: {
        lexicon: 1,
        id: "tools.ozone.set.addValues",
        defs: {
          main: {
            type: "procedure",
            description: "Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["name", "values"],
                properties: {
                  name: {
                    type: "string",
                    description: "Name of the set to add values to"
                  },
                  values: {
                    type: "array",
                    minLength: 1,
                    maxLength: 1e3,
                    items: {
                      type: "string"
                    },
                    description: "Array of string values to add to the set"
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneSetDefs: {
        lexicon: 1,
        id: "tools.ozone.set.defs",
        defs: {
          set: {
            type: "object",
            required: ["name"],
            properties: {
              name: {
                type: "string",
                minLength: 3,
                maxLength: 128
              },
              description: {
                type: "string",
                maxGraphemes: 1024,
                maxLength: 10240
              }
            }
          },
          setView: {
            type: "object",
            required: ["name", "setSize", "createdAt", "updatedAt"],
            properties: {
              name: {
                type: "string",
                minLength: 3,
                maxLength: 128
              },
              description: {
                type: "string",
                maxGraphemes: 1024,
                maxLength: 10240
              },
              setSize: {
                type: "integer"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              updatedAt: {
                type: "string",
                format: "datetime"
              }
            }
          }
        }
      },
      ToolsOzoneSetDeleteSet: {
        lexicon: 1,
        id: "tools.ozone.set.deleteSet",
        defs: {
          main: {
            type: "procedure",
            description: "Delete an entire set. Attempting to delete a set that does not exist will result in an error.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["name"],
                properties: {
                  name: {
                    type: "string",
                    description: "Name of the set to delete"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {}
              }
            },
            errors: [
              {
                name: "SetNotFound",
                description: "set with the given name does not exist"
              }
            ]
          }
        }
      },
      ToolsOzoneSetDeleteValues: {
        lexicon: 1,
        id: "tools.ozone.set.deleteValues",
        defs: {
          main: {
            type: "procedure",
            description: "Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["name", "values"],
                properties: {
                  name: {
                    type: "string",
                    description: "Name of the set to delete values from"
                  },
                  values: {
                    type: "array",
                    minLength: 1,
                    items: {
                      type: "string"
                    },
                    description: "Array of string values to delete from the set"
                  }
                }
              }
            },
            errors: [
              {
                name: "SetNotFound",
                description: "set with the given name does not exist"
              }
            ]
          }
        }
      },
      ToolsOzoneSetGetValues: {
        lexicon: 1,
        id: "tools.ozone.set.getValues",
        defs: {
          main: {
            type: "query",
            description: "Get a specific set and its values",
            parameters: {
              type: "params",
              required: ["name"],
              properties: {
                name: {
                  type: "string"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 1e3,
                  default: 100
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["set", "values"],
                properties: {
                  set: {
                    type: "ref",
                    ref: "lex:tools.ozone.set.defs#setView"
                  },
                  values: {
                    type: "array",
                    items: {
                      type: "string"
                    }
                  },
                  cursor: {
                    type: "string"
                  }
                }
              }
            },
            errors: [
              {
                name: "SetNotFound",
                description: "set with the given name does not exist"
              }
            ]
          }
        }
      },
      ToolsOzoneSetQuerySets: {
        lexicon: 1,
        id: "tools.ozone.set.querySets",
        defs: {
          main: {
            type: "query",
            description: "Query available sets",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                },
                namePrefix: {
                  type: "string"
                },
                sortBy: {
                  type: "string",
                  enum: ["name", "createdAt", "updatedAt"],
                  default: "name"
                },
                sortDirection: {
                  type: "string",
                  default: "asc",
                  enum: ["asc", "desc"],
                  description: "Defaults to ascending order of name field."
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["sets"],
                properties: {
                  sets: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:tools.ozone.set.defs#setView"
                    }
                  },
                  cursor: {
                    type: "string"
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneSetUpsertSet: {
        lexicon: 1,
        id: "tools.ozone.set.upsertSet",
        defs: {
          main: {
            type: "procedure",
            description: "Create or update set metadata",
            input: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:tools.ozone.set.defs#set"
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:tools.ozone.set.defs#setView"
              }
            }
          }
        }
      },
      ToolsOzoneSettingDefs: {
        lexicon: 1,
        id: "tools.ozone.setting.defs",
        defs: {
          option: {
            type: "object",
            required: [
              "key",
              "value",
              "did",
              "scope",
              "createdBy",
              "lastUpdatedBy"
            ],
            properties: {
              key: {
                type: "string",
                format: "nsid"
              },
              did: {
                type: "string",
                format: "did"
              },
              value: {
                type: "unknown"
              },
              description: {
                type: "string",
                maxGraphemes: 1024,
                maxLength: 10240
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              updatedAt: {
                type: "string",
                format: "datetime"
              },
              managerRole: {
                type: "string",
                knownValues: [
                  "tools.ozone.team.defs#roleModerator",
                  "tools.ozone.team.defs#roleTriage",
                  "tools.ozone.team.defs#roleAdmin"
                ]
              },
              scope: {
                type: "string",
                knownValues: ["instance", "personal"]
              },
              createdBy: {
                type: "string",
                format: "did"
              },
              lastUpdatedBy: {
                type: "string",
                format: "did"
              }
            }
          }
        }
      },
      ToolsOzoneSettingListOptions: {
        lexicon: 1,
        id: "tools.ozone.setting.listOptions",
        defs: {
          main: {
            type: "query",
            description: "List settings with optional filtering",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                },
                scope: {
                  type: "string",
                  knownValues: ["instance", "personal"],
                  default: "instance"
                },
                prefix: {
                  type: "string",
                  description: "Filter keys by prefix"
                },
                keys: {
                  type: "array",
                  maxLength: 100,
                  items: {
                    type: "string",
                    format: "nsid"
                  },
                  description: "Filter for only the specified keys. Ignored if prefix is provided"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["options"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  options: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:tools.ozone.setting.defs#option"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneSettingRemoveOptions: {
        lexicon: 1,
        id: "tools.ozone.setting.removeOptions",
        defs: {
          main: {
            type: "procedure",
            description: "Delete settings by key",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["keys", "scope"],
                properties: {
                  keys: {
                    type: "array",
                    minLength: 1,
                    maxLength: 200,
                    items: {
                      type: "string",
                      format: "nsid"
                    }
                  },
                  scope: {
                    type: "string",
                    knownValues: ["instance", "personal"]
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                properties: {}
              }
            }
          }
        }
      },
      ToolsOzoneSettingUpsertOption: {
        lexicon: 1,
        id: "tools.ozone.setting.upsertOption",
        defs: {
          main: {
            type: "procedure",
            description: "Create or update setting option",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["key", "scope", "value"],
                properties: {
                  key: {
                    type: "string",
                    format: "nsid"
                  },
                  scope: {
                    type: "string",
                    knownValues: ["instance", "personal"]
                  },
                  value: {
                    type: "unknown"
                  },
                  description: {
                    type: "string",
                    maxLength: 2e3
                  },
                  managerRole: {
                    type: "string",
                    knownValues: [
                      "tools.ozone.team.defs#roleModerator",
                      "tools.ozone.team.defs#roleTriage",
                      "tools.ozone.team.defs#roleAdmin"
                    ]
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["option"],
                properties: {
                  option: {
                    type: "ref",
                    ref: "lex:tools.ozone.setting.defs#option"
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneSignatureDefs: {
        lexicon: 1,
        id: "tools.ozone.signature.defs",
        defs: {
          sigDetail: {
            type: "object",
            required: ["property", "value"],
            properties: {
              property: {
                type: "string"
              },
              value: {
                type: "string"
              }
            }
          }
        }
      },
      ToolsOzoneSignatureFindCorrelation: {
        lexicon: 1,
        id: "tools.ozone.signature.findCorrelation",
        defs: {
          main: {
            type: "query",
            description: "Find all correlated threat signatures between 2 or more accounts.",
            parameters: {
              type: "params",
              required: ["dids"],
              properties: {
                dids: {
                  type: "array",
                  items: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["details"],
                properties: {
                  details: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:tools.ozone.signature.defs#sigDetail"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneSignatureFindRelatedAccounts: {
        lexicon: 1,
        id: "tools.ozone.signature.findRelatedAccounts",
        defs: {
          main: {
            type: "query",
            description: "Get accounts that share some matching threat signatures with the root account.",
            parameters: {
              type: "params",
              required: ["did"],
              properties: {
                did: {
                  type: "string",
                  format: "did"
                },
                cursor: {
                  type: "string"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["accounts"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  accounts: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:tools.ozone.signature.findRelatedAccounts#relatedAccount"
                    }
                  }
                }
              }
            }
          },
          relatedAccount: {
            type: "object",
            required: ["account"],
            properties: {
              account: {
                type: "ref",
                ref: "lex:com.atproto.admin.defs#accountView"
              },
              similarities: {
                type: "array",
                items: {
                  type: "ref",
                  ref: "lex:tools.ozone.signature.defs#sigDetail"
                }
              }
            }
          }
        }
      },
      ToolsOzoneSignatureSearchAccounts: {
        lexicon: 1,
        id: "tools.ozone.signature.searchAccounts",
        defs: {
          main: {
            type: "query",
            description: "Search for accounts that match one or more threat signature values.",
            parameters: {
              type: "params",
              required: ["values"],
              properties: {
                values: {
                  type: "array",
                  items: {
                    type: "string"
                  }
                },
                cursor: {
                  type: "string"
                },
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["accounts"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  accounts: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:com.atproto.admin.defs#accountView"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneTeamAddMember: {
        lexicon: 1,
        id: "tools.ozone.team.addMember",
        defs: {
          main: {
            type: "procedure",
            description: "Add a member to the ozone team. Requires admin role.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did", "role"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  role: {
                    type: "string",
                    knownValues: [
                      "tools.ozone.team.defs#roleAdmin",
                      "tools.ozone.team.defs#roleModerator",
                      "tools.ozone.team.defs#roleTriage"
                    ]
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:tools.ozone.team.defs#member"
              }
            },
            errors: [
              {
                name: "MemberAlreadyExists",
                description: "Member already exists in the team."
              }
            ]
          }
        }
      },
      ToolsOzoneTeamDefs: {
        lexicon: 1,
        id: "tools.ozone.team.defs",
        defs: {
          member: {
            type: "object",
            required: ["did", "role"],
            properties: {
              did: {
                type: "string",
                format: "did"
              },
              disabled: {
                type: "boolean"
              },
              profile: {
                type: "ref",
                ref: "lex:app.bsky.actor.defs#profileViewDetailed"
              },
              createdAt: {
                type: "string",
                format: "datetime"
              },
              updatedAt: {
                type: "string",
                format: "datetime"
              },
              lastUpdatedBy: {
                type: "string"
              },
              role: {
                type: "string",
                knownValues: [
                  "lex:tools.ozone.team.defs#roleAdmin",
                  "lex:tools.ozone.team.defs#roleModerator",
                  "lex:tools.ozone.team.defs#roleTriage"
                ]
              }
            }
          },
          roleAdmin: {
            type: "token",
            description: "Admin role. Highest level of access, can perform all actions."
          },
          roleModerator: {
            type: "token",
            description: "Moderator role. Can perform most actions."
          },
          roleTriage: {
            type: "token",
            description: "Triage role. Mostly intended for monitoring and escalating issues."
          }
        }
      },
      ToolsOzoneTeamDeleteMember: {
        lexicon: 1,
        id: "tools.ozone.team.deleteMember",
        defs: {
          main: {
            type: "procedure",
            description: "Delete a member from ozone team. Requires admin role.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  }
                }
              }
            },
            errors: [
              {
                name: "MemberNotFound",
                description: "The member being deleted does not exist"
              },
              {
                name: "CannotDeleteSelf",
                description: "You can not delete yourself from the team"
              }
            ]
          }
        }
      },
      ToolsOzoneTeamListMembers: {
        lexicon: 1,
        id: "tools.ozone.team.listMembers",
        defs: {
          main: {
            type: "query",
            description: "List all members with access to the ozone service.",
            parameters: {
              type: "params",
              properties: {
                limit: {
                  type: "integer",
                  minimum: 1,
                  maximum: 100,
                  default: 50
                },
                cursor: {
                  type: "string"
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["members"],
                properties: {
                  cursor: {
                    type: "string"
                  },
                  members: {
                    type: "array",
                    items: {
                      type: "ref",
                      ref: "lex:tools.ozone.team.defs#member"
                    }
                  }
                }
              }
            }
          }
        }
      },
      ToolsOzoneTeamUpdateMember: {
        lexicon: 1,
        id: "tools.ozone.team.updateMember",
        defs: {
          main: {
            type: "procedure",
            description: "Update a member in the ozone service. Requires admin role.",
            input: {
              encoding: "application/json",
              schema: {
                type: "object",
                required: ["did"],
                properties: {
                  did: {
                    type: "string",
                    format: "did"
                  },
                  disabled: {
                    type: "boolean"
                  },
                  role: {
                    type: "string",
                    knownValues: [
                      "tools.ozone.team.defs#roleAdmin",
                      "tools.ozone.team.defs#roleModerator",
                      "tools.ozone.team.defs#roleTriage"
                    ]
                  }
                }
              }
            },
            output: {
              encoding: "application/json",
              schema: {
                type: "ref",
                ref: "lex:tools.ozone.team.defs#member"
              }
            },
            errors: [
              {
                name: "MemberNotFound",
                description: "The member being updated does not exist in the team"
              }
            ]
          }
        }
      }
    };
    exports.schemas = Object.values(exports.schemaDict);
    exports.lexicons = new lexicon_1.Lexicons(exports.schemas);
    exports.ids = {
      ComAtprotoAdminDefs: "com.atproto.admin.defs",
      ComAtprotoAdminDeleteAccount: "com.atproto.admin.deleteAccount",
      ComAtprotoAdminDisableAccountInvites: "com.atproto.admin.disableAccountInvites",
      ComAtprotoAdminDisableInviteCodes: "com.atproto.admin.disableInviteCodes",
      ComAtprotoAdminEnableAccountInvites: "com.atproto.admin.enableAccountInvites",
      ComAtprotoAdminGetAccountInfo: "com.atproto.admin.getAccountInfo",
      ComAtprotoAdminGetAccountInfos: "com.atproto.admin.getAccountInfos",
      ComAtprotoAdminGetInviteCodes: "com.atproto.admin.getInviteCodes",
      ComAtprotoAdminGetSubjectStatus: "com.atproto.admin.getSubjectStatus",
      ComAtprotoAdminSearchAccounts: "com.atproto.admin.searchAccounts",
      ComAtprotoAdminSendEmail: "com.atproto.admin.sendEmail",
      ComAtprotoAdminUpdateAccountEmail: "com.atproto.admin.updateAccountEmail",
      ComAtprotoAdminUpdateAccountHandle: "com.atproto.admin.updateAccountHandle",
      ComAtprotoAdminUpdateAccountPassword: "com.atproto.admin.updateAccountPassword",
      ComAtprotoAdminUpdateSubjectStatus: "com.atproto.admin.updateSubjectStatus",
      ComAtprotoIdentityGetRecommendedDidCredentials: "com.atproto.identity.getRecommendedDidCredentials",
      ComAtprotoIdentityRequestPlcOperationSignature: "com.atproto.identity.requestPlcOperationSignature",
      ComAtprotoIdentityResolveHandle: "com.atproto.identity.resolveHandle",
      ComAtprotoIdentitySignPlcOperation: "com.atproto.identity.signPlcOperation",
      ComAtprotoIdentitySubmitPlcOperation: "com.atproto.identity.submitPlcOperation",
      ComAtprotoIdentityUpdateHandle: "com.atproto.identity.updateHandle",
      ComAtprotoLabelDefs: "com.atproto.label.defs",
      ComAtprotoLabelQueryLabels: "com.atproto.label.queryLabels",
      ComAtprotoLabelSubscribeLabels: "com.atproto.label.subscribeLabels",
      ComAtprotoModerationCreateReport: "com.atproto.moderation.createReport",
      ComAtprotoModerationDefs: "com.atproto.moderation.defs",
      ComAtprotoRepoApplyWrites: "com.atproto.repo.applyWrites",
      ComAtprotoRepoCreateRecord: "com.atproto.repo.createRecord",
      ComAtprotoRepoDefs: "com.atproto.repo.defs",
      ComAtprotoRepoDeleteRecord: "com.atproto.repo.deleteRecord",
      ComAtprotoRepoDescribeRepo: "com.atproto.repo.describeRepo",
      ComAtprotoRepoGetRecord: "com.atproto.repo.getRecord",
      ComAtprotoRepoImportRepo: "com.atproto.repo.importRepo",
      ComAtprotoRepoListMissingBlobs: "com.atproto.repo.listMissingBlobs",
      ComAtprotoRepoListRecords: "com.atproto.repo.listRecords",
      ComAtprotoRepoPutRecord: "com.atproto.repo.putRecord",
      ComAtprotoRepoStrongRef: "com.atproto.repo.strongRef",
      ComAtprotoRepoUploadBlob: "com.atproto.repo.uploadBlob",
      ComAtprotoServerActivateAccount: "com.atproto.server.activateAccount",
      ComAtprotoServerCheckAccountStatus: "com.atproto.server.checkAccountStatus",
      ComAtprotoServerConfirmEmail: "com.atproto.server.confirmEmail",
      ComAtprotoServerCreateAccount: "com.atproto.server.createAccount",
      ComAtprotoServerCreateAppPassword: "com.atproto.server.createAppPassword",
      ComAtprotoServerCreateInviteCode: "com.atproto.server.createInviteCode",
      ComAtprotoServerCreateInviteCodes: "com.atproto.server.createInviteCodes",
      ComAtprotoServerCreateSession: "com.atproto.server.createSession",
      ComAtprotoServerDeactivateAccount: "com.atproto.server.deactivateAccount",
      ComAtprotoServerDefs: "com.atproto.server.defs",
      ComAtprotoServerDeleteAccount: "com.atproto.server.deleteAccount",
      ComAtprotoServerDeleteSession: "com.atproto.server.deleteSession",
      ComAtprotoServerDescribeServer: "com.atproto.server.describeServer",
      ComAtprotoServerGetAccountInviteCodes: "com.atproto.server.getAccountInviteCodes",
      ComAtprotoServerGetServiceAuth: "com.atproto.server.getServiceAuth",
      ComAtprotoServerGetSession: "com.atproto.server.getSession",
      ComAtprotoServerListAppPasswords: "com.atproto.server.listAppPasswords",
      ComAtprotoServerRefreshSession: "com.atproto.server.refreshSession",
      ComAtprotoServerRequestAccountDelete: "com.atproto.server.requestAccountDelete",
      ComAtprotoServerRequestEmailConfirmation: "com.atproto.server.requestEmailConfirmation",
      ComAtprotoServerRequestEmailUpdate: "com.atproto.server.requestEmailUpdate",
      ComAtprotoServerRequestPasswordReset: "com.atproto.server.requestPasswordReset",
      ComAtprotoServerReserveSigningKey: "com.atproto.server.reserveSigningKey",
      ComAtprotoServerResetPassword: "com.atproto.server.resetPassword",
      ComAtprotoServerRevokeAppPassword: "com.atproto.server.revokeAppPassword",
      ComAtprotoServerUpdateEmail: "com.atproto.server.updateEmail",
      ComAtprotoSyncGetBlob: "com.atproto.sync.getBlob",
      ComAtprotoSyncGetBlocks: "com.atproto.sync.getBlocks",
      ComAtprotoSyncGetCheckout: "com.atproto.sync.getCheckout",
      ComAtprotoSyncGetHead: "com.atproto.sync.getHead",
      ComAtprotoSyncGetLatestCommit: "com.atproto.sync.getLatestCommit",
      ComAtprotoSyncGetRecord: "com.atproto.sync.getRecord",
      ComAtprotoSyncGetRepo: "com.atproto.sync.getRepo",
      ComAtprotoSyncGetRepoStatus: "com.atproto.sync.getRepoStatus",
      ComAtprotoSyncListBlobs: "com.atproto.sync.listBlobs",
      ComAtprotoSyncListRepos: "com.atproto.sync.listRepos",
      ComAtprotoSyncNotifyOfUpdate: "com.atproto.sync.notifyOfUpdate",
      ComAtprotoSyncRequestCrawl: "com.atproto.sync.requestCrawl",
      ComAtprotoSyncSubscribeRepos: "com.atproto.sync.subscribeRepos",
      ComAtprotoTempAddReservedHandle: "com.atproto.temp.addReservedHandle",
      ComAtprotoTempCheckSignupQueue: "com.atproto.temp.checkSignupQueue",
      ComAtprotoTempFetchLabels: "com.atproto.temp.fetchLabels",
      ComAtprotoTempRequestPhoneVerification: "com.atproto.temp.requestPhoneVerification",
      AppBskyActorDefs: "app.bsky.actor.defs",
      AppBskyActorGetPreferences: "app.bsky.actor.getPreferences",
      AppBskyActorGetProfile: "app.bsky.actor.getProfile",
      AppBskyActorGetProfiles: "app.bsky.actor.getProfiles",
      AppBskyActorGetSuggestions: "app.bsky.actor.getSuggestions",
      AppBskyActorProfile: "app.bsky.actor.profile",
      AppBskyActorPutPreferences: "app.bsky.actor.putPreferences",
      AppBskyActorSearchActors: "app.bsky.actor.searchActors",
      AppBskyActorSearchActorsTypeahead: "app.bsky.actor.searchActorsTypeahead",
      AppBskyEmbedDefs: "app.bsky.embed.defs",
      AppBskyEmbedExternal: "app.bsky.embed.external",
      AppBskyEmbedImages: "app.bsky.embed.images",
      AppBskyEmbedRecord: "app.bsky.embed.record",
      AppBskyEmbedRecordWithMedia: "app.bsky.embed.recordWithMedia",
      AppBskyEmbedVideo: "app.bsky.embed.video",
      AppBskyFeedDefs: "app.bsky.feed.defs",
      AppBskyFeedDescribeFeedGenerator: "app.bsky.feed.describeFeedGenerator",
      AppBskyFeedGenerator: "app.bsky.feed.generator",
      AppBskyFeedGetActorFeeds: "app.bsky.feed.getActorFeeds",
      AppBskyFeedGetActorLikes: "app.bsky.feed.getActorLikes",
      AppBskyFeedGetAuthorFeed: "app.bsky.feed.getAuthorFeed",
      AppBskyFeedGetFeed: "app.bsky.feed.getFeed",
      AppBskyFeedGetFeedGenerator: "app.bsky.feed.getFeedGenerator",
      AppBskyFeedGetFeedGenerators: "app.bsky.feed.getFeedGenerators",
      AppBskyFeedGetFeedSkeleton: "app.bsky.feed.getFeedSkeleton",
      AppBskyFeedGetLikes: "app.bsky.feed.getLikes",
      AppBskyFeedGetListFeed: "app.bsky.feed.getListFeed",
      AppBskyFeedGetPostThread: "app.bsky.feed.getPostThread",
      AppBskyFeedGetPosts: "app.bsky.feed.getPosts",
      AppBskyFeedGetQuotes: "app.bsky.feed.getQuotes",
      AppBskyFeedGetRepostedBy: "app.bsky.feed.getRepostedBy",
      AppBskyFeedGetSuggestedFeeds: "app.bsky.feed.getSuggestedFeeds",
      AppBskyFeedGetTimeline: "app.bsky.feed.getTimeline",
      AppBskyFeedLike: "app.bsky.feed.like",
      AppBskyFeedPost: "app.bsky.feed.post",
      AppBskyFeedPostgate: "app.bsky.feed.postgate",
      AppBskyFeedRepost: "app.bsky.feed.repost",
      AppBskyFeedSearchPosts: "app.bsky.feed.searchPosts",
      AppBskyFeedSendInteractions: "app.bsky.feed.sendInteractions",
      AppBskyFeedThreadgate: "app.bsky.feed.threadgate",
      AppBskyGraphBlock: "app.bsky.graph.block",
      AppBskyGraphDefs: "app.bsky.graph.defs",
      AppBskyGraphFollow: "app.bsky.graph.follow",
      AppBskyGraphGetActorStarterPacks: "app.bsky.graph.getActorStarterPacks",
      AppBskyGraphGetBlocks: "app.bsky.graph.getBlocks",
      AppBskyGraphGetFollowers: "app.bsky.graph.getFollowers",
      AppBskyGraphGetFollows: "app.bsky.graph.getFollows",
      AppBskyGraphGetKnownFollowers: "app.bsky.graph.getKnownFollowers",
      AppBskyGraphGetList: "app.bsky.graph.getList",
      AppBskyGraphGetListBlocks: "app.bsky.graph.getListBlocks",
      AppBskyGraphGetListMutes: "app.bsky.graph.getListMutes",
      AppBskyGraphGetLists: "app.bsky.graph.getLists",
      AppBskyGraphGetMutes: "app.bsky.graph.getMutes",
      AppBskyGraphGetRelationships: "app.bsky.graph.getRelationships",
      AppBskyGraphGetStarterPack: "app.bsky.graph.getStarterPack",
      AppBskyGraphGetStarterPacks: "app.bsky.graph.getStarterPacks",
      AppBskyGraphGetSuggestedFollowsByActor: "app.bsky.graph.getSuggestedFollowsByActor",
      AppBskyGraphList: "app.bsky.graph.list",
      AppBskyGraphListblock: "app.bsky.graph.listblock",
      AppBskyGraphListitem: "app.bsky.graph.listitem",
      AppBskyGraphMuteActor: "app.bsky.graph.muteActor",
      AppBskyGraphMuteActorList: "app.bsky.graph.muteActorList",
      AppBskyGraphMuteThread: "app.bsky.graph.muteThread",
      AppBskyGraphSearchStarterPacks: "app.bsky.graph.searchStarterPacks",
      AppBskyGraphStarterpack: "app.bsky.graph.starterpack",
      AppBskyGraphUnmuteActor: "app.bsky.graph.unmuteActor",
      AppBskyGraphUnmuteActorList: "app.bsky.graph.unmuteActorList",
      AppBskyGraphUnmuteThread: "app.bsky.graph.unmuteThread",
      AppBskyLabelerDefs: "app.bsky.labeler.defs",
      AppBskyLabelerGetServices: "app.bsky.labeler.getServices",
      AppBskyLabelerService: "app.bsky.labeler.service",
      AppBskyNotificationGetUnreadCount: "app.bsky.notification.getUnreadCount",
      AppBskyNotificationListNotifications: "app.bsky.notification.listNotifications",
      AppBskyNotificationPutPreferences: "app.bsky.notification.putPreferences",
      AppBskyNotificationRegisterPush: "app.bsky.notification.registerPush",
      AppBskyNotificationUpdateSeen: "app.bsky.notification.updateSeen",
      AppBskyRichtextFacet: "app.bsky.richtext.facet",
      AppBskyUnspeccedDefs: "app.bsky.unspecced.defs",
      AppBskyUnspeccedGetConfig: "app.bsky.unspecced.getConfig",
      AppBskyUnspeccedGetPopularFeedGenerators: "app.bsky.unspecced.getPopularFeedGenerators",
      AppBskyUnspeccedGetSuggestionsSkeleton: "app.bsky.unspecced.getSuggestionsSkeleton",
      AppBskyUnspeccedGetTaggedSuggestions: "app.bsky.unspecced.getTaggedSuggestions",
      AppBskyUnspeccedGetTrendingTopics: "app.bsky.unspecced.getTrendingTopics",
      AppBskyUnspeccedSearchActorsSkeleton: "app.bsky.unspecced.searchActorsSkeleton",
      AppBskyUnspeccedSearchPostsSkeleton: "app.bsky.unspecced.searchPostsSkeleton",
      AppBskyUnspeccedSearchStarterPacksSkeleton: "app.bsky.unspecced.searchStarterPacksSkeleton",
      AppBskyVideoDefs: "app.bsky.video.defs",
      AppBskyVideoGetJobStatus: "app.bsky.video.getJobStatus",
      AppBskyVideoGetUploadLimits: "app.bsky.video.getUploadLimits",
      AppBskyVideoUploadVideo: "app.bsky.video.uploadVideo",
      ChatBskyActorDeclaration: "chat.bsky.actor.declaration",
      ChatBskyActorDefs: "chat.bsky.actor.defs",
      ChatBskyActorDeleteAccount: "chat.bsky.actor.deleteAccount",
      ChatBskyActorExportAccountData: "chat.bsky.actor.exportAccountData",
      ChatBskyConvoDefs: "chat.bsky.convo.defs",
      ChatBskyConvoDeleteMessageForSelf: "chat.bsky.convo.deleteMessageForSelf",
      ChatBskyConvoGetConvo: "chat.bsky.convo.getConvo",
      ChatBskyConvoGetConvoForMembers: "chat.bsky.convo.getConvoForMembers",
      ChatBskyConvoGetLog: "chat.bsky.convo.getLog",
      ChatBskyConvoGetMessages: "chat.bsky.convo.getMessages",
      ChatBskyConvoLeaveConvo: "chat.bsky.convo.leaveConvo",
      ChatBskyConvoListConvos: "chat.bsky.convo.listConvos",
      ChatBskyConvoMuteConvo: "chat.bsky.convo.muteConvo",
      ChatBskyConvoSendMessage: "chat.bsky.convo.sendMessage",
      ChatBskyConvoSendMessageBatch: "chat.bsky.convo.sendMessageBatch",
      ChatBskyConvoUnmuteConvo: "chat.bsky.convo.unmuteConvo",
      ChatBskyConvoUpdateRead: "chat.bsky.convo.updateRead",
      ChatBskyModerationGetActorMetadata: "chat.bsky.moderation.getActorMetadata",
      ChatBskyModerationGetMessageContext: "chat.bsky.moderation.getMessageContext",
      ChatBskyModerationUpdateActorAccess: "chat.bsky.moderation.updateActorAccess",
      ToolsOzoneCommunicationCreateTemplate: "tools.ozone.communication.createTemplate",
      ToolsOzoneCommunicationDefs: "tools.ozone.communication.defs",
      ToolsOzoneCommunicationDeleteTemplate: "tools.ozone.communication.deleteTemplate",
      ToolsOzoneCommunicationListTemplates: "tools.ozone.communication.listTemplates",
      ToolsOzoneCommunicationUpdateTemplate: "tools.ozone.communication.updateTemplate",
      ToolsOzoneModerationDefs: "tools.ozone.moderation.defs",
      ToolsOzoneModerationEmitEvent: "tools.ozone.moderation.emitEvent",
      ToolsOzoneModerationGetEvent: "tools.ozone.moderation.getEvent",
      ToolsOzoneModerationGetRecord: "tools.ozone.moderation.getRecord",
      ToolsOzoneModerationGetRecords: "tools.ozone.moderation.getRecords",
      ToolsOzoneModerationGetRepo: "tools.ozone.moderation.getRepo",
      ToolsOzoneModerationGetRepos: "tools.ozone.moderation.getRepos",
      ToolsOzoneModerationQueryEvents: "tools.ozone.moderation.queryEvents",
      ToolsOzoneModerationQueryStatuses: "tools.ozone.moderation.queryStatuses",
      ToolsOzoneModerationSearchRepos: "tools.ozone.moderation.searchRepos",
      ToolsOzoneServerGetConfig: "tools.ozone.server.getConfig",
      ToolsOzoneSetAddValues: "tools.ozone.set.addValues",
      ToolsOzoneSetDefs: "tools.ozone.set.defs",
      ToolsOzoneSetDeleteSet: "tools.ozone.set.deleteSet",
      ToolsOzoneSetDeleteValues: "tools.ozone.set.deleteValues",
      ToolsOzoneSetGetValues: "tools.ozone.set.getValues",
      ToolsOzoneSetQuerySets: "tools.ozone.set.querySets",
      ToolsOzoneSetUpsertSet: "tools.ozone.set.upsertSet",
      ToolsOzoneSettingDefs: "tools.ozone.setting.defs",
      ToolsOzoneSettingListOptions: "tools.ozone.setting.listOptions",
      ToolsOzoneSettingRemoveOptions: "tools.ozone.setting.removeOptions",
      ToolsOzoneSettingUpsertOption: "tools.ozone.setting.upsertOption",
      ToolsOzoneSignatureDefs: "tools.ozone.signature.defs",
      ToolsOzoneSignatureFindCorrelation: "tools.ozone.signature.findCorrelation",
      ToolsOzoneSignatureFindRelatedAccounts: "tools.ozone.signature.findRelatedAccounts",
      ToolsOzoneSignatureSearchAccounts: "tools.ozone.signature.searchAccounts",
      ToolsOzoneTeamAddMember: "tools.ozone.team.addMember",
      ToolsOzoneTeamDefs: "tools.ozone.team.defs",
      ToolsOzoneTeamDeleteMember: "tools.ozone.team.deleteMember",
      ToolsOzoneTeamListMembers: "tools.ozone.team.listMembers",
      ToolsOzoneTeamUpdateMember: "tools.ozone.team.updateMember"
    };
  }
});

// node_modules/@atproto/api/dist/types.js
var require_types6 = __commonJS({
  "node_modules/@atproto/api/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@atproto/api/dist/const.js
var require_const = __commonJS({
  "node_modules/@atproto/api/dist/const.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BSKY_LABELER_DID = void 0;
    exports.BSKY_LABELER_DID = "did:plc:ar7c4by46qjdydhdevvrndac";
  }
});

// node_modules/@atproto/api/dist/util.js
var require_util14 = __commonJS({
  "node_modules/@atproto/api/dist/util.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nuxSchema = exports.asDid = exports.isDid = void 0;
    exports.sanitizeMutedWordValue = sanitizeMutedWordValue;
    exports.savedFeedsToUriArrays = savedFeedsToUriArrays;
    exports.getSavedFeedType = getSavedFeedType;
    exports.validateSavedFeed = validateSavedFeed;
    exports.validateNux = validateNux;
    var syntax_1 = require_dist12();
    var common_web_1 = require_dist16();
    var zod_1 = __importDefault(require_lib2());
    function sanitizeMutedWordValue(value) {
      return value.trim().replace(/^#(?!\ufe0f)/, "").replace(/[\r\n\u00AD\u2060\u200D\u200C\u200B]+/, "");
    }
    function savedFeedsToUriArrays(savedFeeds) {
      const pinned = [];
      const saved = [];
      for (const feed of savedFeeds) {
        if (feed.pinned) {
          pinned.push(feed.value);
          saved.push(feed.value);
        } else {
          saved.push(feed.value);
        }
      }
      return {
        pinned,
        saved
      };
    }
    function getSavedFeedType(uri) {
      const urip = new syntax_1.AtUri(uri);
      switch (urip.collection) {
        case "app.bsky.feed.generator":
          return "feed";
        case "app.bsky.graph.list":
          return "list";
        default:
          return "unknown";
      }
    }
    function validateSavedFeed(savedFeed) {
      new common_web_1.TID(savedFeed.id);
      if (["feed", "list"].includes(savedFeed.type)) {
        const uri = new syntax_1.AtUri(savedFeed.value);
        const isFeed = uri.collection === "app.bsky.feed.generator";
        const isList = uri.collection === "app.bsky.graph.list";
        if (savedFeed.type === "feed" && !isFeed) {
          throw new Error(`Saved feed of type 'feed' must be a feed, got ${uri.collection}`);
        }
        if (savedFeed.type === "list" && !isList) {
          throw new Error(`Saved feed of type 'list' must be a list, got ${uri.collection}`);
        }
      }
    }
    var isDid = (str) => typeof str === "string" && str.startsWith("did:") && str.includes(":", 4) && str.length > 8 && str.length <= 2048;
    exports.isDid = isDid;
    var asDid = (value) => {
      if ((0, exports.isDid)(value))
        return value;
      throw new TypeError(`Invalid DID: ${value}`);
    };
    exports.asDid = asDid;
    exports.nuxSchema = zod_1.default.object({
      id: zod_1.default.string().max(64),
      completed: zod_1.default.boolean(),
      data: zod_1.default.string().max(300).optional(),
      expiresAt: zod_1.default.string().datetime().optional()
    }).strict();
    function validateNux(nux) {
      exports.nuxSchema.parse(nux);
    }
  }
});

// node_modules/@atproto/xrpc/dist/types.js
var require_types7 = __commonJS({
  "node_modules/@atproto/xrpc/dist/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XRPCInvalidResponseError = exports.XRPCError = exports.XRPCResponse = exports.ResponseTypeStrings = exports.ResponseTypeNames = exports.ResponseType = exports.errorResponseBody = void 0;
    exports.httpResponseCodeToEnum = httpResponseCodeToEnum;
    exports.httpResponseCodeToName = httpResponseCodeToName;
    exports.httpResponseCodeToString = httpResponseCodeToString;
    var zod_1 = require_lib2();
    exports.errorResponseBody = zod_1.z.object({
      error: zod_1.z.string().optional(),
      message: zod_1.z.string().optional()
    });
    var ResponseType;
    (function(ResponseType2) {
      ResponseType2[ResponseType2["Unknown"] = 1] = "Unknown";
      ResponseType2[ResponseType2["InvalidResponse"] = 2] = "InvalidResponse";
      ResponseType2[ResponseType2["Success"] = 200] = "Success";
      ResponseType2[ResponseType2["InvalidRequest"] = 400] = "InvalidRequest";
      ResponseType2[ResponseType2["AuthRequired"] = 401] = "AuthRequired";
      ResponseType2[ResponseType2["Forbidden"] = 403] = "Forbidden";
      ResponseType2[ResponseType2["XRPCNotSupported"] = 404] = "XRPCNotSupported";
      ResponseType2[ResponseType2["NotAcceptable"] = 406] = "NotAcceptable";
      ResponseType2[ResponseType2["PayloadTooLarge"] = 413] = "PayloadTooLarge";
      ResponseType2[ResponseType2["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
      ResponseType2[ResponseType2["RateLimitExceeded"] = 429] = "RateLimitExceeded";
      ResponseType2[ResponseType2["InternalServerError"] = 500] = "InternalServerError";
      ResponseType2[ResponseType2["MethodNotImplemented"] = 501] = "MethodNotImplemented";
      ResponseType2[ResponseType2["UpstreamFailure"] = 502] = "UpstreamFailure";
      ResponseType2[ResponseType2["NotEnoughResources"] = 503] = "NotEnoughResources";
      ResponseType2[ResponseType2["UpstreamTimeout"] = 504] = "UpstreamTimeout";
    })(ResponseType || (exports.ResponseType = ResponseType = {}));
    function httpResponseCodeToEnum(status) {
      if (status in ResponseType) {
        return status;
      } else if (status >= 100 && status < 200) {
        return ResponseType.XRPCNotSupported;
      } else if (status >= 200 && status < 300) {
        return ResponseType.Success;
      } else if (status >= 300 && status < 400) {
        return ResponseType.XRPCNotSupported;
      } else if (status >= 400 && status < 500) {
        return ResponseType.InvalidRequest;
      } else {
        return ResponseType.InternalServerError;
      }
    }
    exports.ResponseTypeNames = {
      [ResponseType.Unknown]: "Unknown",
      [ResponseType.InvalidResponse]: "InvalidResponse",
      [ResponseType.Success]: "Success",
      [ResponseType.InvalidRequest]: "InvalidRequest",
      [ResponseType.AuthRequired]: "AuthenticationRequired",
      [ResponseType.Forbidden]: "Forbidden",
      [ResponseType.XRPCNotSupported]: "XRPCNotSupported",
      [ResponseType.PayloadTooLarge]: "PayloadTooLarge",
      [ResponseType.UnsupportedMediaType]: "UnsupportedMediaType",
      [ResponseType.RateLimitExceeded]: "RateLimitExceeded",
      [ResponseType.InternalServerError]: "InternalServerError",
      [ResponseType.MethodNotImplemented]: "MethodNotImplemented",
      [ResponseType.UpstreamFailure]: "UpstreamFailure",
      [ResponseType.NotEnoughResources]: "NotEnoughResources",
      [ResponseType.UpstreamTimeout]: "UpstreamTimeout"
    };
    function httpResponseCodeToName(status) {
      return exports.ResponseTypeNames[httpResponseCodeToEnum(status)];
    }
    exports.ResponseTypeStrings = {
      [ResponseType.Unknown]: "Unknown",
      [ResponseType.InvalidResponse]: "Invalid Response",
      [ResponseType.Success]: "Success",
      [ResponseType.InvalidRequest]: "Invalid Request",
      [ResponseType.AuthRequired]: "Authentication Required",
      [ResponseType.Forbidden]: "Forbidden",
      [ResponseType.XRPCNotSupported]: "XRPC Not Supported",
      [ResponseType.PayloadTooLarge]: "Payload Too Large",
      [ResponseType.UnsupportedMediaType]: "Unsupported Media Type",
      [ResponseType.RateLimitExceeded]: "Rate Limit Exceeded",
      [ResponseType.InternalServerError]: "Internal Server Error",
      [ResponseType.MethodNotImplemented]: "Method Not Implemented",
      [ResponseType.UpstreamFailure]: "Upstream Failure",
      [ResponseType.NotEnoughResources]: "Not Enough Resources",
      [ResponseType.UpstreamTimeout]: "Upstream Timeout"
    };
    function httpResponseCodeToString(status) {
      return exports.ResponseTypeStrings[httpResponseCodeToEnum(status)];
    }
    var XRPCResponse = class {
      constructor(data, headers) {
        Object.defineProperty(this, "data", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: data
        });
        Object.defineProperty(this, "headers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: headers
        });
        Object.defineProperty(this, "success", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: true
        });
      }
    };
    exports.XRPCResponse = XRPCResponse;
    var XRPCError = class _XRPCError extends Error {
      constructor(statusCode, error = httpResponseCodeToName(statusCode), message2, headers, options) {
        super(message2 || error || httpResponseCodeToString(statusCode), options);
        Object.defineProperty(this, "error", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: error
        });
        Object.defineProperty(this, "headers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: headers
        });
        Object.defineProperty(this, "success", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: false
        });
        Object.defineProperty(this, "status", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.status = httpResponseCodeToEnum(statusCode);
        const cause = options?.cause;
        if (this.cause === void 0 && cause !== void 0) {
          this.cause = cause;
        }
      }
      static from(cause, fallbackStatus) {
        if (cause instanceof _XRPCError) {
          return cause;
        }
        const causeErr = cause instanceof Error ? cause : void 0;
        const causeResponse = cause instanceof Response ? cause : cause?.["response"] instanceof Response ? cause["response"] : void 0;
        const statusCode = (
          // Extract status code from "http-errors" like errors
          causeErr?.["statusCode"] ?? causeErr?.["status"] ?? // Use the status code from the response object as fallback
          causeResponse?.status
        );
        const status = typeof statusCode === "number" ? httpResponseCodeToEnum(statusCode) : fallbackStatus ?? ResponseType.Unknown;
        const message2 = causeErr?.message ?? String(cause);
        const headers = causeResponse ? Object.fromEntries(causeResponse.headers.entries()) : void 0;
        return new _XRPCError(status, void 0, message2, headers, { cause });
      }
    };
    exports.XRPCError = XRPCError;
    var XRPCInvalidResponseError = class extends XRPCError {
      constructor(lexiconNsid, validationError, responseBody) {
        super(ResponseType.InvalidResponse, exports.ResponseTypeStrings[ResponseType.InvalidResponse], `The server gave an invalid response and may be out of date.`, void 0, { cause: validationError });
        Object.defineProperty(this, "lexiconNsid", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: lexiconNsid
        });
        Object.defineProperty(this, "validationError", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: validationError
        });
        Object.defineProperty(this, "responseBody", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: responseBody
        });
      }
    };
    exports.XRPCInvalidResponseError = XRPCInvalidResponseError;
  }
});

// node_modules/@atproto/xrpc/dist/util.js
var require_util15 = __commonJS({
  "node_modules/@atproto/xrpc/dist/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isErrorResponseBody = isErrorResponseBody;
    exports.getMethodSchemaHTTPMethod = getMethodSchemaHTTPMethod;
    exports.constructMethodCallUri = constructMethodCallUri;
    exports.constructMethodCallUrl = constructMethodCallUrl;
    exports.encodeQueryParam = encodeQueryParam;
    exports.constructMethodCallHeaders = constructMethodCallHeaders;
    exports.combineHeaders = combineHeaders;
    exports.isBodyInit = isBodyInit;
    exports.isIterable = isIterable;
    exports.encodeMethodCallBody = encodeMethodCallBody;
    exports.httpResponseBodyParse = httpResponseBodyParse;
    var lexicon_1 = require_dist18();
    var types_1 = require_types7();
    var ReadableStream = globalThis.ReadableStream || class {
      constructor() {
        throw new Error("ReadableStream is not supported in this environment");
      }
    };
    function isErrorResponseBody(v2) {
      return types_1.errorResponseBody.safeParse(v2).success;
    }
    function getMethodSchemaHTTPMethod(schema) {
      if (schema.type === "procedure") {
        return "post";
      }
      return "get";
    }
    function constructMethodCallUri(nsid, schema, serviceUri, params) {
      const uri = new URL(constructMethodCallUrl(nsid, schema, params), serviceUri);
      return uri.toString();
    }
    function constructMethodCallUrl(nsid, schema, params) {
      const pathname = `/xrpc/${encodeURIComponent(nsid)}`;
      if (!params)
        return pathname;
      const searchParams = [];
      for (const [key, value] of Object.entries(params)) {
        const paramSchema = schema.parameters?.properties?.[key];
        if (!paramSchema) {
          throw new Error(`Invalid query parameter: ${key}`);
        }
        if (value !== void 0) {
          if (paramSchema.type === "array") {
            const values = Array.isArray(value) ? value : [value];
            for (const val of values) {
              searchParams.push([
                key,
                encodeQueryParam(paramSchema.items.type, val)
              ]);
            }
          } else {
            searchParams.push([key, encodeQueryParam(paramSchema.type, value)]);
          }
        }
      }
      if (!searchParams.length)
        return pathname;
      return `${pathname}?${new URLSearchParams(searchParams).toString()}`;
    }
    function encodeQueryParam(type, value) {
      if (type === "string" || type === "unknown") {
        return String(value);
      }
      if (type === "float") {
        return String(Number(value));
      } else if (type === "integer") {
        return String(Number(value) | 0);
      } else if (type === "boolean") {
        return value ? "true" : "false";
      } else if (type === "datetime") {
        if (value instanceof Date) {
          return value.toISOString();
        }
        return String(value);
      }
      throw new Error(`Unsupported query param type: ${type}`);
    }
    function constructMethodCallHeaders(schema, data, opts) {
      const headers = new Headers();
      if (opts?.headers) {
        for (const name2 in opts.headers) {
          if (headers.has(name2)) {
            throw new TypeError(`Duplicate header: ${name2}`);
          }
          const value = opts.headers[name2];
          if (value != null) {
            headers.set(name2, value);
          }
        }
      }
      if (schema.type === "procedure") {
        if (opts?.encoding) {
          headers.set("content-type", opts.encoding);
        } else if (!headers.has("content-type") && typeof data !== "undefined") {
          if (data instanceof ArrayBuffer || data instanceof ReadableStream || ArrayBuffer.isView(data)) {
            headers.set("content-type", "application/octet-stream");
          } else if (data instanceof FormData) {
            headers.set("content-type", "multipart/form-data");
          } else if (data instanceof URLSearchParams) {
            headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
          } else if (isBlobLike(data)) {
            headers.set("content-type", data.type || "application/octet-stream");
          } else if (typeof data === "string") {
            headers.set("content-type", "text/plain;charset=UTF-8");
          } else if (isIterable(data)) {
            headers.set("content-type", "application/octet-stream");
          } else if (typeof data === "boolean" || typeof data === "number" || typeof data === "string" || typeof data === "object") {
            headers.set("content-type", "application/json");
          } else {
            throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Unsupported data type: ${typeof data}`);
          }
        }
      }
      return headers;
    }
    function combineHeaders(headersInit, defaultHeaders) {
      if (!defaultHeaders)
        return headersInit;
      let headers = void 0;
      for (const [name2, definition] of defaultHeaders) {
        if (definition === void 0)
          continue;
        headers ?? (headers = new Headers(headersInit));
        if (headers.has(name2))
          continue;
        const value = typeof definition === "function" ? definition() : definition;
        if (typeof value === "string")
          headers.set(name2, value);
        else if (value === null)
          headers.delete(name2);
        else
          throw new TypeError(`Invalid "${name2}" header value: ${typeof value}`);
      }
      return headers ?? headersInit;
    }
    function isBlobLike(value) {
      if (value == null)
        return false;
      if (typeof value !== "object")
        return false;
      if (typeof Blob === "function" && value instanceof Blob)
        return true;
      const tag2 = value[Symbol.toStringTag];
      if (tag2 === "Blob" || tag2 === "File") {
        return "stream" in value && typeof value.stream === "function";
      }
      return false;
    }
    function isBodyInit(value) {
      switch (typeof value) {
        case "string":
          return true;
        case "object":
          return value instanceof ArrayBuffer || value instanceof FormData || value instanceof URLSearchParams || value instanceof ReadableStream || ArrayBuffer.isView(value) || isBlobLike(value);
        default:
          return false;
      }
    }
    function isIterable(value) {
      return value != null && typeof value === "object" && (Symbol.iterator in value || Symbol.asyncIterator in value);
    }
    function encodeMethodCallBody(headers, data) {
      const contentType = headers.get("content-type");
      if (!contentType) {
        return void 0;
      }
      if (typeof data === "undefined") {
        throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `A request body is expected but none was provided`);
      }
      if (isBodyInit(data)) {
        if (data instanceof FormData && contentType === "multipart/form-data") {
          headers.delete("content-type");
        }
        return data;
      }
      if (isIterable(data)) {
        return iterableToReadableStream(data);
      }
      if (contentType.startsWith("text/")) {
        return new TextEncoder().encode(String(data));
      }
      if (contentType.startsWith("application/json")) {
        const json = (0, lexicon_1.stringifyLex)(data);
        if (json === void 0) {
          throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Failed to encode request body as JSON`);
        }
        return new TextEncoder().encode(json);
      }
      const type = !data || typeof data !== "object" ? typeof data : data.constructor !== Object && typeof data.constructor === "function" && typeof data.constructor?.name === "string" ? data.constructor.name : "object";
      throw new types_1.XRPCError(types_1.ResponseType.InvalidRequest, `Unable to encode ${type} as ${contentType} data`);
    }
    function iterableToReadableStream(iterable) {
      if ("from" in ReadableStream && typeof ReadableStream.from === "function") {
        return ReadableStream.from(iterable);
      }
      throw new TypeError("ReadableStream.from() is not supported in this environment. It is required to support using iterables as the request body. Consider using a polyfill or re-write your code to use a different body type.");
    }
    function httpResponseBodyParse(mimeType, data) {
      try {
        if (mimeType) {
          if (mimeType.includes("application/json")) {
            const str = new TextDecoder().decode(data);
            return (0, lexicon_1.jsonStringToLex)(str);
          }
          if (mimeType.startsWith("text/")) {
            return new TextDecoder().decode(data);
          }
        }
        if (data instanceof ArrayBuffer) {
          return new Uint8Array(data);
        }
        return data;
      } catch (cause) {
        throw new types_1.XRPCError(types_1.ResponseType.InvalidResponse, void 0, `Failed to parse response body: ${String(cause)}`, void 0, { cause });
      }
    }
  }
});

// node_modules/@atproto/xrpc/dist/fetch-handler.js
var require_fetch_handler = __commonJS({
  "node_modules/@atproto/xrpc/dist/fetch-handler.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.buildFetchHandler = buildFetchHandler;
    var util_1 = require_util15();
    function buildFetchHandler(options) {
      if (typeof options === "function")
        return options;
      if (typeof options === "object" && "fetchHandler" in options) {
        return options.fetchHandler.bind(options);
      }
      const { service, headers: defaultHeaders = void 0, fetch: fetch2 = globalThis.fetch } = typeof options === "string" || options instanceof URL ? { service: options } : options;
      if (typeof fetch2 !== "function") {
        throw new TypeError("XrpcDispatcher requires fetch() to be available in your environment.");
      }
      const defaultHeadersEntries = defaultHeaders != null ? Object.entries(defaultHeaders) : void 0;
      return async function(url, init) {
        const base3 = typeof service === "function" ? service() : service;
        const fullUrl = new URL(url, base3);
        const headers = (0, util_1.combineHeaders)(init.headers, defaultHeadersEntries);
        return fetch2(fullUrl, { ...init, headers });
      };
    }
  }
});

// node_modules/@atproto/xrpc/dist/xrpc-client.js
var require_xrpc_client = __commonJS({
  "node_modules/@atproto/xrpc/dist/xrpc-client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XrpcClient = void 0;
    var lexicon_1 = require_dist18();
    var fetch_handler_1 = require_fetch_handler();
    var types_1 = require_types7();
    var util_1 = require_util15();
    var XrpcClient = class {
      constructor(fetchHandlerOpts, lex) {
        Object.defineProperty(this, "fetchHandler", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "headers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: /* @__PURE__ */ new Map()
        });
        Object.defineProperty(this, "lex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.fetchHandler = (0, fetch_handler_1.buildFetchHandler)(fetchHandlerOpts);
        this.lex = lex instanceof lexicon_1.Lexicons ? lex : new lexicon_1.Lexicons(lex);
      }
      setHeader(key, value) {
        this.headers.set(key.toLowerCase(), value);
      }
      unsetHeader(key) {
        this.headers.delete(key.toLowerCase());
      }
      clearHeaders() {
        this.headers.clear();
      }
      async call(methodNsid, params, data, opts) {
        const def = this.lex.getDefOrThrow(methodNsid);
        if (!def || def.type !== "query" && def.type !== "procedure") {
          throw new TypeError(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);
        }
        const reqUrl = (0, util_1.constructMethodCallUrl)(methodNsid, def, params);
        const reqMethod = (0, util_1.getMethodSchemaHTTPMethod)(def);
        const reqHeaders = (0, util_1.constructMethodCallHeaders)(def, data, opts);
        const reqBody = (0, util_1.encodeMethodCallBody)(reqHeaders, data);
        const init = {
          method: reqMethod,
          headers: (0, util_1.combineHeaders)(reqHeaders, this.headers),
          body: reqBody,
          duplex: "half",
          signal: opts?.signal
        };
        try {
          const response = await this.fetchHandler.call(void 0, reqUrl, init);
          const resStatus = response.status;
          const resHeaders = Object.fromEntries(response.headers.entries());
          const resBodyBytes = await response.arrayBuffer();
          const resBody = (0, util_1.httpResponseBodyParse)(response.headers.get("content-type"), resBodyBytes);
          const resCode = (0, types_1.httpResponseCodeToEnum)(resStatus);
          if (resCode !== types_1.ResponseType.Success) {
            const { error = void 0, message: message2 = void 0 } = resBody && (0, util_1.isErrorResponseBody)(resBody) ? resBody : {};
            throw new types_1.XRPCError(resCode, error, message2, resHeaders);
          }
          try {
            this.lex.assertValidXrpcOutput(methodNsid, resBody);
          } catch (e12) {
            if (e12 instanceof lexicon_1.ValidationError) {
              throw new types_1.XRPCInvalidResponseError(methodNsid, e12, resBody);
            }
            throw e12;
          }
          return new types_1.XRPCResponse(resBody, resHeaders);
        } catch (err) {
          throw types_1.XRPCError.from(err);
        }
      }
    };
    exports.XrpcClient = XrpcClient;
  }
});

// node_modules/@atproto/xrpc/dist/client.js
var require_client = __commonJS({
  "node_modules/@atproto/xrpc/dist/client.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ServiceClient = exports.Client = void 0;
    var lexicon_1 = require_dist18();
    var xrpc_client_1 = require_xrpc_client();
    var util_1 = require_util15();
    var Client = class {
      constructor() {
        Object.defineProperty(this, "lex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new lexicon_1.Lexicons()
        });
      }
      /** @deprecated */
      get fetch() {
        throw new Error("Client.fetch is no longer supported. Use an XrpcClient instead.");
      }
      /** @deprecated */
      set fetch(_2) {
        throw new Error("Client.fetch is no longer supported. Use an XrpcClient instead.");
      }
      // method calls
      //
      async call(serviceUri, methodNsid, params, data, opts) {
        return this.service(serviceUri).call(methodNsid, params, data, opts);
      }
      service(serviceUri) {
        return new ServiceClient(this, serviceUri);
      }
      // schemas
      // =
      addLexicon(doc) {
        this.lex.add(doc);
      }
      addLexicons(docs) {
        for (const doc of docs) {
          this.addLexicon(doc);
        }
      }
      removeLexicon(uri) {
        this.lex.remove(uri);
      }
    };
    exports.Client = Client;
    var ServiceClient = class extends xrpc_client_1.XrpcClient {
      constructor(baseClient, serviceUri) {
        super(async (input, init) => {
          const headers = (0, util_1.combineHeaders)(init.headers, Object.entries(this.headers));
          return fetch(new URL(input, this.uri), { ...init, headers });
        }, baseClient.lex);
        Object.defineProperty(this, "baseClient", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: baseClient
        });
        Object.defineProperty(this, "uri", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.uri = typeof serviceUri === "string" ? new URL(serviceUri) : serviceUri;
      }
    };
    exports.ServiceClient = ServiceClient;
  }
});

// node_modules/@atproto/xrpc/dist/index.js
var require_dist19 = __commonJS({
  "node_modules/@atproto/xrpc/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_client(), exports);
    __exportStar(require_fetch_handler(), exports);
    __exportStar(require_types7(), exports);
    __exportStar(require_util15(), exports);
    __exportStar(require_xrpc_client(), exports);
    var client_1 = require_client();
    var defaultInst = new client_1.Client();
    exports.default = defaultInst;
  }
});

// node_modules/@atproto/api/dist/client/util.js
var require_util16 = __commonJS({
  "node_modules/@atproto/api/dist/client/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isObj = isObj;
    exports.hasProp = hasProp;
    function isObj(v2) {
      return typeof v2 === "object" && v2 !== null;
    }
    function hasProp(data, prop) {
      return prop in data;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js
var require_applyWrites = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/applyWrites.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidSwapError = void 0;
    exports.toKnownErr = toKnownErr;
    exports.isCreate = isCreate;
    exports.validateCreate = validateCreate;
    exports.isUpdate = isUpdate;
    exports.validateUpdate = validateUpdate;
    exports.isDelete = isDelete;
    exports.validateDelete = validateDelete;
    exports.isCreateResult = isCreateResult;
    exports.validateCreateResult = validateCreateResult;
    exports.isUpdateResult = isUpdateResult;
    exports.validateUpdateResult = validateUpdateResult;
    exports.isDeleteResult = isDeleteResult;
    exports.validateDeleteResult = validateDeleteResult;
    var xrpc_1 = require_dist19();
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    var InvalidSwapError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidSwapError = InvalidSwapError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "InvalidSwap")
          return new InvalidSwapError(e12);
      }
      return e12;
    }
    function isCreate(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.repo.applyWrites#create";
    }
    function validateCreate(v2) {
      return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#create", v2);
    }
    function isUpdate(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.repo.applyWrites#update";
    }
    function validateUpdate(v2) {
      return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#update", v2);
    }
    function isDelete(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.repo.applyWrites#delete";
    }
    function validateDelete(v2) {
      return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#delete", v2);
    }
    function isCreateResult(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.repo.applyWrites#createResult";
    }
    function validateCreateResult(v2) {
      return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#createResult", v2);
    }
    function isUpdateResult(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.repo.applyWrites#updateResult";
    }
    function validateUpdateResult(v2) {
      return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#updateResult", v2);
    }
    function isDeleteResult(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.repo.applyWrites#deleteResult";
    }
    function validateDeleteResult(v2) {
      return lexicons_1.lexicons.validate("com.atproto.repo.applyWrites#deleteResult", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js
var require_createRecord = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/createRecord.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidSwapError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var InvalidSwapError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidSwapError = InvalidSwapError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "InvalidSwap")
          return new InvalidSwapError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js
var require_deleteRecord = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/deleteRecord.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidSwapError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var InvalidSwapError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidSwapError = InvalidSwapError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "InvalidSwap")
          return new InvalidSwapError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js
var require_getRecord = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/getRecord.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RecordNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var RecordNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RecordNotFoundError = RecordNotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "RecordNotFound")
          return new RecordNotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js
var require_putRecord = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/putRecord.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidSwapError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var InvalidSwapError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidSwapError = InvalidSwapError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "InvalidSwap")
          return new InvalidSwapError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js
var require_confirmEmail = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/confirmEmail.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidEmailError = exports.InvalidTokenError = exports.ExpiredTokenError = exports.AccountNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var AccountNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.AccountNotFoundError = AccountNotFoundError;
    var ExpiredTokenError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.ExpiredTokenError = ExpiredTokenError;
    var InvalidTokenError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidTokenError = InvalidTokenError;
    var InvalidEmailError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidEmailError = InvalidEmailError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "AccountNotFound")
          return new AccountNotFoundError(e12);
        if (e12.error === "ExpiredToken")
          return new ExpiredTokenError(e12);
        if (e12.error === "InvalidToken")
          return new InvalidTokenError(e12);
        if (e12.error === "InvalidEmail")
          return new InvalidEmailError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js
var require_createAccount = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/createAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IncompatibleDidDocError = exports.UnresolvableDidError = exports.UnsupportedDomainError = exports.HandleNotAvailableError = exports.InvalidInviteCodeError = exports.InvalidPasswordError = exports.InvalidHandleError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var InvalidHandleError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidHandleError = InvalidHandleError;
    var InvalidPasswordError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidPasswordError = InvalidPasswordError;
    var InvalidInviteCodeError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidInviteCodeError = InvalidInviteCodeError;
    var HandleNotAvailableError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.HandleNotAvailableError = HandleNotAvailableError;
    var UnsupportedDomainError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.UnsupportedDomainError = UnsupportedDomainError;
    var UnresolvableDidError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.UnresolvableDidError = UnresolvableDidError;
    var IncompatibleDidDocError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.IncompatibleDidDocError = IncompatibleDidDocError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "InvalidHandle")
          return new InvalidHandleError(e12);
        if (e12.error === "InvalidPassword")
          return new InvalidPasswordError(e12);
        if (e12.error === "InvalidInviteCode")
          return new InvalidInviteCodeError(e12);
        if (e12.error === "HandleNotAvailable")
          return new HandleNotAvailableError(e12);
        if (e12.error === "UnsupportedDomain")
          return new UnsupportedDomainError(e12);
        if (e12.error === "UnresolvableDid")
          return new UnresolvableDidError(e12);
        if (e12.error === "IncompatibleDidDoc")
          return new IncompatibleDidDocError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js
var require_createAppPassword = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/createAppPassword.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AccountTakedownError = void 0;
    exports.toKnownErr = toKnownErr;
    exports.isAppPassword = isAppPassword;
    exports.validateAppPassword = validateAppPassword;
    var xrpc_1 = require_dist19();
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    var AccountTakedownError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.AccountTakedownError = AccountTakedownError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "AccountTakedown")
          return new AccountTakedownError(e12);
      }
      return e12;
    }
    function isAppPassword(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.server.createAppPassword#appPassword";
    }
    function validateAppPassword(v2) {
      return lexicons_1.lexicons.validate("com.atproto.server.createAppPassword#appPassword", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js
var require_createSession = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/createSession.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthFactorTokenRequiredError = exports.AccountTakedownError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var AccountTakedownError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.AccountTakedownError = AccountTakedownError;
    var AuthFactorTokenRequiredError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.AuthFactorTokenRequiredError = AuthFactorTokenRequiredError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "AccountTakedown")
          return new AccountTakedownError(e12);
        if (e12.error === "AuthFactorTokenRequired")
          return new AuthFactorTokenRequiredError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js
var require_deleteAccount = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var ExpiredTokenError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.ExpiredTokenError = ExpiredTokenError;
    var InvalidTokenError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidTokenError = InvalidTokenError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "ExpiredToken")
          return new ExpiredTokenError(e12);
        if (e12.error === "InvalidToken")
          return new InvalidTokenError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js
var require_getAccountInviteCodes = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/getAccountInviteCodes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DuplicateCreateError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var DuplicateCreateError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.DuplicateCreateError = DuplicateCreateError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "DuplicateCreate")
          return new DuplicateCreateError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js
var require_getServiceAuth = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/getServiceAuth.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BadExpirationError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var BadExpirationError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BadExpirationError = BadExpirationError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "BadExpiration")
          return new BadExpirationError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js
var require_listAppPasswords = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/listAppPasswords.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AccountTakedownError = void 0;
    exports.toKnownErr = toKnownErr;
    exports.isAppPassword = isAppPassword;
    exports.validateAppPassword = validateAppPassword;
    var xrpc_1 = require_dist19();
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    var AccountTakedownError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.AccountTakedownError = AccountTakedownError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "AccountTakedown")
          return new AccountTakedownError(e12);
      }
      return e12;
    }
    function isAppPassword(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.server.listAppPasswords#appPassword";
    }
    function validateAppPassword(v2) {
      return lexicons_1.lexicons.validate("com.atproto.server.listAppPasswords#appPassword", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js
var require_refreshSession = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/refreshSession.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AccountTakedownError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var AccountTakedownError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.AccountTakedownError = AccountTakedownError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "AccountTakedown")
          return new AccountTakedownError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js
var require_resetPassword = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/resetPassword.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var ExpiredTokenError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.ExpiredTokenError = ExpiredTokenError;
    var InvalidTokenError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidTokenError = InvalidTokenError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "ExpiredToken")
          return new ExpiredTokenError(e12);
        if (e12.error === "InvalidToken")
          return new InvalidTokenError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js
var require_updateEmail = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/updateEmail.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenRequiredError = exports.InvalidTokenError = exports.ExpiredTokenError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var ExpiredTokenError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.ExpiredTokenError = ExpiredTokenError;
    var InvalidTokenError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.InvalidTokenError = InvalidTokenError;
    var TokenRequiredError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.TokenRequiredError = TokenRequiredError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "ExpiredToken")
          return new ExpiredTokenError(e12);
        if (e12.error === "InvalidToken")
          return new InvalidTokenError(e12);
        if (e12.error === "TokenRequired")
          return new TokenRequiredError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js
var require_getBlob = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlob.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.BlobNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var BlobNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BlobNotFoundError = BlobNotFoundError;
    var RepoNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoNotFoundError = RepoNotFoundError;
    var RepoTakendownError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoTakendownError = RepoTakendownError;
    var RepoSuspendedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoSuspendedError = RepoSuspendedError;
    var RepoDeactivatedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoDeactivatedError = RepoDeactivatedError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "BlobNotFound")
          return new BlobNotFoundError(e12);
        if (e12.error === "RepoNotFound")
          return new RepoNotFoundError(e12);
        if (e12.error === "RepoTakendown")
          return new RepoTakendownError(e12);
        if (e12.error === "RepoSuspended")
          return new RepoSuspendedError(e12);
        if (e12.error === "RepoDeactivated")
          return new RepoDeactivatedError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js
var require_getBlocks = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getBlocks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.BlockNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var BlockNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BlockNotFoundError = BlockNotFoundError;
    var RepoNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoNotFoundError = RepoNotFoundError;
    var RepoTakendownError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoTakendownError = RepoTakendownError;
    var RepoSuspendedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoSuspendedError = RepoSuspendedError;
    var RepoDeactivatedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoDeactivatedError = RepoDeactivatedError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "BlockNotFound")
          return new BlockNotFoundError(e12);
        if (e12.error === "RepoNotFound")
          return new RepoNotFoundError(e12);
        if (e12.error === "RepoTakendown")
          return new RepoTakendownError(e12);
        if (e12.error === "RepoSuspended")
          return new RepoSuspendedError(e12);
        if (e12.error === "RepoDeactivated")
          return new RepoDeactivatedError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js
var require_getHead = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getHead.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HeadNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var HeadNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.HeadNotFoundError = HeadNotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "HeadNotFound")
          return new HeadNotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js
var require_getLatestCommit = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getLatestCommit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var RepoNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoNotFoundError = RepoNotFoundError;
    var RepoTakendownError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoTakendownError = RepoTakendownError;
    var RepoSuspendedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoSuspendedError = RepoSuspendedError;
    var RepoDeactivatedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoDeactivatedError = RepoDeactivatedError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "RepoNotFound")
          return new RepoNotFoundError(e12);
        if (e12.error === "RepoTakendown")
          return new RepoTakendownError(e12);
        if (e12.error === "RepoSuspended")
          return new RepoSuspendedError(e12);
        if (e12.error === "RepoDeactivated")
          return new RepoDeactivatedError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js
var require_getRecord2 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRecord.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = exports.RecordNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var RecordNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RecordNotFoundError = RecordNotFoundError;
    var RepoNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoNotFoundError = RepoNotFoundError;
    var RepoTakendownError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoTakendownError = RepoTakendownError;
    var RepoSuspendedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoSuspendedError = RepoSuspendedError;
    var RepoDeactivatedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoDeactivatedError = RepoDeactivatedError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "RecordNotFound")
          return new RecordNotFoundError(e12);
        if (e12.error === "RepoNotFound")
          return new RepoNotFoundError(e12);
        if (e12.error === "RepoTakendown")
          return new RepoTakendownError(e12);
        if (e12.error === "RepoSuspended")
          return new RepoSuspendedError(e12);
        if (e12.error === "RepoDeactivated")
          return new RepoDeactivatedError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js
var require_getRepo = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var RepoNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoNotFoundError = RepoNotFoundError;
    var RepoTakendownError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoTakendownError = RepoTakendownError;
    var RepoSuspendedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoSuspendedError = RepoSuspendedError;
    var RepoDeactivatedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoDeactivatedError = RepoDeactivatedError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "RepoNotFound")
          return new RepoNotFoundError(e12);
        if (e12.error === "RepoTakendown")
          return new RepoTakendownError(e12);
        if (e12.error === "RepoSuspended")
          return new RepoSuspendedError(e12);
        if (e12.error === "RepoDeactivated")
          return new RepoDeactivatedError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepoStatus.js
var require_getRepoStatus = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getRepoStatus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepoNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var RepoNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoNotFoundError = RepoNotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "RepoNotFound")
          return new RepoNotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js
var require_listBlobs = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/listBlobs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepoDeactivatedError = exports.RepoSuspendedError = exports.RepoTakendownError = exports.RepoNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var RepoNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoNotFoundError = RepoNotFoundError;
    var RepoTakendownError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoTakendownError = RepoTakendownError;
    var RepoSuspendedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoSuspendedError = RepoSuspendedError;
    var RepoDeactivatedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoDeactivatedError = RepoDeactivatedError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "RepoNotFound")
          return new RepoNotFoundError(e12);
        if (e12.error === "RepoTakendown")
          return new RepoTakendownError(e12);
        if (e12.error === "RepoSuspended")
          return new RepoSuspendedError(e12);
        if (e12.error === "RepoDeactivated")
          return new RepoDeactivatedError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js
var require_getActorLikes = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorLikes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlockedByActorError = exports.BlockedActorError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var BlockedActorError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BlockedActorError = BlockedActorError;
    var BlockedByActorError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BlockedByActorError = BlockedByActorError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "BlockedActor")
          return new BlockedActorError(e12);
        if (e12.error === "BlockedByActor")
          return new BlockedByActorError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js
var require_getAuthorFeed = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getAuthorFeed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BlockedByActorError = exports.BlockedActorError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var BlockedActorError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BlockedActorError = BlockedActorError;
    var BlockedByActorError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BlockedByActorError = BlockedByActorError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "BlockedActor")
          return new BlockedActorError(e12);
        if (e12.error === "BlockedByActor")
          return new BlockedByActorError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js
var require_getFeed = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnknownFeedError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var UnknownFeedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.UnknownFeedError = UnknownFeedError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "UnknownFeed")
          return new UnknownFeedError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js
var require_getFeedSkeleton = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedSkeleton.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnknownFeedError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var UnknownFeedError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.UnknownFeedError = UnknownFeedError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "UnknownFeed")
          return new UnknownFeedError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js
var require_getListFeed = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getListFeed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnknownListError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var UnknownListError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.UnknownListError = UnknownListError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "UnknownList")
          return new UnknownListError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js
var require_getPostThread = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPostThread.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var NotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.NotFoundError = NotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "NotFound")
          return new NotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js
var require_searchPosts = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/searchPosts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BadQueryStringError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var BadQueryStringError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BadQueryStringError = BadQueryStringError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "BadQueryString")
          return new BadQueryStringError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js
var require_getRelationships = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getRelationships.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActorNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var ActorNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.ActorNotFoundError = ActorNotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "ActorNotFound")
          return new ActorNotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js
var require_searchActorsSkeleton = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchActorsSkeleton.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BadQueryStringError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var BadQueryStringError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BadQueryStringError = BadQueryStringError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "BadQueryString")
          return new BadQueryStringError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js
var require_searchPostsSkeleton = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchPostsSkeleton.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BadQueryStringError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var BadQueryStringError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BadQueryStringError = BadQueryStringError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "BadQueryString")
          return new BadQueryStringError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchStarterPacksSkeleton.js
var require_searchStarterPacksSkeleton = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/searchStarterPacksSkeleton.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BadQueryStringError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var BadQueryStringError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.BadQueryStringError = BadQueryStringError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "BadQueryString")
          return new BadQueryStringError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js
var require_createTemplate = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/communication/createTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DuplicateTemplateNameError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var DuplicateTemplateNameError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.DuplicateTemplateNameError = DuplicateTemplateNameError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "DuplicateTemplateName")
          return new DuplicateTemplateNameError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js
var require_updateTemplate = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/communication/updateTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DuplicateTemplateNameError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var DuplicateTemplateNameError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.DuplicateTemplateNameError = DuplicateTemplateNameError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "DuplicateTemplateName")
          return new DuplicateTemplateNameError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js
var require_emitEvent = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/emitEvent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SubjectHasActionError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var SubjectHasActionError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.SubjectHasActionError = SubjectHasActionError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "SubjectHasAction")
          return new SubjectHasActionError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js
var require_getRecord3 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecord.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RecordNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var RecordNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RecordNotFoundError = RecordNotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "RecordNotFound")
          return new RecordNotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js
var require_getRepo2 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RepoNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var RepoNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.RepoNotFoundError = RepoNotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "RepoNotFound")
          return new RepoNotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteSet.js
var require_deleteSet = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SetNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var SetNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.SetNotFoundError = SetNotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "SetNotFound")
          return new SetNotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteValues.js
var require_deleteValues = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/set/deleteValues.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SetNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var SetNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.SetNotFoundError = SetNotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "SetNotFound")
          return new SetNotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/set/getValues.js
var require_getValues = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/set/getValues.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SetNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var SetNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.SetNotFoundError = SetNotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "SetNotFound")
          return new SetNotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/team/addMember.js
var require_addMember = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/team/addMember.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MemberAlreadyExistsError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var MemberAlreadyExistsError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.MemberAlreadyExistsError = MemberAlreadyExistsError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "MemberAlreadyExists")
          return new MemberAlreadyExistsError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/team/deleteMember.js
var require_deleteMember = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/team/deleteMember.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CannotDeleteSelfError = exports.MemberNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var MemberNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.MemberNotFoundError = MemberNotFoundError;
    var CannotDeleteSelfError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.CannotDeleteSelfError = CannotDeleteSelfError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "MemberNotFound")
          return new MemberNotFoundError(e12);
        if (e12.error === "CannotDeleteSelf")
          return new CannotDeleteSelfError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/team/updateMember.js
var require_updateMember = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/team/updateMember.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MemberNotFoundError = void 0;
    exports.toKnownErr = toKnownErr;
    var xrpc_1 = require_dist19();
    var MemberNotFoundError = class extends xrpc_1.XRPCError {
      constructor(src2) {
        super(src2.status, src2.error, src2.message, src2.headers, { cause: src2 });
      }
    };
    exports.MemberNotFoundError = MemberNotFoundError;
    function toKnownErr(e12) {
      if (e12 instanceof xrpc_1.XRPCError) {
        if (e12.error === "MemberNotFound")
          return new MemberNotFoundError(e12);
      }
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/defs.js
var require_defs = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isStatusAttr = isStatusAttr;
    exports.validateStatusAttr = validateStatusAttr;
    exports.isAccountView = isAccountView;
    exports.validateAccountView = validateAccountView;
    exports.isRepoRef = isRepoRef;
    exports.validateRepoRef = validateRepoRef;
    exports.isRepoBlobRef = isRepoBlobRef;
    exports.validateRepoBlobRef = validateRepoBlobRef;
    exports.isThreatSignature = isThreatSignature;
    exports.validateThreatSignature = validateThreatSignature;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isStatusAttr(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.admin.defs#statusAttr";
    }
    function validateStatusAttr(v2) {
      return lexicons_1.lexicons.validate("com.atproto.admin.defs#statusAttr", v2);
    }
    function isAccountView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.admin.defs#accountView";
    }
    function validateAccountView(v2) {
      return lexicons_1.lexicons.validate("com.atproto.admin.defs#accountView", v2);
    }
    function isRepoRef(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.admin.defs#repoRef";
    }
    function validateRepoRef(v2) {
      return lexicons_1.lexicons.validate("com.atproto.admin.defs#repoRef", v2);
    }
    function isRepoBlobRef(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.admin.defs#repoBlobRef";
    }
    function validateRepoBlobRef(v2) {
      return lexicons_1.lexicons.validate("com.atproto.admin.defs#repoBlobRef", v2);
    }
    function isThreatSignature(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.admin.defs#threatSignature";
    }
    function validateThreatSignature(v2) {
      return lexicons_1.lexicons.validate("com.atproto.admin.defs#threatSignature", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/deleteAccount.js
var require_deleteAccount2 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/deleteAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableAccountInvites.js
var require_disableAccountInvites = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableAccountInvites.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableInviteCodes.js
var require_disableInviteCodes = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/disableInviteCodes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/enableAccountInvites.js
var require_enableAccountInvites = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/enableAccountInvites.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfo.js
var require_getAccountInfo = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfos.js
var require_getAccountInfos = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/getAccountInfos.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/getInviteCodes.js
var require_getInviteCodes = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/getInviteCodes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/getSubjectStatus.js
var require_getSubjectStatus = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/getSubjectStatus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/searchAccounts.js
var require_searchAccounts = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/searchAccounts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/sendEmail.js
var require_sendEmail = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/sendEmail.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountEmail.js
var require_updateAccountEmail = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountEmail.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountHandle.js
var require_updateAccountHandle = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountHandle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountPassword.js
var require_updateAccountPassword = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateAccountPassword.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateSubjectStatus.js
var require_updateSubjectStatus = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/admin/updateSubjectStatus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/identity/getRecommendedDidCredentials.js
var require_getRecommendedDidCredentials = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/identity/getRecommendedDidCredentials.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/identity/requestPlcOperationSignature.js
var require_requestPlcOperationSignature = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/identity/requestPlcOperationSignature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveHandle.js
var require_resolveHandle = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/identity/resolveHandle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/identity/signPlcOperation.js
var require_signPlcOperation = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/identity/signPlcOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/identity/submitPlcOperation.js
var require_submitPlcOperation = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/identity/submitPlcOperation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/identity/updateHandle.js
var require_updateHandle = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/identity/updateHandle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/label/defs.js
var require_defs2 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/label/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isLabel = isLabel;
    exports.validateLabel = validateLabel;
    exports.isSelfLabels = isSelfLabels;
    exports.validateSelfLabels = validateSelfLabels;
    exports.isSelfLabel = isSelfLabel;
    exports.validateSelfLabel = validateSelfLabel;
    exports.isLabelValueDefinition = isLabelValueDefinition;
    exports.validateLabelValueDefinition = validateLabelValueDefinition;
    exports.isLabelValueDefinitionStrings = isLabelValueDefinitionStrings;
    exports.validateLabelValueDefinitionStrings = validateLabelValueDefinitionStrings;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isLabel(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.label.defs#label";
    }
    function validateLabel(v2) {
      return lexicons_1.lexicons.validate("com.atproto.label.defs#label", v2);
    }
    function isSelfLabels(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.label.defs#selfLabels";
    }
    function validateSelfLabels(v2) {
      return lexicons_1.lexicons.validate("com.atproto.label.defs#selfLabels", v2);
    }
    function isSelfLabel(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.label.defs#selfLabel";
    }
    function validateSelfLabel(v2) {
      return lexicons_1.lexicons.validate("com.atproto.label.defs#selfLabel", v2);
    }
    function isLabelValueDefinition(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.label.defs#labelValueDefinition";
    }
    function validateLabelValueDefinition(v2) {
      return lexicons_1.lexicons.validate("com.atproto.label.defs#labelValueDefinition", v2);
    }
    function isLabelValueDefinitionStrings(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.label.defs#labelValueDefinitionStrings";
    }
    function validateLabelValueDefinitionStrings(v2) {
      return lexicons_1.lexicons.validate("com.atproto.label.defs#labelValueDefinitionStrings", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/label/queryLabels.js
var require_queryLabels = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/label/queryLabels.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/label/subscribeLabels.js
var require_subscribeLabels = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/label/subscribeLabels.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isLabels = isLabels;
    exports.validateLabels = validateLabels;
    exports.isInfo = isInfo;
    exports.validateInfo = validateInfo;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isLabels(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.label.subscribeLabels#labels";
    }
    function validateLabels(v2) {
      return lexicons_1.lexicons.validate("com.atproto.label.subscribeLabels#labels", v2);
    }
    function isInfo(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.label.subscribeLabels#info";
    }
    function validateInfo(v2) {
      return lexicons_1.lexicons.validate("com.atproto.label.subscribeLabels#info", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/moderation/createReport.js
var require_createReport = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/moderation/createReport.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/moderation/defs.js
var require_defs3 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/moderation/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REASONAPPEAL = exports.REASONOTHER = exports.REASONRUDE = exports.REASONSEXUAL = exports.REASONMISLEADING = exports.REASONVIOLATION = exports.REASONSPAM = void 0;
    exports.REASONSPAM = "com.atproto.moderation.defs#reasonSpam";
    exports.REASONVIOLATION = "com.atproto.moderation.defs#reasonViolation";
    exports.REASONMISLEADING = "com.atproto.moderation.defs#reasonMisleading";
    exports.REASONSEXUAL = "com.atproto.moderation.defs#reasonSexual";
    exports.REASONRUDE = "com.atproto.moderation.defs#reasonRude";
    exports.REASONOTHER = "com.atproto.moderation.defs#reasonOther";
    exports.REASONAPPEAL = "com.atproto.moderation.defs#reasonAppeal";
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/defs.js
var require_defs4 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCommitMeta = isCommitMeta;
    exports.validateCommitMeta = validateCommitMeta;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isCommitMeta(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.repo.defs#commitMeta";
    }
    function validateCommitMeta(v2) {
      return lexicons_1.lexicons.validate("com.atproto.repo.defs#commitMeta", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/describeRepo.js
var require_describeRepo = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/describeRepo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/importRepo.js
var require_importRepo = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/importRepo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/listMissingBlobs.js
var require_listMissingBlobs = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/listMissingBlobs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isRecordBlob = isRecordBlob;
    exports.validateRecordBlob = validateRecordBlob;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isRecordBlob(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.repo.listMissingBlobs#recordBlob";
    }
    function validateRecordBlob(v2) {
      return lexicons_1.lexicons.validate("com.atproto.repo.listMissingBlobs#recordBlob", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/listRecords.js
var require_listRecords = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/listRecords.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.repo.listRecords#record";
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("com.atproto.repo.listRecords#record", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/strongRef.js
var require_strongRef = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/strongRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMain = isMain;
    exports.validateMain = validateMain;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isMain(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "com.atproto.repo.strongRef#main" || v2.$type === "com.atproto.repo.strongRef");
    }
    function validateMain(v2) {
      return lexicons_1.lexicons.validate("com.atproto.repo.strongRef#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/repo/uploadBlob.js
var require_uploadBlob = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/repo/uploadBlob.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/activateAccount.js
var require_activateAccount = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/activateAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/checkAccountStatus.js
var require_checkAccountStatus = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/checkAccountStatus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCode.js
var require_createInviteCode = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCodes.js
var require_createInviteCodes = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/createInviteCodes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isAccountCodes = isAccountCodes;
    exports.validateAccountCodes = validateAccountCodes;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isAccountCodes(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.server.createInviteCodes#accountCodes";
    }
    function validateAccountCodes(v2) {
      return lexicons_1.lexicons.validate("com.atproto.server.createInviteCodes#accountCodes", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/deactivateAccount.js
var require_deactivateAccount = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/deactivateAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/defs.js
var require_defs5 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isInviteCode = isInviteCode;
    exports.validateInviteCode = validateInviteCode;
    exports.isInviteCodeUse = isInviteCodeUse;
    exports.validateInviteCodeUse = validateInviteCodeUse;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isInviteCode(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.server.defs#inviteCode";
    }
    function validateInviteCode(v2) {
      return lexicons_1.lexicons.validate("com.atproto.server.defs#inviteCode", v2);
    }
    function isInviteCodeUse(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.server.defs#inviteCodeUse";
    }
    function validateInviteCodeUse(v2) {
      return lexicons_1.lexicons.validate("com.atproto.server.defs#inviteCodeUse", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteSession.js
var require_deleteSession = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/deleteSession.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/describeServer.js
var require_describeServer = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/describeServer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isLinks = isLinks;
    exports.validateLinks = validateLinks;
    exports.isContact = isContact;
    exports.validateContact = validateContact;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isLinks(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.server.describeServer#links";
    }
    function validateLinks(v2) {
      return lexicons_1.lexicons.validate("com.atproto.server.describeServer#links", v2);
    }
    function isContact(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.server.describeServer#contact";
    }
    function validateContact(v2) {
      return lexicons_1.lexicons.validate("com.atproto.server.describeServer#contact", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/getSession.js
var require_getSession = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/getSession.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/requestAccountDelete.js
var require_requestAccountDelete = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/requestAccountDelete.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailConfirmation.js
var require_requestEmailConfirmation = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailConfirmation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailUpdate.js
var require_requestEmailUpdate = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/requestEmailUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/requestPasswordReset.js
var require_requestPasswordReset = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/requestPasswordReset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/reserveSigningKey.js
var require_reserveSigningKey = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/reserveSigningKey.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/server/revokeAppPassword.js
var require_revokeAppPassword = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/server/revokeAppPassword.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/getCheckout.js
var require_getCheckout = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/getCheckout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/listRepos.js
var require_listRepos = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/listRepos.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isRepo = isRepo;
    exports.validateRepo = validateRepo;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isRepo(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.sync.listRepos#repo";
    }
    function validateRepo(v2) {
      return lexicons_1.lexicons.validate("com.atproto.sync.listRepos#repo", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/notifyOfUpdate.js
var require_notifyOfUpdate = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/notifyOfUpdate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/requestCrawl.js
var require_requestCrawl = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/requestCrawl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/sync/subscribeRepos.js
var require_subscribeRepos = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/sync/subscribeRepos.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isCommit = isCommit;
    exports.validateCommit = validateCommit;
    exports.isIdentity = isIdentity;
    exports.validateIdentity = validateIdentity;
    exports.isAccount = isAccount;
    exports.validateAccount = validateAccount;
    exports.isHandle = isHandle;
    exports.validateHandle = validateHandle;
    exports.isMigrate = isMigrate;
    exports.validateMigrate = validateMigrate;
    exports.isTombstone = isTombstone;
    exports.validateTombstone = validateTombstone;
    exports.isInfo = isInfo;
    exports.validateInfo = validateInfo;
    exports.isRepoOp = isRepoOp;
    exports.validateRepoOp = validateRepoOp;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isCommit(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.sync.subscribeRepos#commit";
    }
    function validateCommit(v2) {
      return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#commit", v2);
    }
    function isIdentity(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.sync.subscribeRepos#identity";
    }
    function validateIdentity(v2) {
      return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#identity", v2);
    }
    function isAccount(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.sync.subscribeRepos#account";
    }
    function validateAccount(v2) {
      return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#account", v2);
    }
    function isHandle(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.sync.subscribeRepos#handle";
    }
    function validateHandle(v2) {
      return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#handle", v2);
    }
    function isMigrate(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.sync.subscribeRepos#migrate";
    }
    function validateMigrate(v2) {
      return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#migrate", v2);
    }
    function isTombstone(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.sync.subscribeRepos#tombstone";
    }
    function validateTombstone(v2) {
      return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#tombstone", v2);
    }
    function isInfo(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.sync.subscribeRepos#info";
    }
    function validateInfo(v2) {
      return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#info", v2);
    }
    function isRepoOp(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "com.atproto.sync.subscribeRepos#repoOp";
    }
    function validateRepoOp(v2) {
      return lexicons_1.lexicons.validate("com.atproto.sync.subscribeRepos#repoOp", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/temp/addReservedHandle.js
var require_addReservedHandle = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/temp/addReservedHandle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/temp/checkSignupQueue.js
var require_checkSignupQueue = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/temp/checkSignupQueue.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/temp/fetchLabels.js
var require_fetchLabels = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/temp/fetchLabels.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/com/atproto/temp/requestPhoneVerification.js
var require_requestPhoneVerification = __commonJS({
  "node_modules/@atproto/api/dist/client/types/com/atproto/temp/requestPhoneVerification.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/actor/defs.js
var require_defs6 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/actor/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isProfileViewBasic = isProfileViewBasic;
    exports.validateProfileViewBasic = validateProfileViewBasic;
    exports.isProfileView = isProfileView;
    exports.validateProfileView = validateProfileView;
    exports.isProfileViewDetailed = isProfileViewDetailed;
    exports.validateProfileViewDetailed = validateProfileViewDetailed;
    exports.isProfileAssociated = isProfileAssociated;
    exports.validateProfileAssociated = validateProfileAssociated;
    exports.isProfileAssociatedChat = isProfileAssociatedChat;
    exports.validateProfileAssociatedChat = validateProfileAssociatedChat;
    exports.isViewerState = isViewerState;
    exports.validateViewerState = validateViewerState;
    exports.isKnownFollowers = isKnownFollowers;
    exports.validateKnownFollowers = validateKnownFollowers;
    exports.isAdultContentPref = isAdultContentPref;
    exports.validateAdultContentPref = validateAdultContentPref;
    exports.isContentLabelPref = isContentLabelPref;
    exports.validateContentLabelPref = validateContentLabelPref;
    exports.isSavedFeed = isSavedFeed;
    exports.validateSavedFeed = validateSavedFeed;
    exports.isSavedFeedsPrefV2 = isSavedFeedsPrefV2;
    exports.validateSavedFeedsPrefV2 = validateSavedFeedsPrefV2;
    exports.isSavedFeedsPref = isSavedFeedsPref;
    exports.validateSavedFeedsPref = validateSavedFeedsPref;
    exports.isPersonalDetailsPref = isPersonalDetailsPref;
    exports.validatePersonalDetailsPref = validatePersonalDetailsPref;
    exports.isFeedViewPref = isFeedViewPref;
    exports.validateFeedViewPref = validateFeedViewPref;
    exports.isThreadViewPref = isThreadViewPref;
    exports.validateThreadViewPref = validateThreadViewPref;
    exports.isInterestsPref = isInterestsPref;
    exports.validateInterestsPref = validateInterestsPref;
    exports.isMutedWord = isMutedWord;
    exports.validateMutedWord = validateMutedWord;
    exports.isMutedWordsPref = isMutedWordsPref;
    exports.validateMutedWordsPref = validateMutedWordsPref;
    exports.isHiddenPostsPref = isHiddenPostsPref;
    exports.validateHiddenPostsPref = validateHiddenPostsPref;
    exports.isLabelersPref = isLabelersPref;
    exports.validateLabelersPref = validateLabelersPref;
    exports.isLabelerPrefItem = isLabelerPrefItem;
    exports.validateLabelerPrefItem = validateLabelerPrefItem;
    exports.isBskyAppStatePref = isBskyAppStatePref;
    exports.validateBskyAppStatePref = validateBskyAppStatePref;
    exports.isBskyAppProgressGuide = isBskyAppProgressGuide;
    exports.validateBskyAppProgressGuide = validateBskyAppProgressGuide;
    exports.isNux = isNux;
    exports.validateNux = validateNux;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isProfileViewBasic(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#profileViewBasic";
    }
    function validateProfileViewBasic(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileViewBasic", v2);
    }
    function isProfileView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#profileView";
    }
    function validateProfileView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileView", v2);
    }
    function isProfileViewDetailed(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#profileViewDetailed";
    }
    function validateProfileViewDetailed(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileViewDetailed", v2);
    }
    function isProfileAssociated(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#profileAssociated";
    }
    function validateProfileAssociated(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileAssociated", v2);
    }
    function isProfileAssociatedChat(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#profileAssociatedChat";
    }
    function validateProfileAssociatedChat(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#profileAssociatedChat", v2);
    }
    function isViewerState(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#viewerState";
    }
    function validateViewerState(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#viewerState", v2);
    }
    function isKnownFollowers(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#knownFollowers";
    }
    function validateKnownFollowers(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#knownFollowers", v2);
    }
    function isAdultContentPref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#adultContentPref";
    }
    function validateAdultContentPref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#adultContentPref", v2);
    }
    function isContentLabelPref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#contentLabelPref";
    }
    function validateContentLabelPref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#contentLabelPref", v2);
    }
    function isSavedFeed(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#savedFeed";
    }
    function validateSavedFeed(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#savedFeed", v2);
    }
    function isSavedFeedsPrefV2(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#savedFeedsPrefV2";
    }
    function validateSavedFeedsPrefV2(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#savedFeedsPrefV2", v2);
    }
    function isSavedFeedsPref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#savedFeedsPref";
    }
    function validateSavedFeedsPref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#savedFeedsPref", v2);
    }
    function isPersonalDetailsPref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#personalDetailsPref";
    }
    function validatePersonalDetailsPref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#personalDetailsPref", v2);
    }
    function isFeedViewPref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#feedViewPref";
    }
    function validateFeedViewPref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#feedViewPref", v2);
    }
    function isThreadViewPref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#threadViewPref";
    }
    function validateThreadViewPref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#threadViewPref", v2);
    }
    function isInterestsPref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#interestsPref";
    }
    function validateInterestsPref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#interestsPref", v2);
    }
    function isMutedWord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#mutedWord";
    }
    function validateMutedWord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#mutedWord", v2);
    }
    function isMutedWordsPref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#mutedWordsPref";
    }
    function validateMutedWordsPref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#mutedWordsPref", v2);
    }
    function isHiddenPostsPref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#hiddenPostsPref";
    }
    function validateHiddenPostsPref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#hiddenPostsPref", v2);
    }
    function isLabelersPref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#labelersPref";
    }
    function validateLabelersPref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#labelersPref", v2);
    }
    function isLabelerPrefItem(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#labelerPrefItem";
    }
    function validateLabelerPrefItem(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#labelerPrefItem", v2);
    }
    function isBskyAppStatePref(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#bskyAppStatePref";
    }
    function validateBskyAppStatePref(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#bskyAppStatePref", v2);
    }
    function isBskyAppProgressGuide(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#bskyAppProgressGuide";
    }
    function validateBskyAppProgressGuide(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#bskyAppProgressGuide", v2);
    }
    function isNux(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.actor.defs#nux";
    }
    function validateNux(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.defs#nux", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/actor/getPreferences.js
var require_getPreferences = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/actor/getPreferences.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfile.js
var require_getProfile = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfiles.js
var require_getProfiles = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/actor/getProfiles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/actor/getSuggestions.js
var require_getSuggestions = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/actor/getSuggestions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/actor/profile.js
var require_profile = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/actor/profile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.actor.profile#main" || v2.$type === "app.bsky.actor.profile");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.actor.profile#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/actor/putPreferences.js
var require_putPreferences = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/actor/putPreferences.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActors.js
var require_searchActors = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActorsTypeahead.js
var require_searchActorsTypeahead = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/actor/searchActorsTypeahead.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/embed/defs.js
var require_defs7 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/embed/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isAspectRatio = isAspectRatio;
    exports.validateAspectRatio = validateAspectRatio;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isAspectRatio(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.defs#aspectRatio";
    }
    function validateAspectRatio(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.defs#aspectRatio", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/embed/external.js
var require_external2 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/embed/external.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMain = isMain;
    exports.validateMain = validateMain;
    exports.isExternal = isExternal;
    exports.validateExternal = validateExternal;
    exports.isView = isView;
    exports.validateView = validateView;
    exports.isViewExternal = isViewExternal;
    exports.validateViewExternal = validateViewExternal;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isMain(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.embed.external#main" || v2.$type === "app.bsky.embed.external");
    }
    function validateMain(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.external#main", v2);
    }
    function isExternal(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.external#external";
    }
    function validateExternal(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.external#external", v2);
    }
    function isView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.external#view";
    }
    function validateView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.external#view", v2);
    }
    function isViewExternal(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.external#viewExternal";
    }
    function validateViewExternal(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.external#viewExternal", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/embed/images.js
var require_images = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/embed/images.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMain = isMain;
    exports.validateMain = validateMain;
    exports.isImage = isImage;
    exports.validateImage = validateImage;
    exports.isView = isView;
    exports.validateView = validateView;
    exports.isViewImage = isViewImage;
    exports.validateViewImage = validateViewImage;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isMain(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.embed.images#main" || v2.$type === "app.bsky.embed.images");
    }
    function validateMain(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.images#main", v2);
    }
    function isImage(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.images#image";
    }
    function validateImage(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.images#image", v2);
    }
    function isView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.images#view";
    }
    function validateView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.images#view", v2);
    }
    function isViewImage(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.images#viewImage";
    }
    function validateViewImage(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.images#viewImage", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/embed/record.js
var require_record = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/embed/record.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMain = isMain;
    exports.validateMain = validateMain;
    exports.isView = isView;
    exports.validateView = validateView;
    exports.isViewRecord = isViewRecord;
    exports.validateViewRecord = validateViewRecord;
    exports.isViewNotFound = isViewNotFound;
    exports.validateViewNotFound = validateViewNotFound;
    exports.isViewBlocked = isViewBlocked;
    exports.validateViewBlocked = validateViewBlocked;
    exports.isViewDetached = isViewDetached;
    exports.validateViewDetached = validateViewDetached;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isMain(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.embed.record#main" || v2.$type === "app.bsky.embed.record");
    }
    function validateMain(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.record#main", v2);
    }
    function isView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.record#view";
    }
    function validateView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.record#view", v2);
    }
    function isViewRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.record#viewRecord";
    }
    function validateViewRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.record#viewRecord", v2);
    }
    function isViewNotFound(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.record#viewNotFound";
    }
    function validateViewNotFound(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.record#viewNotFound", v2);
    }
    function isViewBlocked(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.record#viewBlocked";
    }
    function validateViewBlocked(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.record#viewBlocked", v2);
    }
    function isViewDetached(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.record#viewDetached";
    }
    function validateViewDetached(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.record#viewDetached", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/embed/recordWithMedia.js
var require_recordWithMedia = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/embed/recordWithMedia.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMain = isMain;
    exports.validateMain = validateMain;
    exports.isView = isView;
    exports.validateView = validateView;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isMain(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.embed.recordWithMedia#main" || v2.$type === "app.bsky.embed.recordWithMedia");
    }
    function validateMain(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.recordWithMedia#main", v2);
    }
    function isView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.recordWithMedia#view";
    }
    function validateView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.recordWithMedia#view", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/embed/video.js
var require_video = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/embed/video.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMain = isMain;
    exports.validateMain = validateMain;
    exports.isCaption = isCaption;
    exports.validateCaption = validateCaption;
    exports.isView = isView;
    exports.validateView = validateView;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isMain(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.embed.video#main" || v2.$type === "app.bsky.embed.video");
    }
    function validateMain(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.video#main", v2);
    }
    function isCaption(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.video#caption";
    }
    function validateCaption(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.video#caption", v2);
    }
    function isView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.embed.video#view";
    }
    function validateView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.embed.video#view", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/defs.js
var require_defs8 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.INTERACTIONSHARE = exports.INTERACTIONQUOTE = exports.INTERACTIONREPLY = exports.INTERACTIONREPOST = exports.INTERACTIONLIKE = exports.INTERACTIONSEEN = exports.CLICKTHROUGHEMBED = exports.CLICKTHROUGHREPOSTER = exports.CLICKTHROUGHAUTHOR = exports.CLICKTHROUGHITEM = exports.REQUESTMORE = exports.REQUESTLESS = void 0;
    exports.isPostView = isPostView;
    exports.validatePostView = validatePostView;
    exports.isViewerState = isViewerState;
    exports.validateViewerState = validateViewerState;
    exports.isFeedViewPost = isFeedViewPost;
    exports.validateFeedViewPost = validateFeedViewPost;
    exports.isReplyRef = isReplyRef;
    exports.validateReplyRef = validateReplyRef;
    exports.isReasonRepost = isReasonRepost;
    exports.validateReasonRepost = validateReasonRepost;
    exports.isReasonPin = isReasonPin;
    exports.validateReasonPin = validateReasonPin;
    exports.isThreadViewPost = isThreadViewPost;
    exports.validateThreadViewPost = validateThreadViewPost;
    exports.isNotFoundPost = isNotFoundPost;
    exports.validateNotFoundPost = validateNotFoundPost;
    exports.isBlockedPost = isBlockedPost;
    exports.validateBlockedPost = validateBlockedPost;
    exports.isBlockedAuthor = isBlockedAuthor;
    exports.validateBlockedAuthor = validateBlockedAuthor;
    exports.isGeneratorView = isGeneratorView;
    exports.validateGeneratorView = validateGeneratorView;
    exports.isGeneratorViewerState = isGeneratorViewerState;
    exports.validateGeneratorViewerState = validateGeneratorViewerState;
    exports.isSkeletonFeedPost = isSkeletonFeedPost;
    exports.validateSkeletonFeedPost = validateSkeletonFeedPost;
    exports.isSkeletonReasonRepost = isSkeletonReasonRepost;
    exports.validateSkeletonReasonRepost = validateSkeletonReasonRepost;
    exports.isSkeletonReasonPin = isSkeletonReasonPin;
    exports.validateSkeletonReasonPin = validateSkeletonReasonPin;
    exports.isThreadgateView = isThreadgateView;
    exports.validateThreadgateView = validateThreadgateView;
    exports.isInteraction = isInteraction;
    exports.validateInteraction = validateInteraction;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isPostView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#postView";
    }
    function validatePostView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#postView", v2);
    }
    function isViewerState(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#viewerState";
    }
    function validateViewerState(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#viewerState", v2);
    }
    function isFeedViewPost(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#feedViewPost";
    }
    function validateFeedViewPost(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#feedViewPost", v2);
    }
    function isReplyRef(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#replyRef";
    }
    function validateReplyRef(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#replyRef", v2);
    }
    function isReasonRepost(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#reasonRepost";
    }
    function validateReasonRepost(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#reasonRepost", v2);
    }
    function isReasonPin(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#reasonPin";
    }
    function validateReasonPin(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#reasonPin", v2);
    }
    function isThreadViewPost(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#threadViewPost";
    }
    function validateThreadViewPost(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#threadViewPost", v2);
    }
    function isNotFoundPost(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#notFoundPost";
    }
    function validateNotFoundPost(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#notFoundPost", v2);
    }
    function isBlockedPost(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#blockedPost";
    }
    function validateBlockedPost(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#blockedPost", v2);
    }
    function isBlockedAuthor(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#blockedAuthor";
    }
    function validateBlockedAuthor(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#blockedAuthor", v2);
    }
    function isGeneratorView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#generatorView";
    }
    function validateGeneratorView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#generatorView", v2);
    }
    function isGeneratorViewerState(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#generatorViewerState";
    }
    function validateGeneratorViewerState(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#generatorViewerState", v2);
    }
    function isSkeletonFeedPost(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#skeletonFeedPost";
    }
    function validateSkeletonFeedPost(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#skeletonFeedPost", v2);
    }
    function isSkeletonReasonRepost(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#skeletonReasonRepost";
    }
    function validateSkeletonReasonRepost(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#skeletonReasonRepost", v2);
    }
    function isSkeletonReasonPin(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#skeletonReasonPin";
    }
    function validateSkeletonReasonPin(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#skeletonReasonPin", v2);
    }
    function isThreadgateView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#threadgateView";
    }
    function validateThreadgateView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#threadgateView", v2);
    }
    function isInteraction(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.defs#interaction";
    }
    function validateInteraction(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.defs#interaction", v2);
    }
    exports.REQUESTLESS = "app.bsky.feed.defs#requestLess";
    exports.REQUESTMORE = "app.bsky.feed.defs#requestMore";
    exports.CLICKTHROUGHITEM = "app.bsky.feed.defs#clickthroughItem";
    exports.CLICKTHROUGHAUTHOR = "app.bsky.feed.defs#clickthroughAuthor";
    exports.CLICKTHROUGHREPOSTER = "app.bsky.feed.defs#clickthroughReposter";
    exports.CLICKTHROUGHEMBED = "app.bsky.feed.defs#clickthroughEmbed";
    exports.INTERACTIONSEEN = "app.bsky.feed.defs#interactionSeen";
    exports.INTERACTIONLIKE = "app.bsky.feed.defs#interactionLike";
    exports.INTERACTIONREPOST = "app.bsky.feed.defs#interactionRepost";
    exports.INTERACTIONREPLY = "app.bsky.feed.defs#interactionReply";
    exports.INTERACTIONQUOTE = "app.bsky.feed.defs#interactionQuote";
    exports.INTERACTIONSHARE = "app.bsky.feed.defs#interactionShare";
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/describeFeedGenerator.js
var require_describeFeedGenerator = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/describeFeedGenerator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isFeed = isFeed;
    exports.validateFeed = validateFeed;
    exports.isLinks = isLinks;
    exports.validateLinks = validateLinks;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isFeed(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.describeFeedGenerator#feed";
    }
    function validateFeed(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.describeFeedGenerator#feed", v2);
    }
    function isLinks(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.describeFeedGenerator#links";
    }
    function validateLinks(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.describeFeedGenerator#links", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/generator.js
var require_generator = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/generator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.feed.generator#main" || v2.$type === "app.bsky.feed.generator");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.generator#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorFeeds.js
var require_getActorFeeds = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getActorFeeds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerator.js
var require_getFeedGenerator = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerators.js
var require_getFeedGenerators = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getFeedGenerators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getLikes.js
var require_getLikes = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getLikes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isLike = isLike;
    exports.validateLike = validateLike;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isLike(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.getLikes#like";
    }
    function validateLike(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.getLikes#like", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPosts.js
var require_getPosts = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getPosts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getQuotes.js
var require_getQuotes = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getQuotes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getRepostedBy.js
var require_getRepostedBy = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getRepostedBy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getSuggestedFeeds.js
var require_getSuggestedFeeds = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getSuggestedFeeds.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/getTimeline.js
var require_getTimeline = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/getTimeline.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/like.js
var require_like = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/like.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.feed.like#main" || v2.$type === "app.bsky.feed.like");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.like#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/post.js
var require_post = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/post.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    exports.isReplyRef = isReplyRef;
    exports.validateReplyRef = validateReplyRef;
    exports.isEntity = isEntity;
    exports.validateEntity = validateEntity;
    exports.isTextSlice = isTextSlice;
    exports.validateTextSlice = validateTextSlice;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.feed.post#main" || v2.$type === "app.bsky.feed.post");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.post#main", v2);
    }
    function isReplyRef(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.post#replyRef";
    }
    function validateReplyRef(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.post#replyRef", v2);
    }
    function isEntity(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.post#entity";
    }
    function validateEntity(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.post#entity", v2);
    }
    function isTextSlice(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.post#textSlice";
    }
    function validateTextSlice(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.post#textSlice", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/postgate.js
var require_postgate = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/postgate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    exports.isDisableRule = isDisableRule;
    exports.validateDisableRule = validateDisableRule;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.feed.postgate#main" || v2.$type === "app.bsky.feed.postgate");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.postgate#main", v2);
    }
    function isDisableRule(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.postgate#disableRule";
    }
    function validateDisableRule(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.postgate#disableRule", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/repost.js
var require_repost = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/repost.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.feed.repost#main" || v2.$type === "app.bsky.feed.repost");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.repost#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/sendInteractions.js
var require_sendInteractions = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/sendInteractions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/feed/threadgate.js
var require_threadgate = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/feed/threadgate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    exports.isMentionRule = isMentionRule;
    exports.validateMentionRule = validateMentionRule;
    exports.isFollowingRule = isFollowingRule;
    exports.validateFollowingRule = validateFollowingRule;
    exports.isListRule = isListRule;
    exports.validateListRule = validateListRule;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.feed.threadgate#main" || v2.$type === "app.bsky.feed.threadgate");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#main", v2);
    }
    function isMentionRule(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.threadgate#mentionRule";
    }
    function validateMentionRule(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#mentionRule", v2);
    }
    function isFollowingRule(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.threadgate#followingRule";
    }
    function validateFollowingRule(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#followingRule", v2);
    }
    function isListRule(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.feed.threadgate#listRule";
    }
    function validateListRule(v2) {
      return lexicons_1.lexicons.validate("app.bsky.feed.threadgate#listRule", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/block.js
var require_block = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/block.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.graph.block#main" || v2.$type === "app.bsky.graph.block");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.block#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/defs.js
var require_defs9 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REFERENCELIST = exports.CURATELIST = exports.MODLIST = void 0;
    exports.isListViewBasic = isListViewBasic;
    exports.validateListViewBasic = validateListViewBasic;
    exports.isListView = isListView;
    exports.validateListView = validateListView;
    exports.isListItemView = isListItemView;
    exports.validateListItemView = validateListItemView;
    exports.isStarterPackView = isStarterPackView;
    exports.validateStarterPackView = validateStarterPackView;
    exports.isStarterPackViewBasic = isStarterPackViewBasic;
    exports.validateStarterPackViewBasic = validateStarterPackViewBasic;
    exports.isListViewerState = isListViewerState;
    exports.validateListViewerState = validateListViewerState;
    exports.isNotFoundActor = isNotFoundActor;
    exports.validateNotFoundActor = validateNotFoundActor;
    exports.isRelationship = isRelationship;
    exports.validateRelationship = validateRelationship;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isListViewBasic(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.graph.defs#listViewBasic";
    }
    function validateListViewBasic(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.defs#listViewBasic", v2);
    }
    function isListView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.graph.defs#listView";
    }
    function validateListView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.defs#listView", v2);
    }
    function isListItemView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.graph.defs#listItemView";
    }
    function validateListItemView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.defs#listItemView", v2);
    }
    function isStarterPackView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.graph.defs#starterPackView";
    }
    function validateStarterPackView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.defs#starterPackView", v2);
    }
    function isStarterPackViewBasic(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.graph.defs#starterPackViewBasic";
    }
    function validateStarterPackViewBasic(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.defs#starterPackViewBasic", v2);
    }
    exports.MODLIST = "app.bsky.graph.defs#modlist";
    exports.CURATELIST = "app.bsky.graph.defs#curatelist";
    exports.REFERENCELIST = "app.bsky.graph.defs#referencelist";
    function isListViewerState(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.graph.defs#listViewerState";
    }
    function validateListViewerState(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.defs#listViewerState", v2);
    }
    function isNotFoundActor(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.graph.defs#notFoundActor";
    }
    function validateNotFoundActor(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.defs#notFoundActor", v2);
    }
    function isRelationship(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.graph.defs#relationship";
    }
    function validateRelationship(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.defs#relationship", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/follow.js
var require_follow = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/follow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.graph.follow#main" || v2.$type === "app.bsky.graph.follow");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.follow#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getActorStarterPacks.js
var require_getActorStarterPacks = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getActorStarterPacks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getBlocks.js
var require_getBlocks2 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getBlocks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollowers.js
var require_getFollowers = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollowers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollows.js
var require_getFollows = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getFollows.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getKnownFollowers.js
var require_getKnownFollowers = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getKnownFollowers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getList.js
var require_getList = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListBlocks.js
var require_getListBlocks = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListBlocks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListMutes.js
var require_getListMutes = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getListMutes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getLists.js
var require_getLists = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getLists.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getMutes.js
var require_getMutes = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getMutes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPack.js
var require_getStarterPack = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPacks.js
var require_getStarterPacks = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getStarterPacks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/getSuggestedFollowsByActor.js
var require_getSuggestedFollowsByActor = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/getSuggestedFollowsByActor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/list.js
var require_list = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/list.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.graph.list#main" || v2.$type === "app.bsky.graph.list");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.list#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/listblock.js
var require_listblock = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/listblock.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.graph.listblock#main" || v2.$type === "app.bsky.graph.listblock");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.listblock#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/listitem.js
var require_listitem = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/listitem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.graph.listitem#main" || v2.$type === "app.bsky.graph.listitem");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.listitem#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActor.js
var require_muteActor = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActorList.js
var require_muteActorList = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteActorList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteThread.js
var require_muteThread = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/muteThread.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/searchStarterPacks.js
var require_searchStarterPacks = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/searchStarterPacks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/starterpack.js
var require_starterpack = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/starterpack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    exports.isFeedItem = isFeedItem;
    exports.validateFeedItem = validateFeedItem;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.graph.starterpack#main" || v2.$type === "app.bsky.graph.starterpack");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.starterpack#main", v2);
    }
    function isFeedItem(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.graph.starterpack#feedItem";
    }
    function validateFeedItem(v2) {
      return lexicons_1.lexicons.validate("app.bsky.graph.starterpack#feedItem", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActor.js
var require_unmuteActor = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActor.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActorList.js
var require_unmuteActorList = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteActorList.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteThread.js
var require_unmuteThread = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/graph/unmuteThread.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/labeler/defs.js
var require_defs10 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/labeler/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isLabelerView = isLabelerView;
    exports.validateLabelerView = validateLabelerView;
    exports.isLabelerViewDetailed = isLabelerViewDetailed;
    exports.validateLabelerViewDetailed = validateLabelerViewDetailed;
    exports.isLabelerViewerState = isLabelerViewerState;
    exports.validateLabelerViewerState = validateLabelerViewerState;
    exports.isLabelerPolicies = isLabelerPolicies;
    exports.validateLabelerPolicies = validateLabelerPolicies;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isLabelerView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.labeler.defs#labelerView";
    }
    function validateLabelerView(v2) {
      return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerView", v2);
    }
    function isLabelerViewDetailed(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.labeler.defs#labelerViewDetailed";
    }
    function validateLabelerViewDetailed(v2) {
      return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerViewDetailed", v2);
    }
    function isLabelerViewerState(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.labeler.defs#labelerViewerState";
    }
    function validateLabelerViewerState(v2) {
      return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerViewerState", v2);
    }
    function isLabelerPolicies(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.labeler.defs#labelerPolicies";
    }
    function validateLabelerPolicies(v2) {
      return lexicons_1.lexicons.validate("app.bsky.labeler.defs#labelerPolicies", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/labeler/getServices.js
var require_getServices = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/labeler/getServices.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/labeler/service.js
var require_service = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/labeler/service.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.labeler.service#main" || v2.$type === "app.bsky.labeler.service");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("app.bsky.labeler.service#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/notification/getUnreadCount.js
var require_getUnreadCount = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/notification/getUnreadCount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/notification/listNotifications.js
var require_listNotifications = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/notification/listNotifications.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isNotification = isNotification;
    exports.validateNotification = validateNotification;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isNotification(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.notification.listNotifications#notification";
    }
    function validateNotification(v2) {
      return lexicons_1.lexicons.validate("app.bsky.notification.listNotifications#notification", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/notification/putPreferences.js
var require_putPreferences2 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/notification/putPreferences.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/notification/registerPush.js
var require_registerPush = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/notification/registerPush.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/notification/updateSeen.js
var require_updateSeen = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/notification/updateSeen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/richtext/facet.js
var require_facet = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/richtext/facet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMain = isMain;
    exports.validateMain = validateMain;
    exports.isMention = isMention;
    exports.validateMention = validateMention;
    exports.isLink = isLink;
    exports.validateLink = validateLink;
    exports.isTag = isTag;
    exports.validateTag = validateTag;
    exports.isByteSlice = isByteSlice;
    exports.validateByteSlice = validateByteSlice;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isMain(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "app.bsky.richtext.facet#main" || v2.$type === "app.bsky.richtext.facet");
    }
    function validateMain(v2) {
      return lexicons_1.lexicons.validate("app.bsky.richtext.facet#main", v2);
    }
    function isMention(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.richtext.facet#mention";
    }
    function validateMention(v2) {
      return lexicons_1.lexicons.validate("app.bsky.richtext.facet#mention", v2);
    }
    function isLink(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.richtext.facet#link";
    }
    function validateLink(v2) {
      return lexicons_1.lexicons.validate("app.bsky.richtext.facet#link", v2);
    }
    function isTag(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.richtext.facet#tag";
    }
    function validateTag(v2) {
      return lexicons_1.lexicons.validate("app.bsky.richtext.facet#tag", v2);
    }
    function isByteSlice(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.richtext.facet#byteSlice";
    }
    function validateByteSlice(v2) {
      return lexicons_1.lexicons.validate("app.bsky.richtext.facet#byteSlice", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/defs.js
var require_defs11 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSkeletonSearchPost = isSkeletonSearchPost;
    exports.validateSkeletonSearchPost = validateSkeletonSearchPost;
    exports.isSkeletonSearchActor = isSkeletonSearchActor;
    exports.validateSkeletonSearchActor = validateSkeletonSearchActor;
    exports.isSkeletonSearchStarterPack = isSkeletonSearchStarterPack;
    exports.validateSkeletonSearchStarterPack = validateSkeletonSearchStarterPack;
    exports.isTrendingTopic = isTrendingTopic;
    exports.validateTrendingTopic = validateTrendingTopic;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isSkeletonSearchPost(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.unspecced.defs#skeletonSearchPost";
    }
    function validateSkeletonSearchPost(v2) {
      return lexicons_1.lexicons.validate("app.bsky.unspecced.defs#skeletonSearchPost", v2);
    }
    function isSkeletonSearchActor(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.unspecced.defs#skeletonSearchActor";
    }
    function validateSkeletonSearchActor(v2) {
      return lexicons_1.lexicons.validate("app.bsky.unspecced.defs#skeletonSearchActor", v2);
    }
    function isSkeletonSearchStarterPack(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.unspecced.defs#skeletonSearchStarterPack";
    }
    function validateSkeletonSearchStarterPack(v2) {
      return lexicons_1.lexicons.validate("app.bsky.unspecced.defs#skeletonSearchStarterPack", v2);
    }
    function isTrendingTopic(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.unspecced.defs#trendingTopic";
    }
    function validateTrendingTopic(v2) {
      return lexicons_1.lexicons.validate("app.bsky.unspecced.defs#trendingTopic", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getConfig.js
var require_getConfig = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getPopularFeedGenerators.js
var require_getPopularFeedGenerators = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getPopularFeedGenerators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestionsSkeleton.js
var require_getSuggestionsSkeleton = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getSuggestionsSkeleton.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTaggedSuggestions.js
var require_getTaggedSuggestions = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTaggedSuggestions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isSuggestion = isSuggestion;
    exports.validateSuggestion = validateSuggestion;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isSuggestion(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.unspecced.getTaggedSuggestions#suggestion";
    }
    function validateSuggestion(v2) {
      return lexicons_1.lexicons.validate("app.bsky.unspecced.getTaggedSuggestions#suggestion", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTrendingTopics.js
var require_getTrendingTopics = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/unspecced/getTrendingTopics.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/video/defs.js
var require_defs12 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/video/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isJobStatus = isJobStatus;
    exports.validateJobStatus = validateJobStatus;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isJobStatus(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "app.bsky.video.defs#jobStatus";
    }
    function validateJobStatus(v2) {
      return lexicons_1.lexicons.validate("app.bsky.video.defs#jobStatus", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/video/getJobStatus.js
var require_getJobStatus = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/video/getJobStatus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/video/getUploadLimits.js
var require_getUploadLimits = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/video/getUploadLimits.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/app/bsky/video/uploadVideo.js
var require_uploadVideo = __commonJS({
  "node_modules/@atproto/api/dist/client/types/app/bsky/video/uploadVideo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/actor/declaration.js
var require_declaration = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/actor/declaration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isRecord = isRecord;
    exports.validateRecord = validateRecord;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isRecord(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && (v2.$type === "chat.bsky.actor.declaration#main" || v2.$type === "chat.bsky.actor.declaration");
    }
    function validateRecord(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.actor.declaration#main", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/actor/defs.js
var require_defs13 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/actor/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isProfileViewBasic = isProfileViewBasic;
    exports.validateProfileViewBasic = validateProfileViewBasic;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isProfileViewBasic(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.actor.defs#profileViewBasic";
    }
    function validateProfileViewBasic(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.actor.defs#profileViewBasic", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/actor/deleteAccount.js
var require_deleteAccount3 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/actor/deleteAccount.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/actor/exportAccountData.js
var require_exportAccountData = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/actor/exportAccountData.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/defs.js
var require_defs14 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isMessageRef = isMessageRef;
    exports.validateMessageRef = validateMessageRef;
    exports.isMessageInput = isMessageInput;
    exports.validateMessageInput = validateMessageInput;
    exports.isMessageView = isMessageView;
    exports.validateMessageView = validateMessageView;
    exports.isDeletedMessageView = isDeletedMessageView;
    exports.validateDeletedMessageView = validateDeletedMessageView;
    exports.isMessageViewSender = isMessageViewSender;
    exports.validateMessageViewSender = validateMessageViewSender;
    exports.isConvoView = isConvoView;
    exports.validateConvoView = validateConvoView;
    exports.isLogBeginConvo = isLogBeginConvo;
    exports.validateLogBeginConvo = validateLogBeginConvo;
    exports.isLogLeaveConvo = isLogLeaveConvo;
    exports.validateLogLeaveConvo = validateLogLeaveConvo;
    exports.isLogCreateMessage = isLogCreateMessage;
    exports.validateLogCreateMessage = validateLogCreateMessage;
    exports.isLogDeleteMessage = isLogDeleteMessage;
    exports.validateLogDeleteMessage = validateLogDeleteMessage;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isMessageRef(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.defs#messageRef";
    }
    function validateMessageRef(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.defs#messageRef", v2);
    }
    function isMessageInput(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.defs#messageInput";
    }
    function validateMessageInput(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.defs#messageInput", v2);
    }
    function isMessageView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.defs#messageView";
    }
    function validateMessageView(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.defs#messageView", v2);
    }
    function isDeletedMessageView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.defs#deletedMessageView";
    }
    function validateDeletedMessageView(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.defs#deletedMessageView", v2);
    }
    function isMessageViewSender(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.defs#messageViewSender";
    }
    function validateMessageViewSender(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.defs#messageViewSender", v2);
    }
    function isConvoView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.defs#convoView";
    }
    function validateConvoView(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.defs#convoView", v2);
    }
    function isLogBeginConvo(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.defs#logBeginConvo";
    }
    function validateLogBeginConvo(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.defs#logBeginConvo", v2);
    }
    function isLogLeaveConvo(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.defs#logLeaveConvo";
    }
    function validateLogLeaveConvo(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.defs#logLeaveConvo", v2);
    }
    function isLogCreateMessage(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.defs#logCreateMessage";
    }
    function validateLogCreateMessage(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.defs#logCreateMessage", v2);
    }
    function isLogDeleteMessage(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.defs#logDeleteMessage";
    }
    function validateLogDeleteMessage(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.defs#logDeleteMessage", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/deleteMessageForSelf.js
var require_deleteMessageForSelf = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/deleteMessageForSelf.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvo.js
var require_getConvo = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvoForMembers.js
var require_getConvoForMembers = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getConvoForMembers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getLog.js
var require_getLog = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getLog.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getMessages.js
var require_getMessages = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/getMessages.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/leaveConvo.js
var require_leaveConvo = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/leaveConvo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/listConvos.js
var require_listConvos = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/listConvos.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/muteConvo.js
var require_muteConvo = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/muteConvo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessage.js
var require_sendMessage = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessageBatch.js
var require_sendMessageBatch = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/sendMessageBatch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isBatchItem = isBatchItem;
    exports.validateBatchItem = validateBatchItem;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isBatchItem(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.convo.sendMessageBatch#batchItem";
    }
    function validateBatchItem(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.convo.sendMessageBatch#batchItem", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/unmuteConvo.js
var require_unmuteConvo = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/unmuteConvo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/convo/updateRead.js
var require_updateRead = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/convo/updateRead.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getActorMetadata.js
var require_getActorMetadata = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getActorMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isMetadata = isMetadata;
    exports.validateMetadata = validateMetadata;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isMetadata(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "chat.bsky.moderation.getActorMetadata#metadata";
    }
    function validateMetadata(v2) {
      return lexicons_1.lexicons.validate("chat.bsky.moderation.getActorMetadata#metadata", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getMessageContext.js
var require_getMessageContext = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/getMessageContext.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/updateActorAccess.js
var require_updateActorAccess = __commonJS({
  "node_modules/@atproto/api/dist/client/types/chat/bsky/moderation/updateActorAccess.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/communication/defs.js
var require_defs15 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/communication/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isTemplateView = isTemplateView;
    exports.validateTemplateView = validateTemplateView;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isTemplateView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.communication.defs#templateView";
    }
    function validateTemplateView(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.communication.defs#templateView", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/communication/deleteTemplate.js
var require_deleteTemplate = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/communication/deleteTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/communication/listTemplates.js
var require_listTemplates = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/communication/listTemplates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/defs.js
var require_defs16 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.REVIEWNONE = exports.REVIEWCLOSED = exports.REVIEWESCALATED = exports.REVIEWOPEN = void 0;
    exports.isModEventView = isModEventView;
    exports.validateModEventView = validateModEventView;
    exports.isModEventViewDetail = isModEventViewDetail;
    exports.validateModEventViewDetail = validateModEventViewDetail;
    exports.isSubjectStatusView = isSubjectStatusView;
    exports.validateSubjectStatusView = validateSubjectStatusView;
    exports.isModEventTakedown = isModEventTakedown;
    exports.validateModEventTakedown = validateModEventTakedown;
    exports.isModEventReverseTakedown = isModEventReverseTakedown;
    exports.validateModEventReverseTakedown = validateModEventReverseTakedown;
    exports.isModEventResolveAppeal = isModEventResolveAppeal;
    exports.validateModEventResolveAppeal = validateModEventResolveAppeal;
    exports.isModEventComment = isModEventComment;
    exports.validateModEventComment = validateModEventComment;
    exports.isModEventReport = isModEventReport;
    exports.validateModEventReport = validateModEventReport;
    exports.isModEventLabel = isModEventLabel;
    exports.validateModEventLabel = validateModEventLabel;
    exports.isModEventAcknowledge = isModEventAcknowledge;
    exports.validateModEventAcknowledge = validateModEventAcknowledge;
    exports.isModEventEscalate = isModEventEscalate;
    exports.validateModEventEscalate = validateModEventEscalate;
    exports.isModEventMute = isModEventMute;
    exports.validateModEventMute = validateModEventMute;
    exports.isModEventUnmute = isModEventUnmute;
    exports.validateModEventUnmute = validateModEventUnmute;
    exports.isModEventMuteReporter = isModEventMuteReporter;
    exports.validateModEventMuteReporter = validateModEventMuteReporter;
    exports.isModEventUnmuteReporter = isModEventUnmuteReporter;
    exports.validateModEventUnmuteReporter = validateModEventUnmuteReporter;
    exports.isModEventEmail = isModEventEmail;
    exports.validateModEventEmail = validateModEventEmail;
    exports.isModEventDivert = isModEventDivert;
    exports.validateModEventDivert = validateModEventDivert;
    exports.isModEventTag = isModEventTag;
    exports.validateModEventTag = validateModEventTag;
    exports.isAccountEvent = isAccountEvent;
    exports.validateAccountEvent = validateAccountEvent;
    exports.isIdentityEvent = isIdentityEvent;
    exports.validateIdentityEvent = validateIdentityEvent;
    exports.isRecordEvent = isRecordEvent;
    exports.validateRecordEvent = validateRecordEvent;
    exports.isRepoView = isRepoView;
    exports.validateRepoView = validateRepoView;
    exports.isRepoViewDetail = isRepoViewDetail;
    exports.validateRepoViewDetail = validateRepoViewDetail;
    exports.isRepoViewNotFound = isRepoViewNotFound;
    exports.validateRepoViewNotFound = validateRepoViewNotFound;
    exports.isRecordView = isRecordView;
    exports.validateRecordView = validateRecordView;
    exports.isRecordViewDetail = isRecordViewDetail;
    exports.validateRecordViewDetail = validateRecordViewDetail;
    exports.isRecordViewNotFound = isRecordViewNotFound;
    exports.validateRecordViewNotFound = validateRecordViewNotFound;
    exports.isModeration = isModeration;
    exports.validateModeration = validateModeration;
    exports.isModerationDetail = isModerationDetail;
    exports.validateModerationDetail = validateModerationDetail;
    exports.isBlobView = isBlobView;
    exports.validateBlobView = validateBlobView;
    exports.isImageDetails = isImageDetails;
    exports.validateImageDetails = validateImageDetails;
    exports.isVideoDetails = isVideoDetails;
    exports.validateVideoDetails = validateVideoDetails;
    exports.isAccountHosting = isAccountHosting;
    exports.validateAccountHosting = validateAccountHosting;
    exports.isRecordHosting = isRecordHosting;
    exports.validateRecordHosting = validateRecordHosting;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isModEventView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventView";
    }
    function validateModEventView(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventView", v2);
    }
    function isModEventViewDetail(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventViewDetail";
    }
    function validateModEventViewDetail(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventViewDetail", v2);
    }
    function isSubjectStatusView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#subjectStatusView";
    }
    function validateSubjectStatusView(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#subjectStatusView", v2);
    }
    exports.REVIEWOPEN = "tools.ozone.moderation.defs#reviewOpen";
    exports.REVIEWESCALATED = "tools.ozone.moderation.defs#reviewEscalated";
    exports.REVIEWCLOSED = "tools.ozone.moderation.defs#reviewClosed";
    exports.REVIEWNONE = "tools.ozone.moderation.defs#reviewNone";
    function isModEventTakedown(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventTakedown";
    }
    function validateModEventTakedown(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventTakedown", v2);
    }
    function isModEventReverseTakedown(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventReverseTakedown";
    }
    function validateModEventReverseTakedown(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventReverseTakedown", v2);
    }
    function isModEventResolveAppeal(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventResolveAppeal";
    }
    function validateModEventResolveAppeal(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventResolveAppeal", v2);
    }
    function isModEventComment(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventComment";
    }
    function validateModEventComment(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventComment", v2);
    }
    function isModEventReport(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventReport";
    }
    function validateModEventReport(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventReport", v2);
    }
    function isModEventLabel(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventLabel";
    }
    function validateModEventLabel(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventLabel", v2);
    }
    function isModEventAcknowledge(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventAcknowledge";
    }
    function validateModEventAcknowledge(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventAcknowledge", v2);
    }
    function isModEventEscalate(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventEscalate";
    }
    function validateModEventEscalate(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventEscalate", v2);
    }
    function isModEventMute(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventMute";
    }
    function validateModEventMute(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventMute", v2);
    }
    function isModEventUnmute(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventUnmute";
    }
    function validateModEventUnmute(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventUnmute", v2);
    }
    function isModEventMuteReporter(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventMuteReporter";
    }
    function validateModEventMuteReporter(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventMuteReporter", v2);
    }
    function isModEventUnmuteReporter(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventUnmuteReporter";
    }
    function validateModEventUnmuteReporter(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventUnmuteReporter", v2);
    }
    function isModEventEmail(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventEmail";
    }
    function validateModEventEmail(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventEmail", v2);
    }
    function isModEventDivert(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventDivert";
    }
    function validateModEventDivert(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventDivert", v2);
    }
    function isModEventTag(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#modEventTag";
    }
    function validateModEventTag(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#modEventTag", v2);
    }
    function isAccountEvent(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#accountEvent";
    }
    function validateAccountEvent(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#accountEvent", v2);
    }
    function isIdentityEvent(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#identityEvent";
    }
    function validateIdentityEvent(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#identityEvent", v2);
    }
    function isRecordEvent(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#recordEvent";
    }
    function validateRecordEvent(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordEvent", v2);
    }
    function isRepoView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#repoView";
    }
    function validateRepoView(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#repoView", v2);
    }
    function isRepoViewDetail(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#repoViewDetail";
    }
    function validateRepoViewDetail(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#repoViewDetail", v2);
    }
    function isRepoViewNotFound(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#repoViewNotFound";
    }
    function validateRepoViewNotFound(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#repoViewNotFound", v2);
    }
    function isRecordView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#recordView";
    }
    function validateRecordView(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordView", v2);
    }
    function isRecordViewDetail(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#recordViewDetail";
    }
    function validateRecordViewDetail(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordViewDetail", v2);
    }
    function isRecordViewNotFound(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#recordViewNotFound";
    }
    function validateRecordViewNotFound(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordViewNotFound", v2);
    }
    function isModeration(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#moderation";
    }
    function validateModeration(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#moderation", v2);
    }
    function isModerationDetail(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#moderationDetail";
    }
    function validateModerationDetail(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#moderationDetail", v2);
    }
    function isBlobView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#blobView";
    }
    function validateBlobView(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#blobView", v2);
    }
    function isImageDetails(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#imageDetails";
    }
    function validateImageDetails(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#imageDetails", v2);
    }
    function isVideoDetails(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#videoDetails";
    }
    function validateVideoDetails(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#videoDetails", v2);
    }
    function isAccountHosting(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#accountHosting";
    }
    function validateAccountHosting(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#accountHosting", v2);
    }
    function isRecordHosting(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.moderation.defs#recordHosting";
    }
    function validateRecordHosting(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.moderation.defs#recordHosting", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getEvent.js
var require_getEvent = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getEvent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecords.js
var require_getRecords = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRecords.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepos.js
var require_getRepos = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/getRepos.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryEvents.js
var require_queryEvents = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryEvents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryStatuses.js
var require_queryStatuses = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/queryStatuses.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/searchRepos.js
var require_searchRepos = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/moderation/searchRepos.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/server/getConfig.js
var require_getConfig2 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/server/getConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isServiceConfig = isServiceConfig;
    exports.validateServiceConfig = validateServiceConfig;
    exports.isViewerConfig = isViewerConfig;
    exports.validateViewerConfig = validateViewerConfig;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isServiceConfig(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.server.getConfig#serviceConfig";
    }
    function validateServiceConfig(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.server.getConfig#serviceConfig", v2);
    }
    function isViewerConfig(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.server.getConfig#viewerConfig";
    }
    function validateViewerConfig(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.server.getConfig#viewerConfig", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/set/addValues.js
var require_addValues = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/set/addValues.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/set/defs.js
var require_defs17 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/set/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSet = isSet;
    exports.validateSet = validateSet;
    exports.isSetView = isSetView;
    exports.validateSetView = validateSetView;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isSet(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.set.defs#set";
    }
    function validateSet(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.set.defs#set", v2);
    }
    function isSetView(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.set.defs#setView";
    }
    function validateSetView(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.set.defs#setView", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/set/querySets.js
var require_querySets = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/set/querySets.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/set/upsertSet.js
var require_upsertSet = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/set/upsertSet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/setting/defs.js
var require_defs18 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/setting/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isOption = isOption;
    exports.validateOption = validateOption;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isOption(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.setting.defs#option";
    }
    function validateOption(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.setting.defs#option", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/setting/listOptions.js
var require_listOptions = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/setting/listOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/setting/removeOptions.js
var require_removeOptions = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/setting/removeOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/setting/upsertOption.js
var require_upsertOption = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/setting/upsertOption.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/signature/defs.js
var require_defs19 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/signature/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSigDetail = isSigDetail;
    exports.validateSigDetail = validateSigDetail;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isSigDetail(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.signature.defs#sigDetail";
    }
    function validateSigDetail(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.signature.defs#sigDetail", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findCorrelation.js
var require_findCorrelation = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findCorrelation.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findRelatedAccounts.js
var require_findRelatedAccounts = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/signature/findRelatedAccounts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    exports.isRelatedAccount = isRelatedAccount;
    exports.validateRelatedAccount = validateRelatedAccount;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function toKnownErr(e12) {
      return e12;
    }
    function isRelatedAccount(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.signature.findRelatedAccounts#relatedAccount";
    }
    function validateRelatedAccount(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.signature.findRelatedAccounts#relatedAccount", v2);
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/signature/searchAccounts.js
var require_searchAccounts2 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/signature/searchAccounts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/team/defs.js
var require_defs20 = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/team/defs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ROLETRIAGE = exports.ROLEMODERATOR = exports.ROLEADMIN = void 0;
    exports.isMember = isMember;
    exports.validateMember = validateMember;
    var util_1 = require_util16();
    var lexicons_1 = require_lexicons2();
    function isMember(v2) {
      return (0, util_1.isObj)(v2) && (0, util_1.hasProp)(v2, "$type") && v2.$type === "tools.ozone.team.defs#member";
    }
    function validateMember(v2) {
      return lexicons_1.lexicons.validate("tools.ozone.team.defs#member", v2);
    }
    exports.ROLEADMIN = "tools.ozone.team.defs#roleAdmin";
    exports.ROLEMODERATOR = "tools.ozone.team.defs#roleModerator";
    exports.ROLETRIAGE = "tools.ozone.team.defs#roleTriage";
  }
});

// node_modules/@atproto/api/dist/client/types/tools/ozone/team/listMembers.js
var require_listMembers = __commonJS({
  "node_modules/@atproto/api/dist/client/types/tools/ozone/team/listMembers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toKnownErr = toKnownErr;
    function toKnownErr(e12) {
      return e12;
    }
  }
});

// node_modules/@atproto/api/dist/client/index.js
var require_client2 = __commonJS({
  "node_modules/@atproto/api/dist/client/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o13, v2) {
      Object.defineProperty(o13, "default", { enumerable: true, value: v2 });
    } : function(o13, v2) {
      o13["default"] = v2;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ComAtprotoServerDeleteSession = exports.ComAtprotoServerDeleteAccount = exports.ComAtprotoServerDefs = exports.ComAtprotoServerDeactivateAccount = exports.ComAtprotoServerCreateSession = exports.ComAtprotoServerCreateInviteCodes = exports.ComAtprotoServerCreateInviteCode = exports.ComAtprotoServerCreateAppPassword = exports.ComAtprotoServerCreateAccount = exports.ComAtprotoServerConfirmEmail = exports.ComAtprotoServerCheckAccountStatus = exports.ComAtprotoServerActivateAccount = exports.ComAtprotoRepoUploadBlob = exports.ComAtprotoRepoStrongRef = exports.ComAtprotoRepoPutRecord = exports.ComAtprotoRepoListRecords = exports.ComAtprotoRepoListMissingBlobs = exports.ComAtprotoRepoImportRepo = exports.ComAtprotoRepoGetRecord = exports.ComAtprotoRepoDescribeRepo = exports.ComAtprotoRepoDeleteRecord = exports.ComAtprotoRepoDefs = exports.ComAtprotoRepoCreateRecord = exports.ComAtprotoRepoApplyWrites = exports.ComAtprotoModerationDefs = exports.ComAtprotoModerationCreateReport = exports.ComAtprotoLabelSubscribeLabels = exports.ComAtprotoLabelQueryLabels = exports.ComAtprotoLabelDefs = exports.ComAtprotoIdentityUpdateHandle = exports.ComAtprotoIdentitySubmitPlcOperation = exports.ComAtprotoIdentitySignPlcOperation = exports.ComAtprotoIdentityResolveHandle = exports.ComAtprotoIdentityRequestPlcOperationSignature = exports.ComAtprotoIdentityGetRecommendedDidCredentials = exports.ComAtprotoAdminUpdateSubjectStatus = exports.ComAtprotoAdminUpdateAccountPassword = exports.ComAtprotoAdminUpdateAccountHandle = exports.ComAtprotoAdminUpdateAccountEmail = exports.ComAtprotoAdminSendEmail = exports.ComAtprotoAdminSearchAccounts = exports.ComAtprotoAdminGetSubjectStatus = exports.ComAtprotoAdminGetInviteCodes = exports.ComAtprotoAdminGetAccountInfos = exports.ComAtprotoAdminGetAccountInfo = exports.ComAtprotoAdminEnableAccountInvites = exports.ComAtprotoAdminDisableInviteCodes = exports.ComAtprotoAdminDisableAccountInvites = exports.ComAtprotoAdminDeleteAccount = exports.ComAtprotoAdminDefs = void 0;
    exports.AppBskyFeedGetActorFeeds = exports.AppBskyFeedGenerator = exports.AppBskyFeedDescribeFeedGenerator = exports.AppBskyFeedDefs = exports.AppBskyEmbedVideo = exports.AppBskyEmbedRecordWithMedia = exports.AppBskyEmbedRecord = exports.AppBskyEmbedImages = exports.AppBskyEmbedExternal = exports.AppBskyEmbedDefs = exports.AppBskyActorSearchActorsTypeahead = exports.AppBskyActorSearchActors = exports.AppBskyActorPutPreferences = exports.AppBskyActorProfile = exports.AppBskyActorGetSuggestions = exports.AppBskyActorGetProfiles = exports.AppBskyActorGetProfile = exports.AppBskyActorGetPreferences = exports.AppBskyActorDefs = exports.ComAtprotoTempRequestPhoneVerification = exports.ComAtprotoTempFetchLabels = exports.ComAtprotoTempCheckSignupQueue = exports.ComAtprotoTempAddReservedHandle = exports.ComAtprotoSyncSubscribeRepos = exports.ComAtprotoSyncRequestCrawl = exports.ComAtprotoSyncNotifyOfUpdate = exports.ComAtprotoSyncListRepos = exports.ComAtprotoSyncListBlobs = exports.ComAtprotoSyncGetRepoStatus = exports.ComAtprotoSyncGetRepo = exports.ComAtprotoSyncGetRecord = exports.ComAtprotoSyncGetLatestCommit = exports.ComAtprotoSyncGetHead = exports.ComAtprotoSyncGetCheckout = exports.ComAtprotoSyncGetBlocks = exports.ComAtprotoSyncGetBlob = exports.ComAtprotoServerUpdateEmail = exports.ComAtprotoServerRevokeAppPassword = exports.ComAtprotoServerResetPassword = exports.ComAtprotoServerReserveSigningKey = exports.ComAtprotoServerRequestPasswordReset = exports.ComAtprotoServerRequestEmailUpdate = exports.ComAtprotoServerRequestEmailConfirmation = exports.ComAtprotoServerRequestAccountDelete = exports.ComAtprotoServerRefreshSession = exports.ComAtprotoServerListAppPasswords = exports.ComAtprotoServerGetSession = exports.ComAtprotoServerGetServiceAuth = exports.ComAtprotoServerGetAccountInviteCodes = exports.ComAtprotoServerDescribeServer = void 0;
    exports.AppBskyLabelerDefs = exports.AppBskyGraphUnmuteThread = exports.AppBskyGraphUnmuteActorList = exports.AppBskyGraphUnmuteActor = exports.AppBskyGraphStarterpack = exports.AppBskyGraphSearchStarterPacks = exports.AppBskyGraphMuteThread = exports.AppBskyGraphMuteActorList = exports.AppBskyGraphMuteActor = exports.AppBskyGraphListitem = exports.AppBskyGraphListblock = exports.AppBskyGraphList = exports.AppBskyGraphGetSuggestedFollowsByActor = exports.AppBskyGraphGetStarterPacks = exports.AppBskyGraphGetStarterPack = exports.AppBskyGraphGetRelationships = exports.AppBskyGraphGetMutes = exports.AppBskyGraphGetLists = exports.AppBskyGraphGetListMutes = exports.AppBskyGraphGetListBlocks = exports.AppBskyGraphGetList = exports.AppBskyGraphGetKnownFollowers = exports.AppBskyGraphGetFollows = exports.AppBskyGraphGetFollowers = exports.AppBskyGraphGetBlocks = exports.AppBskyGraphGetActorStarterPacks = exports.AppBskyGraphFollow = exports.AppBskyGraphDefs = exports.AppBskyGraphBlock = exports.AppBskyFeedThreadgate = exports.AppBskyFeedSendInteractions = exports.AppBskyFeedSearchPosts = exports.AppBskyFeedRepost = exports.AppBskyFeedPostgate = exports.AppBskyFeedPost = exports.AppBskyFeedLike = exports.AppBskyFeedGetTimeline = exports.AppBskyFeedGetSuggestedFeeds = exports.AppBskyFeedGetRepostedBy = exports.AppBskyFeedGetQuotes = exports.AppBskyFeedGetPosts = exports.AppBskyFeedGetPostThread = exports.AppBskyFeedGetListFeed = exports.AppBskyFeedGetLikes = exports.AppBskyFeedGetFeedSkeleton = exports.AppBskyFeedGetFeedGenerators = exports.AppBskyFeedGetFeedGenerator = exports.AppBskyFeedGetFeed = exports.AppBskyFeedGetAuthorFeed = exports.AppBskyFeedGetActorLikes = void 0;
    exports.ToolsOzoneModerationGetRecord = exports.ToolsOzoneModerationGetEvent = exports.ToolsOzoneModerationEmitEvent = exports.ToolsOzoneModerationDefs = exports.ToolsOzoneCommunicationUpdateTemplate = exports.ToolsOzoneCommunicationListTemplates = exports.ToolsOzoneCommunicationDeleteTemplate = exports.ToolsOzoneCommunicationDefs = exports.ToolsOzoneCommunicationCreateTemplate = exports.ChatBskyModerationUpdateActorAccess = exports.ChatBskyModerationGetMessageContext = exports.ChatBskyModerationGetActorMetadata = exports.ChatBskyConvoUpdateRead = exports.ChatBskyConvoUnmuteConvo = exports.ChatBskyConvoSendMessageBatch = exports.ChatBskyConvoSendMessage = exports.ChatBskyConvoMuteConvo = exports.ChatBskyConvoListConvos = exports.ChatBskyConvoLeaveConvo = exports.ChatBskyConvoGetMessages = exports.ChatBskyConvoGetLog = exports.ChatBskyConvoGetConvoForMembers = exports.ChatBskyConvoGetConvo = exports.ChatBskyConvoDeleteMessageForSelf = exports.ChatBskyConvoDefs = exports.ChatBskyActorExportAccountData = exports.ChatBskyActorDeleteAccount = exports.ChatBskyActorDefs = exports.ChatBskyActorDeclaration = exports.AppBskyVideoUploadVideo = exports.AppBskyVideoGetUploadLimits = exports.AppBskyVideoGetJobStatus = exports.AppBskyVideoDefs = exports.AppBskyUnspeccedSearchStarterPacksSkeleton = exports.AppBskyUnspeccedSearchPostsSkeleton = exports.AppBskyUnspeccedSearchActorsSkeleton = exports.AppBskyUnspeccedGetTrendingTopics = exports.AppBskyUnspeccedGetTaggedSuggestions = exports.AppBskyUnspeccedGetSuggestionsSkeleton = exports.AppBskyUnspeccedGetPopularFeedGenerators = exports.AppBskyUnspeccedGetConfig = exports.AppBskyUnspeccedDefs = exports.AppBskyRichtextFacet = exports.AppBskyNotificationUpdateSeen = exports.AppBskyNotificationRegisterPush = exports.AppBskyNotificationPutPreferences = exports.AppBskyNotificationListNotifications = exports.AppBskyNotificationGetUnreadCount = exports.AppBskyLabelerService = exports.AppBskyLabelerGetServices = void 0;
    exports.GeneratorRecord = exports.AppBskyFeedNS = exports.AppBskyEmbedNS = exports.ProfileRecord = exports.AppBskyActorNS = exports.AppBskyNS = exports.AppNS = exports.ComAtprotoTempNS = exports.ComAtprotoSyncNS = exports.ComAtprotoServerNS = exports.ComAtprotoRepoNS = exports.ComAtprotoModerationNS = exports.ComAtprotoLabelNS = exports.ComAtprotoIdentityNS = exports.ComAtprotoAdminNS = exports.ComAtprotoNS = exports.ComNS = exports.AtpBaseClient = exports.TOOLS_OZONE_TEAM = exports.TOOLS_OZONE_MODERATION = exports.APP_BSKY_GRAPH = exports.APP_BSKY_FEED = exports.COM_ATPROTO_MODERATION = exports.ToolsOzoneTeamUpdateMember = exports.ToolsOzoneTeamListMembers = exports.ToolsOzoneTeamDeleteMember = exports.ToolsOzoneTeamDefs = exports.ToolsOzoneTeamAddMember = exports.ToolsOzoneSignatureSearchAccounts = exports.ToolsOzoneSignatureFindRelatedAccounts = exports.ToolsOzoneSignatureFindCorrelation = exports.ToolsOzoneSignatureDefs = exports.ToolsOzoneSettingUpsertOption = exports.ToolsOzoneSettingRemoveOptions = exports.ToolsOzoneSettingListOptions = exports.ToolsOzoneSettingDefs = exports.ToolsOzoneSetUpsertSet = exports.ToolsOzoneSetQuerySets = exports.ToolsOzoneSetGetValues = exports.ToolsOzoneSetDeleteValues = exports.ToolsOzoneSetDeleteSet = exports.ToolsOzoneSetDefs = exports.ToolsOzoneSetAddValues = exports.ToolsOzoneServerGetConfig = exports.ToolsOzoneModerationSearchRepos = exports.ToolsOzoneModerationQueryStatuses = exports.ToolsOzoneModerationQueryEvents = exports.ToolsOzoneModerationGetRepos = exports.ToolsOzoneModerationGetRepo = exports.ToolsOzoneModerationGetRecords = void 0;
    exports.ToolsOzoneTeamNS = exports.ToolsOzoneSignatureNS = exports.ToolsOzoneSettingNS = exports.ToolsOzoneSetNS = exports.ToolsOzoneServerNS = exports.ToolsOzoneModerationNS = exports.ToolsOzoneCommunicationNS = exports.ToolsOzoneNS = exports.ToolsNS = exports.ChatBskyModerationNS = exports.ChatBskyConvoNS = exports.DeclarationRecord = exports.ChatBskyActorNS = exports.ChatBskyNS = exports.ChatNS = exports.AppBskyVideoNS = exports.AppBskyUnspeccedNS = exports.AppBskyRichtextNS = exports.AppBskyNotificationNS = exports.ServiceRecord = exports.AppBskyLabelerNS = exports.StarterpackRecord = exports.ListitemRecord = exports.ListblockRecord = exports.ListRecord = exports.FollowRecord = exports.BlockRecord = exports.AppBskyGraphNS = exports.ThreadgateRecord = exports.RepostRecord = exports.PostgateRecord = exports.PostRecord = exports.LikeRecord = void 0;
    var xrpc_1 = require_dist19();
    var lexicons_1 = require_lexicons2();
    var ComAtprotoRepoApplyWrites = __importStar(require_applyWrites());
    var ComAtprotoRepoCreateRecord = __importStar(require_createRecord());
    var ComAtprotoRepoDeleteRecord = __importStar(require_deleteRecord());
    var ComAtprotoRepoGetRecord = __importStar(require_getRecord());
    var ComAtprotoRepoPutRecord = __importStar(require_putRecord());
    var ComAtprotoServerConfirmEmail = __importStar(require_confirmEmail());
    var ComAtprotoServerCreateAccount = __importStar(require_createAccount());
    var ComAtprotoServerCreateAppPassword = __importStar(require_createAppPassword());
    var ComAtprotoServerCreateSession = __importStar(require_createSession());
    var ComAtprotoServerDeleteAccount = __importStar(require_deleteAccount());
    var ComAtprotoServerGetAccountInviteCodes = __importStar(require_getAccountInviteCodes());
    var ComAtprotoServerGetServiceAuth = __importStar(require_getServiceAuth());
    var ComAtprotoServerListAppPasswords = __importStar(require_listAppPasswords());
    var ComAtprotoServerRefreshSession = __importStar(require_refreshSession());
    var ComAtprotoServerResetPassword = __importStar(require_resetPassword());
    var ComAtprotoServerUpdateEmail = __importStar(require_updateEmail());
    var ComAtprotoSyncGetBlob = __importStar(require_getBlob());
    var ComAtprotoSyncGetBlocks = __importStar(require_getBlocks());
    var ComAtprotoSyncGetHead = __importStar(require_getHead());
    var ComAtprotoSyncGetLatestCommit = __importStar(require_getLatestCommit());
    var ComAtprotoSyncGetRecord = __importStar(require_getRecord2());
    var ComAtprotoSyncGetRepo = __importStar(require_getRepo());
    var ComAtprotoSyncGetRepoStatus = __importStar(require_getRepoStatus());
    var ComAtprotoSyncListBlobs = __importStar(require_listBlobs());
    var AppBskyFeedGetActorLikes = __importStar(require_getActorLikes());
    var AppBskyFeedGetAuthorFeed = __importStar(require_getAuthorFeed());
    var AppBskyFeedGetFeed = __importStar(require_getFeed());
    var AppBskyFeedGetFeedSkeleton = __importStar(require_getFeedSkeleton());
    var AppBskyFeedGetListFeed = __importStar(require_getListFeed());
    var AppBskyFeedGetPostThread = __importStar(require_getPostThread());
    var AppBskyFeedSearchPosts = __importStar(require_searchPosts());
    var AppBskyGraphGetRelationships = __importStar(require_getRelationships());
    var AppBskyUnspeccedSearchActorsSkeleton = __importStar(require_searchActorsSkeleton());
    var AppBskyUnspeccedSearchPostsSkeleton = __importStar(require_searchPostsSkeleton());
    var AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(require_searchStarterPacksSkeleton());
    var ToolsOzoneCommunicationCreateTemplate = __importStar(require_createTemplate());
    var ToolsOzoneCommunicationUpdateTemplate = __importStar(require_updateTemplate());
    var ToolsOzoneModerationEmitEvent = __importStar(require_emitEvent());
    var ToolsOzoneModerationGetRecord = __importStar(require_getRecord3());
    var ToolsOzoneModerationGetRepo = __importStar(require_getRepo2());
    var ToolsOzoneSetDeleteSet = __importStar(require_deleteSet());
    var ToolsOzoneSetDeleteValues = __importStar(require_deleteValues());
    var ToolsOzoneSetGetValues = __importStar(require_getValues());
    var ToolsOzoneTeamAddMember = __importStar(require_addMember());
    var ToolsOzoneTeamDeleteMember = __importStar(require_deleteMember());
    var ToolsOzoneTeamUpdateMember = __importStar(require_updateMember());
    exports.ComAtprotoAdminDefs = __importStar(require_defs());
    exports.ComAtprotoAdminDeleteAccount = __importStar(require_deleteAccount2());
    exports.ComAtprotoAdminDisableAccountInvites = __importStar(require_disableAccountInvites());
    exports.ComAtprotoAdminDisableInviteCodes = __importStar(require_disableInviteCodes());
    exports.ComAtprotoAdminEnableAccountInvites = __importStar(require_enableAccountInvites());
    exports.ComAtprotoAdminGetAccountInfo = __importStar(require_getAccountInfo());
    exports.ComAtprotoAdminGetAccountInfos = __importStar(require_getAccountInfos());
    exports.ComAtprotoAdminGetInviteCodes = __importStar(require_getInviteCodes());
    exports.ComAtprotoAdminGetSubjectStatus = __importStar(require_getSubjectStatus());
    exports.ComAtprotoAdminSearchAccounts = __importStar(require_searchAccounts());
    exports.ComAtprotoAdminSendEmail = __importStar(require_sendEmail());
    exports.ComAtprotoAdminUpdateAccountEmail = __importStar(require_updateAccountEmail());
    exports.ComAtprotoAdminUpdateAccountHandle = __importStar(require_updateAccountHandle());
    exports.ComAtprotoAdminUpdateAccountPassword = __importStar(require_updateAccountPassword());
    exports.ComAtprotoAdminUpdateSubjectStatus = __importStar(require_updateSubjectStatus());
    exports.ComAtprotoIdentityGetRecommendedDidCredentials = __importStar(require_getRecommendedDidCredentials());
    exports.ComAtprotoIdentityRequestPlcOperationSignature = __importStar(require_requestPlcOperationSignature());
    exports.ComAtprotoIdentityResolveHandle = __importStar(require_resolveHandle());
    exports.ComAtprotoIdentitySignPlcOperation = __importStar(require_signPlcOperation());
    exports.ComAtprotoIdentitySubmitPlcOperation = __importStar(require_submitPlcOperation());
    exports.ComAtprotoIdentityUpdateHandle = __importStar(require_updateHandle());
    exports.ComAtprotoLabelDefs = __importStar(require_defs2());
    exports.ComAtprotoLabelQueryLabels = __importStar(require_queryLabels());
    exports.ComAtprotoLabelSubscribeLabels = __importStar(require_subscribeLabels());
    exports.ComAtprotoModerationCreateReport = __importStar(require_createReport());
    exports.ComAtprotoModerationDefs = __importStar(require_defs3());
    exports.ComAtprotoRepoApplyWrites = __importStar(require_applyWrites());
    exports.ComAtprotoRepoCreateRecord = __importStar(require_createRecord());
    exports.ComAtprotoRepoDefs = __importStar(require_defs4());
    exports.ComAtprotoRepoDeleteRecord = __importStar(require_deleteRecord());
    exports.ComAtprotoRepoDescribeRepo = __importStar(require_describeRepo());
    exports.ComAtprotoRepoGetRecord = __importStar(require_getRecord());
    exports.ComAtprotoRepoImportRepo = __importStar(require_importRepo());
    exports.ComAtprotoRepoListMissingBlobs = __importStar(require_listMissingBlobs());
    exports.ComAtprotoRepoListRecords = __importStar(require_listRecords());
    exports.ComAtprotoRepoPutRecord = __importStar(require_putRecord());
    exports.ComAtprotoRepoStrongRef = __importStar(require_strongRef());
    exports.ComAtprotoRepoUploadBlob = __importStar(require_uploadBlob());
    exports.ComAtprotoServerActivateAccount = __importStar(require_activateAccount());
    exports.ComAtprotoServerCheckAccountStatus = __importStar(require_checkAccountStatus());
    exports.ComAtprotoServerConfirmEmail = __importStar(require_confirmEmail());
    exports.ComAtprotoServerCreateAccount = __importStar(require_createAccount());
    exports.ComAtprotoServerCreateAppPassword = __importStar(require_createAppPassword());
    exports.ComAtprotoServerCreateInviteCode = __importStar(require_createInviteCode());
    exports.ComAtprotoServerCreateInviteCodes = __importStar(require_createInviteCodes());
    exports.ComAtprotoServerCreateSession = __importStar(require_createSession());
    exports.ComAtprotoServerDeactivateAccount = __importStar(require_deactivateAccount());
    exports.ComAtprotoServerDefs = __importStar(require_defs5());
    exports.ComAtprotoServerDeleteAccount = __importStar(require_deleteAccount());
    exports.ComAtprotoServerDeleteSession = __importStar(require_deleteSession());
    exports.ComAtprotoServerDescribeServer = __importStar(require_describeServer());
    exports.ComAtprotoServerGetAccountInviteCodes = __importStar(require_getAccountInviteCodes());
    exports.ComAtprotoServerGetServiceAuth = __importStar(require_getServiceAuth());
    exports.ComAtprotoServerGetSession = __importStar(require_getSession());
    exports.ComAtprotoServerListAppPasswords = __importStar(require_listAppPasswords());
    exports.ComAtprotoServerRefreshSession = __importStar(require_refreshSession());
    exports.ComAtprotoServerRequestAccountDelete = __importStar(require_requestAccountDelete());
    exports.ComAtprotoServerRequestEmailConfirmation = __importStar(require_requestEmailConfirmation());
    exports.ComAtprotoServerRequestEmailUpdate = __importStar(require_requestEmailUpdate());
    exports.ComAtprotoServerRequestPasswordReset = __importStar(require_requestPasswordReset());
    exports.ComAtprotoServerReserveSigningKey = __importStar(require_reserveSigningKey());
    exports.ComAtprotoServerResetPassword = __importStar(require_resetPassword());
    exports.ComAtprotoServerRevokeAppPassword = __importStar(require_revokeAppPassword());
    exports.ComAtprotoServerUpdateEmail = __importStar(require_updateEmail());
    exports.ComAtprotoSyncGetBlob = __importStar(require_getBlob());
    exports.ComAtprotoSyncGetBlocks = __importStar(require_getBlocks());
    exports.ComAtprotoSyncGetCheckout = __importStar(require_getCheckout());
    exports.ComAtprotoSyncGetHead = __importStar(require_getHead());
    exports.ComAtprotoSyncGetLatestCommit = __importStar(require_getLatestCommit());
    exports.ComAtprotoSyncGetRecord = __importStar(require_getRecord2());
    exports.ComAtprotoSyncGetRepo = __importStar(require_getRepo());
    exports.ComAtprotoSyncGetRepoStatus = __importStar(require_getRepoStatus());
    exports.ComAtprotoSyncListBlobs = __importStar(require_listBlobs());
    exports.ComAtprotoSyncListRepos = __importStar(require_listRepos());
    exports.ComAtprotoSyncNotifyOfUpdate = __importStar(require_notifyOfUpdate());
    exports.ComAtprotoSyncRequestCrawl = __importStar(require_requestCrawl());
    exports.ComAtprotoSyncSubscribeRepos = __importStar(require_subscribeRepos());
    exports.ComAtprotoTempAddReservedHandle = __importStar(require_addReservedHandle());
    exports.ComAtprotoTempCheckSignupQueue = __importStar(require_checkSignupQueue());
    exports.ComAtprotoTempFetchLabels = __importStar(require_fetchLabels());
    exports.ComAtprotoTempRequestPhoneVerification = __importStar(require_requestPhoneVerification());
    exports.AppBskyActorDefs = __importStar(require_defs6());
    exports.AppBskyActorGetPreferences = __importStar(require_getPreferences());
    exports.AppBskyActorGetProfile = __importStar(require_getProfile());
    exports.AppBskyActorGetProfiles = __importStar(require_getProfiles());
    exports.AppBskyActorGetSuggestions = __importStar(require_getSuggestions());
    exports.AppBskyActorProfile = __importStar(require_profile());
    exports.AppBskyActorPutPreferences = __importStar(require_putPreferences());
    exports.AppBskyActorSearchActors = __importStar(require_searchActors());
    exports.AppBskyActorSearchActorsTypeahead = __importStar(require_searchActorsTypeahead());
    exports.AppBskyEmbedDefs = __importStar(require_defs7());
    exports.AppBskyEmbedExternal = __importStar(require_external2());
    exports.AppBskyEmbedImages = __importStar(require_images());
    exports.AppBskyEmbedRecord = __importStar(require_record());
    exports.AppBskyEmbedRecordWithMedia = __importStar(require_recordWithMedia());
    exports.AppBskyEmbedVideo = __importStar(require_video());
    exports.AppBskyFeedDefs = __importStar(require_defs8());
    exports.AppBskyFeedDescribeFeedGenerator = __importStar(require_describeFeedGenerator());
    exports.AppBskyFeedGenerator = __importStar(require_generator());
    exports.AppBskyFeedGetActorFeeds = __importStar(require_getActorFeeds());
    exports.AppBskyFeedGetActorLikes = __importStar(require_getActorLikes());
    exports.AppBskyFeedGetAuthorFeed = __importStar(require_getAuthorFeed());
    exports.AppBskyFeedGetFeed = __importStar(require_getFeed());
    exports.AppBskyFeedGetFeedGenerator = __importStar(require_getFeedGenerator());
    exports.AppBskyFeedGetFeedGenerators = __importStar(require_getFeedGenerators());
    exports.AppBskyFeedGetFeedSkeleton = __importStar(require_getFeedSkeleton());
    exports.AppBskyFeedGetLikes = __importStar(require_getLikes());
    exports.AppBskyFeedGetListFeed = __importStar(require_getListFeed());
    exports.AppBskyFeedGetPostThread = __importStar(require_getPostThread());
    exports.AppBskyFeedGetPosts = __importStar(require_getPosts());
    exports.AppBskyFeedGetQuotes = __importStar(require_getQuotes());
    exports.AppBskyFeedGetRepostedBy = __importStar(require_getRepostedBy());
    exports.AppBskyFeedGetSuggestedFeeds = __importStar(require_getSuggestedFeeds());
    exports.AppBskyFeedGetTimeline = __importStar(require_getTimeline());
    exports.AppBskyFeedLike = __importStar(require_like());
    exports.AppBskyFeedPost = __importStar(require_post());
    exports.AppBskyFeedPostgate = __importStar(require_postgate());
    exports.AppBskyFeedRepost = __importStar(require_repost());
    exports.AppBskyFeedSearchPosts = __importStar(require_searchPosts());
    exports.AppBskyFeedSendInteractions = __importStar(require_sendInteractions());
    exports.AppBskyFeedThreadgate = __importStar(require_threadgate());
    exports.AppBskyGraphBlock = __importStar(require_block());
    exports.AppBskyGraphDefs = __importStar(require_defs9());
    exports.AppBskyGraphFollow = __importStar(require_follow());
    exports.AppBskyGraphGetActorStarterPacks = __importStar(require_getActorStarterPacks());
    exports.AppBskyGraphGetBlocks = __importStar(require_getBlocks2());
    exports.AppBskyGraphGetFollowers = __importStar(require_getFollowers());
    exports.AppBskyGraphGetFollows = __importStar(require_getFollows());
    exports.AppBskyGraphGetKnownFollowers = __importStar(require_getKnownFollowers());
    exports.AppBskyGraphGetList = __importStar(require_getList());
    exports.AppBskyGraphGetListBlocks = __importStar(require_getListBlocks());
    exports.AppBskyGraphGetListMutes = __importStar(require_getListMutes());
    exports.AppBskyGraphGetLists = __importStar(require_getLists());
    exports.AppBskyGraphGetMutes = __importStar(require_getMutes());
    exports.AppBskyGraphGetRelationships = __importStar(require_getRelationships());
    exports.AppBskyGraphGetStarterPack = __importStar(require_getStarterPack());
    exports.AppBskyGraphGetStarterPacks = __importStar(require_getStarterPacks());
    exports.AppBskyGraphGetSuggestedFollowsByActor = __importStar(require_getSuggestedFollowsByActor());
    exports.AppBskyGraphList = __importStar(require_list());
    exports.AppBskyGraphListblock = __importStar(require_listblock());
    exports.AppBskyGraphListitem = __importStar(require_listitem());
    exports.AppBskyGraphMuteActor = __importStar(require_muteActor());
    exports.AppBskyGraphMuteActorList = __importStar(require_muteActorList());
    exports.AppBskyGraphMuteThread = __importStar(require_muteThread());
    exports.AppBskyGraphSearchStarterPacks = __importStar(require_searchStarterPacks());
    exports.AppBskyGraphStarterpack = __importStar(require_starterpack());
    exports.AppBskyGraphUnmuteActor = __importStar(require_unmuteActor());
    exports.AppBskyGraphUnmuteActorList = __importStar(require_unmuteActorList());
    exports.AppBskyGraphUnmuteThread = __importStar(require_unmuteThread());
    exports.AppBskyLabelerDefs = __importStar(require_defs10());
    exports.AppBskyLabelerGetServices = __importStar(require_getServices());
    exports.AppBskyLabelerService = __importStar(require_service());
    exports.AppBskyNotificationGetUnreadCount = __importStar(require_getUnreadCount());
    exports.AppBskyNotificationListNotifications = __importStar(require_listNotifications());
    exports.AppBskyNotificationPutPreferences = __importStar(require_putPreferences2());
    exports.AppBskyNotificationRegisterPush = __importStar(require_registerPush());
    exports.AppBskyNotificationUpdateSeen = __importStar(require_updateSeen());
    exports.AppBskyRichtextFacet = __importStar(require_facet());
    exports.AppBskyUnspeccedDefs = __importStar(require_defs11());
    exports.AppBskyUnspeccedGetConfig = __importStar(require_getConfig());
    exports.AppBskyUnspeccedGetPopularFeedGenerators = __importStar(require_getPopularFeedGenerators());
    exports.AppBskyUnspeccedGetSuggestionsSkeleton = __importStar(require_getSuggestionsSkeleton());
    exports.AppBskyUnspeccedGetTaggedSuggestions = __importStar(require_getTaggedSuggestions());
    exports.AppBskyUnspeccedGetTrendingTopics = __importStar(require_getTrendingTopics());
    exports.AppBskyUnspeccedSearchActorsSkeleton = __importStar(require_searchActorsSkeleton());
    exports.AppBskyUnspeccedSearchPostsSkeleton = __importStar(require_searchPostsSkeleton());
    exports.AppBskyUnspeccedSearchStarterPacksSkeleton = __importStar(require_searchStarterPacksSkeleton());
    exports.AppBskyVideoDefs = __importStar(require_defs12());
    exports.AppBskyVideoGetJobStatus = __importStar(require_getJobStatus());
    exports.AppBskyVideoGetUploadLimits = __importStar(require_getUploadLimits());
    exports.AppBskyVideoUploadVideo = __importStar(require_uploadVideo());
    exports.ChatBskyActorDeclaration = __importStar(require_declaration());
    exports.ChatBskyActorDefs = __importStar(require_defs13());
    exports.ChatBskyActorDeleteAccount = __importStar(require_deleteAccount3());
    exports.ChatBskyActorExportAccountData = __importStar(require_exportAccountData());
    exports.ChatBskyConvoDefs = __importStar(require_defs14());
    exports.ChatBskyConvoDeleteMessageForSelf = __importStar(require_deleteMessageForSelf());
    exports.ChatBskyConvoGetConvo = __importStar(require_getConvo());
    exports.ChatBskyConvoGetConvoForMembers = __importStar(require_getConvoForMembers());
    exports.ChatBskyConvoGetLog = __importStar(require_getLog());
    exports.ChatBskyConvoGetMessages = __importStar(require_getMessages());
    exports.ChatBskyConvoLeaveConvo = __importStar(require_leaveConvo());
    exports.ChatBskyConvoListConvos = __importStar(require_listConvos());
    exports.ChatBskyConvoMuteConvo = __importStar(require_muteConvo());
    exports.ChatBskyConvoSendMessage = __importStar(require_sendMessage());
    exports.ChatBskyConvoSendMessageBatch = __importStar(require_sendMessageBatch());
    exports.ChatBskyConvoUnmuteConvo = __importStar(require_unmuteConvo());
    exports.ChatBskyConvoUpdateRead = __importStar(require_updateRead());
    exports.ChatBskyModerationGetActorMetadata = __importStar(require_getActorMetadata());
    exports.ChatBskyModerationGetMessageContext = __importStar(require_getMessageContext());
    exports.ChatBskyModerationUpdateActorAccess = __importStar(require_updateActorAccess());
    exports.ToolsOzoneCommunicationCreateTemplate = __importStar(require_createTemplate());
    exports.ToolsOzoneCommunicationDefs = __importStar(require_defs15());
    exports.ToolsOzoneCommunicationDeleteTemplate = __importStar(require_deleteTemplate());
    exports.ToolsOzoneCommunicationListTemplates = __importStar(require_listTemplates());
    exports.ToolsOzoneCommunicationUpdateTemplate = __importStar(require_updateTemplate());
    exports.ToolsOzoneModerationDefs = __importStar(require_defs16());
    exports.ToolsOzoneModerationEmitEvent = __importStar(require_emitEvent());
    exports.ToolsOzoneModerationGetEvent = __importStar(require_getEvent());
    exports.ToolsOzoneModerationGetRecord = __importStar(require_getRecord3());
    exports.ToolsOzoneModerationGetRecords = __importStar(require_getRecords());
    exports.ToolsOzoneModerationGetRepo = __importStar(require_getRepo2());
    exports.ToolsOzoneModerationGetRepos = __importStar(require_getRepos());
    exports.ToolsOzoneModerationQueryEvents = __importStar(require_queryEvents());
    exports.ToolsOzoneModerationQueryStatuses = __importStar(require_queryStatuses());
    exports.ToolsOzoneModerationSearchRepos = __importStar(require_searchRepos());
    exports.ToolsOzoneServerGetConfig = __importStar(require_getConfig2());
    exports.ToolsOzoneSetAddValues = __importStar(require_addValues());
    exports.ToolsOzoneSetDefs = __importStar(require_defs17());
    exports.ToolsOzoneSetDeleteSet = __importStar(require_deleteSet());
    exports.ToolsOzoneSetDeleteValues = __importStar(require_deleteValues());
    exports.ToolsOzoneSetGetValues = __importStar(require_getValues());
    exports.ToolsOzoneSetQuerySets = __importStar(require_querySets());
    exports.ToolsOzoneSetUpsertSet = __importStar(require_upsertSet());
    exports.ToolsOzoneSettingDefs = __importStar(require_defs18());
    exports.ToolsOzoneSettingListOptions = __importStar(require_listOptions());
    exports.ToolsOzoneSettingRemoveOptions = __importStar(require_removeOptions());
    exports.ToolsOzoneSettingUpsertOption = __importStar(require_upsertOption());
    exports.ToolsOzoneSignatureDefs = __importStar(require_defs19());
    exports.ToolsOzoneSignatureFindCorrelation = __importStar(require_findCorrelation());
    exports.ToolsOzoneSignatureFindRelatedAccounts = __importStar(require_findRelatedAccounts());
    exports.ToolsOzoneSignatureSearchAccounts = __importStar(require_searchAccounts2());
    exports.ToolsOzoneTeamAddMember = __importStar(require_addMember());
    exports.ToolsOzoneTeamDefs = __importStar(require_defs20());
    exports.ToolsOzoneTeamDeleteMember = __importStar(require_deleteMember());
    exports.ToolsOzoneTeamListMembers = __importStar(require_listMembers());
    exports.ToolsOzoneTeamUpdateMember = __importStar(require_updateMember());
    exports.COM_ATPROTO_MODERATION = {
      DefsReasonSpam: "com.atproto.moderation.defs#reasonSpam",
      DefsReasonViolation: "com.atproto.moderation.defs#reasonViolation",
      DefsReasonMisleading: "com.atproto.moderation.defs#reasonMisleading",
      DefsReasonSexual: "com.atproto.moderation.defs#reasonSexual",
      DefsReasonRude: "com.atproto.moderation.defs#reasonRude",
      DefsReasonOther: "com.atproto.moderation.defs#reasonOther",
      DefsReasonAppeal: "com.atproto.moderation.defs#reasonAppeal"
    };
    exports.APP_BSKY_FEED = {
      DefsRequestLess: "app.bsky.feed.defs#requestLess",
      DefsRequestMore: "app.bsky.feed.defs#requestMore",
      DefsClickthroughItem: "app.bsky.feed.defs#clickthroughItem",
      DefsClickthroughAuthor: "app.bsky.feed.defs#clickthroughAuthor",
      DefsClickthroughReposter: "app.bsky.feed.defs#clickthroughReposter",
      DefsClickthroughEmbed: "app.bsky.feed.defs#clickthroughEmbed",
      DefsInteractionSeen: "app.bsky.feed.defs#interactionSeen",
      DefsInteractionLike: "app.bsky.feed.defs#interactionLike",
      DefsInteractionRepost: "app.bsky.feed.defs#interactionRepost",
      DefsInteractionReply: "app.bsky.feed.defs#interactionReply",
      DefsInteractionQuote: "app.bsky.feed.defs#interactionQuote",
      DefsInteractionShare: "app.bsky.feed.defs#interactionShare"
    };
    exports.APP_BSKY_GRAPH = {
      DefsModlist: "app.bsky.graph.defs#modlist",
      DefsCuratelist: "app.bsky.graph.defs#curatelist",
      DefsReferencelist: "app.bsky.graph.defs#referencelist"
    };
    exports.TOOLS_OZONE_MODERATION = {
      DefsReviewOpen: "tools.ozone.moderation.defs#reviewOpen",
      DefsReviewEscalated: "tools.ozone.moderation.defs#reviewEscalated",
      DefsReviewClosed: "tools.ozone.moderation.defs#reviewClosed",
      DefsReviewNone: "tools.ozone.moderation.defs#reviewNone"
    };
    exports.TOOLS_OZONE_TEAM = {
      DefsRoleAdmin: "tools.ozone.team.defs#roleAdmin",
      DefsRoleModerator: "tools.ozone.team.defs#roleModerator",
      DefsRoleTriage: "tools.ozone.team.defs#roleTriage"
    };
    var AtpBaseClient = class extends xrpc_1.XrpcClient {
      constructor(options) {
        super(options, lexicons_1.schemas);
        Object.defineProperty(this, "com", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "app", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "chat", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "tools", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.com = new ComNS(this);
        this.app = new AppNS(this);
        this.chat = new ChatNS(this);
        this.tools = new ToolsNS(this);
      }
      /** @deprecated use `this` instead */
      get xrpc() {
        return this;
      }
    };
    exports.AtpBaseClient = AtpBaseClient;
    var ComNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "atproto", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.atproto = new ComAtprotoNS(client);
      }
    };
    exports.ComNS = ComNS;
    var ComAtprotoNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "admin", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "identity", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "label", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "moderation", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "repo", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "server", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "sync", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "temp", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.admin = new ComAtprotoAdminNS(client);
        this.identity = new ComAtprotoIdentityNS(client);
        this.label = new ComAtprotoLabelNS(client);
        this.moderation = new ComAtprotoModerationNS(client);
        this.repo = new ComAtprotoRepoNS(client);
        this.server = new ComAtprotoServerNS(client);
        this.sync = new ComAtprotoSyncNS(client);
        this.temp = new ComAtprotoTempNS(client);
      }
    };
    exports.ComAtprotoNS = ComAtprotoNS;
    var ComAtprotoAdminNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      deleteAccount(data, opts) {
        return this._client.call("com.atproto.admin.deleteAccount", opts?.qp, data, opts);
      }
      disableAccountInvites(data, opts) {
        return this._client.call("com.atproto.admin.disableAccountInvites", opts?.qp, data, opts);
      }
      disableInviteCodes(data, opts) {
        return this._client.call("com.atproto.admin.disableInviteCodes", opts?.qp, data, opts);
      }
      enableAccountInvites(data, opts) {
        return this._client.call("com.atproto.admin.enableAccountInvites", opts?.qp, data, opts);
      }
      getAccountInfo(params, opts) {
        return this._client.call("com.atproto.admin.getAccountInfo", params, void 0, opts);
      }
      getAccountInfos(params, opts) {
        return this._client.call("com.atproto.admin.getAccountInfos", params, void 0, opts);
      }
      getInviteCodes(params, opts) {
        return this._client.call("com.atproto.admin.getInviteCodes", params, void 0, opts);
      }
      getSubjectStatus(params, opts) {
        return this._client.call("com.atproto.admin.getSubjectStatus", params, void 0, opts);
      }
      searchAccounts(params, opts) {
        return this._client.call("com.atproto.admin.searchAccounts", params, void 0, opts);
      }
      sendEmail(data, opts) {
        return this._client.call("com.atproto.admin.sendEmail", opts?.qp, data, opts);
      }
      updateAccountEmail(data, opts) {
        return this._client.call("com.atproto.admin.updateAccountEmail", opts?.qp, data, opts);
      }
      updateAccountHandle(data, opts) {
        return this._client.call("com.atproto.admin.updateAccountHandle", opts?.qp, data, opts);
      }
      updateAccountPassword(data, opts) {
        return this._client.call("com.atproto.admin.updateAccountPassword", opts?.qp, data, opts);
      }
      updateSubjectStatus(data, opts) {
        return this._client.call("com.atproto.admin.updateSubjectStatus", opts?.qp, data, opts);
      }
    };
    exports.ComAtprotoAdminNS = ComAtprotoAdminNS;
    var ComAtprotoIdentityNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      getRecommendedDidCredentials(params, opts) {
        return this._client.call("com.atproto.identity.getRecommendedDidCredentials", params, void 0, opts);
      }
      requestPlcOperationSignature(data, opts) {
        return this._client.call("com.atproto.identity.requestPlcOperationSignature", opts?.qp, data, opts);
      }
      resolveHandle(params, opts) {
        return this._client.call("com.atproto.identity.resolveHandle", params, void 0, opts);
      }
      signPlcOperation(data, opts) {
        return this._client.call("com.atproto.identity.signPlcOperation", opts?.qp, data, opts);
      }
      submitPlcOperation(data, opts) {
        return this._client.call("com.atproto.identity.submitPlcOperation", opts?.qp, data, opts);
      }
      updateHandle(data, opts) {
        return this._client.call("com.atproto.identity.updateHandle", opts?.qp, data, opts);
      }
    };
    exports.ComAtprotoIdentityNS = ComAtprotoIdentityNS;
    var ComAtprotoLabelNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      queryLabels(params, opts) {
        return this._client.call("com.atproto.label.queryLabels", params, void 0, opts);
      }
    };
    exports.ComAtprotoLabelNS = ComAtprotoLabelNS;
    var ComAtprotoModerationNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      createReport(data, opts) {
        return this._client.call("com.atproto.moderation.createReport", opts?.qp, data, opts);
      }
    };
    exports.ComAtprotoModerationNS = ComAtprotoModerationNS;
    var ComAtprotoRepoNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      applyWrites(data, opts) {
        return this._client.call("com.atproto.repo.applyWrites", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoRepoApplyWrites.toKnownErr(e12);
        });
      }
      createRecord(data, opts) {
        return this._client.call("com.atproto.repo.createRecord", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoRepoCreateRecord.toKnownErr(e12);
        });
      }
      deleteRecord(data, opts) {
        return this._client.call("com.atproto.repo.deleteRecord", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoRepoDeleteRecord.toKnownErr(e12);
        });
      }
      describeRepo(params, opts) {
        return this._client.call("com.atproto.repo.describeRepo", params, void 0, opts);
      }
      getRecord(params, opts) {
        return this._client.call("com.atproto.repo.getRecord", params, void 0, opts).catch((e12) => {
          throw ComAtprotoRepoGetRecord.toKnownErr(e12);
        });
      }
      importRepo(data, opts) {
        return this._client.call("com.atproto.repo.importRepo", opts?.qp, data, opts);
      }
      listMissingBlobs(params, opts) {
        return this._client.call("com.atproto.repo.listMissingBlobs", params, void 0, opts);
      }
      listRecords(params, opts) {
        return this._client.call("com.atproto.repo.listRecords", params, void 0, opts);
      }
      putRecord(data, opts) {
        return this._client.call("com.atproto.repo.putRecord", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoRepoPutRecord.toKnownErr(e12);
        });
      }
      uploadBlob(data, opts) {
        return this._client.call("com.atproto.repo.uploadBlob", opts?.qp, data, opts);
      }
    };
    exports.ComAtprotoRepoNS = ComAtprotoRepoNS;
    var ComAtprotoServerNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      activateAccount(data, opts) {
        return this._client.call("com.atproto.server.activateAccount", opts?.qp, data, opts);
      }
      checkAccountStatus(params, opts) {
        return this._client.call("com.atproto.server.checkAccountStatus", params, void 0, opts);
      }
      confirmEmail(data, opts) {
        return this._client.call("com.atproto.server.confirmEmail", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoServerConfirmEmail.toKnownErr(e12);
        });
      }
      createAccount(data, opts) {
        return this._client.call("com.atproto.server.createAccount", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoServerCreateAccount.toKnownErr(e12);
        });
      }
      createAppPassword(data, opts) {
        return this._client.call("com.atproto.server.createAppPassword", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoServerCreateAppPassword.toKnownErr(e12);
        });
      }
      createInviteCode(data, opts) {
        return this._client.call("com.atproto.server.createInviteCode", opts?.qp, data, opts);
      }
      createInviteCodes(data, opts) {
        return this._client.call("com.atproto.server.createInviteCodes", opts?.qp, data, opts);
      }
      createSession(data, opts) {
        return this._client.call("com.atproto.server.createSession", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoServerCreateSession.toKnownErr(e12);
        });
      }
      deactivateAccount(data, opts) {
        return this._client.call("com.atproto.server.deactivateAccount", opts?.qp, data, opts);
      }
      deleteAccount(data, opts) {
        return this._client.call("com.atproto.server.deleteAccount", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoServerDeleteAccount.toKnownErr(e12);
        });
      }
      deleteSession(data, opts) {
        return this._client.call("com.atproto.server.deleteSession", opts?.qp, data, opts);
      }
      describeServer(params, opts) {
        return this._client.call("com.atproto.server.describeServer", params, void 0, opts);
      }
      getAccountInviteCodes(params, opts) {
        return this._client.call("com.atproto.server.getAccountInviteCodes", params, void 0, opts).catch((e12) => {
          throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e12);
        });
      }
      getServiceAuth(params, opts) {
        return this._client.call("com.atproto.server.getServiceAuth", params, void 0, opts).catch((e12) => {
          throw ComAtprotoServerGetServiceAuth.toKnownErr(e12);
        });
      }
      getSession(params, opts) {
        return this._client.call("com.atproto.server.getSession", params, void 0, opts);
      }
      listAppPasswords(params, opts) {
        return this._client.call("com.atproto.server.listAppPasswords", params, void 0, opts).catch((e12) => {
          throw ComAtprotoServerListAppPasswords.toKnownErr(e12);
        });
      }
      refreshSession(data, opts) {
        return this._client.call("com.atproto.server.refreshSession", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoServerRefreshSession.toKnownErr(e12);
        });
      }
      requestAccountDelete(data, opts) {
        return this._client.call("com.atproto.server.requestAccountDelete", opts?.qp, data, opts);
      }
      requestEmailConfirmation(data, opts) {
        return this._client.call("com.atproto.server.requestEmailConfirmation", opts?.qp, data, opts);
      }
      requestEmailUpdate(data, opts) {
        return this._client.call("com.atproto.server.requestEmailUpdate", opts?.qp, data, opts);
      }
      requestPasswordReset(data, opts) {
        return this._client.call("com.atproto.server.requestPasswordReset", opts?.qp, data, opts);
      }
      reserveSigningKey(data, opts) {
        return this._client.call("com.atproto.server.reserveSigningKey", opts?.qp, data, opts);
      }
      resetPassword(data, opts) {
        return this._client.call("com.atproto.server.resetPassword", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoServerResetPassword.toKnownErr(e12);
        });
      }
      revokeAppPassword(data, opts) {
        return this._client.call("com.atproto.server.revokeAppPassword", opts?.qp, data, opts);
      }
      updateEmail(data, opts) {
        return this._client.call("com.atproto.server.updateEmail", opts?.qp, data, opts).catch((e12) => {
          throw ComAtprotoServerUpdateEmail.toKnownErr(e12);
        });
      }
    };
    exports.ComAtprotoServerNS = ComAtprotoServerNS;
    var ComAtprotoSyncNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      getBlob(params, opts) {
        return this._client.call("com.atproto.sync.getBlob", params, void 0, opts).catch((e12) => {
          throw ComAtprotoSyncGetBlob.toKnownErr(e12);
        });
      }
      getBlocks(params, opts) {
        return this._client.call("com.atproto.sync.getBlocks", params, void 0, opts).catch((e12) => {
          throw ComAtprotoSyncGetBlocks.toKnownErr(e12);
        });
      }
      getCheckout(params, opts) {
        return this._client.call("com.atproto.sync.getCheckout", params, void 0, opts);
      }
      getHead(params, opts) {
        return this._client.call("com.atproto.sync.getHead", params, void 0, opts).catch((e12) => {
          throw ComAtprotoSyncGetHead.toKnownErr(e12);
        });
      }
      getLatestCommit(params, opts) {
        return this._client.call("com.atproto.sync.getLatestCommit", params, void 0, opts).catch((e12) => {
          throw ComAtprotoSyncGetLatestCommit.toKnownErr(e12);
        });
      }
      getRecord(params, opts) {
        return this._client.call("com.atproto.sync.getRecord", params, void 0, opts).catch((e12) => {
          throw ComAtprotoSyncGetRecord.toKnownErr(e12);
        });
      }
      getRepo(params, opts) {
        return this._client.call("com.atproto.sync.getRepo", params, void 0, opts).catch((e12) => {
          throw ComAtprotoSyncGetRepo.toKnownErr(e12);
        });
      }
      getRepoStatus(params, opts) {
        return this._client.call("com.atproto.sync.getRepoStatus", params, void 0, opts).catch((e12) => {
          throw ComAtprotoSyncGetRepoStatus.toKnownErr(e12);
        });
      }
      listBlobs(params, opts) {
        return this._client.call("com.atproto.sync.listBlobs", params, void 0, opts).catch((e12) => {
          throw ComAtprotoSyncListBlobs.toKnownErr(e12);
        });
      }
      listRepos(params, opts) {
        return this._client.call("com.atproto.sync.listRepos", params, void 0, opts);
      }
      notifyOfUpdate(data, opts) {
        return this._client.call("com.atproto.sync.notifyOfUpdate", opts?.qp, data, opts);
      }
      requestCrawl(data, opts) {
        return this._client.call("com.atproto.sync.requestCrawl", opts?.qp, data, opts);
      }
    };
    exports.ComAtprotoSyncNS = ComAtprotoSyncNS;
    var ComAtprotoTempNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      addReservedHandle(data, opts) {
        return this._client.call("com.atproto.temp.addReservedHandle", opts?.qp, data, opts);
      }
      checkSignupQueue(params, opts) {
        return this._client.call("com.atproto.temp.checkSignupQueue", params, void 0, opts);
      }
      fetchLabels(params, opts) {
        return this._client.call("com.atproto.temp.fetchLabels", params, void 0, opts);
      }
      requestPhoneVerification(data, opts) {
        return this._client.call("com.atproto.temp.requestPhoneVerification", opts?.qp, data, opts);
      }
    };
    exports.ComAtprotoTempNS = ComAtprotoTempNS;
    var AppNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "bsky", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.bsky = new AppBskyNS(client);
      }
    };
    exports.AppNS = AppNS;
    var AppBskyNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "actor", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "embed", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "feed", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "graph", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "labeler", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "notification", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "richtext", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "unspecced", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "video", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.actor = new AppBskyActorNS(client);
        this.embed = new AppBskyEmbedNS(client);
        this.feed = new AppBskyFeedNS(client);
        this.graph = new AppBskyGraphNS(client);
        this.labeler = new AppBskyLabelerNS(client);
        this.notification = new AppBskyNotificationNS(client);
        this.richtext = new AppBskyRichtextNS(client);
        this.unspecced = new AppBskyUnspeccedNS(client);
        this.video = new AppBskyVideoNS(client);
      }
    };
    exports.AppBskyNS = AppBskyNS;
    var AppBskyActorNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "profile", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.profile = new ProfileRecord(client);
      }
      getPreferences(params, opts) {
        return this._client.call("app.bsky.actor.getPreferences", params, void 0, opts);
      }
      getProfile(params, opts) {
        return this._client.call("app.bsky.actor.getProfile", params, void 0, opts);
      }
      getProfiles(params, opts) {
        return this._client.call("app.bsky.actor.getProfiles", params, void 0, opts);
      }
      getSuggestions(params, opts) {
        return this._client.call("app.bsky.actor.getSuggestions", params, void 0, opts);
      }
      putPreferences(data, opts) {
        return this._client.call("app.bsky.actor.putPreferences", opts?.qp, data, opts);
      }
      searchActors(params, opts) {
        return this._client.call("app.bsky.actor.searchActors", params, void 0, opts);
      }
      searchActorsTypeahead(params, opts) {
        return this._client.call("app.bsky.actor.searchActorsTypeahead", params, void 0, opts);
      }
    };
    exports.AppBskyActorNS = AppBskyActorNS;
    var ProfileRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.actor.profile",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.actor.profile",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.actor.profile";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.actor.profile", rkey: "self", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.actor.profile", ...params }, { headers });
      }
    };
    exports.ProfileRecord = ProfileRecord;
    var AppBskyEmbedNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
    };
    exports.AppBskyEmbedNS = AppBskyEmbedNS;
    var AppBskyFeedNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "generator", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "like", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "post", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "postgate", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "repost", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "threadgate", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.generator = new GeneratorRecord(client);
        this.like = new LikeRecord(client);
        this.post = new PostRecord(client);
        this.postgate = new PostgateRecord(client);
        this.repost = new RepostRecord(client);
        this.threadgate = new ThreadgateRecord(client);
      }
      describeFeedGenerator(params, opts) {
        return this._client.call("app.bsky.feed.describeFeedGenerator", params, void 0, opts);
      }
      getActorFeeds(params, opts) {
        return this._client.call("app.bsky.feed.getActorFeeds", params, void 0, opts);
      }
      getActorLikes(params, opts) {
        return this._client.call("app.bsky.feed.getActorLikes", params, void 0, opts).catch((e12) => {
          throw AppBskyFeedGetActorLikes.toKnownErr(e12);
        });
      }
      getAuthorFeed(params, opts) {
        return this._client.call("app.bsky.feed.getAuthorFeed", params, void 0, opts).catch((e12) => {
          throw AppBskyFeedGetAuthorFeed.toKnownErr(e12);
        });
      }
      getFeed(params, opts) {
        return this._client.call("app.bsky.feed.getFeed", params, void 0, opts).catch((e12) => {
          throw AppBskyFeedGetFeed.toKnownErr(e12);
        });
      }
      getFeedGenerator(params, opts) {
        return this._client.call("app.bsky.feed.getFeedGenerator", params, void 0, opts);
      }
      getFeedGenerators(params, opts) {
        return this._client.call("app.bsky.feed.getFeedGenerators", params, void 0, opts);
      }
      getFeedSkeleton(params, opts) {
        return this._client.call("app.bsky.feed.getFeedSkeleton", params, void 0, opts).catch((e12) => {
          throw AppBskyFeedGetFeedSkeleton.toKnownErr(e12);
        });
      }
      getLikes(params, opts) {
        return this._client.call("app.bsky.feed.getLikes", params, void 0, opts);
      }
      getListFeed(params, opts) {
        return this._client.call("app.bsky.feed.getListFeed", params, void 0, opts).catch((e12) => {
          throw AppBskyFeedGetListFeed.toKnownErr(e12);
        });
      }
      getPostThread(params, opts) {
        return this._client.call("app.bsky.feed.getPostThread", params, void 0, opts).catch((e12) => {
          throw AppBskyFeedGetPostThread.toKnownErr(e12);
        });
      }
      getPosts(params, opts) {
        return this._client.call("app.bsky.feed.getPosts", params, void 0, opts);
      }
      getQuotes(params, opts) {
        return this._client.call("app.bsky.feed.getQuotes", params, void 0, opts);
      }
      getRepostedBy(params, opts) {
        return this._client.call("app.bsky.feed.getRepostedBy", params, void 0, opts);
      }
      getSuggestedFeeds(params, opts) {
        return this._client.call("app.bsky.feed.getSuggestedFeeds", params, void 0, opts);
      }
      getTimeline(params, opts) {
        return this._client.call("app.bsky.feed.getTimeline", params, void 0, opts);
      }
      searchPosts(params, opts) {
        return this._client.call("app.bsky.feed.searchPosts", params, void 0, opts).catch((e12) => {
          throw AppBskyFeedSearchPosts.toKnownErr(e12);
        });
      }
      sendInteractions(data, opts) {
        return this._client.call("app.bsky.feed.sendInteractions", opts?.qp, data, opts);
      }
    };
    exports.AppBskyFeedNS = AppBskyFeedNS;
    var GeneratorRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.feed.generator",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.feed.generator",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.feed.generator";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.generator", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.generator", ...params }, { headers });
      }
    };
    exports.GeneratorRecord = GeneratorRecord;
    var LikeRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.feed.like",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.feed.like",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.feed.like";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.like", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.like", ...params }, { headers });
      }
    };
    exports.LikeRecord = LikeRecord;
    var PostRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.feed.post",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.feed.post",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.feed.post";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.post", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.post", ...params }, { headers });
      }
    };
    exports.PostRecord = PostRecord;
    var PostgateRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.feed.postgate",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.feed.postgate",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.feed.postgate";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.postgate", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.postgate", ...params }, { headers });
      }
    };
    exports.PostgateRecord = PostgateRecord;
    var RepostRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.feed.repost",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.feed.repost",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.feed.repost";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.repost", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.repost", ...params }, { headers });
      }
    };
    exports.RepostRecord = RepostRecord;
    var ThreadgateRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.feed.threadgate",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.feed.threadgate",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.feed.threadgate";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.feed.threadgate", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.feed.threadgate", ...params }, { headers });
      }
    };
    exports.ThreadgateRecord = ThreadgateRecord;
    var AppBskyGraphNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "block", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "follow", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "list", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "listblock", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "listitem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "starterpack", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.block = new BlockRecord(client);
        this.follow = new FollowRecord(client);
        this.list = new ListRecord(client);
        this.listblock = new ListblockRecord(client);
        this.listitem = new ListitemRecord(client);
        this.starterpack = new StarterpackRecord(client);
      }
      getActorStarterPacks(params, opts) {
        return this._client.call("app.bsky.graph.getActorStarterPacks", params, void 0, opts);
      }
      getBlocks(params, opts) {
        return this._client.call("app.bsky.graph.getBlocks", params, void 0, opts);
      }
      getFollowers(params, opts) {
        return this._client.call("app.bsky.graph.getFollowers", params, void 0, opts);
      }
      getFollows(params, opts) {
        return this._client.call("app.bsky.graph.getFollows", params, void 0, opts);
      }
      getKnownFollowers(params, opts) {
        return this._client.call("app.bsky.graph.getKnownFollowers", params, void 0, opts);
      }
      getList(params, opts) {
        return this._client.call("app.bsky.graph.getList", params, void 0, opts);
      }
      getListBlocks(params, opts) {
        return this._client.call("app.bsky.graph.getListBlocks", params, void 0, opts);
      }
      getListMutes(params, opts) {
        return this._client.call("app.bsky.graph.getListMutes", params, void 0, opts);
      }
      getLists(params, opts) {
        return this._client.call("app.bsky.graph.getLists", params, void 0, opts);
      }
      getMutes(params, opts) {
        return this._client.call("app.bsky.graph.getMutes", params, void 0, opts);
      }
      getRelationships(params, opts) {
        return this._client.call("app.bsky.graph.getRelationships", params, void 0, opts).catch((e12) => {
          throw AppBskyGraphGetRelationships.toKnownErr(e12);
        });
      }
      getStarterPack(params, opts) {
        return this._client.call("app.bsky.graph.getStarterPack", params, void 0, opts);
      }
      getStarterPacks(params, opts) {
        return this._client.call("app.bsky.graph.getStarterPacks", params, void 0, opts);
      }
      getSuggestedFollowsByActor(params, opts) {
        return this._client.call("app.bsky.graph.getSuggestedFollowsByActor", params, void 0, opts);
      }
      muteActor(data, opts) {
        return this._client.call("app.bsky.graph.muteActor", opts?.qp, data, opts);
      }
      muteActorList(data, opts) {
        return this._client.call("app.bsky.graph.muteActorList", opts?.qp, data, opts);
      }
      muteThread(data, opts) {
        return this._client.call("app.bsky.graph.muteThread", opts?.qp, data, opts);
      }
      searchStarterPacks(params, opts) {
        return this._client.call("app.bsky.graph.searchStarterPacks", params, void 0, opts);
      }
      unmuteActor(data, opts) {
        return this._client.call("app.bsky.graph.unmuteActor", opts?.qp, data, opts);
      }
      unmuteActorList(data, opts) {
        return this._client.call("app.bsky.graph.unmuteActorList", opts?.qp, data, opts);
      }
      unmuteThread(data, opts) {
        return this._client.call("app.bsky.graph.unmuteThread", opts?.qp, data, opts);
      }
    };
    exports.AppBskyGraphNS = AppBskyGraphNS;
    var BlockRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.graph.block",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.graph.block",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.graph.block";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.block", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.block", ...params }, { headers });
      }
    };
    exports.BlockRecord = BlockRecord;
    var FollowRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.graph.follow",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.graph.follow",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.graph.follow";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.follow", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.follow", ...params }, { headers });
      }
    };
    exports.FollowRecord = FollowRecord;
    var ListRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.graph.list",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.graph.list",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.graph.list";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.list", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.list", ...params }, { headers });
      }
    };
    exports.ListRecord = ListRecord;
    var ListblockRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.graph.listblock",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.graph.listblock",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.graph.listblock";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.listblock", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.listblock", ...params }, { headers });
      }
    };
    exports.ListblockRecord = ListblockRecord;
    var ListitemRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.graph.listitem",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.graph.listitem",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.graph.listitem";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.listitem", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.listitem", ...params }, { headers });
      }
    };
    exports.ListitemRecord = ListitemRecord;
    var StarterpackRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.graph.starterpack",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.graph.starterpack",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.graph.starterpack";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, { collection: "app.bsky.graph.starterpack", ...params, record }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.graph.starterpack", ...params }, { headers });
      }
    };
    exports.StarterpackRecord = StarterpackRecord;
    var AppBskyLabelerNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "service", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.service = new ServiceRecord(client);
      }
      getServices(params, opts) {
        return this._client.call("app.bsky.labeler.getServices", params, void 0, opts);
      }
    };
    exports.AppBskyLabelerNS = AppBskyLabelerNS;
    var ServiceRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "app.bsky.labeler.service",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "app.bsky.labeler.service",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "app.bsky.labeler.service";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, {
          collection: "app.bsky.labeler.service",
          rkey: "self",
          ...params,
          record
        }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "app.bsky.labeler.service", ...params }, { headers });
      }
    };
    exports.ServiceRecord = ServiceRecord;
    var AppBskyNotificationNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      getUnreadCount(params, opts) {
        return this._client.call("app.bsky.notification.getUnreadCount", params, void 0, opts);
      }
      listNotifications(params, opts) {
        return this._client.call("app.bsky.notification.listNotifications", params, void 0, opts);
      }
      putPreferences(data, opts) {
        return this._client.call("app.bsky.notification.putPreferences", opts?.qp, data, opts);
      }
      registerPush(data, opts) {
        return this._client.call("app.bsky.notification.registerPush", opts?.qp, data, opts);
      }
      updateSeen(data, opts) {
        return this._client.call("app.bsky.notification.updateSeen", opts?.qp, data, opts);
      }
    };
    exports.AppBskyNotificationNS = AppBskyNotificationNS;
    var AppBskyRichtextNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
    };
    exports.AppBskyRichtextNS = AppBskyRichtextNS;
    var AppBskyUnspeccedNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      getConfig(params, opts) {
        return this._client.call("app.bsky.unspecced.getConfig", params, void 0, opts);
      }
      getPopularFeedGenerators(params, opts) {
        return this._client.call("app.bsky.unspecced.getPopularFeedGenerators", params, void 0, opts);
      }
      getSuggestionsSkeleton(params, opts) {
        return this._client.call("app.bsky.unspecced.getSuggestionsSkeleton", params, void 0, opts);
      }
      getTaggedSuggestions(params, opts) {
        return this._client.call("app.bsky.unspecced.getTaggedSuggestions", params, void 0, opts);
      }
      getTrendingTopics(params, opts) {
        return this._client.call("app.bsky.unspecced.getTrendingTopics", params, void 0, opts);
      }
      searchActorsSkeleton(params, opts) {
        return this._client.call("app.bsky.unspecced.searchActorsSkeleton", params, void 0, opts).catch((e12) => {
          throw AppBskyUnspeccedSearchActorsSkeleton.toKnownErr(e12);
        });
      }
      searchPostsSkeleton(params, opts) {
        return this._client.call("app.bsky.unspecced.searchPostsSkeleton", params, void 0, opts).catch((e12) => {
          throw AppBskyUnspeccedSearchPostsSkeleton.toKnownErr(e12);
        });
      }
      searchStarterPacksSkeleton(params, opts) {
        return this._client.call("app.bsky.unspecced.searchStarterPacksSkeleton", params, void 0, opts).catch((e12) => {
          throw AppBskyUnspeccedSearchStarterPacksSkeleton.toKnownErr(e12);
        });
      }
    };
    exports.AppBskyUnspeccedNS = AppBskyUnspeccedNS;
    var AppBskyVideoNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      getJobStatus(params, opts) {
        return this._client.call("app.bsky.video.getJobStatus", params, void 0, opts);
      }
      getUploadLimits(params, opts) {
        return this._client.call("app.bsky.video.getUploadLimits", params, void 0, opts);
      }
      uploadVideo(data, opts) {
        return this._client.call("app.bsky.video.uploadVideo", opts?.qp, data, opts);
      }
    };
    exports.AppBskyVideoNS = AppBskyVideoNS;
    var ChatNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "bsky", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.bsky = new ChatBskyNS(client);
      }
    };
    exports.ChatNS = ChatNS;
    var ChatBskyNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "actor", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "convo", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "moderation", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.actor = new ChatBskyActorNS(client);
        this.convo = new ChatBskyConvoNS(client);
        this.moderation = new ChatBskyModerationNS(client);
      }
    };
    exports.ChatBskyNS = ChatBskyNS;
    var ChatBskyActorNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "declaration", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.declaration = new DeclarationRecord(client);
      }
      deleteAccount(data, opts) {
        return this._client.call("chat.bsky.actor.deleteAccount", opts?.qp, data, opts);
      }
      exportAccountData(params, opts) {
        return this._client.call("chat.bsky.actor.exportAccountData", params, void 0, opts);
      }
    };
    exports.ChatBskyActorNS = ChatBskyActorNS;
    var DeclarationRecord = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      async list(params) {
        const res = await this._client.call("com.atproto.repo.listRecords", {
          collection: "chat.bsky.actor.declaration",
          ...params
        });
        return res.data;
      }
      async get(params) {
        const res = await this._client.call("com.atproto.repo.getRecord", {
          collection: "chat.bsky.actor.declaration",
          ...params
        });
        return res.data;
      }
      async create(params, record, headers) {
        record.$type = "chat.bsky.actor.declaration";
        const res = await this._client.call("com.atproto.repo.createRecord", void 0, {
          collection: "chat.bsky.actor.declaration",
          rkey: "self",
          ...params,
          record
        }, { encoding: "application/json", headers });
        return res.data;
      }
      async delete(params, headers) {
        await this._client.call("com.atproto.repo.deleteRecord", void 0, { collection: "chat.bsky.actor.declaration", ...params }, { headers });
      }
    };
    exports.DeclarationRecord = DeclarationRecord;
    var ChatBskyConvoNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      deleteMessageForSelf(data, opts) {
        return this._client.call("chat.bsky.convo.deleteMessageForSelf", opts?.qp, data, opts);
      }
      getConvo(params, opts) {
        return this._client.call("chat.bsky.convo.getConvo", params, void 0, opts);
      }
      getConvoForMembers(params, opts) {
        return this._client.call("chat.bsky.convo.getConvoForMembers", params, void 0, opts);
      }
      getLog(params, opts) {
        return this._client.call("chat.bsky.convo.getLog", params, void 0, opts);
      }
      getMessages(params, opts) {
        return this._client.call("chat.bsky.convo.getMessages", params, void 0, opts);
      }
      leaveConvo(data, opts) {
        return this._client.call("chat.bsky.convo.leaveConvo", opts?.qp, data, opts);
      }
      listConvos(params, opts) {
        return this._client.call("chat.bsky.convo.listConvos", params, void 0, opts);
      }
      muteConvo(data, opts) {
        return this._client.call("chat.bsky.convo.muteConvo", opts?.qp, data, opts);
      }
      sendMessage(data, opts) {
        return this._client.call("chat.bsky.convo.sendMessage", opts?.qp, data, opts);
      }
      sendMessageBatch(data, opts) {
        return this._client.call("chat.bsky.convo.sendMessageBatch", opts?.qp, data, opts);
      }
      unmuteConvo(data, opts) {
        return this._client.call("chat.bsky.convo.unmuteConvo", opts?.qp, data, opts);
      }
      updateRead(data, opts) {
        return this._client.call("chat.bsky.convo.updateRead", opts?.qp, data, opts);
      }
    };
    exports.ChatBskyConvoNS = ChatBskyConvoNS;
    var ChatBskyModerationNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      getActorMetadata(params, opts) {
        return this._client.call("chat.bsky.moderation.getActorMetadata", params, void 0, opts);
      }
      getMessageContext(params, opts) {
        return this._client.call("chat.bsky.moderation.getMessageContext", params, void 0, opts);
      }
      updateActorAccess(data, opts) {
        return this._client.call("chat.bsky.moderation.updateActorAccess", opts?.qp, data, opts);
      }
    };
    exports.ChatBskyModerationNS = ChatBskyModerationNS;
    var ToolsNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "ozone", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.ozone = new ToolsOzoneNS(client);
      }
    };
    exports.ToolsNS = ToolsNS;
    var ToolsOzoneNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "communication", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "moderation", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "server", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "set", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "setting", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "signature", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "team", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
        this.communication = new ToolsOzoneCommunicationNS(client);
        this.moderation = new ToolsOzoneModerationNS(client);
        this.server = new ToolsOzoneServerNS(client);
        this.set = new ToolsOzoneSetNS(client);
        this.setting = new ToolsOzoneSettingNS(client);
        this.signature = new ToolsOzoneSignatureNS(client);
        this.team = new ToolsOzoneTeamNS(client);
      }
    };
    exports.ToolsOzoneNS = ToolsOzoneNS;
    var ToolsOzoneCommunicationNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      createTemplate(data, opts) {
        return this._client.call("tools.ozone.communication.createTemplate", opts?.qp, data, opts).catch((e12) => {
          throw ToolsOzoneCommunicationCreateTemplate.toKnownErr(e12);
        });
      }
      deleteTemplate(data, opts) {
        return this._client.call("tools.ozone.communication.deleteTemplate", opts?.qp, data, opts);
      }
      listTemplates(params, opts) {
        return this._client.call("tools.ozone.communication.listTemplates", params, void 0, opts);
      }
      updateTemplate(data, opts) {
        return this._client.call("tools.ozone.communication.updateTemplate", opts?.qp, data, opts).catch((e12) => {
          throw ToolsOzoneCommunicationUpdateTemplate.toKnownErr(e12);
        });
      }
    };
    exports.ToolsOzoneCommunicationNS = ToolsOzoneCommunicationNS;
    var ToolsOzoneModerationNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      emitEvent(data, opts) {
        return this._client.call("tools.ozone.moderation.emitEvent", opts?.qp, data, opts).catch((e12) => {
          throw ToolsOzoneModerationEmitEvent.toKnownErr(e12);
        });
      }
      getEvent(params, opts) {
        return this._client.call("tools.ozone.moderation.getEvent", params, void 0, opts);
      }
      getRecord(params, opts) {
        return this._client.call("tools.ozone.moderation.getRecord", params, void 0, opts).catch((e12) => {
          throw ToolsOzoneModerationGetRecord.toKnownErr(e12);
        });
      }
      getRecords(params, opts) {
        return this._client.call("tools.ozone.moderation.getRecords", params, void 0, opts);
      }
      getRepo(params, opts) {
        return this._client.call("tools.ozone.moderation.getRepo", params, void 0, opts).catch((e12) => {
          throw ToolsOzoneModerationGetRepo.toKnownErr(e12);
        });
      }
      getRepos(params, opts) {
        return this._client.call("tools.ozone.moderation.getRepos", params, void 0, opts);
      }
      queryEvents(params, opts) {
        return this._client.call("tools.ozone.moderation.queryEvents", params, void 0, opts);
      }
      queryStatuses(params, opts) {
        return this._client.call("tools.ozone.moderation.queryStatuses", params, void 0, opts);
      }
      searchRepos(params, opts) {
        return this._client.call("tools.ozone.moderation.searchRepos", params, void 0, opts);
      }
    };
    exports.ToolsOzoneModerationNS = ToolsOzoneModerationNS;
    var ToolsOzoneServerNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      getConfig(params, opts) {
        return this._client.call("tools.ozone.server.getConfig", params, void 0, opts);
      }
    };
    exports.ToolsOzoneServerNS = ToolsOzoneServerNS;
    var ToolsOzoneSetNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      addValues(data, opts) {
        return this._client.call("tools.ozone.set.addValues", opts?.qp, data, opts);
      }
      deleteSet(data, opts) {
        return this._client.call("tools.ozone.set.deleteSet", opts?.qp, data, opts).catch((e12) => {
          throw ToolsOzoneSetDeleteSet.toKnownErr(e12);
        });
      }
      deleteValues(data, opts) {
        return this._client.call("tools.ozone.set.deleteValues", opts?.qp, data, opts).catch((e12) => {
          throw ToolsOzoneSetDeleteValues.toKnownErr(e12);
        });
      }
      getValues(params, opts) {
        return this._client.call("tools.ozone.set.getValues", params, void 0, opts).catch((e12) => {
          throw ToolsOzoneSetGetValues.toKnownErr(e12);
        });
      }
      querySets(params, opts) {
        return this._client.call("tools.ozone.set.querySets", params, void 0, opts);
      }
      upsertSet(data, opts) {
        return this._client.call("tools.ozone.set.upsertSet", opts?.qp, data, opts);
      }
    };
    exports.ToolsOzoneSetNS = ToolsOzoneSetNS;
    var ToolsOzoneSettingNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      listOptions(params, opts) {
        return this._client.call("tools.ozone.setting.listOptions", params, void 0, opts);
      }
      removeOptions(data, opts) {
        return this._client.call("tools.ozone.setting.removeOptions", opts?.qp, data, opts);
      }
      upsertOption(data, opts) {
        return this._client.call("tools.ozone.setting.upsertOption", opts?.qp, data, opts);
      }
    };
    exports.ToolsOzoneSettingNS = ToolsOzoneSettingNS;
    var ToolsOzoneSignatureNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      findCorrelation(params, opts) {
        return this._client.call("tools.ozone.signature.findCorrelation", params, void 0, opts);
      }
      findRelatedAccounts(params, opts) {
        return this._client.call("tools.ozone.signature.findRelatedAccounts", params, void 0, opts);
      }
      searchAccounts(params, opts) {
        return this._client.call("tools.ozone.signature.searchAccounts", params, void 0, opts);
      }
    };
    exports.ToolsOzoneSignatureNS = ToolsOzoneSignatureNS;
    var ToolsOzoneTeamNS = class {
      constructor(client) {
        Object.defineProperty(this, "_client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this._client = client;
      }
      addMember(data, opts) {
        return this._client.call("tools.ozone.team.addMember", opts?.qp, data, opts).catch((e12) => {
          throw ToolsOzoneTeamAddMember.toKnownErr(e12);
        });
      }
      deleteMember(data, opts) {
        return this._client.call("tools.ozone.team.deleteMember", opts?.qp, data, opts).catch((e12) => {
          throw ToolsOzoneTeamDeleteMember.toKnownErr(e12);
        });
      }
      listMembers(params, opts) {
        return this._client.call("tools.ozone.team.listMembers", params, void 0, opts);
      }
      updateMember(data, opts) {
        return this._client.call("tools.ozone.team.updateMember", opts?.qp, data, opts).catch((e12) => {
          throw ToolsOzoneTeamUpdateMember.toKnownErr(e12);
        });
      }
    };
    exports.ToolsOzoneTeamNS = ToolsOzoneTeamNS;
  }
});

// node_modules/@atproto/api/dist/rich-text/unicode.js
var require_unicode = __commonJS({
  "node_modules/@atproto/api/dist/rich-text/unicode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UnicodeString = void 0;
    var common_web_1 = require_dist16();
    var encoder2 = new TextEncoder();
    var decoder2 = new TextDecoder();
    var UnicodeString = class {
      constructor(utf16) {
        Object.defineProperty(this, "utf16", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "utf8", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "_graphemeLen", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.utf16 = utf16;
        this.utf8 = encoder2.encode(utf16);
      }
      get length() {
        return this.utf8.byteLength;
      }
      get graphemeLength() {
        if (!this._graphemeLen) {
          this._graphemeLen = (0, common_web_1.graphemeLen)(this.utf16);
        }
        return this._graphemeLen;
      }
      slice(start, end) {
        return decoder2.decode(this.utf8.slice(start, end));
      }
      utf16IndexToUtf8Index(i9) {
        return encoder2.encode(this.utf16.slice(0, i9)).byteLength;
      }
      toString() {
        return this.utf16;
      }
    };
    exports.UnicodeString = UnicodeString;
  }
});

// node_modules/@atproto/api/dist/rich-text/sanitization.js
var require_sanitization = __commonJS({
  "node_modules/@atproto/api/dist/rich-text/sanitization.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sanitizeRichText = sanitizeRichText;
    var unicode_1 = require_unicode();
    var EXCESS_SPACE_RE = /[\r\n]([\u00AD\u2060\u200D\u200C\u200B\s]*[\r\n]){2,}/;
    var REPLACEMENT_STR = "\n\n";
    function sanitizeRichText(richText, opts) {
      if (opts.cleanNewlines) {
        richText = clean2(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);
      }
      return richText;
    }
    function clean2(richText, targetRegexp, replacementString) {
      richText = richText.clone();
      let match = richText.unicodeText.utf16.match(targetRegexp);
      while (match && typeof match.index !== "undefined") {
        const oldText = richText.unicodeText;
        const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);
        const removeEndIndex = removeStartIndex + new unicode_1.UnicodeString(match[0]).length;
        richText.delete(removeStartIndex, removeEndIndex);
        if (richText.unicodeText.utf16 === oldText.utf16) {
          break;
        }
        richText.insert(removeStartIndex, replacementString);
        match = richText.unicodeText.utf16.match(targetRegexp);
      }
      return richText;
    }
  }
});

// node_modules/tlds/index.json
var require_tlds = __commonJS({
  "node_modules/tlds/index.json"(exports, module) {
    module.exports = [
      "aaa",
      "aarp",
      "abb",
      "abbott",
      "abbvie",
      "abc",
      "able",
      "abogado",
      "abudhabi",
      "ac",
      "academy",
      "accenture",
      "accountant",
      "accountants",
      "aco",
      "actor",
      "ad",
      "ads",
      "adult",
      "ae",
      "aeg",
      "aero",
      "aetna",
      "af",
      "afl",
      "africa",
      "ag",
      "agakhan",
      "agency",
      "ai",
      "aig",
      "airbus",
      "airforce",
      "airtel",
      "akdn",
      "al",
      "alibaba",
      "alipay",
      "allfinanz",
      "allstate",
      "ally",
      "alsace",
      "alstom",
      "am",
      "amazon",
      "americanexpress",
      "americanfamily",
      "amex",
      "amfam",
      "amica",
      "amsterdam",
      "analytics",
      "android",
      "anquan",
      "anz",
      "ao",
      "aol",
      "apartments",
      "app",
      "apple",
      "aq",
      "aquarelle",
      "ar",
      "arab",
      "aramco",
      "archi",
      "army",
      "arpa",
      "art",
      "arte",
      "as",
      "asda",
      "asia",
      "associates",
      "at",
      "athleta",
      "attorney",
      "au",
      "auction",
      "audi",
      "audible",
      "audio",
      "auspost",
      "author",
      "auto",
      "autos",
      "aw",
      "aws",
      "ax",
      "axa",
      "az",
      "azure",
      "ba",
      "baby",
      "baidu",
      "banamex",
      "band",
      "bank",
      "bar",
      "barcelona",
      "barclaycard",
      "barclays",
      "barefoot",
      "bargains",
      "baseball",
      "basketball",
      "bauhaus",
      "bayern",
      "bb",
      "bbc",
      "bbt",
      "bbva",
      "bcg",
      "bcn",
      "bd",
      "be",
      "beats",
      "beauty",
      "beer",
      "bentley",
      "berlin",
      "best",
      "bestbuy",
      "bet",
      "bf",
      "bg",
      "bh",
      "bharti",
      "bi",
      "bible",
      "bid",
      "bike",
      "bing",
      "bingo",
      "bio",
      "biz",
      "bj",
      "black",
      "blackfriday",
      "blockbuster",
      "blog",
      "bloomberg",
      "blue",
      "bm",
      "bms",
      "bmw",
      "bn",
      "bnpparibas",
      "bo",
      "boats",
      "boehringer",
      "bofa",
      "bom",
      "bond",
      "boo",
      "book",
      "booking",
      "bosch",
      "bostik",
      "boston",
      "bot",
      "boutique",
      "box",
      "br",
      "bradesco",
      "bridgestone",
      "broadway",
      "broker",
      "brother",
      "brussels",
      "bs",
      "bt",
      "build",
      "builders",
      "business",
      "buy",
      "buzz",
      "bv",
      "bw",
      "by",
      "bz",
      "bzh",
      "ca",
      "cab",
      "cafe",
      "cal",
      "call",
      "calvinklein",
      "cam",
      "camera",
      "camp",
      "canon",
      "capetown",
      "capital",
      "capitalone",
      "car",
      "caravan",
      "cards",
      "care",
      "career",
      "careers",
      "cars",
      "casa",
      "case",
      "cash",
      "casino",
      "cat",
      "catering",
      "catholic",
      "cba",
      "cbn",
      "cbre",
      "cc",
      "cd",
      "center",
      "ceo",
      "cern",
      "cf",
      "cfa",
      "cfd",
      "cg",
      "ch",
      "chanel",
      "channel",
      "charity",
      "chase",
      "chat",
      "cheap",
      "chintai",
      "christmas",
      "chrome",
      "church",
      "ci",
      "cipriani",
      "circle",
      "cisco",
      "citadel",
      "citi",
      "citic",
      "city",
      "ck",
      "cl",
      "claims",
      "cleaning",
      "click",
      "clinic",
      "clinique",
      "clothing",
      "cloud",
      "club",
      "clubmed",
      "cm",
      "cn",
      "co",
      "coach",
      "codes",
      "coffee",
      "college",
      "cologne",
      "com",
      "commbank",
      "community",
      "company",
      "compare",
      "computer",
      "comsec",
      "condos",
      "construction",
      "consulting",
      "contact",
      "contractors",
      "cooking",
      "cool",
      "coop",
      "corsica",
      "country",
      "coupon",
      "coupons",
      "courses",
      "cpa",
      "cr",
      "credit",
      "creditcard",
      "creditunion",
      "cricket",
      "crown",
      "crs",
      "cruise",
      "cruises",
      "cu",
      "cuisinella",
      "cv",
      "cw",
      "cx",
      "cy",
      "cymru",
      "cyou",
      "cz",
      "dad",
      "dance",
      "data",
      "date",
      "dating",
      "datsun",
      "day",
      "dclk",
      "dds",
      "de",
      "deal",
      "dealer",
      "deals",
      "degree",
      "delivery",
      "dell",
      "deloitte",
      "delta",
      "democrat",
      "dental",
      "dentist",
      "desi",
      "design",
      "dev",
      "dhl",
      "diamonds",
      "diet",
      "digital",
      "direct",
      "directory",
      "discount",
      "discover",
      "dish",
      "diy",
      "dj",
      "dk",
      "dm",
      "dnp",
      "do",
      "docs",
      "doctor",
      "dog",
      "domains",
      "dot",
      "download",
      "drive",
      "dtv",
      "dubai",
      "dunlop",
      "dupont",
      "durban",
      "dvag",
      "dvr",
      "dz",
      "earth",
      "eat",
      "ec",
      "eco",
      "edeka",
      "edu",
      "education",
      "ee",
      "eg",
      "email",
      "emerck",
      "energy",
      "engineer",
      "engineering",
      "enterprises",
      "epson",
      "equipment",
      "er",
      "ericsson",
      "erni",
      "es",
      "esq",
      "estate",
      "et",
      "eu",
      "eurovision",
      "eus",
      "events",
      "exchange",
      "expert",
      "exposed",
      "express",
      "extraspace",
      "fage",
      "fail",
      "fairwinds",
      "faith",
      "family",
      "fan",
      "fans",
      "farm",
      "farmers",
      "fashion",
      "fast",
      "fedex",
      "feedback",
      "ferrari",
      "ferrero",
      "fi",
      "fidelity",
      "fido",
      "film",
      "final",
      "finance",
      "financial",
      "fire",
      "firestone",
      "firmdale",
      "fish",
      "fishing",
      "fit",
      "fitness",
      "fj",
      "fk",
      "flickr",
      "flights",
      "flir",
      "florist",
      "flowers",
      "fly",
      "fm",
      "fo",
      "foo",
      "food",
      "football",
      "ford",
      "forex",
      "forsale",
      "forum",
      "foundation",
      "fox",
      "fr",
      "free",
      "fresenius",
      "frl",
      "frogans",
      "frontier",
      "ftr",
      "fujitsu",
      "fun",
      "fund",
      "furniture",
      "futbol",
      "fyi",
      "ga",
      "gal",
      "gallery",
      "gallo",
      "gallup",
      "game",
      "games",
      "gap",
      "garden",
      "gay",
      "gb",
      "gbiz",
      "gd",
      "gdn",
      "ge",
      "gea",
      "gent",
      "genting",
      "george",
      "gf",
      "gg",
      "ggee",
      "gh",
      "gi",
      "gift",
      "gifts",
      "gives",
      "giving",
      "gl",
      "glass",
      "gle",
      "global",
      "globo",
      "gm",
      "gmail",
      "gmbh",
      "gmo",
      "gmx",
      "gn",
      "godaddy",
      "gold",
      "goldpoint",
      "golf",
      "goo",
      "goodyear",
      "goog",
      "google",
      "gop",
      "got",
      "gov",
      "gp",
      "gq",
      "gr",
      "grainger",
      "graphics",
      "gratis",
      "green",
      "gripe",
      "grocery",
      "group",
      "gs",
      "gt",
      "gu",
      "gucci",
      "guge",
      "guide",
      "guitars",
      "guru",
      "gw",
      "gy",
      "hair",
      "hamburg",
      "hangout",
      "haus",
      "hbo",
      "hdfc",
      "hdfcbank",
      "health",
      "healthcare",
      "help",
      "helsinki",
      "here",
      "hermes",
      "hiphop",
      "hisamitsu",
      "hitachi",
      "hiv",
      "hk",
      "hkt",
      "hm",
      "hn",
      "hockey",
      "holdings",
      "holiday",
      "homedepot",
      "homegoods",
      "homes",
      "homesense",
      "honda",
      "horse",
      "hospital",
      "host",
      "hosting",
      "hot",
      "hotels",
      "hotmail",
      "house",
      "how",
      "hr",
      "hsbc",
      "ht",
      "hu",
      "hughes",
      "hyatt",
      "hyundai",
      "ibm",
      "icbc",
      "ice",
      "icu",
      "id",
      "ie",
      "ieee",
      "ifm",
      "ikano",
      "il",
      "im",
      "imamat",
      "imdb",
      "immo",
      "immobilien",
      "in",
      "inc",
      "industries",
      "infiniti",
      "info",
      "ing",
      "ink",
      "institute",
      "insurance",
      "insure",
      "int",
      "international",
      "intuit",
      "investments",
      "io",
      "ipiranga",
      "iq",
      "ir",
      "irish",
      "is",
      "ismaili",
      "ist",
      "istanbul",
      "it",
      "itau",
      "itv",
      "jaguar",
      "java",
      "jcb",
      "je",
      "jeep",
      "jetzt",
      "jewelry",
      "jio",
      "jll",
      "jm",
      "jmp",
      "jnj",
      "jo",
      "jobs",
      "joburg",
      "jot",
      "joy",
      "jp",
      "jpmorgan",
      "jprs",
      "juegos",
      "juniper",
      "kaufen",
      "kddi",
      "ke",
      "kerryhotels",
      "kerrylogistics",
      "kerryproperties",
      "kfh",
      "kg",
      "kh",
      "ki",
      "kia",
      "kids",
      "kim",
      "kindle",
      "kitchen",
      "kiwi",
      "km",
      "kn",
      "koeln",
      "komatsu",
      "kosher",
      "kp",
      "kpmg",
      "kpn",
      "kr",
      "krd",
      "kred",
      "kuokgroup",
      "kw",
      "ky",
      "kyoto",
      "kz",
      "la",
      "lacaixa",
      "lamborghini",
      "lamer",
      "lancaster",
      "land",
      "landrover",
      "lanxess",
      "lasalle",
      "lat",
      "latino",
      "latrobe",
      "law",
      "lawyer",
      "lb",
      "lc",
      "lds",
      "lease",
      "leclerc",
      "lefrak",
      "legal",
      "lego",
      "lexus",
      "lgbt",
      "li",
      "lidl",
      "life",
      "lifeinsurance",
      "lifestyle",
      "lighting",
      "like",
      "lilly",
      "limited",
      "limo",
      "lincoln",
      "link",
      "lipsy",
      "live",
      "living",
      "lk",
      "llc",
      "llp",
      "loan",
      "loans",
      "locker",
      "locus",
      "lol",
      "london",
      "lotte",
      "lotto",
      "love",
      "lpl",
      "lplfinancial",
      "lr",
      "ls",
      "lt",
      "ltd",
      "ltda",
      "lu",
      "lundbeck",
      "luxe",
      "luxury",
      "lv",
      "ly",
      "ma",
      "madrid",
      "maif",
      "maison",
      "makeup",
      "man",
      "management",
      "mango",
      "map",
      "market",
      "marketing",
      "markets",
      "marriott",
      "marshalls",
      "mattel",
      "mba",
      "mc",
      "mckinsey",
      "md",
      "me",
      "med",
      "media",
      "meet",
      "melbourne",
      "meme",
      "memorial",
      "men",
      "menu",
      "merckmsd",
      "mg",
      "mh",
      "miami",
      "microsoft",
      "mil",
      "mini",
      "mint",
      "mit",
      "mitsubishi",
      "mk",
      "ml",
      "mlb",
      "mls",
      "mm",
      "mma",
      "mn",
      "mo",
      "mobi",
      "mobile",
      "moda",
      "moe",
      "moi",
      "mom",
      "monash",
      "money",
      "monster",
      "mormon",
      "mortgage",
      "moscow",
      "moto",
      "motorcycles",
      "mov",
      "movie",
      "mp",
      "mq",
      "mr",
      "ms",
      "msd",
      "mt",
      "mtn",
      "mtr",
      "mu",
      "museum",
      "music",
      "mv",
      "mw",
      "mx",
      "my",
      "mz",
      "na",
      "nab",
      "nagoya",
      "name",
      "navy",
      "nba",
      "nc",
      "ne",
      "nec",
      "net",
      "netbank",
      "netflix",
      "network",
      "neustar",
      "new",
      "news",
      "next",
      "nextdirect",
      "nexus",
      "nf",
      "nfl",
      "ng",
      "ngo",
      "nhk",
      "ni",
      "nico",
      "nike",
      "nikon",
      "ninja",
      "nissan",
      "nissay",
      "nl",
      "no",
      "nokia",
      "norton",
      "now",
      "nowruz",
      "nowtv",
      "np",
      "nr",
      "nra",
      "nrw",
      "ntt",
      "nu",
      "nyc",
      "nz",
      "obi",
      "observer",
      "office",
      "okinawa",
      "olayan",
      "olayangroup",
      "ollo",
      "om",
      "omega",
      "one",
      "ong",
      "onl",
      "online",
      "ooo",
      "open",
      "oracle",
      "orange",
      "org",
      "organic",
      "origins",
      "osaka",
      "otsuka",
      "ott",
      "ovh",
      "pa",
      "page",
      "panasonic",
      "paris",
      "pars",
      "partners",
      "parts",
      "party",
      "pay",
      "pccw",
      "pe",
      "pet",
      "pf",
      "pfizer",
      "pg",
      "ph",
      "pharmacy",
      "phd",
      "philips",
      "phone",
      "photo",
      "photography",
      "photos",
      "physio",
      "pics",
      "pictet",
      "pictures",
      "pid",
      "pin",
      "ping",
      "pink",
      "pioneer",
      "pizza",
      "pk",
      "pl",
      "place",
      "play",
      "playstation",
      "plumbing",
      "plus",
      "pm",
      "pn",
      "pnc",
      "pohl",
      "poker",
      "politie",
      "porn",
      "post",
      "pr",
      "pramerica",
      "praxi",
      "press",
      "prime",
      "pro",
      "prod",
      "productions",
      "prof",
      "progressive",
      "promo",
      "properties",
      "property",
      "protection",
      "pru",
      "prudential",
      "ps",
      "pt",
      "pub",
      "pw",
      "pwc",
      "py",
      "qa",
      "qpon",
      "quebec",
      "quest",
      "racing",
      "radio",
      "re",
      "read",
      "realestate",
      "realtor",
      "realty",
      "recipes",
      "red",
      "redstone",
      "redumbrella",
      "rehab",
      "reise",
      "reisen",
      "reit",
      "reliance",
      "ren",
      "rent",
      "rentals",
      "repair",
      "report",
      "republican",
      "rest",
      "restaurant",
      "review",
      "reviews",
      "rexroth",
      "rich",
      "richardli",
      "ricoh",
      "ril",
      "rio",
      "rip",
      "ro",
      "rocks",
      "rodeo",
      "rogers",
      "room",
      "rs",
      "rsvp",
      "ru",
      "rugby",
      "ruhr",
      "run",
      "rw",
      "rwe",
      "ryukyu",
      "sa",
      "saarland",
      "safe",
      "safety",
      "sakura",
      "sale",
      "salon",
      "samsclub",
      "samsung",
      "sandvik",
      "sandvikcoromant",
      "sanofi",
      "sap",
      "sarl",
      "sas",
      "save",
      "saxo",
      "sb",
      "sbi",
      "sbs",
      "sc",
      "scb",
      "schaeffler",
      "schmidt",
      "scholarships",
      "school",
      "schule",
      "schwarz",
      "science",
      "scot",
      "sd",
      "se",
      "search",
      "seat",
      "secure",
      "security",
      "seek",
      "select",
      "sener",
      "services",
      "seven",
      "sew",
      "sex",
      "sexy",
      "sfr",
      "sg",
      "sh",
      "shangrila",
      "sharp",
      "shell",
      "shia",
      "shiksha",
      "shoes",
      "shop",
      "shopping",
      "shouji",
      "show",
      "si",
      "silk",
      "sina",
      "singles",
      "site",
      "sj",
      "sk",
      "ski",
      "skin",
      "sky",
      "skype",
      "sl",
      "sling",
      "sm",
      "smart",
      "smile",
      "sn",
      "sncf",
      "so",
      "soccer",
      "social",
      "softbank",
      "software",
      "sohu",
      "solar",
      "solutions",
      "song",
      "sony",
      "soy",
      "spa",
      "space",
      "sport",
      "spot",
      "sr",
      "srl",
      "ss",
      "st",
      "stada",
      "staples",
      "star",
      "statebank",
      "statefarm",
      "stc",
      "stcgroup",
      "stockholm",
      "storage",
      "store",
      "stream",
      "studio",
      "study",
      "style",
      "su",
      "sucks",
      "supplies",
      "supply",
      "support",
      "surf",
      "surgery",
      "suzuki",
      "sv",
      "swatch",
      "swiss",
      "sx",
      "sy",
      "sydney",
      "systems",
      "sz",
      "tab",
      "taipei",
      "talk",
      "taobao",
      "target",
      "tatamotors",
      "tatar",
      "tattoo",
      "tax",
      "taxi",
      "tc",
      "tci",
      "td",
      "tdk",
      "team",
      "tech",
      "technology",
      "tel",
      "temasek",
      "tennis",
      "teva",
      "tf",
      "tg",
      "th",
      "thd",
      "theater",
      "theatre",
      "tiaa",
      "tickets",
      "tienda",
      "tips",
      "tires",
      "tirol",
      "tj",
      "tjmaxx",
      "tjx",
      "tk",
      "tkmaxx",
      "tl",
      "tm",
      "tmall",
      "tn",
      "to",
      "today",
      "tokyo",
      "tools",
      "top",
      "toray",
      "toshiba",
      "total",
      "tours",
      "town",
      "toyota",
      "toys",
      "tr",
      "trade",
      "trading",
      "training",
      "travel",
      "travelers",
      "travelersinsurance",
      "trust",
      "trv",
      "tt",
      "tube",
      "tui",
      "tunes",
      "tushu",
      "tv",
      "tvs",
      "tw",
      "tz",
      "ua",
      "ubank",
      "ubs",
      "ug",
      "uk",
      "unicom",
      "university",
      "uno",
      "uol",
      "ups",
      "us",
      "uy",
      "uz",
      "va",
      "vacations",
      "vana",
      "vanguard",
      "vc",
      "ve",
      "vegas",
      "ventures",
      "verisign",
      "verm\xF6gensberater",
      "verm\xF6gensberatung",
      "versicherung",
      "vet",
      "vg",
      "vi",
      "viajes",
      "video",
      "vig",
      "viking",
      "villas",
      "vin",
      "vip",
      "virgin",
      "visa",
      "vision",
      "viva",
      "vivo",
      "vlaanderen",
      "vn",
      "vodka",
      "volvo",
      "vote",
      "voting",
      "voto",
      "voyage",
      "vu",
      "wales",
      "walmart",
      "walter",
      "wang",
      "wanggou",
      "watch",
      "watches",
      "weather",
      "weatherchannel",
      "webcam",
      "weber",
      "website",
      "wed",
      "wedding",
      "weibo",
      "weir",
      "wf",
      "whoswho",
      "wien",
      "wiki",
      "williamhill",
      "win",
      "windows",
      "wine",
      "winners",
      "wme",
      "wolterskluwer",
      "woodside",
      "work",
      "works",
      "world",
      "wow",
      "ws",
      "wtc",
      "wtf",
      "xbox",
      "xerox",
      "xihuan",
      "xin",
      "xxx",
      "xyz",
      "yachts",
      "yahoo",
      "yamaxun",
      "yandex",
      "ye",
      "yodobashi",
      "yoga",
      "yokohama",
      "you",
      "youtube",
      "yt",
      "yun",
      "za",
      "zappos",
      "zara",
      "zero",
      "zip",
      "zm",
      "zone",
      "zuerich",
      "zw",
      "\u03B5\u03BB",
      "\u03B5\u03C5",
      "\u0431\u0433",
      "\u0431\u0435\u043B",
      "\u0434\u0435\u0442\u0438",
      "\u0435\u044E",
      "\u043A\u0430\u0442\u043E\u043B\u0438\u043A",
      "\u043A\u043E\u043C",
      "\u043C\u043A\u0434",
      "\u043C\u043E\u043D",
      "\u043C\u043E\u0441\u043A\u0432\u0430",
      "\u043E\u043D\u043B\u0430\u0439\u043D",
      "\u043E\u0440\u0433",
      "\u0440\u0443\u0441",
      "\u0440\u0444",
      "\u0441\u0430\u0439\u0442",
      "\u0441\u0440\u0431",
      "\u0443\u043A\u0440",
      "\u049B\u0430\u0437",
      "\u0570\u0561\u0575",
      "\u05D9\u05E9\u05E8\u05D0\u05DC",
      "\u05E7\u05D5\u05DD",
      "\u0627\u0628\u0648\u0638\u0628\u064A",
      "\u0627\u0631\u0627\u0645\u0643\u0648",
      "\u0627\u0644\u0627\u0631\u062F\u0646",
      "\u0627\u0644\u0628\u062D\u0631\u064A\u0646",
      "\u0627\u0644\u062C\u0632\u0627\u0626\u0631",
      "\u0627\u0644\u0633\u0639\u0648\u062F\u064A\u0629",
      "\u0627\u0644\u0639\u0644\u064A\u0627\u0646",
      "\u0627\u0644\u0645\u063A\u0631\u0628",
      "\u0627\u0645\u0627\u0631\u0627\u062A",
      "\u0627\u06CC\u0631\u0627\u0646",
      "\u0628\u0627\u0631\u062A",
      "\u0628\u0627\u0632\u0627\u0631",
      "\u0628\u064A\u062A\u0643",
      "\u0628\u06BE\u0627\u0631\u062A",
      "\u062A\u0648\u0646\u0633",
      "\u0633\u0648\u062F\u0627\u0646",
      "\u0633\u0648\u0631\u064A\u0629",
      "\u0634\u0628\u0643\u0629",
      "\u0639\u0631\u0627\u0642",
      "\u0639\u0631\u0628",
      "\u0639\u0645\u0627\u0646",
      "\u0641\u0644\u0633\u0637\u064A\u0646",
      "\u0642\u0637\u0631",
      "\u0643\u0627\u062B\u0648\u0644\u064A\u0643",
      "\u0643\u0648\u0645",
      "\u0645\u0635\u0631",
      "\u0645\u0644\u064A\u0633\u064A\u0627",
      "\u0645\u0648\u0631\u064A\u062A\u0627\u0646\u064A\u0627",
      "\u0645\u0648\u0642\u0639",
      "\u0647\u0645\u0631\u0627\u0647",
      "\u067E\u0627\u06A9\u0633\u062A\u0627\u0646",
      "\u0680\u0627\u0631\u062A",
      "\u0915\u0949\u092E",
      "\u0928\u0947\u091F",
      "\u092D\u093E\u0930\u0924",
      "\u092D\u093E\u0930\u0924\u092E\u094D",
      "\u092D\u093E\u0930\u094B\u0924",
      "\u0938\u0902\u0917\u0920\u0928",
      "\u09AC\u09BE\u0982\u09B2\u09BE",
      "\u09AD\u09BE\u09B0\u09A4",
      "\u09AD\u09BE\u09F0\u09A4",
      "\u0A2D\u0A3E\u0A30\u0A24",
      "\u0AAD\u0ABE\u0AB0\u0AA4",
      "\u0B2D\u0B3E\u0B30\u0B24",
      "\u0B87\u0BA8\u0BCD\u0BA4\u0BBF\u0BAF\u0BBE",
      "\u0B87\u0BB2\u0B99\u0BCD\u0B95\u0BC8",
      "\u0B9A\u0BBF\u0B99\u0BCD\u0B95\u0BAA\u0BCD\u0BAA\u0BC2\u0BB0\u0BCD",
      "\u0C2D\u0C3E\u0C30\u0C24\u0C4D",
      "\u0CAD\u0CBE\u0CB0\u0CA4",
      "\u0D2D\u0D3E\u0D30\u0D24\u0D02",
      "\u0DBD\u0D82\u0D9A\u0DCF",
      "\u0E04\u0E2D\u0E21",
      "\u0E44\u0E17\u0E22",
      "\u0EA5\u0EB2\u0EA7",
      "\u10D2\u10D4",
      "\u307F\u3093\u306A",
      "\u30A2\u30DE\u30BE\u30F3",
      "\u30AF\u30E9\u30A6\u30C9",
      "\u30B0\u30FC\u30B0\u30EB",
      "\u30B3\u30E0",
      "\u30B9\u30C8\u30A2",
      "\u30BB\u30FC\u30EB",
      "\u30D5\u30A1\u30C3\u30B7\u30E7\u30F3",
      "\u30DD\u30A4\u30F3\u30C8",
      "\u4E16\u754C",
      "\u4E2D\u4FE1",
      "\u4E2D\u56FD",
      "\u4E2D\u570B",
      "\u4E2D\u6587\u7F51",
      "\u4E9A\u9A6C\u900A",
      "\u4F01\u4E1A",
      "\u4F5B\u5C71",
      "\u4FE1\u606F",
      "\u5065\u5EB7",
      "\u516B\u5366",
      "\u516C\u53F8",
      "\u516C\u76CA",
      "\u53F0\u6E7E",
      "\u53F0\u7063",
      "\u5546\u57CE",
      "\u5546\u5E97",
      "\u5546\u6807",
      "\u5609\u91CC",
      "\u5609\u91CC\u5927\u9152\u5E97",
      "\u5728\u7EBF",
      "\u5927\u62FF",
      "\u5929\u4E3B\u6559",
      "\u5A31\u4E50",
      "\u5BB6\u96FB",
      "\u5E7F\u4E1C",
      "\u5FAE\u535A",
      "\u6148\u5584",
      "\u6211\u7231\u4F60",
      "\u624B\u673A",
      "\u62DB\u8058",
      "\u653F\u52A1",
      "\u653F\u5E9C",
      "\u65B0\u52A0\u5761",
      "\u65B0\u95FB",
      "\u65F6\u5C1A",
      "\u66F8\u7C4D",
      "\u673A\u6784",
      "\u6DE1\u9A6C\u9521",
      "\u6E38\u620F",
      "\u6FB3\u9580",
      "\u70B9\u770B",
      "\u79FB\u52A8",
      "\u7EC4\u7EC7\u673A\u6784",
      "\u7F51\u5740",
      "\u7F51\u5E97",
      "\u7F51\u7AD9",
      "\u7F51\u7EDC",
      "\u8054\u901A",
      "\u8C37\u6B4C",
      "\u8D2D\u7269",
      "\u901A\u8CA9",
      "\u96C6\u56E2",
      "\u96FB\u8A0A\u76C8\u79D1",
      "\u98DE\u5229\u6D66",
      "\u98DF\u54C1",
      "\u9910\u5385",
      "\u9999\u683C\u91CC\u62C9",
      "\u9999\u6E2F",
      "\uB2F7\uB137",
      "\uB2F7\uCEF4",
      "\uC0BC\uC131",
      "\uD55C\uAD6D"
    ];
  }
});

// node_modules/@atproto/api/dist/rich-text/util.js
var require_util17 = __commonJS({
  "node_modules/@atproto/api/dist/rich-text/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TAG_REGEX = exports.TRAILING_PUNCTUATION_REGEX = exports.URL_REGEX = exports.MENTION_REGEX = void 0;
    exports.MENTION_REGEX = /(^|\s|\()(@)([a-zA-Z0-9.-]+)(\b)/g;
    exports.URL_REGEX = /(^|\s|\()((https?:\/\/[\S]+)|((?<domain>[a-z][a-z0-9]*(\.[a-z0-9]+)+)[\S]*))/gim;
    exports.TRAILING_PUNCTUATION_REGEX = /\p{P}+$/gu;
    exports.TAG_REGEX = // eslint-disable-next-line no-misleading-character-class
    /(^|\s)[#＃]((?!\ufe0f)[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*[^\d\s\p{P}\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]+[^\s\u00AD\u2060\u200A\u200B\u200C\u200D\u20e2]*)?/gu;
  }
});

// node_modules/@atproto/api/dist/rich-text/detection.js
var require_detection = __commonJS({
  "node_modules/@atproto/api/dist/rich-text/detection.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.detectFacets = detectFacets;
    var tlds_1 = __importDefault(require_tlds());
    var util_1 = require_util17();
    function detectFacets(text) {
      let match;
      const facets = [];
      {
        const re = util_1.MENTION_REGEX;
        while (match = re.exec(text.utf16)) {
          if (!isValidDomain(match[3]) && !match[3].endsWith(".test")) {
            continue;
          }
          const start = text.utf16.indexOf(match[3], match.index) - 1;
          facets.push({
            $type: "app.bsky.richtext.facet",
            index: {
              byteStart: text.utf16IndexToUtf8Index(start),
              byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)
            },
            features: [
              {
                $type: "app.bsky.richtext.facet#mention",
                did: match[3]
                // must be resolved afterwards
              }
            ]
          });
        }
      }
      {
        const re = util_1.URL_REGEX;
        while (match = re.exec(text.utf16)) {
          let uri = match[2];
          if (!uri.startsWith("http")) {
            const domain = match.groups?.domain;
            if (!domain || !isValidDomain(domain)) {
              continue;
            }
            uri = `https://${uri}`;
          }
          const start = text.utf16.indexOf(match[2], match.index);
          const index = { start, end: start + match[2].length };
          if (/[.,;:!?]$/.test(uri)) {
            uri = uri.slice(0, -1);
            index.end--;
          }
          if (/[)]$/.test(uri) && !uri.includes("(")) {
            uri = uri.slice(0, -1);
            index.end--;
          }
          facets.push({
            index: {
              byteStart: text.utf16IndexToUtf8Index(index.start),
              byteEnd: text.utf16IndexToUtf8Index(index.end)
            },
            features: [
              {
                $type: "app.bsky.richtext.facet#link",
                uri
              }
            ]
          });
        }
      }
      {
        const re = util_1.TAG_REGEX;
        while (match = re.exec(text.utf16)) {
          const leading = match[1];
          let tag2 = match[2];
          if (!tag2)
            continue;
          tag2 = tag2.trim().replace(util_1.TRAILING_PUNCTUATION_REGEX, "");
          if (tag2.length === 0 || tag2.length > 64)
            continue;
          const index = match.index + leading.length;
          facets.push({
            index: {
              byteStart: text.utf16IndexToUtf8Index(index),
              byteEnd: text.utf16IndexToUtf8Index(index + 1 + tag2.length)
            },
            features: [
              {
                $type: "app.bsky.richtext.facet#tag",
                tag: tag2
              }
            ]
          });
        }
      }
      return facets.length > 0 ? facets : void 0;
    }
    function isValidDomain(str) {
      return !!tlds_1.default.find((tld) => {
        const i9 = str.lastIndexOf(tld);
        if (i9 === -1) {
          return false;
        }
        return str.charAt(i9 - 1) === "." && i9 === str.length - tld.length;
      });
    }
  }
});

// node_modules/@atproto/api/dist/rich-text/rich-text.js
var require_rich_text = __commonJS({
  "node_modules/@atproto/api/dist/rich-text/rich-text.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RichText = exports.RichTextSegment = void 0;
    var client_1 = require_client2();
    var unicode_1 = require_unicode();
    var sanitization_1 = require_sanitization();
    var detection_1 = require_detection();
    var RichTextSegment = class {
      constructor(text, facet) {
        Object.defineProperty(this, "text", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: text
        });
        Object.defineProperty(this, "facet", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: facet
        });
      }
      get link() {
        const link = this.facet?.features.find(client_1.AppBskyRichtextFacet.isLink);
        if (client_1.AppBskyRichtextFacet.isLink(link)) {
          return link;
        }
        return void 0;
      }
      isLink() {
        return !!this.link;
      }
      get mention() {
        const mention = this.facet?.features.find(client_1.AppBskyRichtextFacet.isMention);
        if (client_1.AppBskyRichtextFacet.isMention(mention)) {
          return mention;
        }
        return void 0;
      }
      isMention() {
        return !!this.mention;
      }
      get tag() {
        const tag2 = this.facet?.features.find(client_1.AppBskyRichtextFacet.isTag);
        if (client_1.AppBskyRichtextFacet.isTag(tag2)) {
          return tag2;
        }
        return void 0;
      }
      isTag() {
        return !!this.tag;
      }
    };
    exports.RichTextSegment = RichTextSegment;
    var RichText = class _RichText {
      constructor(props, opts) {
        Object.defineProperty(this, "unicodeText", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "facets", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.unicodeText = new unicode_1.UnicodeString(props.text);
        this.facets = props.facets;
        if (!this.facets?.length && props.entities?.length) {
          this.facets = entitiesToFacets(this.unicodeText, props.entities);
        }
        if (this.facets) {
          this.facets = this.facets.filter(facetFilter).sort(facetSort);
        }
        if (opts?.cleanNewlines) {
          (0, sanitization_1.sanitizeRichText)(this, { cleanNewlines: true }).copyInto(this);
        }
      }
      get text() {
        return this.unicodeText.toString();
      }
      get length() {
        return this.unicodeText.length;
      }
      get graphemeLength() {
        return this.unicodeText.graphemeLength;
      }
      clone() {
        return new _RichText({
          text: this.unicodeText.utf16,
          facets: cloneDeep(this.facets)
        });
      }
      copyInto(target) {
        target.unicodeText = this.unicodeText;
        target.facets = cloneDeep(this.facets);
      }
      *segments() {
        const facets = this.facets || [];
        if (!facets.length) {
          yield new RichTextSegment(this.unicodeText.utf16);
          return;
        }
        let textCursor = 0;
        let facetCursor = 0;
        do {
          const currFacet = facets[facetCursor];
          if (textCursor < currFacet.index.byteStart) {
            yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));
          } else if (textCursor > currFacet.index.byteStart) {
            facetCursor++;
            continue;
          }
          if (currFacet.index.byteStart < currFacet.index.byteEnd) {
            const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);
            if (!subtext.trim()) {
              yield new RichTextSegment(subtext);
            } else {
              yield new RichTextSegment(subtext, currFacet);
            }
          }
          textCursor = currFacet.index.byteEnd;
          facetCursor++;
        } while (facetCursor < facets.length);
        if (textCursor < this.unicodeText.length) {
          yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));
        }
      }
      insert(insertIndex, insertText) {
        this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));
        if (!this.facets?.length) {
          return this;
        }
        const numCharsAdded = insertText.length;
        for (const ent of this.facets) {
          if (insertIndex <= ent.index.byteStart) {
            ent.index.byteStart += numCharsAdded;
            ent.index.byteEnd += numCharsAdded;
          } else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) {
            ent.index.byteEnd += numCharsAdded;
          }
        }
        return this;
      }
      delete(removeStartIndex, removeEndIndex) {
        this.unicodeText = new unicode_1.UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));
        if (!this.facets?.length) {
          return this;
        }
        const numCharsRemoved = removeEndIndex - removeStartIndex;
        for (const ent of this.facets) {
          if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {
            ent.index.byteStart = 0;
            ent.index.byteEnd = 0;
          } else if (removeStartIndex > ent.index.byteEnd) {
          } else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) {
            ent.index.byteEnd = removeStartIndex;
          } else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
            ent.index.byteEnd -= numCharsRemoved;
          } else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {
            ent.index.byteStart = removeStartIndex;
            ent.index.byteEnd -= numCharsRemoved;
          } else if (removeEndIndex < ent.index.byteStart) {
            ent.index.byteStart -= numCharsRemoved;
            ent.index.byteEnd -= numCharsRemoved;
          }
        }
        this.facets = this.facets.filter((ent) => ent.index.byteStart < ent.index.byteEnd);
        return this;
      }
      /**
       * Detects facets such as links and mentions
       * Note: Overwrites the existing facets with auto-detected facets
       */
      async detectFacets(agent2) {
        this.facets = (0, detection_1.detectFacets)(this.unicodeText);
        if (this.facets) {
          const promises = [];
          for (const facet of this.facets) {
            for (const feature of facet.features) {
              if (client_1.AppBskyRichtextFacet.isMention(feature)) {
                promises.push(agent2.com.atproto.identity.resolveHandle({ handle: feature.did }).then((res) => res?.data.did).catch((_2) => void 0).then((did) => {
                  feature.did = did || "";
                }));
              }
            }
          }
          await Promise.allSettled(promises);
          this.facets.sort(facetSort);
        }
      }
      /**
       * Detects facets such as links and mentions but does not resolve them
       * Will produce invalid facets! For instance, mentions will not have their DIDs set.
       * Note: Overwrites the existing facets with auto-detected facets
       */
      detectFacetsWithoutResolution() {
        this.facets = (0, detection_1.detectFacets)(this.unicodeText);
        if (this.facets) {
          this.facets.sort(facetSort);
        }
      }
    };
    exports.RichText = RichText;
    var facetSort = (a4, b3) => a4.index.byteStart - b3.index.byteStart;
    var facetFilter = (facet) => (
      // discard negative-length facets. zero-length facets are valid
      facet.index.byteStart <= facet.index.byteEnd
    );
    function entitiesToFacets(text, entities) {
      const facets = [];
      for (const ent of entities) {
        if (ent.type === "link") {
          facets.push({
            $type: "app.bsky.richtext.facet",
            index: {
              byteStart: text.utf16IndexToUtf8Index(ent.index.start),
              byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
            },
            features: [{ $type: "app.bsky.richtext.facet#link", uri: ent.value }]
          });
        } else if (ent.type === "mention") {
          facets.push({
            $type: "app.bsky.richtext.facet",
            index: {
              byteStart: text.utf16IndexToUtf8Index(ent.index.start),
              byteEnd: text.utf16IndexToUtf8Index(ent.index.end)
            },
            features: [
              { $type: "app.bsky.richtext.facet#mention", did: ent.value }
            ]
          });
        }
      }
      return facets;
    }
    function cloneDeep(v2) {
      if (typeof v2 === "undefined") {
        return v2;
      }
      return JSON.parse(JSON.stringify(v2));
    }
  }
});

// node_modules/@atproto/api/dist/moderation/types.js
var require_types8 = __commonJS({
  "node_modules/@atproto/api/dist/moderation/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NOOP_BEHAVIOR = exports.HIDE_BEHAVIOR = exports.MUTEWORD_BEHAVIOR = exports.MUTE_BEHAVIOR = exports.BLOCK_BEHAVIOR = exports.CUSTOM_LABEL_VALUE_RE = void 0;
    exports.CUSTOM_LABEL_VALUE_RE = /^[a-z-]+$/;
    exports.BLOCK_BEHAVIOR = {
      profileList: "blur",
      profileView: "alert",
      avatar: "blur",
      banner: "blur",
      contentList: "blur",
      contentView: "blur"
    };
    exports.MUTE_BEHAVIOR = {
      profileList: "inform",
      profileView: "alert",
      contentList: "blur",
      contentView: "inform"
    };
    exports.MUTEWORD_BEHAVIOR = {
      contentList: "blur",
      contentView: "blur"
    };
    exports.HIDE_BEHAVIOR = {
      contentList: "blur",
      contentView: "blur"
    };
    exports.NOOP_BEHAVIOR = {};
  }
});

// node_modules/@atproto/api/dist/moderation/ui.js
var require_ui = __commonJS({
  "node_modules/@atproto/api/dist/moderation/ui.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModerationUI = void 0;
    var ModerationUI = class {
      constructor() {
        Object.defineProperty(this, "noOverride", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: false
        });
        Object.defineProperty(this, "filters", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
        Object.defineProperty(this, "blurs", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
        Object.defineProperty(this, "alerts", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
        Object.defineProperty(this, "informs", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
      }
      get filter() {
        return this.filters.length !== 0;
      }
      get blur() {
        return this.blurs.length !== 0;
      }
      get alert() {
        return this.alerts.length !== 0;
      }
      get inform() {
        return this.informs.length !== 0;
      }
    };
    exports.ModerationUI = ModerationUI;
  }
});

// node_modules/@atproto/api/dist/moderation/const/labels.js
var require_labels = __commonJS({
  "node_modules/@atproto/api/dist/moderation/const/labels.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LABELS = exports.DEFAULT_LABEL_SETTINGS = void 0;
    exports.DEFAULT_LABEL_SETTINGS = {
      porn: "hide",
      sexual: "warn",
      nudity: "ignore",
      "graphic-media": "warn"
    };
    exports.LABELS = {
      "!hide": {
        identifier: "!hide",
        configurable: false,
        defaultSetting: "hide",
        flags: ["no-override", "no-self"],
        severity: "alert",
        blurs: "content",
        behaviors: {
          account: {
            profileList: "blur",
            profileView: "blur",
            avatar: "blur",
            banner: "blur",
            displayName: "blur",
            contentList: "blur",
            contentView: "blur"
          },
          profile: {
            avatar: "blur",
            banner: "blur",
            displayName: "blur"
          },
          content: {
            contentList: "blur",
            contentView: "blur"
          }
        },
        locales: []
      },
      "!warn": {
        identifier: "!warn",
        configurable: false,
        defaultSetting: "warn",
        flags: ["no-self"],
        severity: "none",
        blurs: "content",
        behaviors: {
          account: {
            profileList: "blur",
            profileView: "blur",
            avatar: "blur",
            banner: "blur",
            contentList: "blur",
            contentView: "blur"
          },
          profile: {
            avatar: "blur",
            banner: "blur",
            displayName: "blur"
          },
          content: {
            contentList: "blur",
            contentView: "blur"
          }
        },
        locales: []
      },
      "!no-unauthenticated": {
        identifier: "!no-unauthenticated",
        configurable: false,
        defaultSetting: "hide",
        flags: ["no-override", "unauthed"],
        severity: "none",
        blurs: "content",
        behaviors: {
          account: {
            profileList: "blur",
            profileView: "blur",
            avatar: "blur",
            banner: "blur",
            displayName: "blur",
            contentList: "blur",
            contentView: "blur"
          },
          profile: {
            avatar: "blur",
            banner: "blur",
            displayName: "blur"
          },
          content: {
            contentList: "blur",
            contentView: "blur"
          }
        },
        locales: []
      },
      porn: {
        identifier: "porn",
        configurable: true,
        defaultSetting: "hide",
        flags: ["adult"],
        severity: "none",
        blurs: "media",
        behaviors: {
          account: {
            avatar: "blur",
            banner: "blur"
          },
          profile: {
            avatar: "blur",
            banner: "blur"
          },
          content: {
            contentMedia: "blur"
          }
        },
        locales: []
      },
      sexual: {
        identifier: "sexual",
        configurable: true,
        defaultSetting: "warn",
        flags: ["adult"],
        severity: "none",
        blurs: "media",
        behaviors: {
          account: {
            avatar: "blur",
            banner: "blur"
          },
          profile: {
            avatar: "blur",
            banner: "blur"
          },
          content: {
            contentMedia: "blur"
          }
        },
        locales: []
      },
      nudity: {
        identifier: "nudity",
        configurable: true,
        defaultSetting: "ignore",
        flags: [],
        severity: "none",
        blurs: "media",
        behaviors: {
          account: {
            avatar: "blur",
            banner: "blur"
          },
          profile: {
            avatar: "blur",
            banner: "blur"
          },
          content: {
            contentMedia: "blur"
          }
        },
        locales: []
      },
      "graphic-media": {
        identifier: "graphic-media",
        flags: ["adult"],
        configurable: true,
        defaultSetting: "warn",
        severity: "none",
        blurs: "media",
        behaviors: {
          account: {
            avatar: "blur",
            banner: "blur"
          },
          profile: {
            avatar: "blur",
            banner: "blur"
          },
          content: {
            contentMedia: "blur"
          }
        },
        locales: []
      },
      /** @deprecated alias for `graphic-media` */
      gore: {
        identifier: "gore",
        flags: ["adult"],
        configurable: true,
        defaultSetting: "warn",
        severity: "none",
        blurs: "media",
        behaviors: {
          account: {
            avatar: "blur",
            banner: "blur"
          },
          profile: {
            avatar: "blur",
            banner: "blur"
          },
          content: {
            contentMedia: "blur"
          }
        },
        locales: []
      }
    };
  }
});

// node_modules/@atproto/api/dist/moderation/decision.js
var require_decision = __commonJS({
  "node_modules/@atproto/api/dist/moderation/decision.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModerationDecision = void 0;
    var types_1 = require_types8();
    var ui_1 = require_ui();
    var labels_1 = require_labels();
    var ModerationBehaviorSeverity;
    (function(ModerationBehaviorSeverity2) {
      ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["High"] = 0] = "High";
      ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["Medium"] = 1] = "Medium";
      ModerationBehaviorSeverity2[ModerationBehaviorSeverity2["Low"] = 2] = "Low";
    })(ModerationBehaviorSeverity || (ModerationBehaviorSeverity = {}));
    var ModerationDecision = class _ModerationDecision {
      constructor() {
        Object.defineProperty(this, "did", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: ""
        });
        Object.defineProperty(this, "isMe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: false
        });
        Object.defineProperty(this, "causes", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
      }
      static merge(...decisions) {
        const decisionsFiltered = decisions.filter((v2) => !!v2);
        const decision = new _ModerationDecision();
        if (decisionsFiltered[0]) {
          decision.did = decisionsFiltered[0].did;
          decision.isMe = decisionsFiltered[0].isMe;
        }
        decision.causes = decisionsFiltered.flatMap((d3) => d3.causes);
        return decision;
      }
      downgrade() {
        for (const cause of this.causes) {
          cause.downgraded = true;
        }
        return this;
      }
      get blocked() {
        return !!this.blockCause;
      }
      get muted() {
        return !!this.muteCause;
      }
      get blockCause() {
        return this.causes.find((cause) => cause.type === "blocking" || cause.type === "blocked-by" || cause.type === "block-other");
      }
      get muteCause() {
        return this.causes.find((cause) => cause.type === "muted");
      }
      get labelCauses() {
        return this.causes.filter((cause) => cause.type === "label");
      }
      ui(context) {
        const ui = new ui_1.ModerationUI();
        for (const cause of this.causes) {
          if (cause.type === "blocking" || cause.type === "blocked-by" || cause.type === "block-other") {
            if (this.isMe) {
              continue;
            }
            if (context === "profileList" || context === "contentList") {
              ui.filters.push(cause);
            }
            if (!cause.downgraded) {
              if (types_1.BLOCK_BEHAVIOR[context] === "blur") {
                ui.noOverride = true;
                ui.blurs.push(cause);
              } else if (types_1.BLOCK_BEHAVIOR[context] === "alert") {
                ui.alerts.push(cause);
              } else if (types_1.BLOCK_BEHAVIOR[context] === "inform") {
                ui.informs.push(cause);
              }
            }
          } else if (cause.type === "muted") {
            if (this.isMe) {
              continue;
            }
            if (context === "profileList" || context === "contentList") {
              ui.filters.push(cause);
            }
            if (!cause.downgraded) {
              if (types_1.MUTE_BEHAVIOR[context] === "blur") {
                ui.blurs.push(cause);
              } else if (types_1.MUTE_BEHAVIOR[context] === "alert") {
                ui.alerts.push(cause);
              } else if (types_1.MUTE_BEHAVIOR[context] === "inform") {
                ui.informs.push(cause);
              }
            }
          } else if (cause.type === "mute-word") {
            if (this.isMe) {
              continue;
            }
            if (context === "contentList") {
              ui.filters.push(cause);
            }
            if (!cause.downgraded) {
              if (types_1.MUTEWORD_BEHAVIOR[context] === "blur") {
                ui.blurs.push(cause);
              } else if (types_1.MUTEWORD_BEHAVIOR[context] === "alert") {
                ui.alerts.push(cause);
              } else if (types_1.MUTEWORD_BEHAVIOR[context] === "inform") {
                ui.informs.push(cause);
              }
            }
          } else if (cause.type === "hidden") {
            if (context === "profileList" || context === "contentList") {
              ui.filters.push(cause);
            }
            if (!cause.downgraded) {
              if (types_1.HIDE_BEHAVIOR[context] === "blur") {
                ui.blurs.push(cause);
              } else if (types_1.HIDE_BEHAVIOR[context] === "alert") {
                ui.alerts.push(cause);
              } else if (types_1.HIDE_BEHAVIOR[context] === "inform") {
                ui.informs.push(cause);
              }
            }
          } else if (cause.type === "label") {
            if (context === "profileList" && cause.target === "account") {
              if (cause.setting === "hide" && !this.isMe) {
                ui.filters.push(cause);
              }
            } else if (context === "contentList" && (cause.target === "account" || cause.target === "content")) {
              if (cause.setting === "hide" && !this.isMe) {
                ui.filters.push(cause);
              }
            }
            if (!cause.downgraded) {
              if (cause.behavior[context] === "blur") {
                ui.blurs.push(cause);
                if (cause.noOverride && !this.isMe) {
                  ui.noOverride = true;
                }
              } else if (cause.behavior[context] === "alert") {
                ui.alerts.push(cause);
              } else if (cause.behavior[context] === "inform") {
                ui.informs.push(cause);
              }
            }
          }
        }
        ui.filters.sort(sortByPriority);
        ui.blurs.sort(sortByPriority);
        return ui;
      }
      setDid(did) {
        this.did = did;
      }
      setIsMe(isMe) {
        this.isMe = isMe;
      }
      addHidden(hidden2) {
        if (hidden2) {
          this.causes.push({
            type: "hidden",
            source: { type: "user" },
            priority: 6
          });
        }
      }
      addMutedWord(mutedWord) {
        if (mutedWord) {
          this.causes.push({
            type: "mute-word",
            source: { type: "user" },
            priority: 6
          });
        }
      }
      addBlocking(blocking) {
        if (blocking) {
          this.causes.push({
            type: "blocking",
            source: { type: "user" },
            priority: 3
          });
        }
      }
      addBlockingByList(blockingByList) {
        if (blockingByList) {
          this.causes.push({
            type: "blocking",
            source: { type: "list", list: blockingByList },
            priority: 3
          });
        }
      }
      addBlockedBy(blockedBy) {
        if (blockedBy) {
          this.causes.push({
            type: "blocked-by",
            source: { type: "user" },
            priority: 4
          });
        }
      }
      addBlockOther(blockOther) {
        if (blockOther) {
          this.causes.push({
            type: "block-other",
            source: { type: "user" },
            priority: 4
          });
        }
      }
      addLabel(target, label, opts) {
        const labelDef = types_1.CUSTOM_LABEL_VALUE_RE.test(label.val) ? opts.labelDefs?.[label.src]?.find((def) => def.identifier === label.val) || labels_1.LABELS[label.val] : labels_1.LABELS[label.val];
        if (!labelDef) {
          return;
        }
        const isSelf = label.src === this.did;
        const labeler = isSelf ? void 0 : opts.prefs.labelers.find((s4) => s4.did === label.src);
        if (!isSelf && !labeler) {
          return;
        }
        if (isSelf && labelDef.flags.includes("no-self")) {
          return;
        }
        let labelPref = labelDef.defaultSetting || "ignore";
        if (!labelDef.configurable) {
          labelPref = labelDef.defaultSetting || "hide";
        } else if (labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
          labelPref = "hide";
        } else if (labeler?.labels[labelDef.identifier]) {
          labelPref = labeler?.labels[labelDef.identifier];
        } else if (opts.prefs.labels[labelDef.identifier]) {
          labelPref = opts.prefs.labels[labelDef.identifier];
        }
        if (labelPref === "ignore") {
          return;
        }
        if (labelDef.flags.includes("unauthed") && !!opts.userDid) {
          return;
        }
        let priority;
        const severity = measureModerationBehaviorSeverity(labelDef.behaviors[target]);
        if (labelDef.flags.includes("no-override") || labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
          priority = 1;
        } else if (labelPref === "hide") {
          priority = 2;
        } else if (severity === ModerationBehaviorSeverity.High) {
          priority = 5;
        } else if (severity === ModerationBehaviorSeverity.Medium) {
          priority = 7;
        } else {
          priority = 8;
        }
        let noOverride = false;
        if (labelDef.flags.includes("no-override")) {
          noOverride = true;
        } else if (labelDef.flags.includes("adult") && !opts.prefs.adultContentEnabled) {
          noOverride = true;
        }
        this.causes.push({
          type: "label",
          source: isSelf || !labeler ? { type: "user" } : { type: "labeler", did: labeler.did },
          label,
          labelDef,
          target,
          setting: labelPref,
          behavior: labelDef.behaviors[target] || types_1.NOOP_BEHAVIOR,
          noOverride,
          priority
        });
      }
      addMuted(muted) {
        if (muted) {
          this.causes.push({
            type: "muted",
            source: { type: "user" },
            priority: 6
          });
        }
      }
      addMutedByList(mutedByList) {
        if (mutedByList) {
          this.causes.push({
            type: "muted",
            source: { type: "list", list: mutedByList },
            priority: 6
          });
        }
      }
    };
    exports.ModerationDecision = ModerationDecision;
    function measureModerationBehaviorSeverity(beh) {
      if (!beh) {
        return ModerationBehaviorSeverity.Low;
      }
      if (beh.profileView === "blur" || beh.contentView === "blur") {
        return ModerationBehaviorSeverity.High;
      }
      if (beh.contentList === "blur" || beh.contentMedia === "blur") {
        return ModerationBehaviorSeverity.Medium;
      }
      return ModerationBehaviorSeverity.Low;
    }
    function sortByPriority(a4, b3) {
      return a4.priority - b3.priority;
    }
  }
});

// node_modules/@atproto/api/dist/moderation/subjects/account.js
var require_account = __commonJS({
  "node_modules/@atproto/api/dist/moderation/subjects/account.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decideAccount = decideAccount;
    exports.filterAccountLabels = filterAccountLabels;
    var decision_1 = require_decision();
    function decideAccount(subject, opts) {
      const acc = new decision_1.ModerationDecision();
      acc.setDid(subject.did);
      acc.setIsMe(subject.did === opts.userDid);
      if (subject.viewer?.muted) {
        if (subject.viewer?.mutedByList) {
          acc.addMutedByList(subject.viewer?.mutedByList);
        } else {
          acc.addMuted(subject.viewer?.muted);
        }
      }
      if (subject.viewer?.blocking) {
        if (subject.viewer?.blockingByList) {
          acc.addBlockingByList(subject.viewer?.blockingByList);
        } else {
          acc.addBlocking(subject.viewer?.blocking);
        }
      }
      acc.addBlockedBy(subject.viewer?.blockedBy);
      for (const label of filterAccountLabels(subject.labels)) {
        acc.addLabel("account", label, opts);
      }
      return acc;
    }
    function filterAccountLabels(labels) {
      if (!labels) {
        return [];
      }
      return labels.filter((label) => !label.uri.endsWith("/app.bsky.actor.profile/self") || label.val === "!no-unauthenticated");
    }
  }
});

// node_modules/@atproto/api/dist/moderation/subjects/profile.js
var require_profile2 = __commonJS({
  "node_modules/@atproto/api/dist/moderation/subjects/profile.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decideProfile = decideProfile;
    exports.filterProfileLabels = filterProfileLabels;
    var decision_1 = require_decision();
    function decideProfile(subject, opts) {
      const acc = new decision_1.ModerationDecision();
      acc.setDid(subject.did);
      acc.setIsMe(subject.did === opts.userDid);
      for (const label of filterProfileLabels(subject.labels)) {
        acc.addLabel("profile", label, opts);
      }
      return acc;
    }
    function filterProfileLabels(labels) {
      if (!labels) {
        return [];
      }
      return labels.filter((label) => label.uri.endsWith("/app.bsky.actor.profile/self"));
    }
  }
});

// node_modules/@atproto/api/dist/moderation/subjects/notification.js
var require_notification = __commonJS({
  "node_modules/@atproto/api/dist/moderation/subjects/notification.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decideNotification = decideNotification;
    var decision_1 = require_decision();
    var account_1 = require_account();
    var profile_1 = require_profile2();
    function decideNotification(subject, opts) {
      const acc = new decision_1.ModerationDecision();
      acc.setDid(subject.author.did);
      acc.setIsMe(subject.author.did === opts.userDid);
      if (subject.labels?.length) {
        for (const label of subject.labels) {
          acc.addLabel("content", label, opts);
        }
      }
      return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
    }
  }
});

// node_modules/@atproto/api/dist/moderation/mutewords.js
var require_mutewords = __commonJS({
  "node_modules/@atproto/api/dist/moderation/mutewords.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasMutedWord = hasMutedWord;
    var client_1 = require_client2();
    var REGEX2 = {
      LEADING_TRAILING_PUNCTUATION: /(?:^\p{P}+|\p{P}+$)/gu,
      ESCAPE: /[[\]{}()*+?.\\^$|\s]/g,
      SEPARATORS: /[/\-–—()[\]_]+/g,
      WORD_BOUNDARY: /[\s\n\t\r\f\v]+?/g
    };
    var LANGUAGE_EXCEPTIONS = [
      "ja",
      // Japanese
      "zh",
      // Chinese
      "ko",
      // Korean
      "th",
      // Thai
      "vi"
      // Vietnamese
    ];
    function hasMutedWord({ mutedWords, text, facets, outlineTags, languages, actor }) {
      const exception = LANGUAGE_EXCEPTIONS.includes(languages?.[0] || "");
      const tags = [].concat(outlineTags || []).concat((facets || []).flatMap((facet) => facet.features.filter(client_1.AppBskyRichtextFacet.isTag).map((tag2) => tag2.tag))).map((t6) => t6.toLowerCase());
      for (const mute of mutedWords) {
        const mutedWord = mute.value.toLowerCase();
        const postText = text.toLowerCase();
        if (mute.expiresAt && mute.expiresAt < (/* @__PURE__ */ new Date()).toISOString())
          continue;
        if (mute.actorTarget === "exclude-following" && Boolean(actor?.viewer?.following))
          continue;
        if (tags.includes(mutedWord))
          return true;
        if (!mute.targets.includes("content"))
          continue;
        if ((mutedWord.length === 1 || exception) && postText.includes(mutedWord))
          return true;
        if (mutedWord.length > postText.length)
          continue;
        if (mutedWord === postText)
          return true;
        if (/(?:\s|\p{P})+?/u.test(mutedWord) && postText.includes(mutedWord))
          return true;
        const words = postText.split(REGEX2.WORD_BOUNDARY);
        for (const word of words) {
          if (word === mutedWord)
            return true;
          const wordTrimmedPunctuation = word.replace(REGEX2.LEADING_TRAILING_PUNCTUATION, "");
          if (mutedWord === wordTrimmedPunctuation)
            return true;
          if (mutedWord.length > wordTrimmedPunctuation.length)
            continue;
          if (/\p{P}+/u.test(wordTrimmedPunctuation)) {
            const spacedWord = wordTrimmedPunctuation.replace(/\p{P}+/gu, " ");
            if (spacedWord === mutedWord)
              return true;
            const contiguousWord = spacedWord.replace(/\s/gu, "");
            if (contiguousWord === mutedWord)
              return true;
            const wordParts = wordTrimmedPunctuation.split(/\p{P}+/u);
            for (const wordPart of wordParts) {
              if (wordPart === mutedWord)
                return true;
            }
          }
        }
      }
      return false;
    }
  }
});

// node_modules/@atproto/api/dist/moderation/subjects/post.js
var require_post2 = __commonJS({
  "node_modules/@atproto/api/dist/moderation/subjects/post.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decidePost = decidePost;
    var decision_1 = require_decision();
    var client_1 = require_client2();
    var mutewords_1 = require_mutewords();
    var account_1 = require_account();
    var profile_1 = require_profile2();
    function decidePost(subject, opts) {
      const acc = new decision_1.ModerationDecision();
      acc.setDid(subject.author.did);
      acc.setIsMe(subject.author.did === opts.userDid);
      if (subject.labels?.length) {
        for (const label of subject.labels) {
          acc.addLabel("content", label, opts);
        }
      }
      acc.addHidden(checkHiddenPost(subject, opts.prefs.hiddenPosts));
      if (!acc.isMe) {
        acc.addMutedWord(checkMutedWords(subject, opts.prefs.mutedWords));
      }
      let embedAcc;
      if (subject.embed) {
        if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
          embedAcc = decideQuotedPost(subject.embed.record, opts);
        } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
          embedAcc = decideQuotedPost(subject.embed.record.record, opts);
        } else if (client_1.AppBskyEmbedRecord.isViewBlocked(subject.embed.record)) {
          embedAcc = decideBlockedQuotedPost(subject.embed.record, opts);
        } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewBlocked(subject.embed.record.record)) {
          embedAcc = decideBlockedQuotedPost(subject.embed.record.record, opts);
        }
      }
      return decision_1.ModerationDecision.merge(acc, embedAcc?.downgrade(), (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
    }
    function decideQuotedPost(subject, opts) {
      const acc = new decision_1.ModerationDecision();
      acc.setDid(subject.author.did);
      acc.setIsMe(subject.author.did === opts.userDid);
      if (subject.labels?.length) {
        for (const label of subject.labels) {
          acc.addLabel("content", label, opts);
        }
      }
      return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.author, opts), (0, profile_1.decideProfile)(subject.author, opts));
    }
    function decideBlockedQuotedPost(subject, opts) {
      const acc = new decision_1.ModerationDecision();
      acc.setDid(subject.author.did);
      acc.setIsMe(subject.author.did === opts.userDid);
      if (subject.author.viewer?.muted) {
        if (subject.author.viewer?.mutedByList) {
          acc.addMutedByList(subject.author.viewer?.mutedByList);
        } else {
          acc.addMuted(subject.author.viewer?.muted);
        }
      }
      if (subject.author.viewer?.blocking) {
        if (subject.author.viewer?.blockingByList) {
          acc.addBlockingByList(subject.author.viewer?.blockingByList);
        } else {
          acc.addBlocking(subject.author.viewer?.blocking);
        }
      }
      acc.addBlockedBy(subject.author.viewer?.blockedBy);
      return acc;
    }
    function checkHiddenPost(subject, hiddenPosts) {
      if (!hiddenPosts?.length) {
        return false;
      }
      if (hiddenPosts.includes(subject.uri)) {
        return true;
      }
      if (subject.embed) {
        if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record) && hiddenPosts.includes(subject.embed.record.uri)) {
          return true;
        }
        if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record) && hiddenPosts.includes(subject.embed.record.record.uri)) {
          return true;
        }
      }
      return false;
    }
    function checkMutedWords(subject, mutedWords) {
      if (!mutedWords?.length) {
        return false;
      }
      const postAuthor = subject.author;
      if (client_1.AppBskyFeedPost.isRecord(subject.record)) {
        if ((0, mutewords_1.hasMutedWord)({
          mutedWords,
          text: subject.record.text,
          facets: subject.record.facets,
          outlineTags: subject.record.tags,
          languages: subject.record.langs,
          actor: postAuthor
        })) {
          return true;
        }
        if (subject.record.embed && client_1.AppBskyEmbedImages.isMain(subject.record.embed)) {
          for (const image of subject.record.embed.images) {
            if ((0, mutewords_1.hasMutedWord)({
              mutedWords,
              text: image.alt,
              languages: subject.record.langs,
              actor: postAuthor
            })) {
              return true;
            }
          }
        }
      }
      if (subject.embed) {
        if (client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record)) {
          if (client_1.AppBskyFeedPost.isRecord(subject.embed.record.value)) {
            const embeddedPost = subject.embed.record.value;
            const embedAuthor = subject.embed.record.author;
            if ((0, mutewords_1.hasMutedWord)({
              mutedWords,
              text: embeddedPost.text,
              facets: embeddedPost.facets,
              outlineTags: embeddedPost.tags,
              languages: embeddedPost.langs,
              actor: embedAuthor
            })) {
              return true;
            }
            if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed)) {
              for (const image of embeddedPost.embed.images) {
                if ((0, mutewords_1.hasMutedWord)({
                  mutedWords,
                  text: image.alt,
                  languages: embeddedPost.langs,
                  actor: embedAuthor
                })) {
                  return true;
                }
              }
            }
            if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed)) {
              const { external } = embeddedPost.embed;
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: external.title + " " + external.description,
                languages: [],
                actor: embedAuthor
              })) {
                return true;
              }
            }
            if (client_1.AppBskyEmbedRecordWithMedia.isMain(embeddedPost.embed)) {
              if (client_1.AppBskyEmbedExternal.isMain(embeddedPost.embed.media)) {
                const { external } = embeddedPost.embed.media;
                if ((0, mutewords_1.hasMutedWord)({
                  mutedWords,
                  text: external.title + " " + external.description,
                  languages: [],
                  actor: embedAuthor
                })) {
                  return true;
                }
              }
              if (client_1.AppBskyEmbedImages.isMain(embeddedPost.embed.media)) {
                for (const image of embeddedPost.embed.media.images) {
                  if ((0, mutewords_1.hasMutedWord)({
                    mutedWords,
                    text: image.alt,
                    languages: client_1.AppBskyFeedPost.isRecord(embeddedPost.record) ? embeddedPost.langs : [],
                    actor: embedAuthor
                  })) {
                    return true;
                  }
                }
              }
            }
          }
        } else if (client_1.AppBskyEmbedExternal.isView(subject.embed)) {
          const { external } = subject.embed;
          if ((0, mutewords_1.hasMutedWord)({
            mutedWords,
            text: external.title + " " + external.description,
            languages: [],
            actor: postAuthor
          })) {
            return true;
          }
        } else if (client_1.AppBskyEmbedRecordWithMedia.isView(subject.embed) && client_1.AppBskyEmbedRecord.isViewRecord(subject.embed.record.record)) {
          const embedAuthor = subject.embed.record.record.author;
          if (client_1.AppBskyFeedPost.isRecord(subject.embed.record.record.value)) {
            const post = subject.embed.record.record.value;
            if ((0, mutewords_1.hasMutedWord)({
              mutedWords,
              text: post.text,
              facets: post.facets,
              outlineTags: post.tags,
              languages: post.langs,
              actor: embedAuthor
            })) {
              return true;
            }
          }
          if (client_1.AppBskyEmbedImages.isView(subject.embed.media)) {
            for (const image of subject.embed.media.images) {
              if ((0, mutewords_1.hasMutedWord)({
                mutedWords,
                text: image.alt,
                languages: client_1.AppBskyFeedPost.isRecord(subject.record) ? subject.record.langs : [],
                actor: embedAuthor
              })) {
                return true;
              }
            }
          }
          if (client_1.AppBskyEmbedExternal.isView(subject.embed.media)) {
            const { external } = subject.embed.media;
            if ((0, mutewords_1.hasMutedWord)({
              mutedWords,
              text: external.title + " " + external.description,
              languages: [],
              actor: embedAuthor
            })) {
              return true;
            }
          }
        }
      }
      return false;
    }
  }
});

// node_modules/@atproto/api/dist/moderation/subjects/feed-generator.js
var require_feed_generator = __commonJS({
  "node_modules/@atproto/api/dist/moderation/subjects/feed-generator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decideFeedGenerator = decideFeedGenerator;
    var decision_1 = require_decision();
    var account_1 = require_account();
    var profile_1 = require_profile2();
    function decideFeedGenerator(subject, opts) {
      const acc = new decision_1.ModerationDecision();
      acc.setDid(subject.creator.did);
      acc.setIsMe(subject.creator.did === opts.userDid);
      if (subject.labels?.length) {
        for (const label of subject.labels) {
          acc.addLabel("content", label, opts);
        }
      }
      return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(subject.creator, opts), (0, profile_1.decideProfile)(subject.creator, opts));
    }
  }
});

// node_modules/@atproto/api/dist/moderation/subjects/user-list.js
var require_user_list = __commonJS({
  "node_modules/@atproto/api/dist/moderation/subjects/user-list.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decideUserList = decideUserList;
    var syntax_1 = require_dist12();
    var decision_1 = require_decision();
    var account_1 = require_account();
    var profile_1 = require_profile2();
    function decideUserList(subject, opts) {
      const acc = new decision_1.ModerationDecision();
      const creator = isProfile(subject.creator) ? subject.creator : void 0;
      if (creator) {
        acc.setDid(creator.did);
        acc.setIsMe(creator.did === opts.userDid);
        if (subject.labels?.length) {
          for (const label of subject.labels) {
            acc.addLabel("content", label, opts);
          }
        }
        return decision_1.ModerationDecision.merge(acc, (0, account_1.decideAccount)(creator, opts), (0, profile_1.decideProfile)(creator, opts));
      }
      const creatorDid = new syntax_1.AtUri(subject.uri).hostname;
      acc.setDid(creatorDid);
      acc.setIsMe(creatorDid === opts.userDid);
      if (subject.labels?.length) {
        for (const label of subject.labels) {
          acc.addLabel("content", label, opts);
        }
      }
      return acc;
    }
    function isProfile(v2) {
      return v2 && typeof v2 === "object" && "did" in v2;
    }
  }
});

// node_modules/@atproto/api/dist/moderation/util.js
var require_util18 = __commonJS({
  "node_modules/@atproto/api/dist/moderation/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isQuotedPost = isQuotedPost;
    exports.isQuotedPostWithMedia = isQuotedPostWithMedia;
    exports.interpretLabelValueDefinition = interpretLabelValueDefinition;
    exports.interpretLabelValueDefinitions = interpretLabelValueDefinitions;
    var client_1 = require_client2();
    function isQuotedPost(embed) {
      return Boolean(embed && client_1.AppBskyEmbedRecord.isView(embed));
    }
    function isQuotedPostWithMedia(embed) {
      return Boolean(embed && client_1.AppBskyEmbedRecordWithMedia.isView(embed));
    }
    function interpretLabelValueDefinition(def, definedBy) {
      const behaviors = {
        account: {},
        profile: {},
        content: {}
      };
      const alertOrInform = def.severity === "alert" ? "alert" : def.severity === "inform" ? "inform" : void 0;
      if (def.blurs === "content") {
        behaviors.account.profileList = alertOrInform;
        behaviors.account.profileView = alertOrInform;
        behaviors.account.contentList = "blur";
        behaviors.account.contentView = def.adultOnly ? "blur" : alertOrInform;
        behaviors.profile.profileList = alertOrInform;
        behaviors.profile.profileView = alertOrInform;
        behaviors.content.contentList = "blur";
        behaviors.content.contentView = def.adultOnly ? "blur" : alertOrInform;
      } else if (def.blurs === "media") {
        behaviors.account.profileList = alertOrInform;
        behaviors.account.profileView = alertOrInform;
        behaviors.account.avatar = "blur";
        behaviors.account.banner = "blur";
        behaviors.profile.profileList = alertOrInform;
        behaviors.profile.profileView = alertOrInform;
        behaviors.profile.avatar = "blur";
        behaviors.profile.banner = "blur";
        behaviors.content.contentMedia = "blur";
      } else if (def.blurs === "none") {
        behaviors.account.profileList = alertOrInform;
        behaviors.account.profileView = alertOrInform;
        behaviors.account.contentList = alertOrInform;
        behaviors.account.contentView = alertOrInform;
        behaviors.profile.profileList = alertOrInform;
        behaviors.profile.profileView = alertOrInform;
        behaviors.content.contentList = alertOrInform;
        behaviors.content.contentView = alertOrInform;
      }
      let defaultSetting = "warn";
      if (def.defaultSetting === "hide" || def.defaultSetting === "ignore") {
        defaultSetting = def.defaultSetting;
      }
      const flags = ["no-self"];
      if (def.adultOnly) {
        flags.push("adult");
      }
      return {
        ...def,
        definedBy,
        configurable: true,
        defaultSetting,
        flags,
        behaviors
      };
    }
    function interpretLabelValueDefinitions(labelerView) {
      return (labelerView.policies?.labelValueDefinitions || []).filter((labelValDef) => client_1.ComAtprotoLabelDefs.validateLabelValueDefinition(labelValDef).success).map((labelValDef) => interpretLabelValueDefinition(labelValDef, labelerView.creator.did));
    }
  }
});

// node_modules/@atproto/api/dist/moderation/index.js
var require_moderation = __commonJS({
  "node_modules/@atproto/api/dist/moderation/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.interpretLabelValueDefinitions = exports.interpretLabelValueDefinition = exports.hasMutedWord = exports.ModerationDecision = exports.ModerationUI = void 0;
    exports.moderateProfile = moderateProfile;
    exports.moderatePost = moderatePost;
    exports.moderateNotification = moderateNotification;
    exports.moderateFeedGenerator = moderateFeedGenerator;
    exports.moderateUserList = moderateUserList;
    var account_1 = require_account();
    var profile_1 = require_profile2();
    var notification_1 = require_notification();
    var post_1 = require_post2();
    var feed_generator_1 = require_feed_generator();
    var user_list_1 = require_user_list();
    var decision_1 = require_decision();
    var ui_1 = require_ui();
    Object.defineProperty(exports, "ModerationUI", { enumerable: true, get: function() {
      return ui_1.ModerationUI;
    } });
    var decision_2 = require_decision();
    Object.defineProperty(exports, "ModerationDecision", { enumerable: true, get: function() {
      return decision_2.ModerationDecision;
    } });
    var mutewords_1 = require_mutewords();
    Object.defineProperty(exports, "hasMutedWord", { enumerable: true, get: function() {
      return mutewords_1.hasMutedWord;
    } });
    var util_1 = require_util18();
    Object.defineProperty(exports, "interpretLabelValueDefinition", { enumerable: true, get: function() {
      return util_1.interpretLabelValueDefinition;
    } });
    Object.defineProperty(exports, "interpretLabelValueDefinitions", { enumerable: true, get: function() {
      return util_1.interpretLabelValueDefinitions;
    } });
    function moderateProfile(subject, opts) {
      return decision_1.ModerationDecision.merge((0, account_1.decideAccount)(subject, opts), (0, profile_1.decideProfile)(subject, opts));
    }
    function moderatePost(subject, opts) {
      return (0, post_1.decidePost)(subject, opts);
    }
    function moderateNotification(subject, opts) {
      return (0, notification_1.decideNotification)(subject, opts);
    }
    function moderateFeedGenerator(subject, opts) {
      return (0, feed_generator_1.decideFeedGenerator)(subject, opts);
    }
    function moderateUserList(subject, opts) {
      return (0, user_list_1.decideUserList)(subject, opts);
    }
  }
});

// node_modules/@atproto/api/dist/mocker.js
var require_mocker = __commonJS({
  "node_modules/@atproto/api/dist/mocker.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mock = void 0;
    var FAKE_CID = "bafyreiclp443lavogvhj3d2ob2cxbfuscni2k5jk7bebjzg7khl3esabwq";
    exports.mock = {
      post({ text, facets, reply, embed }) {
        return {
          $type: "app.bsky.feed.post",
          text,
          facets,
          reply,
          embed,
          langs: ["en"],
          createdAt: (/* @__PURE__ */ new Date()).toISOString()
        };
      },
      postView({ record, author, embed, replyCount, repostCount, likeCount, viewer, labels }) {
        return {
          $type: "app.bsky.feed.defs#postView",
          uri: `at://${author.did}/app.bsky.feed.post/fake`,
          cid: FAKE_CID,
          author,
          record,
          embed,
          replyCount,
          repostCount,
          likeCount,
          indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
          viewer,
          labels
        };
      },
      embedRecordView({ record, author, labels }) {
        return {
          $type: "app.bsky.embed.record#view",
          record: {
            $type: "app.bsky.embed.record#viewRecord",
            uri: `at://${author.did}/app.bsky.feed.post/fake`,
            cid: FAKE_CID,
            author,
            value: record,
            labels,
            indexedAt: (/* @__PURE__ */ new Date()).toISOString()
          }
        };
      },
      profileViewBasic({ handle, displayName, description, viewer, labels }) {
        return {
          did: `did:web:${handle}`,
          handle,
          displayName,
          description,
          // technically not in ProfileViewBasic but useful in some cases
          viewer,
          labels
        };
      },
      actorViewerState({ muted, mutedByList, blockedBy, blocking, blockingByList, following, followedBy }) {
        return {
          muted,
          mutedByList,
          blockedBy,
          blocking,
          blockingByList,
          following,
          followedBy
        };
      },
      listViewBasic({ name: name2 }) {
        return {
          uri: "at://did:plc:fake/app.bsky.graph.list/fake",
          cid: FAKE_CID,
          name: name2,
          purpose: "app.bsky.graph.defs#modlist",
          indexedAt: (/* @__PURE__ */ new Date()).toISOString()
        };
      },
      replyNotification({ author, record, labels }) {
        return {
          uri: `at://${author.did}/app.bsky.feed.post/fake`,
          cid: FAKE_CID,
          author,
          reason: "reply",
          reasonSubject: `at://${author.did}/app.bsky.feed.post/fake-parent`,
          record,
          isRead: false,
          indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
          labels
        };
      },
      followNotification({ author, subjectDid, labels }) {
        return {
          uri: `at://${author.did}/app.bsky.graph.follow/fake`,
          cid: FAKE_CID,
          author,
          reason: "follow",
          record: {
            $type: "app.bsky.graph.follow",
            createdAt: (/* @__PURE__ */ new Date()).toISOString(),
            subject: subjectDid
          },
          isRead: false,
          indexedAt: (/* @__PURE__ */ new Date()).toISOString(),
          labels
        };
      },
      label({ val, uri, src: src2 }) {
        return {
          src: src2 || "did:plc:fake-labeler",
          uri,
          val,
          cts: (/* @__PURE__ */ new Date()).toISOString()
        };
      }
    };
  }
});

// node_modules/await-lock/build/AwaitLock.js
var require_AwaitLock = __commonJS({
  "node_modules/await-lock/build/AwaitLock.js"(exports) {
    "use strict";
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f5) {
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f5 : kind === "a" ? f5.call(receiver) : f5 ? f5.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f5) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f5.call(receiver, value) : f5 ? f5.value = value : state.set(receiver, value), value;
    };
    var _AwaitLock_acquired;
    var _AwaitLock_waitingResolvers;
    Object.defineProperty(exports, "__esModule", { value: true });
    var AwaitLock = class {
      constructor() {
        _AwaitLock_acquired.set(this, false);
        _AwaitLock_waitingResolvers.set(this, /* @__PURE__ */ new Set());
      }
      /**
       * Whether the lock is currently acquired or not. Accessing this property does not affect the
       * status of the lock.
       */
      get acquired() {
        return __classPrivateFieldGet(this, _AwaitLock_acquired, "f");
      }
      /**
       * Acquires the lock, waiting if necessary for it to become free if it is already locked. The
       * returned promise is fulfilled once the lock is acquired.
       *
       * A timeout (in milliseconds) may be optionally provided. If the lock cannot be acquired before
       * the timeout elapses, the returned promise is rejected with an error. The behavior of invalid
       * timeout values depends on how `setTimeout` handles those values.
       *
       * After acquiring the lock, you **must** call `release` when you are done with it.
       */
      acquireAsync({ timeout } = {}) {
        if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
          __classPrivateFieldSet(this, _AwaitLock_acquired, true, "f");
          return Promise.resolve();
        }
        if (timeout == null) {
          return new Promise((resolve) => {
            __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").add(resolve);
          });
        }
        let resolver;
        let timer;
        return Promise.race([
          new Promise((resolve) => {
            resolver = () => {
              clearTimeout(timer);
              resolve();
            };
            __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").add(resolver);
          }),
          new Promise((_2, reject) => {
            timer = setTimeout(() => {
              __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").delete(resolver);
              reject(new Error(`Timed out waiting for lock`));
            }, timeout);
          })
        ]);
      }
      /**
       * Acquires the lock if it is free and otherwise returns immediately without waiting. Returns
       * `true` if the lock was free and is now acquired, and `false` otherwise.
       *
       * This method differs from calling `acquireAsync` with a zero-millisecond timeout in that it runs
       * synchronously without waiting for the JavaScript task queue.
       */
      tryAcquire() {
        if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
          __classPrivateFieldSet(this, _AwaitLock_acquired, true, "f");
          return true;
        }
        return false;
      }
      /**
       * Releases the lock and gives it to the next waiting acquirer, if there is one. Each acquirer
       * must release the lock exactly once.
       */
      release() {
        if (!__classPrivateFieldGet(this, _AwaitLock_acquired, "f")) {
          throw new Error(`Cannot release an unacquired lock`);
        }
        if (__classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").size > 0) {
          const [resolve] = __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f");
          __classPrivateFieldGet(this, _AwaitLock_waitingResolvers, "f").delete(resolve);
          resolve();
        } else {
          __classPrivateFieldSet(this, _AwaitLock_acquired, false, "f");
        }
      }
    };
    exports.default = AwaitLock;
    _AwaitLock_acquired = /* @__PURE__ */ new WeakMap(), _AwaitLock_waitingResolvers = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/@atproto/api/dist/agent.js
var require_agent = __commonJS({
  "node_modules/@atproto/api/dist/agent.js"(exports) {
    "use strict";
    var __classPrivateFieldGet = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f5) {
      if (kind === "a" && !f5) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f5 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f5 : kind === "a" ? f5.call(receiver) : f5 ? f5.value : state.get(receiver);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var _Agent_prefsLock;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Agent = void 0;
    var common_web_1 = require_dist16();
    var syntax_1 = require_dist12();
    var xrpc_1 = require_dist19();
    var await_lock_1 = __importDefault(require_AwaitLock());
    var index_1 = require_client2();
    var lexicons_1 = require_lexicons2();
    var const_1 = require_const();
    var moderation_1 = require_moderation();
    var labels_1 = require_labels();
    var util_1 = require_util14();
    var FEED_VIEW_PREF_DEFAULTS = {
      hideReplies: false,
      hideRepliesByUnfollowed: true,
      hideRepliesByLikeCount: 0,
      hideReposts: false,
      hideQuotePosts: false
    };
    var THREAD_VIEW_PREF_DEFAULTS = {
      sort: "hotness",
      prioritizeFollowedUsers: true
    };
    var Agent2 = class _Agent extends xrpc_1.XrpcClient {
      /**
       * Configures the Agent (or its sub classes) globally.
       */
      static configure(opts) {
        if (opts.appLabelers) {
          this.appLabelers = opts.appLabelers.map(util_1.asDid);
        }
      }
      /** @deprecated use `this` instead */
      get xrpc() {
        return this;
      }
      constructor(options) {
        const sessionManager = typeof options === "string" || options instanceof URL ? {
          did: void 0,
          fetchHandler: (0, xrpc_1.buildFetchHandler)(options)
        } : options;
        super((url, init) => {
          const headers = new Headers(init?.headers);
          if (this.proxy && !headers.has("atproto-proxy")) {
            headers.set("atproto-proxy", this.proxy);
          }
          headers.set("atproto-accept-labelers", [
            ...this.appLabelers.map((l5) => `${l5};redact`),
            ...this.labelers,
            headers.get("atproto-accept-labelers")?.trim()
          ].filter(Boolean).join(", "));
          return this.sessionManager.fetchHandler(url, { ...init, headers });
        }, lexicons_1.schemas);
        Object.defineProperty(this, "com", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new index_1.ComNS(this)
        });
        Object.defineProperty(this, "app", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new index_1.AppNS(this)
        });
        Object.defineProperty(this, "chat", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new index_1.ChatNS(this)
        });
        Object.defineProperty(this, "tools", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new index_1.ToolsNS(this)
        });
        Object.defineProperty(this, "sessionManager", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "labelers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
        Object.defineProperty(this, "proxy", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "uploadBlob", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (data, opts) => this.com.atproto.repo.uploadBlob(data, opts)
        });
        Object.defineProperty(this, "resolveHandle", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.com.atproto.identity.resolveHandle(params, opts)
        });
        Object.defineProperty(this, "updateHandle", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (data, opts) => this.com.atproto.identity.updateHandle(data, opts)
        });
        Object.defineProperty(this, "createModerationReport", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (data, opts) => this.com.atproto.moderation.createReport(data, opts)
        });
        Object.defineProperty(this, "getTimeline", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.feed.getTimeline(params, opts)
        });
        Object.defineProperty(this, "getAuthorFeed", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.feed.getAuthorFeed(params, opts)
        });
        Object.defineProperty(this, "getActorLikes", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.feed.getActorLikes(params, opts)
        });
        Object.defineProperty(this, "getPostThread", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.feed.getPostThread(params, opts)
        });
        Object.defineProperty(this, "getPost", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params) => this.app.bsky.feed.post.get(params)
        });
        Object.defineProperty(this, "getPosts", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.feed.getPosts(params, opts)
        });
        Object.defineProperty(this, "getLikes", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.feed.getLikes(params, opts)
        });
        Object.defineProperty(this, "getRepostedBy", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.feed.getRepostedBy(params, opts)
        });
        Object.defineProperty(this, "getFollows", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.graph.getFollows(params, opts)
        });
        Object.defineProperty(this, "getFollowers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.graph.getFollowers(params, opts)
        });
        Object.defineProperty(this, "getProfile", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.actor.getProfile(params, opts)
        });
        Object.defineProperty(this, "getProfiles", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.actor.getProfiles(params, opts)
        });
        Object.defineProperty(this, "getSuggestions", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.actor.getSuggestions(params, opts)
        });
        Object.defineProperty(this, "searchActors", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.actor.searchActors(params, opts)
        });
        Object.defineProperty(this, "searchActorsTypeahead", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.actor.searchActorsTypeahead(params, opts)
        });
        Object.defineProperty(this, "listNotifications", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.notification.listNotifications(params, opts)
        });
        Object.defineProperty(this, "countUnreadNotifications", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.notification.getUnreadCount(params, opts)
        });
        Object.defineProperty(this, "getLabelers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (params, opts) => this.app.bsky.labeler.getServices(params, opts)
        });
        _Agent_prefsLock.set(
          this,
          new await_lock_1.default()
          /**
           * This function updates the preferences of a user and allows for a callback function to be executed
           * before the update.
           * @param cb - cb is a callback function that takes in a single parameter of type
           * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
           * update the preferences of the user. The function is called with the current preferences as an
           * argument and if the callback returns false, the preferences are not updated.
           */
        );
        this.sessionManager = sessionManager;
      }
      //#region Cloning utilities
      clone() {
        return this.copyInto(new _Agent(this.sessionManager));
      }
      copyInto(inst) {
        inst.configureLabelers(this.labelers);
        inst.configureProxy(this.proxy ?? null);
        inst.clearHeaders();
        for (const [key, value] of this.headers)
          inst.setHeader(key, value);
        return inst;
      }
      withProxy(serviceType, did) {
        const inst = this.clone();
        inst.configureProxy(`${(0, util_1.asDid)(did)}#${serviceType}`);
        return inst;
      }
      //#endregion
      //#region ATPROTO labelers configuration utilities
      /**
       * The labelers statically configured on the class of the current instance.
       */
      get appLabelers() {
        return this.constructor.appLabelers;
      }
      configureLabelers(labelerDids) {
        this.labelers = labelerDids.map(util_1.asDid);
      }
      /** @deprecated use {@link configureLabelers} instead */
      configureLabelersHeader(labelerDids) {
        this.configureLabelers(labelerDids.filter(util_1.isDid));
      }
      configureProxy(value) {
        if (value === null)
          this.proxy = void 0;
        else if ((0, util_1.isDid)(value))
          this.proxy = value;
        else
          throw new TypeError("Invalid proxy DID");
      }
      /** @deprecated use {@link configureProxy} instead */
      configureProxyHeader(serviceType, did) {
        if ((0, util_1.isDid)(did))
          this.configureProxy(`${did}#${serviceType}`);
      }
      //#endregion
      //#region Session management
      /**
       * Get the authenticated user's DID, if any.
       */
      get did() {
        return this.sessionManager.did;
      }
      /** @deprecated Use {@link Agent.assertDid} instead */
      get accountDid() {
        return this.assertDid;
      }
      /**
       * Get the authenticated user's DID, or throw an error if not authenticated.
       */
      get assertDid() {
        this.assertAuthenticated();
        return this.did;
      }
      /**
       * Assert that the user is authenticated.
       */
      assertAuthenticated() {
        if (!this.did)
          throw new Error("Not logged in");
      }
      //#endregion
      /** @deprecated use "this" instead */
      get api() {
        return this;
      }
      async getLabelDefinitions(prefs) {
        const dids = [...this.appLabelers];
        if (isBskyPrefs(prefs)) {
          dids.push(...prefs.moderationPrefs.labelers.map((l5) => l5.did));
        } else if (isModPrefs(prefs)) {
          dids.push(...prefs.labelers.map((l5) => l5.did));
        } else {
          dids.push(...prefs);
        }
        const labelers = await this.getLabelers({
          dids,
          detailed: true
        });
        const labelDefs = {};
        if (labelers.data) {
          for (const labeler of labelers.data.views) {
            labelDefs[labeler.creator.did] = (0, moderation_1.interpretLabelValueDefinitions)(labeler);
          }
        }
        return labelDefs;
      }
      async post(record) {
        record.createdAt || (record.createdAt = (/* @__PURE__ */ new Date()).toISOString());
        return this.app.bsky.feed.post.create({ repo: this.accountDid }, record);
      }
      async deletePost(postUri) {
        this.assertAuthenticated();
        const postUrip = new syntax_1.AtUri(postUri);
        return this.app.bsky.feed.post.delete({
          repo: postUrip.hostname,
          rkey: postUrip.rkey
        });
      }
      async like(uri, cid) {
        return this.app.bsky.feed.like.create({ repo: this.accountDid }, {
          subject: { uri, cid },
          createdAt: (/* @__PURE__ */ new Date()).toISOString()
        });
      }
      async deleteLike(likeUri) {
        this.assertAuthenticated();
        const likeUrip = new syntax_1.AtUri(likeUri);
        return this.app.bsky.feed.like.delete({
          repo: likeUrip.hostname,
          rkey: likeUrip.rkey
        });
      }
      async repost(uri, cid) {
        return this.app.bsky.feed.repost.create({ repo: this.accountDid }, {
          subject: { uri, cid },
          createdAt: (/* @__PURE__ */ new Date()).toISOString()
        });
      }
      async deleteRepost(repostUri) {
        this.assertAuthenticated();
        const repostUrip = new syntax_1.AtUri(repostUri);
        return this.app.bsky.feed.repost.delete({
          repo: repostUrip.hostname,
          rkey: repostUrip.rkey
        });
      }
      async follow(subjectDid) {
        return this.app.bsky.graph.follow.create({ repo: this.accountDid }, {
          subject: subjectDid,
          createdAt: (/* @__PURE__ */ new Date()).toISOString()
        });
      }
      async deleteFollow(followUri) {
        this.assertAuthenticated();
        const followUrip = new syntax_1.AtUri(followUri);
        return this.app.bsky.graph.follow.delete({
          repo: followUrip.hostname,
          rkey: followUrip.rkey
        });
      }
      async upsertProfile(updateFn) {
        const repo = this.accountDid;
        let retriesRemaining = 5;
        while (retriesRemaining >= 0) {
          const existing = await this.com.atproto.repo.getRecord({
            repo,
            collection: "app.bsky.actor.profile",
            rkey: "self"
          }).catch((_2) => void 0);
          const updated = await updateFn(existing?.data.value);
          if (updated) {
            updated.$type = "app.bsky.actor.profile";
          }
          const validation = index_1.AppBskyActorProfile.validateRecord(updated);
          if (!validation.success) {
            throw validation.error;
          }
          try {
            await this.com.atproto.repo.putRecord({
              repo,
              collection: "app.bsky.actor.profile",
              rkey: "self",
              record: updated,
              swapRecord: existing?.data.cid || null
            });
          } catch (e12) {
            if (retriesRemaining > 0 && e12 instanceof index_1.ComAtprotoRepoPutRecord.InvalidSwapError) {
              retriesRemaining--;
              continue;
            } else {
              throw e12;
            }
          }
          break;
        }
      }
      async mute(actor) {
        return this.app.bsky.graph.muteActor({ actor });
      }
      async unmute(actor) {
        return this.app.bsky.graph.unmuteActor({ actor });
      }
      async muteModList(uri) {
        return this.app.bsky.graph.muteActorList({ list: uri });
      }
      async unmuteModList(uri) {
        return this.app.bsky.graph.unmuteActorList({ list: uri });
      }
      async blockModList(uri) {
        return this.app.bsky.graph.listblock.create({ repo: this.accountDid }, {
          subject: uri,
          createdAt: (/* @__PURE__ */ new Date()).toISOString()
        });
      }
      async unblockModList(uri) {
        const repo = this.accountDid;
        const listInfo = await this.app.bsky.graph.getList({
          list: uri,
          limit: 1
        });
        const blocked = listInfo.data.list.viewer?.blocked;
        if (blocked) {
          const { rkey } = new syntax_1.AtUri(blocked);
          return this.app.bsky.graph.listblock.delete({
            repo,
            rkey
          });
        }
      }
      async updateSeenNotifications(seenAt = (/* @__PURE__ */ new Date()).toISOString()) {
        return this.app.bsky.notification.updateSeen({ seenAt });
      }
      async getPreferences() {
        const prefs = {
          feeds: {
            saved: void 0,
            pinned: void 0
          },
          // @ts-ignore populating below
          savedFeeds: void 0,
          feedViewPrefs: {
            home: {
              ...FEED_VIEW_PREF_DEFAULTS
            }
          },
          threadViewPrefs: { ...THREAD_VIEW_PREF_DEFAULTS },
          moderationPrefs: {
            adultContentEnabled: false,
            labels: { ...labels_1.DEFAULT_LABEL_SETTINGS },
            labelers: this.appLabelers.map((did) => ({
              did,
              labels: {}
            })),
            mutedWords: [],
            hiddenPosts: []
          },
          birthDate: void 0,
          interests: {
            tags: []
          },
          bskyAppState: {
            queuedNudges: [],
            activeProgressGuide: void 0,
            nuxs: []
          }
        };
        const res = await this.app.bsky.actor.getPreferences({});
        const labelPrefs = [];
        for (const pref of res.data.preferences) {
          if (index_1.AppBskyActorDefs.isAdultContentPref(pref) && index_1.AppBskyActorDefs.validateAdultContentPref(pref).success) {
            prefs.moderationPrefs.adultContentEnabled = pref.enabled;
          } else if (index_1.AppBskyActorDefs.isContentLabelPref(pref) && index_1.AppBskyActorDefs.validateContentLabelPref(pref).success) {
            const adjustedPref = adjustLegacyContentLabelPref(pref);
            labelPrefs.push(adjustedPref);
          } else if (index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success) {
            prefs.moderationPrefs.labelers = this.appLabelers.map((did) => ({ did, labels: {} })).concat(pref.labelers.map((labeler) => ({
              ...labeler,
              labels: {}
            })));
          } else if (index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPrefV2(pref).success) {
            prefs.savedFeeds = pref.items;
          } else if (index_1.AppBskyActorDefs.isSavedFeedsPref(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success) {
            prefs.feeds.saved = pref.saved;
            prefs.feeds.pinned = pref.pinned;
          } else if (index_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && index_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success) {
            if (pref.birthDate) {
              prefs.birthDate = new Date(pref.birthDate);
            }
          } else if (index_1.AppBskyActorDefs.isFeedViewPref(pref) && index_1.AppBskyActorDefs.validateFeedViewPref(pref).success) {
            const { $type, feed, ...v2 } = pref;
            prefs.feedViewPrefs[pref.feed] = { ...FEED_VIEW_PREF_DEFAULTS, ...v2 };
          } else if (index_1.AppBskyActorDefs.isThreadViewPref(pref) && index_1.AppBskyActorDefs.validateThreadViewPref(pref).success) {
            const { $type, ...v2 } = pref;
            prefs.threadViewPrefs = { ...prefs.threadViewPrefs, ...v2 };
          } else if (index_1.AppBskyActorDefs.isInterestsPref(pref) && index_1.AppBskyActorDefs.validateInterestsPref(pref).success) {
            const { $type, ...v2 } = pref;
            prefs.interests = { ...prefs.interests, ...v2 };
          } else if (index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success) {
            const { $type, ...v2 } = pref;
            prefs.moderationPrefs.mutedWords = v2.items;
            if (prefs.moderationPrefs.mutedWords.length) {
              prefs.moderationPrefs.mutedWords = prefs.moderationPrefs.mutedWords.map((word) => {
                word.actorTarget = word.actorTarget || "all";
                return word;
              });
            }
          } else if (index_1.AppBskyActorDefs.isHiddenPostsPref(pref) && index_1.AppBskyActorDefs.validateHiddenPostsPref(pref).success) {
            const { $type, ...v2 } = pref;
            prefs.moderationPrefs.hiddenPosts = v2.items;
          } else if (index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success) {
            const { $type, ...v2 } = pref;
            prefs.bskyAppState.queuedNudges = v2.queuedNudges || [];
            prefs.bskyAppState.activeProgressGuide = v2.activeProgressGuide;
            prefs.bskyAppState.nuxs = v2.nuxs || [];
          }
        }
        if (prefs.savedFeeds == null) {
          const { saved, pinned } = prefs.feeds;
          if (saved && pinned) {
            const uniqueMigratedSavedFeeds = /* @__PURE__ */ new Map();
            uniqueMigratedSavedFeeds.set("timeline", {
              id: common_web_1.TID.nextStr(),
              type: "timeline",
              value: "following",
              pinned: true
            });
            for (const uri of pinned) {
              const type = (0, util_1.getSavedFeedType)(uri);
              if (type === "unknown")
                continue;
              uniqueMigratedSavedFeeds.set(uri, {
                id: common_web_1.TID.nextStr(),
                type,
                value: uri,
                pinned: true
              });
            }
            for (const uri of saved) {
              if (!uniqueMigratedSavedFeeds.has(uri)) {
                const type = (0, util_1.getSavedFeedType)(uri);
                if (type === "unknown")
                  continue;
                uniqueMigratedSavedFeeds.set(uri, {
                  id: common_web_1.TID.nextStr(),
                  type,
                  value: uri,
                  pinned: false
                });
              }
            }
            prefs.savedFeeds = Array.from(uniqueMigratedSavedFeeds.values());
          } else {
            prefs.savedFeeds = [
              {
                id: common_web_1.TID.nextStr(),
                type: "timeline",
                value: "following",
                pinned: true
              }
            ];
          }
          await this.overwriteSavedFeeds(prefs.savedFeeds);
        }
        for (const pref of labelPrefs) {
          if (pref.labelerDid) {
            const labeler = prefs.moderationPrefs.labelers.find((labeler2) => labeler2.did === pref.labelerDid);
            if (!labeler)
              continue;
            labeler.labels[pref.label] = pref.visibility;
          } else {
            prefs.moderationPrefs.labels[pref.label] = pref.visibility;
          }
        }
        prefs.moderationPrefs.labels = remapLegacyLabels(prefs.moderationPrefs.labels);
        this.configureLabelers(prefsArrayToLabelerDids(res.data.preferences));
        return prefs;
      }
      async overwriteSavedFeeds(savedFeeds) {
        savedFeeds.forEach(util_1.validateSavedFeed);
        const uniqueSavedFeeds = /* @__PURE__ */ new Map();
        savedFeeds.forEach((feed) => {
          if (uniqueSavedFeeds.has(feed.id)) {
            uniqueSavedFeeds.delete(feed.id);
          }
          uniqueSavedFeeds.set(feed.id, feed);
        });
        return this.updateSavedFeedsV2Preferences(() => Array.from(uniqueSavedFeeds.values()));
      }
      async updateSavedFeeds(savedFeedsToUpdate) {
        savedFeedsToUpdate.map(util_1.validateSavedFeed);
        return this.updateSavedFeedsV2Preferences((savedFeeds) => {
          return savedFeeds.map((savedFeed) => {
            const updatedVersion = savedFeedsToUpdate.find((updated) => savedFeed.id === updated.id);
            if (updatedVersion) {
              return {
                ...savedFeed,
                // only update pinned
                pinned: updatedVersion.pinned
              };
            }
            return savedFeed;
          });
        });
      }
      async addSavedFeeds(savedFeeds) {
        const toSave = savedFeeds.map((f5) => ({
          ...f5,
          id: common_web_1.TID.nextStr()
        }));
        toSave.forEach(util_1.validateSavedFeed);
        return this.updateSavedFeedsV2Preferences((savedFeeds2) => [
          ...savedFeeds2,
          ...toSave
        ]);
      }
      async removeSavedFeeds(ids) {
        return this.updateSavedFeedsV2Preferences((savedFeeds) => [
          ...savedFeeds.filter((feed) => !ids.find((id3) => feed.id === id3))
        ]);
      }
      /**
       * @deprecated use `overwriteSavedFeeds`
       */
      async setSavedFeeds(saved, pinned) {
        return this.updateFeedPreferences(() => ({
          saved,
          pinned
        }));
      }
      /**
       * @deprecated use `addSavedFeeds`
       */
      async addSavedFeed(v2) {
        return this.updateFeedPreferences((saved, pinned) => ({
          saved: [...saved.filter((uri) => uri !== v2), v2],
          pinned
        }));
      }
      /**
       * @deprecated use `removeSavedFeeds`
       */
      async removeSavedFeed(v2) {
        return this.updateFeedPreferences((saved, pinned) => ({
          saved: saved.filter((uri) => uri !== v2),
          pinned: pinned.filter((uri) => uri !== v2)
        }));
      }
      /**
       * @deprecated use `addSavedFeeds` or `updateSavedFeeds`
       */
      async addPinnedFeed(v2) {
        return this.updateFeedPreferences((saved, pinned) => ({
          saved: [...saved.filter((uri) => uri !== v2), v2],
          pinned: [...pinned.filter((uri) => uri !== v2), v2]
        }));
      }
      /**
       * @deprecated use `updateSavedFeeds` or `removeSavedFeeds`
       */
      async removePinnedFeed(v2) {
        return this.updateFeedPreferences((saved, pinned) => ({
          saved,
          pinned: pinned.filter((uri) => uri !== v2)
        }));
      }
      async setAdultContentEnabled(v2) {
        await this.updatePreferences((prefs) => {
          let adultContentPref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isAdultContentPref(pref) && index_1.AppBskyActorDefs.validateAdultContentPref(pref).success);
          if (adultContentPref) {
            adultContentPref.enabled = v2;
          } else {
            adultContentPref = {
              $type: "app.bsky.actor.defs#adultContentPref",
              enabled: v2
            };
          }
          return prefs.filter((pref) => !index_1.AppBskyActorDefs.isAdultContentPref(pref)).concat([adultContentPref]);
        });
      }
      async setContentLabelPref(key, value, labelerDid) {
        if (labelerDid) {
          (0, syntax_1.ensureValidDid)(labelerDid);
        }
        await this.updatePreferences((prefs) => {
          let labelPref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isContentLabelPref(pref) && index_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === key && pref.labelerDid === labelerDid);
          let legacyLabelPref;
          if (labelPref) {
            labelPref.visibility = value;
          } else {
            labelPref = {
              $type: "app.bsky.actor.defs#contentLabelPref",
              label: key,
              labelerDid,
              visibility: value
            };
          }
          if (index_1.AppBskyActorDefs.isContentLabelPref(labelPref)) {
            if (!labelPref.labelerDid) {
              const legacyLabelValue = {
                "graphic-media": "gore",
                porn: "nsfw",
                sexual: "suggestive"
              }[labelPref.label];
              if (legacyLabelValue) {
                legacyLabelPref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isContentLabelPref(pref) && index_1.AppBskyActorDefs.validateContentLabelPref(pref).success && pref.label === legacyLabelValue && pref.labelerDid === void 0);
                if (legacyLabelPref) {
                  legacyLabelPref.visibility = value;
                } else {
                  legacyLabelPref = {
                    $type: "app.bsky.actor.defs#contentLabelPref",
                    label: legacyLabelValue,
                    labelerDid: void 0,
                    visibility: value
                  };
                }
              }
            }
          }
          return prefs.filter((pref) => !index_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === key && pref.labelerDid === labelerDid)).concat([labelPref]).filter((pref) => {
            if (!legacyLabelPref)
              return true;
            return !index_1.AppBskyActorDefs.isContentLabelPref(pref) || !(pref.label === legacyLabelPref.label && pref.labelerDid === void 0);
          }).concat(legacyLabelPref ? [legacyLabelPref] : []);
        });
      }
      async addLabeler(did) {
        const prefs = await this.updatePreferences((prefs2) => {
          let labelersPref = prefs2.findLast((pref) => index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success);
          if (!labelersPref) {
            labelersPref = {
              $type: "app.bsky.actor.defs#labelersPref",
              labelers: []
            };
          }
          if (index_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
            let labelerPrefItem = labelersPref.labelers.find((labeler) => labeler.did === did);
            if (!labelerPrefItem) {
              labelerPrefItem = {
                did
              };
              labelersPref.labelers.push(labelerPrefItem);
            }
          }
          return prefs2.filter((pref) => !index_1.AppBskyActorDefs.isLabelersPref(pref)).concat([labelersPref]);
        });
        this.configureLabelers(prefsArrayToLabelerDids(prefs));
      }
      async removeLabeler(did) {
        const prefs = await this.updatePreferences((prefs2) => {
          let labelersPref = prefs2.findLast((pref) => index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success);
          if (!labelersPref) {
            labelersPref = {
              $type: "app.bsky.actor.defs#labelersPref",
              labelers: []
            };
          }
          if (index_1.AppBskyActorDefs.isLabelersPref(labelersPref)) {
            labelersPref.labelers = labelersPref.labelers.filter((labeler) => labeler.did !== did);
          }
          return prefs2.filter((pref) => !index_1.AppBskyActorDefs.isLabelersPref(pref)).concat([labelersPref]);
        });
        this.configureLabelers(prefsArrayToLabelerDids(prefs));
      }
      async setPersonalDetails({ birthDate }) {
        birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate;
        await this.updatePreferences((prefs) => {
          let personalDetailsPref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isPersonalDetailsPref(pref) && index_1.AppBskyActorDefs.validatePersonalDetailsPref(pref).success);
          if (personalDetailsPref) {
            personalDetailsPref.birthDate = birthDate;
          } else {
            personalDetailsPref = {
              $type: "app.bsky.actor.defs#personalDetailsPref",
              birthDate
            };
          }
          return prefs.filter((pref) => !index_1.AppBskyActorDefs.isPersonalDetailsPref(pref)).concat([personalDetailsPref]);
        });
      }
      async setFeedViewPrefs(feed, pref) {
        await this.updatePreferences((prefs) => {
          const existing = prefs.findLast((pref2) => index_1.AppBskyActorDefs.isFeedViewPref(pref2) && index_1.AppBskyActorDefs.validateFeedViewPref(pref2).success && pref2.feed === feed);
          if (existing) {
            pref = { ...existing, ...pref };
          }
          return prefs.filter((p3) => !index_1.AppBskyActorDefs.isFeedViewPref(pref) || p3.feed !== feed).concat([{ ...pref, $type: "app.bsky.actor.defs#feedViewPref", feed }]);
        });
      }
      async setThreadViewPrefs(pref) {
        await this.updatePreferences((prefs) => {
          const existing = prefs.findLast((pref2) => index_1.AppBskyActorDefs.isThreadViewPref(pref2) && index_1.AppBskyActorDefs.validateThreadViewPref(pref2).success);
          if (existing) {
            pref = { ...existing, ...pref };
          }
          return prefs.filter((p3) => !index_1.AppBskyActorDefs.isThreadViewPref(p3)).concat([{ ...pref, $type: "app.bsky.actor.defs#threadViewPref" }]);
        });
      }
      async setInterestsPref(pref) {
        await this.updatePreferences((prefs) => {
          const existing = prefs.findLast((pref2) => index_1.AppBskyActorDefs.isInterestsPref(pref2) && index_1.AppBskyActorDefs.validateInterestsPref(pref2).success);
          if (existing) {
            pref = { ...existing, ...pref };
          }
          return prefs.filter((p3) => !index_1.AppBskyActorDefs.isInterestsPref(p3)).concat([{ ...pref, $type: "app.bsky.actor.defs#interestsPref" }]);
        });
      }
      /**
       * Add a muted word to user preferences.
       */
      async addMutedWord(mutedWord) {
        const sanitizedValue = (0, util_1.sanitizeMutedWordValue)(mutedWord.value);
        if (!sanitizedValue)
          return;
        await this.updatePreferences((prefs) => {
          let mutedWordsPref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
          const newMutedWord = {
            id: common_web_1.TID.nextStr(),
            value: sanitizedValue,
            targets: mutedWord.targets || [],
            actorTarget: mutedWord.actorTarget || "all",
            expiresAt: mutedWord.expiresAt || void 0
          };
          if (mutedWordsPref && index_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
            mutedWordsPref.items.push(newMutedWord);
            mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
          } else {
            mutedWordsPref = {
              items: [newMutedWord]
            };
          }
          return prefs.filter((p3) => !index_1.AppBskyActorDefs.isMutedWordsPref(p3)).concat([
            { ...mutedWordsPref, $type: "app.bsky.actor.defs#mutedWordsPref" }
          ]);
        });
      }
      /**
       * Convenience method to add muted words to user preferences
       */
      async addMutedWords(newMutedWords) {
        await Promise.all(newMutedWords.map((word) => this.addMutedWord(word)));
      }
      /**
       * @deprecated use `addMutedWords` or `addMutedWord` instead
       */
      async upsertMutedWords(mutedWords) {
        await this.addMutedWords(mutedWords);
      }
      /**
       * Update a muted word in user preferences.
       */
      async updateMutedWord(mutedWord) {
        await this.updatePreferences((prefs) => {
          const mutedWordsPref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
          if (mutedWordsPref && index_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
            mutedWordsPref.items = mutedWordsPref.items.map((existingItem) => {
              const match = matchMutedWord(existingItem, mutedWord);
              if (match) {
                const updated = {
                  ...existingItem,
                  ...mutedWord
                };
                return {
                  id: existingItem.id || common_web_1.TID.nextStr(),
                  value: (0, util_1.sanitizeMutedWordValue)(updated.value) || existingItem.value,
                  targets: updated.targets || [],
                  actorTarget: updated.actorTarget || "all",
                  expiresAt: updated.expiresAt || void 0
                };
              } else {
                return existingItem;
              }
            });
            mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
            return prefs.filter((p3) => !index_1.AppBskyActorDefs.isMutedWordsPref(p3)).concat([
              { ...mutedWordsPref, $type: "app.bsky.actor.defs#mutedWordsPref" }
            ]);
          }
          return prefs;
        });
      }
      /**
       * Remove a muted word from user preferences.
       */
      async removeMutedWord(mutedWord) {
        await this.updatePreferences((prefs) => {
          const mutedWordsPref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isMutedWordsPref(pref) && index_1.AppBskyActorDefs.validateMutedWordsPref(pref).success);
          if (mutedWordsPref && index_1.AppBskyActorDefs.isMutedWordsPref(mutedWordsPref)) {
            for (let i9 = 0; i9 < mutedWordsPref.items.length; i9++) {
              const match = matchMutedWord(mutedWordsPref.items[i9], mutedWord);
              if (match) {
                mutedWordsPref.items.splice(i9, 1);
                break;
              }
            }
            mutedWordsPref.items = migrateLegacyMutedWordsItems(mutedWordsPref.items);
            return prefs.filter((p3) => !index_1.AppBskyActorDefs.isMutedWordsPref(p3)).concat([
              { ...mutedWordsPref, $type: "app.bsky.actor.defs#mutedWordsPref" }
            ]);
          }
          return prefs;
        });
      }
      /**
       * Convenience method to remove muted words from user preferences
       */
      async removeMutedWords(mutedWords) {
        await Promise.all(mutedWords.map((word) => this.removeMutedWord(word)));
      }
      async hidePost(postUri) {
        await this.updateHiddenPost(postUri, "hide");
      }
      async unhidePost(postUri) {
        await this.updateHiddenPost(postUri, "unhide");
      }
      async bskyAppQueueNudges(nudges) {
        await this.updatePreferences((prefs) => {
          let bskyAppStatePref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
          bskyAppStatePref = bskyAppStatePref || {};
          nudges = Array.isArray(nudges) ? nudges : [nudges];
          bskyAppStatePref.queuedNudges = (bskyAppStatePref.queuedNudges || []).concat(nudges);
          return prefs.filter((p3) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p3)).concat([
            {
              ...bskyAppStatePref,
              $type: "app.bsky.actor.defs#bskyAppStatePref"
            }
          ]);
        });
      }
      async bskyAppDismissNudges(nudges) {
        await this.updatePreferences((prefs) => {
          let bskyAppStatePref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
          bskyAppStatePref = bskyAppStatePref || {};
          nudges = Array.isArray(nudges) ? nudges : [nudges];
          bskyAppStatePref.queuedNudges = (bskyAppStatePref.queuedNudges || []).filter((nudge) => !nudges.includes(nudge));
          return prefs.filter((p3) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p3)).concat([
            {
              ...bskyAppStatePref,
              $type: "app.bsky.actor.defs#bskyAppStatePref"
            }
          ]);
        });
      }
      async bskyAppSetActiveProgressGuide(guide) {
        if (guide && !index_1.AppBskyActorDefs.validateBskyAppProgressGuide(guide).success) {
          throw new Error("Invalid progress guide");
        }
        await this.updatePreferences((prefs) => {
          let bskyAppStatePref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
          bskyAppStatePref = bskyAppStatePref || {};
          bskyAppStatePref.activeProgressGuide = guide;
          return prefs.filter((p3) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p3)).concat([
            {
              ...bskyAppStatePref,
              $type: "app.bsky.actor.defs#bskyAppStatePref"
            }
          ]);
        });
      }
      /**
       * Insert or update a NUX in user prefs
       */
      async bskyAppUpsertNux(nux) {
        (0, util_1.validateNux)(nux);
        await this.updatePreferences((prefs) => {
          let bskyAppStatePref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
          bskyAppStatePref = bskyAppStatePref || {};
          bskyAppStatePref.nuxs = bskyAppStatePref.nuxs || [];
          const existing = bskyAppStatePref.nuxs?.find((n10) => {
            return n10.id === nux.id;
          });
          let next;
          if (existing) {
            next = {
              id: existing.id,
              completed: nux.completed,
              data: nux.data,
              expiresAt: nux.expiresAt
            };
          } else {
            next = nux;
          }
          bskyAppStatePref.nuxs = bskyAppStatePref.nuxs.filter((n10) => n10.id !== nux.id).concat(next);
          return prefs.filter((p3) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p3)).concat([
            {
              ...bskyAppStatePref,
              $type: "app.bsky.actor.defs#bskyAppStatePref"
            }
          ]);
        });
      }
      /**
       * Removes NUXs from user preferences.
       */
      async bskyAppRemoveNuxs(ids) {
        await this.updatePreferences((prefs) => {
          let bskyAppStatePref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isBskyAppStatePref(pref) && index_1.AppBskyActorDefs.validateBskyAppStatePref(pref).success);
          bskyAppStatePref = bskyAppStatePref || {};
          bskyAppStatePref.nuxs = (bskyAppStatePref.nuxs || []).filter((nux) => {
            return !ids.includes(nux.id);
          });
          return prefs.filter((p3) => !index_1.AppBskyActorDefs.isBskyAppStatePref(p3)).concat([
            {
              ...bskyAppStatePref,
              $type: "app.bsky.actor.defs#bskyAppStatePref"
            }
          ]);
        });
      }
      /**
       * This function updates the preferences of a user and allows for a callback function to be executed
       * before the update.
       * @param cb - cb is a callback function that takes in a single parameter of type
       * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to
       * update the preferences of the user. The function is called with the current preferences as an
       * argument and if the callback returns false, the preferences are not updated.
       */
      async updatePreferences(cb) {
        try {
          await __classPrivateFieldGet(this, _Agent_prefsLock, "f").acquireAsync();
          const res = await this.app.bsky.actor.getPreferences({});
          const newPrefs = cb(res.data.preferences);
          if (newPrefs === false) {
            return res.data.preferences;
          }
          await this.app.bsky.actor.putPreferences({
            preferences: newPrefs
          });
          return newPrefs;
        } finally {
          __classPrivateFieldGet(this, _Agent_prefsLock, "f").release();
        }
      }
      async updateHiddenPost(postUri, action) {
        await this.updatePreferences((prefs) => {
          let pref = prefs.findLast((pref2) => index_1.AppBskyActorDefs.isHiddenPostsPref(pref2) && index_1.AppBskyActorDefs.validateHiddenPostsPref(pref2).success);
          if (pref && index_1.AppBskyActorDefs.isHiddenPostsPref(pref)) {
            pref.items = action === "hide" ? Array.from(/* @__PURE__ */ new Set([...pref.items, postUri])) : pref.items.filter((uri) => uri !== postUri);
          } else {
            if (action === "hide") {
              pref = {
                $type: "app.bsky.actor.defs#hiddenPostsPref",
                items: [postUri]
              };
            }
          }
          return prefs.filter((p3) => !index_1.AppBskyActorDefs.isInterestsPref(p3)).concat([{ ...pref, $type: "app.bsky.actor.defs#hiddenPostsPref" }]);
        });
      }
      /**
       * A helper specifically for updating feed preferences
       */
      async updateFeedPreferences(cb) {
        let res;
        await this.updatePreferences((prefs) => {
          let feedsPref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isSavedFeedsPref(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success);
          if (feedsPref) {
            res = cb(feedsPref.saved, feedsPref.pinned);
            feedsPref.saved = res.saved;
            feedsPref.pinned = res.pinned;
          } else {
            res = cb([], []);
            feedsPref = {
              $type: "app.bsky.actor.defs#savedFeedsPref",
              saved: res.saved,
              pinned: res.pinned
            };
          }
          return prefs.filter((pref) => !index_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat([feedsPref]);
        });
        return res;
      }
      async updateSavedFeedsV2Preferences(cb) {
        let maybeMutatedSavedFeeds = [];
        await this.updatePreferences((prefs) => {
          let existingV2Pref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPrefV2(pref).success);
          let existingV1Pref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isSavedFeedsPref(pref) && index_1.AppBskyActorDefs.validateSavedFeedsPref(pref).success);
          if (existingV2Pref) {
            maybeMutatedSavedFeeds = cb(existingV2Pref.items);
            existingV2Pref = {
              ...existingV2Pref,
              items: maybeMutatedSavedFeeds
            };
          } else {
            maybeMutatedSavedFeeds = cb([]);
            existingV2Pref = {
              $type: "app.bsky.actor.defs#savedFeedsPrefV2",
              items: maybeMutatedSavedFeeds
            };
          }
          const pinned = existingV2Pref.items.filter((i9) => i9.pinned);
          const saved = existingV2Pref.items.filter((i9) => !i9.pinned);
          existingV2Pref.items = pinned.concat(saved);
          let updatedPrefs = prefs.filter((pref) => !index_1.AppBskyActorDefs.isSavedFeedsPrefV2(pref)).concat(existingV2Pref);
          if (existingV1Pref) {
            const { saved: saved2, pinned: pinned2 } = existingV1Pref;
            const v2Compat = (0, util_1.savedFeedsToUriArrays)(
              // v1 only supports feeds and lists
              existingV2Pref.items.filter((i9) => ["feed", "list"].includes(i9.type))
            );
            existingV1Pref = {
              ...existingV1Pref,
              saved: Array.from(/* @__PURE__ */ new Set([...saved2, ...v2Compat.saved])),
              pinned: Array.from(/* @__PURE__ */ new Set([...pinned2, ...v2Compat.pinned]))
            };
            updatedPrefs = updatedPrefs.filter((pref) => !index_1.AppBskyActorDefs.isSavedFeedsPref(pref)).concat(existingV1Pref);
          }
          return updatedPrefs;
        });
        return maybeMutatedSavedFeeds;
      }
    };
    exports.Agent = Agent2;
    _Agent_prefsLock = /* @__PURE__ */ new WeakMap();
    Object.defineProperty(Agent2, "appLabelers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: [const_1.BSKY_LABELER_DID]
    });
    function adjustLegacyContentLabelPref(pref) {
      let visibility = pref.visibility;
      if (visibility === "show") {
        visibility = "ignore";
      }
      return { ...pref, visibility };
    }
    function remapLegacyLabels(labels) {
      const _labels = { ...labels };
      const legacyToNewMap = {
        gore: "graphic-media",
        nsfw: "porn",
        suggestive: "sexual"
      };
      for (const labelName in _labels) {
        const newLabelName = legacyToNewMap[labelName];
        if (newLabelName) {
          _labels[newLabelName] = _labels[labelName];
        }
      }
      return _labels;
    }
    function prefsArrayToLabelerDids(prefs) {
      const labelersPref = prefs.findLast((pref) => index_1.AppBskyActorDefs.isLabelersPref(pref) && index_1.AppBskyActorDefs.validateLabelersPref(pref).success);
      let dids = [];
      if (labelersPref) {
        dids = labelersPref.labelers.map((labeler) => labeler.did);
      }
      return dids;
    }
    function isBskyPrefs(v2) {
      return v2 && typeof v2 === "object" && "moderationPrefs" in v2 && isModPrefs(v2.moderationPrefs);
    }
    function isModPrefs(v2) {
      return v2 && typeof v2 === "object" && "labelers" in v2;
    }
    function migrateLegacyMutedWordsItems(items) {
      return items.map((item) => ({
        ...item,
        id: item.id || common_web_1.TID.nextStr()
      }));
    }
    function matchMutedWord(existingWord, newWord) {
      const existingId = existingWord.id;
      const matchById = existingId && existingId === newWord.id;
      const legacyMatchByValue = !existingId && existingWord.value === newWord.value;
      return matchById || legacyMatchByValue;
    }
  }
});

// node_modules/@atproto/api/dist/atp-agent.js
var require_atp_agent = __commonJS({
  "node_modules/@atproto/api/dist/atp-agent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CredentialSession = exports.AtpAgent = void 0;
    var common_web_1 = require_dist16();
    var xrpc_1 = require_dist19();
    var agent_1 = require_agent();
    var client_1 = require_client2();
    var lexicons_1 = require_lexicons2();
    var ReadableStream = globalThis.ReadableStream;
    var AtpAgent = class _AtpAgent extends agent_1.Agent {
      constructor(options) {
        const sessionManager = options instanceof CredentialSession ? options : new CredentialSession(new URL(options.service), options.fetch, options.persistSession);
        super(sessionManager);
        Object.defineProperty(this, "sessionManager", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.sessionManager = sessionManager;
        if (!(options instanceof CredentialSession) && options.headers) {
          for (const [key, value] of options.headers) {
            this.setHeader(key, value);
          }
        }
      }
      clone() {
        return this.copyInto(new _AtpAgent(this.sessionManager));
      }
      get session() {
        return this.sessionManager.session;
      }
      get hasSession() {
        return this.sessionManager.hasSession;
      }
      get did() {
        return this.sessionManager.did;
      }
      get serviceUrl() {
        return this.sessionManager.serviceUrl;
      }
      get pdsUrl() {
        return this.sessionManager.pdsUrl;
      }
      get dispatchUrl() {
        return this.sessionManager.dispatchUrl;
      }
      /** @deprecated use {@link serviceUrl} instead */
      get service() {
        return this.serviceUrl;
      }
      get persistSession() {
        throw new Error('Cannot set persistSession directly. "persistSession" is defined through the constructor and will be invoked automatically when session data changes.');
      }
      set persistSession(v2) {
        throw new Error('Cannot set persistSession directly. "persistSession" must be defined in the constructor and can no longer be changed.');
      }
      /** @deprecated use {@link AtpAgent.serviceUrl} instead */
      getServiceUrl() {
        return this.serviceUrl;
      }
      async resumeSession(session) {
        return this.sessionManager.resumeSession(session);
      }
      async createAccount(data, opts) {
        return this.sessionManager.createAccount(data, opts);
      }
      async login(opts) {
        return this.sessionManager.login(opts);
      }
      async logout() {
        return this.sessionManager.logout();
      }
    };
    exports.AtpAgent = AtpAgent;
    var CredentialSession = class {
      constructor(serviceUrl, fetch2 = globalThis.fetch, persistSession) {
        Object.defineProperty(this, "serviceUrl", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: serviceUrl
        });
        Object.defineProperty(this, "fetch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: fetch2
        });
        Object.defineProperty(this, "persistSession", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: persistSession
        });
        Object.defineProperty(this, "pdsUrl", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "session", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "refreshSessionPromise", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "server", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new client_1.ComAtprotoServerNS(
            // Note that the use of the codegen "schemas" (to instantiate `this.api`),
            // as well as the use of `ComAtprotoServerNS` will cause this class to
            // reference (way) more code than it actually needs. It is not possible,
            // with the current state of the codegen, to generate a client that only
            // includes the methods that are actually used by this class. This is a
            // known limitation that should be addressed in a future version of the
            // codegen.
            new xrpc_1.XrpcClient((url, init) => {
              return (0, this.fetch)(new URL(url, this.serviceUrl), init);
            }, lexicons_1.schemas)
          )
        });
      }
      get did() {
        return this.session?.did;
      }
      get dispatchUrl() {
        return this.pdsUrl || this.serviceUrl;
      }
      get hasSession() {
        return !!this.session;
      }
      /**
       * Sets a WhatWG "fetch()" function to be used for making HTTP requests.
       */
      setFetch(fetch2 = globalThis.fetch) {
        this.fetch = fetch2;
      }
      async fetchHandler(url, init) {
        await this.refreshSessionPromise;
        const initialUri = new URL(url, this.dispatchUrl);
        const initialReq = new Request(initialUri, init);
        const initialToken = this.session?.accessJwt;
        if (!initialToken || initialReq.headers.has("authorization")) {
          return (0, this.fetch)(initialReq);
        }
        initialReq.headers.set("authorization", `Bearer ${initialToken}`);
        const initialRes = await (0, this.fetch)(initialReq);
        if (!this.session?.refreshJwt) {
          return initialRes;
        }
        const isExpiredToken = await isErrorResponse(initialRes, [400], ["ExpiredToken"]);
        if (!isExpiredToken) {
          return initialRes;
        }
        try {
          await this.refreshSession();
        } catch {
          return initialRes;
        }
        if (init?.signal?.aborted) {
          return initialRes;
        }
        if (ReadableStream && init?.body instanceof ReadableStream) {
          return initialRes;
        }
        const updatedToken = this.session?.accessJwt;
        if (!updatedToken || updatedToken === initialToken) {
          return initialRes;
        }
        await initialRes.body?.cancel();
        const updatedUri = new URL(url, this.dispatchUrl);
        const updatedReq = new Request(updatedUri, init);
        updatedReq.headers.set("authorization", `Bearer ${updatedToken}`);
        return await (0, this.fetch)(updatedReq);
      }
      /**
       * Create a new account and hydrate its session in this agent.
       */
      async createAccount(data, opts) {
        try {
          const res = await this.server.createAccount(data, opts);
          this.session = {
            accessJwt: res.data.accessJwt,
            refreshJwt: res.data.refreshJwt,
            handle: res.data.handle,
            did: res.data.did,
            email: data.email,
            emailConfirmed: false,
            emailAuthFactor: false,
            active: true
          };
          this.persistSession?.("create", this.session);
          this._updateApiEndpoint(res.data.didDoc);
          return res;
        } catch (e12) {
          this.session = void 0;
          this.persistSession?.("create-failed", void 0);
          throw e12;
        }
      }
      /**
       * Start a new session with this agent.
       */
      async login(opts) {
        try {
          const res = await this.server.createSession({
            identifier: opts.identifier,
            password: opts.password,
            authFactorToken: opts.authFactorToken
          });
          this.session = {
            accessJwt: res.data.accessJwt,
            refreshJwt: res.data.refreshJwt,
            handle: res.data.handle,
            did: res.data.did,
            email: res.data.email,
            emailConfirmed: res.data.emailConfirmed,
            emailAuthFactor: res.data.emailAuthFactor,
            active: res.data.active ?? true,
            status: res.data.status
          };
          this._updateApiEndpoint(res.data.didDoc);
          this.persistSession?.("create", this.session);
          return res;
        } catch (e12) {
          this.session = void 0;
          this.persistSession?.("create-failed", void 0);
          throw e12;
        }
      }
      async logout() {
        if (this.session) {
          try {
            await this.server.deleteSession(void 0, {
              headers: {
                authorization: `Bearer ${this.session.accessJwt}`
              }
            });
          } catch {
          } finally {
            this.session = void 0;
            this.persistSession?.("expired", void 0);
          }
        }
      }
      /**
       * Resume a pre-existing session with this agent.
       */
      async resumeSession(session) {
        this.session = session;
        try {
          const res = await this.server.getSession(void 0, {
            headers: { authorization: `Bearer ${session.accessJwt}` }
          }).catch(async (err) => {
            if (err instanceof xrpc_1.XRPCError && ["ExpiredToken", "InvalidToken"].includes(err.error) && session.refreshJwt) {
              try {
                const res2 = await this.server.refreshSession(void 0, {
                  headers: { authorization: `Bearer ${session.refreshJwt}` }
                });
                session.accessJwt = res2.data.accessJwt;
                session.refreshJwt = res2.data.refreshJwt;
                return this.server.getSession(void 0, {
                  headers: { authorization: `Bearer ${session.accessJwt}` }
                });
              } catch {
              }
            }
            throw err;
          });
          if (res.data.did !== session.did) {
            throw new xrpc_1.XRPCError(xrpc_1.ResponseType.InvalidRequest, "Invalid session", "InvalidDID");
          }
          session.email = res.data.email;
          session.handle = res.data.handle;
          session.emailConfirmed = res.data.emailConfirmed;
          session.emailAuthFactor = res.data.emailAuthFactor;
          session.active = res.data.active ?? true;
          session.status = res.data.status;
          if (this.session === session) {
            this._updateApiEndpoint(res.data.didDoc);
            this.persistSession?.("update", session);
          }
          return res;
        } catch (err) {
          if (this.session === session) {
            this.session = void 0;
            this.persistSession?.(err instanceof xrpc_1.XRPCError && ["ExpiredToken", "InvalidToken"].includes(err.error) ? "expired" : "network-error", void 0);
          }
          throw err;
        }
      }
      /**
       * Internal helper to refresh sessions
       * - Wraps the actual implementation in a promise-guard to ensure only
       *   one refresh is attempted at a time.
       */
      async refreshSession() {
        return this.refreshSessionPromise || (this.refreshSessionPromise = this._refreshSessionInner().finally(() => {
          this.refreshSessionPromise = void 0;
        }));
      }
      /**
       * Internal helper to refresh sessions (actual behavior)
       */
      async _refreshSessionInner() {
        if (!this.session?.refreshJwt) {
          return;
        }
        try {
          const res = await this.server.refreshSession(void 0, {
            headers: { authorization: `Bearer ${this.session.refreshJwt}` }
          });
          this.session = {
            ...this.session,
            accessJwt: res.data.accessJwt,
            refreshJwt: res.data.refreshJwt,
            handle: res.data.handle,
            did: res.data.did
          };
          this._updateApiEndpoint(res.data.didDoc);
          this.persistSession?.("update", this.session);
        } catch (err) {
          if (err instanceof xrpc_1.XRPCError && err.error && ["ExpiredToken", "InvalidToken"].includes(err.error)) {
            this.session = void 0;
            this.persistSession?.("expired", void 0);
          }
        }
      }
      /**
       * Helper to update the pds endpoint dynamically.
       *
       * The session methods (create, resume, refresh) may respond with the user's
       * did document which contains the user's canonical PDS endpoint. That endpoint
       * may differ from the endpoint used to contact the server. We capture that
       * PDS endpoint and update the client to use that given endpoint for future
       * requests. (This helps ensure smooth migrations between PDSes, especially
       * when the PDSes are operated by a single org.)
       */
      _updateApiEndpoint(didDoc) {
        if ((0, common_web_1.isValidDidDoc)(didDoc)) {
          const endpoint = (0, common_web_1.getPdsEndpoint)(didDoc);
          this.pdsUrl = endpoint ? new URL(endpoint) : void 0;
        } else {
          this.pdsUrl = void 0;
        }
      }
    };
    exports.CredentialSession = CredentialSession;
    function isErrorObject(v2) {
      return xrpc_1.errorResponseBody.safeParse(v2).success;
    }
    async function isErrorResponse(response, status, errorNames) {
      if (!status.includes(response.status))
        return false;
      try {
        const json = await peekJson(response, 10 * 1024);
        return isErrorObject(json) && errorNames.includes(json.error);
      } catch (err) {
        return false;
      }
    }
    async function peekJson(response, maxSize = Infinity) {
      if (extractType(response) !== "application/json")
        throw new Error("Not JSON");
      if (extractLength(response) > maxSize)
        throw new Error("Response too large");
      return response.clone().json();
    }
    function extractLength({ headers }) {
      return headers.get("Content-Length") ? Number(headers.get("Content-Length")) : NaN;
    }
    function extractType({ headers }) {
      return headers.get("Content-Type")?.split(";")[0]?.trim();
    }
  }
});

// node_modules/@atproto/api/dist/bsky-agent.js
var require_bsky_agent = __commonJS({
  "node_modules/@atproto/api/dist/bsky-agent.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BskyAgent = void 0;
    var atp_agent_1 = require_atp_agent();
    var BskyAgent = class _BskyAgent extends atp_agent_1.AtpAgent {
      clone() {
        if (this.constructor === _BskyAgent) {
          const agent2 = new _BskyAgent(this.sessionManager);
          return this.copyInto(agent2);
        }
        throw new TypeError("Cannot clone a subclass of BskyAgent");
      }
    };
    exports.BskyAgent = BskyAgent;
  }
});

// node_modules/@atproto/api/dist/index.js
var require_dist20 = __commonJS({
  "node_modules/@atproto/api/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m3, k2);
      if (!desc || ("get" in desc ? !m3.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m3[k2];
        } };
      }
      Object.defineProperty(o13, k22, desc);
    } : function(o13, m3, k2, k22) {
      if (k22 === void 0) k22 = k2;
      o13[k22] = m3[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m3, exports2) {
      for (var p3 in m3) if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p3)) __createBinding(exports2, m3, p3);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lexicons = exports.default = exports.BskyAgent = exports.CredentialSession = exports.AtpAgent = exports.Agent = exports.DEFAULT_LABEL_SETTINGS = exports.LABELS = exports.schemas = exports.parseLanguage = exports.jsonStringToLex = exports.jsonToLex = exports.stringifyLex = exports.lexToJson = exports.BlobRef = exports.AtUri = void 0;
    var lexicon_1 = require_dist18();
    var lexicons_1 = require_lexicons2();
    var syntax_1 = require_dist12();
    Object.defineProperty(exports, "AtUri", { enumerable: true, get: function() {
      return syntax_1.AtUri;
    } });
    var lexicon_2 = require_dist18();
    Object.defineProperty(exports, "BlobRef", { enumerable: true, get: function() {
      return lexicon_2.BlobRef;
    } });
    Object.defineProperty(exports, "lexToJson", { enumerable: true, get: function() {
      return lexicon_2.lexToJson;
    } });
    Object.defineProperty(exports, "stringifyLex", { enumerable: true, get: function() {
      return lexicon_2.stringifyLex;
    } });
    Object.defineProperty(exports, "jsonToLex", { enumerable: true, get: function() {
      return lexicon_2.jsonToLex;
    } });
    Object.defineProperty(exports, "jsonStringToLex", { enumerable: true, get: function() {
      return lexicon_2.jsonStringToLex;
    } });
    var common_web_1 = require_dist16();
    Object.defineProperty(exports, "parseLanguage", { enumerable: true, get: function() {
      return common_web_1.parseLanguage;
    } });
    __exportStar(require_types6(), exports);
    __exportStar(require_const(), exports);
    __exportStar(require_util14(), exports);
    __exportStar(require_client2(), exports);
    var lexicons_2 = require_lexicons2();
    Object.defineProperty(exports, "schemas", { enumerable: true, get: function() {
      return lexicons_2.schemas;
    } });
    __exportStar(require_rich_text(), exports);
    __exportStar(require_sanitization(), exports);
    __exportStar(require_unicode(), exports);
    __exportStar(require_util17(), exports);
    __exportStar(require_moderation(), exports);
    __exportStar(require_types8(), exports);
    __exportStar(require_mocker(), exports);
    var labels_1 = require_labels();
    Object.defineProperty(exports, "LABELS", { enumerable: true, get: function() {
      return labels_1.LABELS;
    } });
    Object.defineProperty(exports, "DEFAULT_LABEL_SETTINGS", { enumerable: true, get: function() {
      return labels_1.DEFAULT_LABEL_SETTINGS;
    } });
    var agent_1 = require_agent();
    Object.defineProperty(exports, "Agent", { enumerable: true, get: function() {
      return agent_1.Agent;
    } });
    var atp_agent_1 = require_atp_agent();
    Object.defineProperty(exports, "AtpAgent", { enumerable: true, get: function() {
      return atp_agent_1.AtpAgent;
    } });
    var atp_agent_2 = require_atp_agent();
    Object.defineProperty(exports, "CredentialSession", { enumerable: true, get: function() {
      return atp_agent_2.CredentialSession;
    } });
    var bsky_agent_1 = require_bsky_agent();
    Object.defineProperty(exports, "BskyAgent", { enumerable: true, get: function() {
      return bsky_agent_1.BskyAgent;
    } });
    var atp_agent_3 = require_atp_agent();
    Object.defineProperty(exports, "default", { enumerable: true, get: function() {
      return atp_agent_3.AtpAgent;
    } });
    exports.lexicons = new lexicon_1.Lexicons(lexicons_1.lexicons);
  }
});

// src/lib/is-prod.js
var isProd = window.location.hostname === "vibrant.mycopunk.it";
var is_prod_default = isProd;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.KAW7D32O.js
var __defProp2 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __knownSymbol = (name2, symbol) => (symbol = Symbol[name2]) ? symbol : Symbol.for("Symbol." + name2);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a4, b3) => {
  for (var prop in b3 || (b3 = {}))
    if (__hasOwnProp2.call(b3, prop))
      __defNormalProp(a4, prop, b3[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b3)) {
      if (__propIsEnum.call(b3, prop))
        __defNormalProp(a4, prop, b3[prop]);
    }
  return a4;
};
var __spreadProps = (a4, b3) => __defProps(a4, __getOwnPropDescs(b3));
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc2(target, key) : target;
  for (var i9 = decorators.length - 1, decorator; i9 >= 0; i9--)
    if (decorator = decorators[i9])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp2(target, key, result);
  return result;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __await = function(promise, isYieldStar) {
  this[0] = promise;
  this[1] = isYieldStar;
};
var __yieldStar = (value) => {
  var obj = value[__knownSymbol("asyncIterator")], isAwait = false, method, it = {};
  if (obj == null) {
    obj = value[__knownSymbol("iterator")]();
    method = (k2) => it[k2] = (x2) => obj[k2](x2);
  } else {
    obj = obj.call(value);
    method = (k2) => it[k2] = (v2) => {
      if (isAwait) {
        isAwait = false;
        if (k2 === "throw") throw v2;
        return v2;
      }
      isAwait = true;
      return {
        done: false,
        value: new __await(new Promise((resolve) => {
          var x2 = obj[k2](v2);
          if (!(x2 instanceof Object)) __typeError("Object expected");
          resolve(x2);
        }), 1)
      };
    };
  }
  return it[__knownSymbol("iterator")] = () => it, method("next"), "throw" in obj ? method("throw") : it.throw = (x2) => {
    throw x2;
  }, "return" in obj && method("return"), it;
};

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.3RPBFEDE.js
var formCollections = /* @__PURE__ */ new WeakMap();
var reportValidityOverloads = /* @__PURE__ */ new WeakMap();
var checkValidityOverloads = /* @__PURE__ */ new WeakMap();
var userInteractedControls = /* @__PURE__ */ new WeakSet();
var interactions = /* @__PURE__ */ new WeakMap();
var FormControlController = class {
  constructor(host, options) {
    this.handleFormData = (event) => {
      const disabled = this.options.disabled(this.host);
      const name2 = this.options.name(this.host);
      const value = this.options.value(this.host);
      const isButton = this.host.tagName.toLowerCase() === "sl-button";
      if (this.host.isConnected && !disabled && !isButton && typeof name2 === "string" && name2.length > 0 && typeof value !== "undefined") {
        if (Array.isArray(value)) {
          value.forEach((val) => {
            event.formData.append(name2, val.toString());
          });
        } else {
          event.formData.append(name2, value.toString());
        }
      }
    };
    this.handleFormSubmit = (event) => {
      var _a;
      const disabled = this.options.disabled(this.host);
      const reportValidity = this.options.reportValidity;
      if (this.form && !this.form.noValidate) {
        (_a = formCollections.get(this.form)) == null ? void 0 : _a.forEach((control) => {
          this.setUserInteracted(control, true);
        });
      }
      if (this.form && !this.form.noValidate && !disabled && !reportValidity(this.host)) {
        event.preventDefault();
        event.stopImmediatePropagation();
      }
    };
    this.handleFormReset = () => {
      this.options.setValue(this.host, this.options.defaultValue(this.host));
      this.setUserInteracted(this.host, false);
      interactions.set(this.host, []);
    };
    this.handleInteraction = (event) => {
      const emittedEvents = interactions.get(this.host);
      if (!emittedEvents.includes(event.type)) {
        emittedEvents.push(event.type);
      }
      if (emittedEvents.length === this.options.assumeInteractionOn.length) {
        this.setUserInteracted(this.host, true);
      }
    };
    this.checkFormValidity = () => {
      if (this.form && !this.form.noValidate) {
        const elements = this.form.querySelectorAll("*");
        for (const element of elements) {
          if (typeof element.checkValidity === "function") {
            if (!element.checkValidity()) {
              return false;
            }
          }
        }
      }
      return true;
    };
    this.reportFormValidity = () => {
      if (this.form && !this.form.noValidate) {
        const elements = this.form.querySelectorAll("*");
        for (const element of elements) {
          if (typeof element.reportValidity === "function") {
            if (!element.reportValidity()) {
              return false;
            }
          }
        }
      }
      return true;
    };
    (this.host = host).addController(this);
    this.options = __spreadValues({
      form: (input) => {
        const formId = input.form;
        if (formId) {
          const root = input.getRootNode();
          const form = root.querySelector(`#${formId}`);
          if (form) {
            return form;
          }
        }
        return input.closest("form");
      },
      name: (input) => input.name,
      value: (input) => input.value,
      defaultValue: (input) => input.defaultValue,
      disabled: (input) => {
        var _a;
        return (_a = input.disabled) != null ? _a : false;
      },
      reportValidity: (input) => typeof input.reportValidity === "function" ? input.reportValidity() : true,
      checkValidity: (input) => typeof input.checkValidity === "function" ? input.checkValidity() : true,
      setValue: (input, value) => input.value = value,
      assumeInteractionOn: ["sl-input"]
    }, options);
  }
  hostConnected() {
    const form = this.options.form(this.host);
    if (form) {
      this.attachForm(form);
    }
    interactions.set(this.host, []);
    this.options.assumeInteractionOn.forEach((event) => {
      this.host.addEventListener(event, this.handleInteraction);
    });
  }
  hostDisconnected() {
    this.detachForm();
    interactions.delete(this.host);
    this.options.assumeInteractionOn.forEach((event) => {
      this.host.removeEventListener(event, this.handleInteraction);
    });
  }
  hostUpdated() {
    const form = this.options.form(this.host);
    if (!form) {
      this.detachForm();
    }
    if (form && this.form !== form) {
      this.detachForm();
      this.attachForm(form);
    }
    if (this.host.hasUpdated) {
      this.setValidity(this.host.validity.valid);
    }
  }
  attachForm(form) {
    if (form) {
      this.form = form;
      if (formCollections.has(this.form)) {
        formCollections.get(this.form).add(this.host);
      } else {
        formCollections.set(this.form, /* @__PURE__ */ new Set([this.host]));
      }
      this.form.addEventListener("formdata", this.handleFormData);
      this.form.addEventListener("submit", this.handleFormSubmit);
      this.form.addEventListener("reset", this.handleFormReset);
      if (!reportValidityOverloads.has(this.form)) {
        reportValidityOverloads.set(this.form, this.form.reportValidity);
        this.form.reportValidity = () => this.reportFormValidity();
      }
      if (!checkValidityOverloads.has(this.form)) {
        checkValidityOverloads.set(this.form, this.form.checkValidity);
        this.form.checkValidity = () => this.checkFormValidity();
      }
    } else {
      this.form = void 0;
    }
  }
  detachForm() {
    if (!this.form) return;
    const formCollection = formCollections.get(this.form);
    if (!formCollection) {
      return;
    }
    formCollection.delete(this.host);
    if (formCollection.size <= 0) {
      this.form.removeEventListener("formdata", this.handleFormData);
      this.form.removeEventListener("submit", this.handleFormSubmit);
      this.form.removeEventListener("reset", this.handleFormReset);
      if (reportValidityOverloads.has(this.form)) {
        this.form.reportValidity = reportValidityOverloads.get(this.form);
        reportValidityOverloads.delete(this.form);
      }
      if (checkValidityOverloads.has(this.form)) {
        this.form.checkValidity = checkValidityOverloads.get(this.form);
        checkValidityOverloads.delete(this.form);
      }
      this.form = void 0;
    }
  }
  setUserInteracted(el, hasInteracted) {
    if (hasInteracted) {
      userInteractedControls.add(el);
    } else {
      userInteractedControls.delete(el);
    }
    el.requestUpdate();
  }
  doAction(type, submitter) {
    if (this.form) {
      const button = document.createElement("button");
      button.type = type;
      button.style.position = "absolute";
      button.style.width = "0";
      button.style.height = "0";
      button.style.clipPath = "inset(50%)";
      button.style.overflow = "hidden";
      button.style.whiteSpace = "nowrap";
      if (submitter) {
        button.name = submitter.name;
        button.value = submitter.value;
        ["formaction", "formenctype", "formmethod", "formnovalidate", "formtarget"].forEach((attr) => {
          if (submitter.hasAttribute(attr)) {
            button.setAttribute(attr, submitter.getAttribute(attr));
          }
        });
      }
      this.form.append(button);
      button.click();
      button.remove();
    }
  }
  /** Returns the associated `<form>` element, if one exists. */
  getForm() {
    var _a;
    return (_a = this.form) != null ? _a : null;
  }
  /** Resets the form, restoring all the control to their default value */
  reset(submitter) {
    this.doAction("reset", submitter);
  }
  /** Submits the form, triggering validation and form data injection. */
  submit(submitter) {
    this.doAction("submit", submitter);
  }
  /**
   * Synchronously sets the form control's validity. Call this when you know the future validity but need to update
   * the host element immediately, i.e. before Lit updates the component in the next update.
   */
  setValidity(isValid) {
    const host = this.host;
    const hasInteracted = Boolean(userInteractedControls.has(host));
    const required = Boolean(host.required);
    host.toggleAttribute("data-required", required);
    host.toggleAttribute("data-optional", !required);
    host.toggleAttribute("data-invalid", !isValid);
    host.toggleAttribute("data-valid", isValid);
    host.toggleAttribute("data-user-invalid", !isValid && hasInteracted);
    host.toggleAttribute("data-user-valid", isValid && hasInteracted);
  }
  /**
   * Updates the form control's validity based on the current value of `host.validity.valid`. Call this when anything
   * that affects constraint validation changes so the component receives the correct validity states.
   */
  updateValidity() {
    const host = this.host;
    this.setValidity(host.validity.valid);
  }
  /**
   * Dispatches a non-bubbling, cancelable custom event of type `sl-invalid`.
   * If the `sl-invalid` event will be cancelled then the original `invalid`
   * event (which may have been passed as argument) will also be cancelled.
   * If no original `invalid` event has been passed then the `sl-invalid`
   * event will be cancelled before being dispatched.
   */
  emitInvalidEvent(originalInvalidEvent) {
    const slInvalidEvent = new CustomEvent("sl-invalid", {
      bubbles: false,
      composed: false,
      cancelable: true,
      detail: {}
    });
    if (!originalInvalidEvent) {
      slInvalidEvent.preventDefault();
    }
    if (!this.host.dispatchEvent(slInvalidEvent)) {
      originalInvalidEvent == null ? void 0 : originalInvalidEvent.preventDefault();
    }
  }
};
var validValidityState = Object.freeze({
  badInput: false,
  customError: false,
  patternMismatch: false,
  rangeOverflow: false,
  rangeUnderflow: false,
  stepMismatch: false,
  tooLong: false,
  tooShort: false,
  typeMismatch: false,
  valid: true,
  valueMissing: false
});
var valueMissingValidityState = Object.freeze(__spreadProps(__spreadValues({}, validValidityState), {
  valid: false,
  valueMissing: true
}));
var customErrorValidityState = Object.freeze(__spreadProps(__spreadValues({}, validValidityState), {
  valid: false,
  customError: true
}));

// node_modules/@lit/reactive-element/css-tag.js
var t = globalThis;
var e = t.ShadowRoot && (void 0 === t.ShadyCSS || t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var s = Symbol();
var o = /* @__PURE__ */ new WeakMap();
var n = class {
  constructor(t6, e12, o13) {
    if (this._$cssResult$ = true, o13 !== s) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t6, this.t = e12;
  }
  get styleSheet() {
    let t6 = this.o;
    const s4 = this.t;
    if (e && void 0 === t6) {
      const e12 = void 0 !== s4 && 1 === s4.length;
      e12 && (t6 = o.get(s4)), void 0 === t6 && ((this.o = t6 = new CSSStyleSheet()).replaceSync(this.cssText), e12 && o.set(s4, t6));
    }
    return t6;
  }
  toString() {
    return this.cssText;
  }
};
var r = (t6) => new n("string" == typeof t6 ? t6 : t6 + "", void 0, s);
var i = (t6, ...e12) => {
  const o13 = 1 === t6.length ? t6[0] : e12.reduce((e13, s4, o14) => e13 + ((t7) => {
    if (true === t7._$cssResult$) return t7.cssText;
    if ("number" == typeof t7) return t7;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + t7 + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(s4) + t6[o14 + 1], t6[0]);
  return new n(o13, t6, s);
};
var S = (s4, o13) => {
  if (e) s4.adoptedStyleSheets = o13.map((t6) => t6 instanceof CSSStyleSheet ? t6 : t6.styleSheet);
  else for (const e12 of o13) {
    const o14 = document.createElement("style"), n10 = t.litNonce;
    void 0 !== n10 && o14.setAttribute("nonce", n10), o14.textContent = e12.cssText, s4.appendChild(o14);
  }
};
var c = e ? (t6) => t6 : (t6) => t6 instanceof CSSStyleSheet ? ((t7) => {
  let e12 = "";
  for (const s4 of t7.cssRules) e12 += s4.cssText;
  return r(e12);
})(t6) : t6;

// node_modules/@lit/reactive-element/reactive-element.js
var { is: i2, defineProperty: e2, getOwnPropertyDescriptor: r2, getOwnPropertyNames: h, getOwnPropertySymbols: o2, getPrototypeOf: n2 } = Object;
var a = globalThis;
var c2 = a.trustedTypes;
var l = c2 ? c2.emptyScript : "";
var p = a.reactiveElementPolyfillSupport;
var d = (t6, s4) => t6;
var u = { toAttribute(t6, s4) {
  switch (s4) {
    case Boolean:
      t6 = t6 ? l : null;
      break;
    case Object:
    case Array:
      t6 = null == t6 ? t6 : JSON.stringify(t6);
  }
  return t6;
}, fromAttribute(t6, s4) {
  let i9 = t6;
  switch (s4) {
    case Boolean:
      i9 = null !== t6;
      break;
    case Number:
      i9 = null === t6 ? null : Number(t6);
      break;
    case Object:
    case Array:
      try {
        i9 = JSON.parse(t6);
      } catch (t7) {
        i9 = null;
      }
  }
  return i9;
} };
var f = (t6, s4) => !i2(t6, s4);
var y = { attribute: true, type: String, converter: u, reflect: false, hasChanged: f };
Symbol.metadata ??= Symbol("metadata"), a.litPropertyMetadata ??= /* @__PURE__ */ new WeakMap();
var b = class extends HTMLElement {
  static addInitializer(t6) {
    this._$Ei(), (this.l ??= []).push(t6);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(t6, s4 = y) {
    if (s4.state && (s4.attribute = false), this._$Ei(), this.elementProperties.set(t6, s4), !s4.noAccessor) {
      const i9 = Symbol(), r10 = this.getPropertyDescriptor(t6, i9, s4);
      void 0 !== r10 && e2(this.prototype, t6, r10);
    }
  }
  static getPropertyDescriptor(t6, s4, i9) {
    const { get: e12, set: h5 } = r2(this.prototype, t6) ?? { get() {
      return this[s4];
    }, set(t7) {
      this[s4] = t7;
    } };
    return { get() {
      return e12?.call(this);
    }, set(s5) {
      const r10 = e12?.call(this);
      h5.call(this, s5), this.requestUpdate(t6, r10, i9);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t6) {
    return this.elementProperties.get(t6) ?? y;
  }
  static _$Ei() {
    if (this.hasOwnProperty(d("elementProperties"))) return;
    const t6 = n2(this);
    t6.finalize(), void 0 !== t6.l && (this.l = [...t6.l]), this.elementProperties = new Map(t6.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(d("finalized"))) return;
    if (this.finalized = true, this._$Ei(), this.hasOwnProperty(d("properties"))) {
      const t7 = this.properties, s4 = [...h(t7), ...o2(t7)];
      for (const i9 of s4) this.createProperty(i9, t7[i9]);
    }
    const t6 = this[Symbol.metadata];
    if (null !== t6) {
      const s4 = litPropertyMetadata.get(t6);
      if (void 0 !== s4) for (const [t7, i9] of s4) this.elementProperties.set(t7, i9);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [t7, s4] of this.elementProperties) {
      const i9 = this._$Eu(t7, s4);
      void 0 !== i9 && this._$Eh.set(i9, t7);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(s4) {
    const i9 = [];
    if (Array.isArray(s4)) {
      const e12 = new Set(s4.flat(1 / 0).reverse());
      for (const s5 of e12) i9.unshift(c(s5));
    } else void 0 !== s4 && i9.push(c(s4));
    return i9;
  }
  static _$Eu(t6, s4) {
    const i9 = s4.attribute;
    return false === i9 ? void 0 : "string" == typeof i9 ? i9 : "string" == typeof t6 ? t6.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    this._$ES = new Promise((t6) => this.enableUpdating = t6), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), this.constructor.l?.forEach((t6) => t6(this));
  }
  addController(t6) {
    (this._$EO ??= /* @__PURE__ */ new Set()).add(t6), void 0 !== this.renderRoot && this.isConnected && t6.hostConnected?.();
  }
  removeController(t6) {
    this._$EO?.delete(t6);
  }
  _$E_() {
    const t6 = /* @__PURE__ */ new Map(), s4 = this.constructor.elementProperties;
    for (const i9 of s4.keys()) this.hasOwnProperty(i9) && (t6.set(i9, this[i9]), delete this[i9]);
    t6.size > 0 && (this._$Ep = t6);
  }
  createRenderRoot() {
    const t6 = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return S(t6, this.constructor.elementStyles), t6;
  }
  connectedCallback() {
    this.renderRoot ??= this.createRenderRoot(), this.enableUpdating(true), this._$EO?.forEach((t6) => t6.hostConnected?.());
  }
  enableUpdating(t6) {
  }
  disconnectedCallback() {
    this._$EO?.forEach((t6) => t6.hostDisconnected?.());
  }
  attributeChangedCallback(t6, s4, i9) {
    this._$AK(t6, i9);
  }
  _$EC(t6, s4) {
    const i9 = this.constructor.elementProperties.get(t6), e12 = this.constructor._$Eu(t6, i9);
    if (void 0 !== e12 && true === i9.reflect) {
      const r10 = (void 0 !== i9.converter?.toAttribute ? i9.converter : u).toAttribute(s4, i9.type);
      this._$Em = t6, null == r10 ? this.removeAttribute(e12) : this.setAttribute(e12, r10), this._$Em = null;
    }
  }
  _$AK(t6, s4) {
    const i9 = this.constructor, e12 = i9._$Eh.get(t6);
    if (void 0 !== e12 && this._$Em !== e12) {
      const t7 = i9.getPropertyOptions(e12), r10 = "function" == typeof t7.converter ? { fromAttribute: t7.converter } : void 0 !== t7.converter?.fromAttribute ? t7.converter : u;
      this._$Em = e12, this[e12] = r10.fromAttribute(s4, t7.type), this._$Em = null;
    }
  }
  requestUpdate(t6, s4, i9) {
    if (void 0 !== t6) {
      if (i9 ??= this.constructor.getPropertyOptions(t6), !(i9.hasChanged ?? f)(this[t6], s4)) return;
      this.P(t6, s4, i9);
    }
    false === this.isUpdatePending && (this._$ES = this._$ET());
  }
  P(t6, s4, i9) {
    this._$AL.has(t6) || this._$AL.set(t6, s4), true === i9.reflect && this._$Em !== t6 && (this._$Ej ??= /* @__PURE__ */ new Set()).add(t6);
  }
  async _$ET() {
    this.isUpdatePending = true;
    try {
      await this._$ES;
    } catch (t7) {
      Promise.reject(t7);
    }
    const t6 = this.scheduleUpdate();
    return null != t6 && await t6, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    if (!this.isUpdatePending) return;
    if (!this.hasUpdated) {
      if (this.renderRoot ??= this.createRenderRoot(), this._$Ep) {
        for (const [t8, s5] of this._$Ep) this[t8] = s5;
        this._$Ep = void 0;
      }
      const t7 = this.constructor.elementProperties;
      if (t7.size > 0) for (const [s5, i9] of t7) true !== i9.wrapped || this._$AL.has(s5) || void 0 === this[s5] || this.P(s5, this[s5], i9);
    }
    let t6 = false;
    const s4 = this._$AL;
    try {
      t6 = this.shouldUpdate(s4), t6 ? (this.willUpdate(s4), this._$EO?.forEach((t7) => t7.hostUpdate?.()), this.update(s4)) : this._$EU();
    } catch (s5) {
      throw t6 = false, this._$EU(), s5;
    }
    t6 && this._$AE(s4);
  }
  willUpdate(t6) {
  }
  _$AE(t6) {
    this._$EO?.forEach((t7) => t7.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t6)), this.updated(t6);
  }
  _$EU() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(t6) {
    return true;
  }
  update(t6) {
    this._$Ej &&= this._$Ej.forEach((t7) => this._$EC(t7, this[t7])), this._$EU();
  }
  updated(t6) {
  }
  firstUpdated(t6) {
  }
};
b.elementStyles = [], b.shadowRootOptions = { mode: "open" }, b[d("elementProperties")] = /* @__PURE__ */ new Map(), b[d("finalized")] = /* @__PURE__ */ new Map(), p?.({ ReactiveElement: b }), (a.reactiveElementVersions ??= []).push("2.0.4");

// node_modules/lit-html/lit-html.js
var t2 = globalThis;
var i3 = t2.trustedTypes;
var s2 = i3 ? i3.createPolicy("lit-html", { createHTML: (t6) => t6 }) : void 0;
var e3 = "$lit$";
var h2 = `lit$${Math.random().toFixed(9).slice(2)}$`;
var o3 = "?" + h2;
var n3 = `<${o3}>`;
var r3 = document;
var l2 = () => r3.createComment("");
var c3 = (t6) => null === t6 || "object" != typeof t6 && "function" != typeof t6;
var a2 = Array.isArray;
var u2 = (t6) => a2(t6) || "function" == typeof t6?.[Symbol.iterator];
var d2 = "[ 	\n\f\r]";
var f2 = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var v = /-->/g;
var _ = />/g;
var m = RegExp(`>|${d2}(?:([^\\s"'>=/]+)(${d2}*=${d2}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
var p2 = /'/g;
var g = /"/g;
var $ = /^(?:script|style|textarea|title)$/i;
var y2 = (t6) => (i9, ...s4) => ({ _$litType$: t6, strings: i9, values: s4 });
var x = y2(1);
var b2 = y2(2);
var w = y2(3);
var T = Symbol.for("lit-noChange");
var E = Symbol.for("lit-nothing");
var A = /* @__PURE__ */ new WeakMap();
var C = r3.createTreeWalker(r3, 129);
function P(t6, i9) {
  if (!a2(t6) || !t6.hasOwnProperty("raw")) throw Error("invalid template strings array");
  return void 0 !== s2 ? s2.createHTML(i9) : i9;
}
var V = (t6, i9) => {
  const s4 = t6.length - 1, o13 = [];
  let r10, l5 = 2 === i9 ? "<svg>" : 3 === i9 ? "<math>" : "", c6 = f2;
  for (let i10 = 0; i10 < s4; i10++) {
    const s5 = t6[i10];
    let a4, u5, d3 = -1, y3 = 0;
    for (; y3 < s5.length && (c6.lastIndex = y3, u5 = c6.exec(s5), null !== u5); ) y3 = c6.lastIndex, c6 === f2 ? "!--" === u5[1] ? c6 = v : void 0 !== u5[1] ? c6 = _ : void 0 !== u5[2] ? ($.test(u5[2]) && (r10 = RegExp("</" + u5[2], "g")), c6 = m) : void 0 !== u5[3] && (c6 = m) : c6 === m ? ">" === u5[0] ? (c6 = r10 ?? f2, d3 = -1) : void 0 === u5[1] ? d3 = -2 : (d3 = c6.lastIndex - u5[2].length, a4 = u5[1], c6 = void 0 === u5[3] ? m : '"' === u5[3] ? g : p2) : c6 === g || c6 === p2 ? c6 = m : c6 === v || c6 === _ ? c6 = f2 : (c6 = m, r10 = void 0);
    const x2 = c6 === m && t6[i10 + 1].startsWith("/>") ? " " : "";
    l5 += c6 === f2 ? s5 + n3 : d3 >= 0 ? (o13.push(a4), s5.slice(0, d3) + e3 + s5.slice(d3) + h2 + x2) : s5 + h2 + (-2 === d3 ? i10 : x2);
  }
  return [P(t6, l5 + (t6[s4] || "<?>") + (2 === i9 ? "</svg>" : 3 === i9 ? "</math>" : "")), o13];
};
var N = class _N {
  constructor({ strings: t6, _$litType$: s4 }, n10) {
    let r10;
    this.parts = [];
    let c6 = 0, a4 = 0;
    const u5 = t6.length - 1, d3 = this.parts, [f5, v2] = V(t6, s4);
    if (this.el = _N.createElement(f5, n10), C.currentNode = this.el.content, 2 === s4 || 3 === s4) {
      const t7 = this.el.content.firstChild;
      t7.replaceWith(...t7.childNodes);
    }
    for (; null !== (r10 = C.nextNode()) && d3.length < u5; ) {
      if (1 === r10.nodeType) {
        if (r10.hasAttributes()) for (const t7 of r10.getAttributeNames()) if (t7.endsWith(e3)) {
          const i9 = v2[a4++], s5 = r10.getAttribute(t7).split(h2), e12 = /([.?@])?(.*)/.exec(i9);
          d3.push({ type: 1, index: c6, name: e12[2], strings: s5, ctor: "." === e12[1] ? H : "?" === e12[1] ? I : "@" === e12[1] ? L : k }), r10.removeAttribute(t7);
        } else t7.startsWith(h2) && (d3.push({ type: 6, index: c6 }), r10.removeAttribute(t7));
        if ($.test(r10.tagName)) {
          const t7 = r10.textContent.split(h2), s5 = t7.length - 1;
          if (s5 > 0) {
            r10.textContent = i3 ? i3.emptyScript : "";
            for (let i9 = 0; i9 < s5; i9++) r10.append(t7[i9], l2()), C.nextNode(), d3.push({ type: 2, index: ++c6 });
            r10.append(t7[s5], l2());
          }
        }
      } else if (8 === r10.nodeType) if (r10.data === o3) d3.push({ type: 2, index: c6 });
      else {
        let t7 = -1;
        for (; -1 !== (t7 = r10.data.indexOf(h2, t7 + 1)); ) d3.push({ type: 7, index: c6 }), t7 += h2.length - 1;
      }
      c6++;
    }
  }
  static createElement(t6, i9) {
    const s4 = r3.createElement("template");
    return s4.innerHTML = t6, s4;
  }
};
function S2(t6, i9, s4 = t6, e12) {
  if (i9 === T) return i9;
  let h5 = void 0 !== e12 ? s4._$Co?.[e12] : s4._$Cl;
  const o13 = c3(i9) ? void 0 : i9._$litDirective$;
  return h5?.constructor !== o13 && (h5?._$AO?.(false), void 0 === o13 ? h5 = void 0 : (h5 = new o13(t6), h5._$AT(t6, s4, e12)), void 0 !== e12 ? (s4._$Co ??= [])[e12] = h5 : s4._$Cl = h5), void 0 !== h5 && (i9 = S2(t6, h5._$AS(t6, i9.values), h5, e12)), i9;
}
var M = class {
  constructor(t6, i9) {
    this._$AV = [], this._$AN = void 0, this._$AD = t6, this._$AM = i9;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(t6) {
    const { el: { content: i9 }, parts: s4 } = this._$AD, e12 = (t6?.creationScope ?? r3).importNode(i9, true);
    C.currentNode = e12;
    let h5 = C.nextNode(), o13 = 0, n10 = 0, l5 = s4[0];
    for (; void 0 !== l5; ) {
      if (o13 === l5.index) {
        let i10;
        2 === l5.type ? i10 = new R(h5, h5.nextSibling, this, t6) : 1 === l5.type ? i10 = new l5.ctor(h5, l5.name, l5.strings, this, t6) : 6 === l5.type && (i10 = new z(h5, this, t6)), this._$AV.push(i10), l5 = s4[++n10];
      }
      o13 !== l5?.index && (h5 = C.nextNode(), o13++);
    }
    return C.currentNode = r3, e12;
  }
  p(t6) {
    let i9 = 0;
    for (const s4 of this._$AV) void 0 !== s4 && (void 0 !== s4.strings ? (s4._$AI(t6, s4, i9), i9 += s4.strings.length - 2) : s4._$AI(t6[i9])), i9++;
  }
};
var R = class _R {
  get _$AU() {
    return this._$AM?._$AU ?? this._$Cv;
  }
  constructor(t6, i9, s4, e12) {
    this.type = 2, this._$AH = E, this._$AN = void 0, this._$AA = t6, this._$AB = i9, this._$AM = s4, this.options = e12, this._$Cv = e12?.isConnected ?? true;
  }
  get parentNode() {
    let t6 = this._$AA.parentNode;
    const i9 = this._$AM;
    return void 0 !== i9 && 11 === t6?.nodeType && (t6 = i9.parentNode), t6;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t6, i9 = this) {
    t6 = S2(this, t6, i9), c3(t6) ? t6 === E || null == t6 || "" === t6 ? (this._$AH !== E && this._$AR(), this._$AH = E) : t6 !== this._$AH && t6 !== T && this._(t6) : void 0 !== t6._$litType$ ? this.$(t6) : void 0 !== t6.nodeType ? this.T(t6) : u2(t6) ? this.k(t6) : this._(t6);
  }
  O(t6) {
    return this._$AA.parentNode.insertBefore(t6, this._$AB);
  }
  T(t6) {
    this._$AH !== t6 && (this._$AR(), this._$AH = this.O(t6));
  }
  _(t6) {
    this._$AH !== E && c3(this._$AH) ? this._$AA.nextSibling.data = t6 : this.T(r3.createTextNode(t6)), this._$AH = t6;
  }
  $(t6) {
    const { values: i9, _$litType$: s4 } = t6, e12 = "number" == typeof s4 ? this._$AC(t6) : (void 0 === s4.el && (s4.el = N.createElement(P(s4.h, s4.h[0]), this.options)), s4);
    if (this._$AH?._$AD === e12) this._$AH.p(i9);
    else {
      const t7 = new M(e12, this), s5 = t7.u(this.options);
      t7.p(i9), this.T(s5), this._$AH = t7;
    }
  }
  _$AC(t6) {
    let i9 = A.get(t6.strings);
    return void 0 === i9 && A.set(t6.strings, i9 = new N(t6)), i9;
  }
  k(t6) {
    a2(this._$AH) || (this._$AH = [], this._$AR());
    const i9 = this._$AH;
    let s4, e12 = 0;
    for (const h5 of t6) e12 === i9.length ? i9.push(s4 = new _R(this.O(l2()), this.O(l2()), this, this.options)) : s4 = i9[e12], s4._$AI(h5), e12++;
    e12 < i9.length && (this._$AR(s4 && s4._$AB.nextSibling, e12), i9.length = e12);
  }
  _$AR(t6 = this._$AA.nextSibling, i9) {
    for (this._$AP?.(false, true, i9); t6 && t6 !== this._$AB; ) {
      const i10 = t6.nextSibling;
      t6.remove(), t6 = i10;
    }
  }
  setConnected(t6) {
    void 0 === this._$AM && (this._$Cv = t6, this._$AP?.(t6));
  }
};
var k = class {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(t6, i9, s4, e12, h5) {
    this.type = 1, this._$AH = E, this._$AN = void 0, this.element = t6, this.name = i9, this._$AM = e12, this.options = h5, s4.length > 2 || "" !== s4[0] || "" !== s4[1] ? (this._$AH = Array(s4.length - 1).fill(new String()), this.strings = s4) : this._$AH = E;
  }
  _$AI(t6, i9 = this, s4, e12) {
    const h5 = this.strings;
    let o13 = false;
    if (void 0 === h5) t6 = S2(this, t6, i9, 0), o13 = !c3(t6) || t6 !== this._$AH && t6 !== T, o13 && (this._$AH = t6);
    else {
      const e13 = t6;
      let n10, r10;
      for (t6 = h5[0], n10 = 0; n10 < h5.length - 1; n10++) r10 = S2(this, e13[s4 + n10], i9, n10), r10 === T && (r10 = this._$AH[n10]), o13 ||= !c3(r10) || r10 !== this._$AH[n10], r10 === E ? t6 = E : t6 !== E && (t6 += (r10 ?? "") + h5[n10 + 1]), this._$AH[n10] = r10;
    }
    o13 && !e12 && this.j(t6);
  }
  j(t6) {
    t6 === E ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t6 ?? "");
  }
};
var H = class extends k {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t6) {
    this.element[this.name] = t6 === E ? void 0 : t6;
  }
};
var I = class extends k {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t6) {
    this.element.toggleAttribute(this.name, !!t6 && t6 !== E);
  }
};
var L = class extends k {
  constructor(t6, i9, s4, e12, h5) {
    super(t6, i9, s4, e12, h5), this.type = 5;
  }
  _$AI(t6, i9 = this) {
    if ((t6 = S2(this, t6, i9, 0) ?? E) === T) return;
    const s4 = this._$AH, e12 = t6 === E && s4 !== E || t6.capture !== s4.capture || t6.once !== s4.once || t6.passive !== s4.passive, h5 = t6 !== E && (s4 === E || e12);
    e12 && this.element.removeEventListener(this.name, this, s4), h5 && this.element.addEventListener(this.name, this, t6), this._$AH = t6;
  }
  handleEvent(t6) {
    "function" == typeof this._$AH ? this._$AH.call(this.options?.host ?? this.element, t6) : this._$AH.handleEvent(t6);
  }
};
var z = class {
  constructor(t6, i9, s4) {
    this.element = t6, this.type = 6, this._$AN = void 0, this._$AM = i9, this.options = s4;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t6) {
    S2(this, t6);
  }
};
var Z = { M: e3, P: h2, A: o3, C: 1, L: V, R: M, D: u2, V: S2, I: R, H: k, N: I, U: L, B: H, F: z };
var j = t2.litHtmlPolyfillSupport;
j?.(N, R), (t2.litHtmlVersions ??= []).push("3.2.1");
var B = (t6, i9, s4) => {
  const e12 = s4?.renderBefore ?? i9;
  let h5 = e12._$litPart$;
  if (void 0 === h5) {
    const t7 = s4?.renderBefore ?? null;
    e12._$litPart$ = h5 = new R(i9.insertBefore(l2(), t7), t7, void 0, s4 ?? {});
  }
  return h5._$AI(t6), h5;
};

// node_modules/lit-element/lit-element.js
var r4 = class extends b {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    const t6 = super.createRenderRoot();
    return this.renderOptions.renderBefore ??= t6.firstChild, t6;
  }
  update(t6) {
    const s4 = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t6), this._$Do = B(s4, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    super.connectedCallback(), this._$Do?.setConnected(true);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this._$Do?.setConnected(false);
  }
  render() {
    return T;
  }
};
r4._$litElement$ = true, r4["finalized"] = true, globalThis.litElementHydrateSupport?.({ LitElement: r4 });
var i4 = globalThis.litElementPolyfillSupport;
i4?.({ LitElement: r4 });
(globalThis.litElementVersions ??= []).push("4.1.1");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.YKKSQ2FG.js
var visually_hidden_styles_default = i`
  :host(:not(:focus-within)) {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    clip: rect(0 0 0 0) !important;
    clip-path: inset(50%) !important;
    border: none !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    padding: 0 !important;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.TUVJKY7S.js
var component_styles_default = i`
  :host {
    box-sizing: border-box;
  }

  :host *,
  :host *::before,
  :host *::after {
    box-sizing: inherit;
  }

  [hidden] {
    display: none !important;
  }
`;

// node_modules/@lit/reactive-element/decorators/property.js
var o4 = { attribute: true, type: String, converter: u, reflect: false, hasChanged: f };
var r5 = (t6 = o4, e12, r10) => {
  const { kind: n10, metadata: i9 } = r10;
  let s4 = globalThis.litPropertyMetadata.get(i9);
  if (void 0 === s4 && globalThis.litPropertyMetadata.set(i9, s4 = /* @__PURE__ */ new Map()), s4.set(r10.name, t6), "accessor" === n10) {
    const { name: o13 } = r10;
    return { set(r11) {
      const n11 = e12.get.call(this);
      e12.set.call(this, r11), this.requestUpdate(o13, n11, t6);
    }, init(e13) {
      return void 0 !== e13 && this.P(o13, void 0, t6), e13;
    } };
  }
  if ("setter" === n10) {
    const { name: o13 } = r10;
    return function(r11) {
      const n11 = this[o13];
      e12.call(this, r11), this.requestUpdate(o13, n11, t6);
    };
  }
  throw Error("Unsupported decorator location: " + n10);
};
function n4(t6) {
  return (e12, o13) => "object" == typeof o13 ? r5(t6, e12, o13) : ((t7, e13, o14) => {
    const r10 = e13.hasOwnProperty(o14);
    return e13.constructor.createProperty(o14, r10 ? { ...t7, wrapped: true } : t7), r10 ? Object.getOwnPropertyDescriptor(e13, o14) : void 0;
  })(t6, e12, o13);
}

// node_modules/@lit/reactive-element/decorators/state.js
function r6(r10) {
  return n4({ ...r10, state: true, attribute: false });
}

// node_modules/@lit/reactive-element/decorators/event-options.js
function t3(t6) {
  return (n10, o13) => {
    const c6 = "function" == typeof n10 ? n10 : n10[o13];
    Object.assign(c6, t6);
  };
}

// node_modules/@lit/reactive-element/decorators/base.js
var e4 = (e12, t6, c6) => (c6.configurable = true, c6.enumerable = true, Reflect.decorate && "object" != typeof t6 && Object.defineProperty(e12, t6, c6), c6);

// node_modules/@lit/reactive-element/decorators/query.js
function e5(e12, r10) {
  return (n10, s4, i9) => {
    const o13 = (t6) => t6.renderRoot?.querySelector(e12) ?? null;
    if (r10) {
      const { get: e13, set: r11 } = "object" == typeof s4 ? n10 : i9 ?? (() => {
        const t6 = Symbol();
        return { get() {
          return this[t6];
        }, set(e14) {
          this[t6] = e14;
        } };
      })();
      return e4(n10, s4, { get() {
        let t6 = e13.call(this);
        return void 0 === t6 && (t6 = o13(this), (null !== t6 || this.hasUpdated) && r11.call(this, t6)), t6;
      } });
    }
    return e4(n10, s4, { get() {
      return o13(this);
    } });
  };
}

// node_modules/@lit/reactive-element/decorators/query-async.js
function r7(r10) {
  return (n10, e12) => e4(n10, e12, { async get() {
    return await this.updateComplete, this.renderRoot?.querySelector(r10) ?? null;
  } });
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.EMG3ZSPT.js
var _hasRecordedInitialProperties;
var ShoelaceElement = class extends r4 {
  constructor() {
    super();
    __privateAdd(this, _hasRecordedInitialProperties, false);
    this.initialReflectedProperties = /* @__PURE__ */ new Map();
    Object.entries(this.constructor.dependencies).forEach(([name2, component]) => {
      this.constructor.define(name2, component);
    });
  }
  emit(name2, options) {
    const event = new CustomEvent(name2, __spreadValues({
      bubbles: true,
      cancelable: false,
      composed: true,
      detail: {}
    }, options));
    this.dispatchEvent(event);
    return event;
  }
  /* eslint-enable */
  static define(name2, elementConstructor = this, options = {}) {
    const currentlyRegisteredConstructor = customElements.get(name2);
    if (!currentlyRegisteredConstructor) {
      try {
        customElements.define(name2, elementConstructor, options);
      } catch (_err) {
        customElements.define(name2, class extends elementConstructor {
        }, options);
      }
      return;
    }
    let newVersion = " (unknown version)";
    let existingVersion = newVersion;
    if ("version" in elementConstructor && elementConstructor.version) {
      newVersion = " v" + elementConstructor.version;
    }
    if ("version" in currentlyRegisteredConstructor && currentlyRegisteredConstructor.version) {
      existingVersion = " v" + currentlyRegisteredConstructor.version;
    }
    if (newVersion && existingVersion && newVersion === existingVersion) {
      return;
    }
    console.warn(
      `Attempted to register <${name2}>${newVersion}, but <${name2}>${existingVersion} has already been registered.`
    );
  }
  attributeChangedCallback(name2, oldValue, newValue) {
    if (!__privateGet(this, _hasRecordedInitialProperties)) {
      this.constructor.elementProperties.forEach(
        (obj, prop) => {
          if (obj.reflect && this[prop] != null) {
            this.initialReflectedProperties.set(prop, this[prop]);
          }
        }
      );
      __privateSet(this, _hasRecordedInitialProperties, true);
    }
    super.attributeChangedCallback(name2, oldValue, newValue);
  }
  willUpdate(changedProperties) {
    super.willUpdate(changedProperties);
    this.initialReflectedProperties.forEach((value, prop) => {
      if (changedProperties.has(prop) && this[prop] == null) {
        this[prop] = value;
      }
    });
  }
};
_hasRecordedInitialProperties = /* @__PURE__ */ new WeakMap();
ShoelaceElement.version = "2.19.1";
ShoelaceElement.dependencies = {};
__decorateClass([
  n4()
], ShoelaceElement.prototype, "dir", 2);
__decorateClass([
  n4()
], ShoelaceElement.prototype, "lang", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.LMJSHYJT.js
var SlVisuallyHidden = class extends ShoelaceElement {
  render() {
    return x` <slot></slot> `;
  }
};
SlVisuallyHidden.styles = [component_styles_default, visually_hidden_styles_default];

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.UFTI2TDL.js
SlVisuallyHidden.define("sl-visually-hidden");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FW7UWQXB.js
var tooltip_styles_default = i`
  :host {
    --max-width: 20rem;
    --hide-delay: 0ms;
    --show-delay: 150ms;

    display: contents;
  }

  .tooltip {
    --arrow-size: var(--sl-tooltip-arrow-size);
    --arrow-color: var(--sl-tooltip-background-color);
  }

  .tooltip::part(popup) {
    z-index: var(--sl-z-index-tooltip);
  }

  .tooltip[placement^='top']::part(popup) {
    transform-origin: bottom;
  }

  .tooltip[placement^='bottom']::part(popup) {
    transform-origin: top;
  }

  .tooltip[placement^='left']::part(popup) {
    transform-origin: right;
  }

  .tooltip[placement^='right']::part(popup) {
    transform-origin: left;
  }

  .tooltip__body {
    display: block;
    width: max-content;
    max-width: var(--max-width);
    border-radius: var(--sl-tooltip-border-radius);
    background-color: var(--sl-tooltip-background-color);
    font-family: var(--sl-tooltip-font-family);
    font-size: var(--sl-tooltip-font-size);
    font-weight: var(--sl-tooltip-font-weight);
    line-height: var(--sl-tooltip-line-height);
    text-align: start;
    white-space: normal;
    color: var(--sl-tooltip-color);
    padding: var(--sl-tooltip-padding);
    pointer-events: none;
    user-select: none;
    -webkit-user-select: none;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.3KSWVBQ5.js
var popup_styles_default = i`
  :host {
    --arrow-color: var(--sl-color-neutral-1000);
    --arrow-size: 6px;

    /*
     * These properties are computed to account for the arrow's dimensions after being rotated 45º. The constant
     * 0.7071 is derived from sin(45), which is the diagonal size of the arrow's container after rotating.
     */
    --arrow-size-diagonal: calc(var(--arrow-size) * 0.7071);
    --arrow-padding-offset: calc(var(--arrow-size-diagonal) - var(--arrow-size));

    display: contents;
  }

  .popup {
    position: absolute;
    isolation: isolate;
    max-width: var(--auto-size-available-width, none);
    max-height: var(--auto-size-available-height, none);
  }

  .popup--fixed {
    position: fixed;
  }

  .popup:not(.popup--active) {
    display: none;
  }

  .popup__arrow {
    position: absolute;
    width: calc(var(--arrow-size-diagonal) * 2);
    height: calc(var(--arrow-size-diagonal) * 2);
    rotate: 45deg;
    background: var(--arrow-color);
    z-index: -1;
  }

  /* Hover bridge */
  .popup-hover-bridge:not(.popup-hover-bridge--visible) {
    display: none;
  }

  .popup-hover-bridge {
    position: fixed;
    z-index: calc(var(--sl-z-index-dropdown) - 1);
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    clip-path: polygon(
      var(--hover-bridge-top-left-x, 0) var(--hover-bridge-top-left-y, 0),
      var(--hover-bridge-top-right-x, 0) var(--hover-bridge-top-right-y, 0),
      var(--hover-bridge-bottom-right-x, 0) var(--hover-bridge-bottom-right-y, 0),
      var(--hover-bridge-bottom-left-x, 0) var(--hover-bridge-bottom-left-y, 0)
    );
  }
`;

// node_modules/@shoelace-style/localize/dist/index.js
var connectedElements = /* @__PURE__ */ new Set();
var translations = /* @__PURE__ */ new Map();
var fallback;
var documentDirection = "ltr";
var documentLanguage = "en";
var isClient = typeof MutationObserver !== "undefined" && typeof document !== "undefined" && typeof document.documentElement !== "undefined";
if (isClient) {
  const documentElementObserver = new MutationObserver(update);
  documentDirection = document.documentElement.dir || "ltr";
  documentLanguage = document.documentElement.lang || navigator.language;
  documentElementObserver.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["dir", "lang"]
  });
}
function registerTranslation(...translation2) {
  translation2.map((t6) => {
    const code2 = t6.$code.toLowerCase();
    if (translations.has(code2)) {
      translations.set(code2, Object.assign(Object.assign({}, translations.get(code2)), t6));
    } else {
      translations.set(code2, t6);
    }
    if (!fallback) {
      fallback = t6;
    }
  });
  update();
}
function update() {
  if (isClient) {
    documentDirection = document.documentElement.dir || "ltr";
    documentLanguage = document.documentElement.lang || navigator.language;
  }
  [...connectedElements.keys()].map((el) => {
    if (typeof el.requestUpdate === "function") {
      el.requestUpdate();
    }
  });
}
var LocalizeController = class {
  constructor(host) {
    this.host = host;
    this.host.addController(this);
  }
  hostConnected() {
    connectedElements.add(this.host);
  }
  hostDisconnected() {
    connectedElements.delete(this.host);
  }
  dir() {
    return `${this.host.dir || documentDirection}`.toLowerCase();
  }
  lang() {
    return `${this.host.lang || documentLanguage}`.toLowerCase();
  }
  getTranslationData(lang) {
    var _a, _b;
    const locale = new Intl.Locale(lang.replace(/_/g, "-"));
    const language = locale === null || locale === void 0 ? void 0 : locale.language.toLowerCase();
    const region = (_b = (_a = locale === null || locale === void 0 ? void 0 : locale.region) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : "";
    const primary = translations.get(`${language}-${region}`);
    const secondary = translations.get(language);
    return { locale, language, region, primary, secondary };
  }
  exists(key, options) {
    var _a;
    const { primary, secondary } = this.getTranslationData((_a = options.lang) !== null && _a !== void 0 ? _a : this.lang());
    options = Object.assign({ includeFallback: false }, options);
    if (primary && primary[key] || secondary && secondary[key] || options.includeFallback && fallback && fallback[key]) {
      return true;
    }
    return false;
  }
  term(key, ...args) {
    const { primary, secondary } = this.getTranslationData(this.lang());
    let term;
    if (primary && primary[key]) {
      term = primary[key];
    } else if (secondary && secondary[key]) {
      term = secondary[key];
    } else if (fallback && fallback[key]) {
      term = fallback[key];
    } else {
      console.error(`No translation found for: ${String(key)}`);
      return String(key);
    }
    if (typeof term === "function") {
      return term(...args);
    }
    return term;
  }
  date(dateToFormat, options) {
    dateToFormat = new Date(dateToFormat);
    return new Intl.DateTimeFormat(this.lang(), options).format(dateToFormat);
  }
  number(numberToFormat, options) {
    numberToFormat = Number(numberToFormat);
    return isNaN(numberToFormat) ? "" : new Intl.NumberFormat(this.lang(), options).format(numberToFormat);
  }
  relativeTime(value, unit, options) {
    return new Intl.RelativeTimeFormat(this.lang(), options).format(value, unit);
  }
};

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.7BTDLTNI.js
var translation = {
  $code: "en",
  $name: "English",
  $dir: "ltr",
  carousel: "Carousel",
  clearEntry: "Clear entry",
  close: "Close",
  copied: "Copied",
  copy: "Copy",
  currentValue: "Current value",
  error: "Error",
  goToSlide: (slide, count) => `Go to slide ${slide} of ${count}`,
  hidePassword: "Hide password",
  loading: "Loading",
  nextSlide: "Next slide",
  numOptionsSelected: (num) => {
    if (num === 0) return "No options selected";
    if (num === 1) return "1 option selected";
    return `${num} options selected`;
  },
  previousSlide: "Previous slide",
  progress: "Progress",
  remove: "Remove",
  resize: "Resize",
  scrollToEnd: "Scroll to end",
  scrollToStart: "Scroll to start",
  selectAColorFromTheScreen: "Select a color from the screen",
  showPassword: "Show password",
  slideNum: (slide) => `Slide ${slide}`,
  toggleColorFormat: "Toggle color format"
};
registerTranslation(translation);
var en_default = translation;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.6CTB5ZDJ.js
var LocalizeController2 = class extends LocalizeController {
};
registerTranslation(en_default);

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v2) => ({
  x: v2,
  y: v2
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length2 = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length2] > rects.floating[length2]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x: x2,
    y: y3,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y3,
    left: x2,
    right: x2 + width,
    bottom: y3 + height,
    x: x2,
    y: y3
  };
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x2,
    y: y3
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i9 = 0; i9 < validMiddleware.length; i9++) {
    const {
      name: name2,
      fn
    } = validMiddleware[i9];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x: x2,
      y: y3,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x2 = nextX != null ? nextX : x2;
    y3 = nextY != null ? nextY : y3;
    middlewareData = {
      ...middlewareData,
      [name2]: {
        ...middlewareData[name2],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x2,
          y: y3
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i9 = -1;
    }
  }
  return {
    x: x2,
    y: y3,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x2,
    y: y3,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x: x2,
    y: y3,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x2,
      y: y3,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x2,
      y: y3
    };
    const axis = getAlignmentAxis(placement);
    const length2 = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length2] + rects.reference[axis] - coords[axis] - rects.floating[length2];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length2];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length2] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length2] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length2] / 2 + centerToReference;
    const offset3 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset3 && rects.reference[length2] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length2] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset3,
        centerOffset: center - offset3 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d3) => d3.overflows[0] <= 0).sort((a4, b3) => a4.overflows[1] - b3.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d3) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d3.placement);
                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  currentSideAxis === "y";
                }
                return true;
              }).map((d3) => [d3.placement, d3.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a4, b3) => a4[1] - b3[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x: x2,
        y: y3,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x2 + diffCoords.x,
        y: y3 + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x2,
        y: y3,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x3,
              y: y4
            } = _ref;
            return {
              x: x3,
              y: y4
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x2,
        y: y3
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x2,
          y: limitedCoords.y - y3,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis
          }
        }
      };
    }
  };
};
var size = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      var _state$middlewareData, _state$middlewareData2;
      const {
        placement,
        rects,
        platform: platform2,
        elements
      } = state;
      const {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
        availableWidth = maximumClippingWidth;
      }
      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
        availableHeight = maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e12) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
  return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $: $3
  } = getCssDimensions(domElement);
  let x2 = ($3 ? round(rect.width) : rect.width) / width;
  let y3 = ($3 ? round(rect.height) : rect.height) / height;
  if (!x2 || !Number.isFinite(x2)) {
    x2 = 1;
  }
  if (!y3 || !Number.isFinite(y3)) {
    y3 = 1;
  }
  return {
    x: x2,
    y: y3
  };
}
var noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x2 = (clientRect.left + visualOffsets.x) / scale.x;
  let y3 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x2 *= iframeScale.x;
      y3 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x2 += left;
      y3 += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x2,
    y: y3
  });
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
  if (ignoreScrollbarX === void 0) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x2 = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
    // RTL <body> scrollbar.
    getWindowScrollBarX(documentElement, htmlRect)
  ));
  const y3 = htmlRect.top + scroll.scrollTop;
  return {
    x: x2,
    y: y3
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y3 = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x2 += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y3
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x2 = 0;
  let y3 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y3 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2,
    y: y3
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x2 = left * scale.x;
  const y3 = top * scale.y;
  return {
    width,
    height,
    x: x2,
    y: y3
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x2 = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y3 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x: x2,
    y: y3,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function rectsAreEqual(a4, b3) {
  return a4.x === b3.x && a4.y === b3.y && a4.width === b3.width && a4.height === b3.height;
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e12) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update2, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update2, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update2);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update2) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update2();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update2();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update2();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update2);
      ancestorResize && ancestor.removeEventListener("resize", update2);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var offset2 = offset;
var shift2 = shift;
var flip2 = flip;
var size2 = size;
var arrow2 = arrow;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/lit-html/directive.js
var t4 = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 };
var e6 = (t6) => (...e12) => ({ _$litDirective$: t6, values: e12 });
var i5 = class {
  constructor(t6) {
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AT(t6, e12, i9) {
    this._$Ct = t6, this._$AM = e12, this._$Ci = i9;
  }
  _$AS(t6, e12) {
    return this.update(t6, e12);
  }
  update(t6, e12) {
    return this.render(...e12);
  }
};

// node_modules/lit-html/directives/class-map.js
var e7 = e6(class extends i5 {
  constructor(t6) {
    if (super(t6), t6.type !== t4.ATTRIBUTE || "class" !== t6.name || t6.strings?.length > 2) throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.");
  }
  render(t6) {
    return " " + Object.keys(t6).filter((s4) => t6[s4]).join(" ") + " ";
  }
  update(s4, [i9]) {
    if (void 0 === this.st) {
      this.st = /* @__PURE__ */ new Set(), void 0 !== s4.strings && (this.nt = new Set(s4.strings.join(" ").split(/\s/).filter((t6) => "" !== t6)));
      for (const t6 in i9) i9[t6] && !this.nt?.has(t6) && this.st.add(t6);
      return this.render(i9);
    }
    const r10 = s4.element.classList;
    for (const t6 of this.st) t6 in i9 || (r10.remove(t6), this.st.delete(t6));
    for (const t6 in i9) {
      const s5 = !!i9[t6];
      s5 === this.st.has(t6) || this.nt?.has(t6) || (s5 ? (r10.add(t6), this.st.add(t6)) : (r10.remove(t6), this.st.delete(t6)));
    }
    return T;
  }
});

// node_modules/composed-offset-position/dist/composed-offset-position.browser.min.mjs
function e8(t6) {
  return i6(t6);
}
function r8(t6) {
  return t6.assignedSlot ? t6.assignedSlot : t6.parentNode instanceof ShadowRoot ? t6.parentNode.host : t6.parentNode;
}
function i6(e12) {
  for (let t6 = e12; t6; t6 = r8(t6)) if (t6 instanceof Element && "none" === getComputedStyle(t6).display) return null;
  for (let n10 = r8(e12); n10; n10 = r8(n10)) {
    if (!(n10 instanceof Element)) continue;
    const e13 = getComputedStyle(n10);
    if ("contents" !== e13.display) {
      if ("static" !== e13.position || isContainingBlock(e13)) return n10;
      if ("BODY" === n10.tagName) return n10;
    }
  }
  return null;
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.AR3BL5H3.js
function isVirtualElement(e12) {
  return e12 !== null && typeof e12 === "object" && "getBoundingClientRect" in e12 && ("contextElement" in e12 ? e12 instanceof Element : true);
}
var SlPopup = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.active = false;
    this.placement = "top";
    this.strategy = "absolute";
    this.distance = 0;
    this.skidding = 0;
    this.arrow = false;
    this.arrowPlacement = "anchor";
    this.arrowPadding = 10;
    this.flip = false;
    this.flipFallbackPlacements = "";
    this.flipFallbackStrategy = "best-fit";
    this.flipPadding = 0;
    this.shift = false;
    this.shiftPadding = 0;
    this.autoSizePadding = 0;
    this.hoverBridge = false;
    this.updateHoverBridge = () => {
      if (this.hoverBridge && this.anchorEl) {
        const anchorRect = this.anchorEl.getBoundingClientRect();
        const popupRect = this.popup.getBoundingClientRect();
        const isVertical = this.placement.includes("top") || this.placement.includes("bottom");
        let topLeftX = 0;
        let topLeftY = 0;
        let topRightX = 0;
        let topRightY = 0;
        let bottomLeftX = 0;
        let bottomLeftY = 0;
        let bottomRightX = 0;
        let bottomRightY = 0;
        if (isVertical) {
          if (anchorRect.top < popupRect.top) {
            topLeftX = anchorRect.left;
            topLeftY = anchorRect.bottom;
            topRightX = anchorRect.right;
            topRightY = anchorRect.bottom;
            bottomLeftX = popupRect.left;
            bottomLeftY = popupRect.top;
            bottomRightX = popupRect.right;
            bottomRightY = popupRect.top;
          } else {
            topLeftX = popupRect.left;
            topLeftY = popupRect.bottom;
            topRightX = popupRect.right;
            topRightY = popupRect.bottom;
            bottomLeftX = anchorRect.left;
            bottomLeftY = anchorRect.top;
            bottomRightX = anchorRect.right;
            bottomRightY = anchorRect.top;
          }
        } else {
          if (anchorRect.left < popupRect.left) {
            topLeftX = anchorRect.right;
            topLeftY = anchorRect.top;
            topRightX = popupRect.left;
            topRightY = popupRect.top;
            bottomLeftX = anchorRect.right;
            bottomLeftY = anchorRect.bottom;
            bottomRightX = popupRect.left;
            bottomRightY = popupRect.bottom;
          } else {
            topLeftX = popupRect.right;
            topLeftY = popupRect.top;
            topRightX = anchorRect.left;
            topRightY = anchorRect.top;
            bottomLeftX = popupRect.right;
            bottomLeftY = popupRect.bottom;
            bottomRightX = anchorRect.left;
            bottomRightY = anchorRect.bottom;
          }
        }
        this.style.setProperty("--hover-bridge-top-left-x", `${topLeftX}px`);
        this.style.setProperty("--hover-bridge-top-left-y", `${topLeftY}px`);
        this.style.setProperty("--hover-bridge-top-right-x", `${topRightX}px`);
        this.style.setProperty("--hover-bridge-top-right-y", `${topRightY}px`);
        this.style.setProperty("--hover-bridge-bottom-left-x", `${bottomLeftX}px`);
        this.style.setProperty("--hover-bridge-bottom-left-y", `${bottomLeftY}px`);
        this.style.setProperty("--hover-bridge-bottom-right-x", `${bottomRightX}px`);
        this.style.setProperty("--hover-bridge-bottom-right-y", `${bottomRightY}px`);
      }
    };
  }
  async connectedCallback() {
    super.connectedCallback();
    await this.updateComplete;
    this.start();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.stop();
  }
  async updated(changedProps) {
    super.updated(changedProps);
    if (changedProps.has("active")) {
      if (this.active) {
        this.start();
      } else {
        this.stop();
      }
    }
    if (changedProps.has("anchor")) {
      this.handleAnchorChange();
    }
    if (this.active) {
      await this.updateComplete;
      this.reposition();
    }
  }
  async handleAnchorChange() {
    await this.stop();
    if (this.anchor && typeof this.anchor === "string") {
      const root = this.getRootNode();
      this.anchorEl = root.getElementById(this.anchor);
    } else if (this.anchor instanceof Element || isVirtualElement(this.anchor)) {
      this.anchorEl = this.anchor;
    } else {
      this.anchorEl = this.querySelector('[slot="anchor"]');
    }
    if (this.anchorEl instanceof HTMLSlotElement) {
      this.anchorEl = this.anchorEl.assignedElements({ flatten: true })[0];
    }
    if (this.anchorEl && this.active) {
      this.start();
    }
  }
  start() {
    if (!this.anchorEl || !this.active) {
      return;
    }
    this.cleanup = autoUpdate(this.anchorEl, this.popup, () => {
      this.reposition();
    });
  }
  async stop() {
    return new Promise((resolve) => {
      if (this.cleanup) {
        this.cleanup();
        this.cleanup = void 0;
        this.removeAttribute("data-current-placement");
        this.style.removeProperty("--auto-size-available-width");
        this.style.removeProperty("--auto-size-available-height");
        requestAnimationFrame(() => resolve());
      } else {
        resolve();
      }
    });
  }
  /** Forces the popup to recalculate and reposition itself. */
  reposition() {
    if (!this.active || !this.anchorEl) {
      return;
    }
    const middleware = [
      // The offset middleware goes first
      offset2({ mainAxis: this.distance, crossAxis: this.skidding })
    ];
    if (this.sync) {
      middleware.push(
        size2({
          apply: ({ rects }) => {
            const syncWidth = this.sync === "width" || this.sync === "both";
            const syncHeight = this.sync === "height" || this.sync === "both";
            this.popup.style.width = syncWidth ? `${rects.reference.width}px` : "";
            this.popup.style.height = syncHeight ? `${rects.reference.height}px` : "";
          }
        })
      );
    } else {
      this.popup.style.width = "";
      this.popup.style.height = "";
    }
    if (this.flip) {
      middleware.push(
        flip2({
          boundary: this.flipBoundary,
          // @ts-expect-error - We're converting a string attribute to an array here
          fallbackPlacements: this.flipFallbackPlacements,
          fallbackStrategy: this.flipFallbackStrategy === "best-fit" ? "bestFit" : "initialPlacement",
          padding: this.flipPadding
        })
      );
    }
    if (this.shift) {
      middleware.push(
        shift2({
          boundary: this.shiftBoundary,
          padding: this.shiftPadding
        })
      );
    }
    if (this.autoSize) {
      middleware.push(
        size2({
          boundary: this.autoSizeBoundary,
          padding: this.autoSizePadding,
          apply: ({ availableWidth, availableHeight }) => {
            if (this.autoSize === "vertical" || this.autoSize === "both") {
              this.style.setProperty("--auto-size-available-height", `${availableHeight}px`);
            } else {
              this.style.removeProperty("--auto-size-available-height");
            }
            if (this.autoSize === "horizontal" || this.autoSize === "both") {
              this.style.setProperty("--auto-size-available-width", `${availableWidth}px`);
            } else {
              this.style.removeProperty("--auto-size-available-width");
            }
          }
        })
      );
    } else {
      this.style.removeProperty("--auto-size-available-width");
      this.style.removeProperty("--auto-size-available-height");
    }
    if (this.arrow) {
      middleware.push(
        arrow2({
          element: this.arrowEl,
          padding: this.arrowPadding
        })
      );
    }
    const getOffsetParent2 = this.strategy === "absolute" ? (element) => platform.getOffsetParent(element, e8) : platform.getOffsetParent;
    computePosition2(this.anchorEl, this.popup, {
      placement: this.placement,
      middleware,
      strategy: this.strategy,
      platform: __spreadProps(__spreadValues({}, platform), {
        getOffsetParent: getOffsetParent2
      })
    }).then(({ x: x2, y: y3, middlewareData, placement }) => {
      const isRtl = this.localize.dir() === "rtl";
      const staticSide = { top: "bottom", right: "left", bottom: "top", left: "right" }[placement.split("-")[0]];
      this.setAttribute("data-current-placement", placement);
      Object.assign(this.popup.style, {
        left: `${x2}px`,
        top: `${y3}px`
      });
      if (this.arrow) {
        const arrowX = middlewareData.arrow.x;
        const arrowY = middlewareData.arrow.y;
        let top = "";
        let right = "";
        let bottom = "";
        let left = "";
        if (this.arrowPlacement === "start") {
          const value = typeof arrowX === "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
          top = typeof arrowY === "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
          right = isRtl ? value : "";
          left = isRtl ? "" : value;
        } else if (this.arrowPlacement === "end") {
          const value = typeof arrowX === "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
          right = isRtl ? "" : value;
          left = isRtl ? value : "";
          bottom = typeof arrowY === "number" ? `calc(${this.arrowPadding}px - var(--arrow-padding-offset))` : "";
        } else if (this.arrowPlacement === "center") {
          left = typeof arrowX === "number" ? `calc(50% - var(--arrow-size-diagonal))` : "";
          top = typeof arrowY === "number" ? `calc(50% - var(--arrow-size-diagonal))` : "";
        } else {
          left = typeof arrowX === "number" ? `${arrowX}px` : "";
          top = typeof arrowY === "number" ? `${arrowY}px` : "";
        }
        Object.assign(this.arrowEl.style, {
          top,
          right,
          bottom,
          left,
          [staticSide]: "calc(var(--arrow-size-diagonal) * -1)"
        });
      }
    });
    requestAnimationFrame(() => this.updateHoverBridge());
    this.emit("sl-reposition");
  }
  render() {
    return x`
      <slot name="anchor" @slotchange=${this.handleAnchorChange}></slot>

      <span
        part="hover-bridge"
        class=${e7({
      "popup-hover-bridge": true,
      "popup-hover-bridge--visible": this.hoverBridge && this.active
    })}
      ></span>

      <div
        part="popup"
        class=${e7({
      popup: true,
      "popup--active": this.active,
      "popup--fixed": this.strategy === "fixed",
      "popup--has-arrow": this.arrow
    })}
      >
        <slot></slot>
        ${this.arrow ? x`<div part="arrow" class="popup__arrow" role="presentation"></div>` : ""}
      </div>
    `;
  }
};
SlPopup.styles = [component_styles_default, popup_styles_default];
__decorateClass([
  e5(".popup")
], SlPopup.prototype, "popup", 2);
__decorateClass([
  e5(".popup__arrow")
], SlPopup.prototype, "arrowEl", 2);
__decorateClass([
  n4()
], SlPopup.prototype, "anchor", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlPopup.prototype, "active", 2);
__decorateClass([
  n4({ reflect: true })
], SlPopup.prototype, "placement", 2);
__decorateClass([
  n4({ reflect: true })
], SlPopup.prototype, "strategy", 2);
__decorateClass([
  n4({ type: Number })
], SlPopup.prototype, "distance", 2);
__decorateClass([
  n4({ type: Number })
], SlPopup.prototype, "skidding", 2);
__decorateClass([
  n4({ type: Boolean })
], SlPopup.prototype, "arrow", 2);
__decorateClass([
  n4({ attribute: "arrow-placement" })
], SlPopup.prototype, "arrowPlacement", 2);
__decorateClass([
  n4({ attribute: "arrow-padding", type: Number })
], SlPopup.prototype, "arrowPadding", 2);
__decorateClass([
  n4({ type: Boolean })
], SlPopup.prototype, "flip", 2);
__decorateClass([
  n4({
    attribute: "flip-fallback-placements",
    converter: {
      fromAttribute: (value) => {
        return value.split(" ").map((p3) => p3.trim()).filter((p3) => p3 !== "");
      },
      toAttribute: (value) => {
        return value.join(" ");
      }
    }
  })
], SlPopup.prototype, "flipFallbackPlacements", 2);
__decorateClass([
  n4({ attribute: "flip-fallback-strategy" })
], SlPopup.prototype, "flipFallbackStrategy", 2);
__decorateClass([
  n4({ type: Object })
], SlPopup.prototype, "flipBoundary", 2);
__decorateClass([
  n4({ attribute: "flip-padding", type: Number })
], SlPopup.prototype, "flipPadding", 2);
__decorateClass([
  n4({ type: Boolean })
], SlPopup.prototype, "shift", 2);
__decorateClass([
  n4({ type: Object })
], SlPopup.prototype, "shiftBoundary", 2);
__decorateClass([
  n4({ attribute: "shift-padding", type: Number })
], SlPopup.prototype, "shiftPadding", 2);
__decorateClass([
  n4({ attribute: "auto-size" })
], SlPopup.prototype, "autoSize", 2);
__decorateClass([
  n4()
], SlPopup.prototype, "sync", 2);
__decorateClass([
  n4({ type: Object })
], SlPopup.prototype, "autoSizeBoundary", 2);
__decorateClass([
  n4({ attribute: "auto-size-padding", type: Number })
], SlPopup.prototype, "autoSizePadding", 2);
__decorateClass([
  n4({ attribute: "hover-bridge", type: Boolean })
], SlPopup.prototype, "hoverBridge", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.K7JGTRV7.js
var defaultAnimationRegistry = /* @__PURE__ */ new Map();
var customAnimationRegistry = /* @__PURE__ */ new WeakMap();
function ensureAnimation(animation) {
  return animation != null ? animation : { keyframes: [], options: { duration: 0 } };
}
function getLogicalAnimation(animation, dir) {
  if (dir.toLowerCase() === "rtl") {
    return {
      keyframes: animation.rtlKeyframes || animation.keyframes,
      options: animation.options
    };
  }
  return animation;
}
function setDefaultAnimation(animationName, animation) {
  defaultAnimationRegistry.set(animationName, ensureAnimation(animation));
}
function getAnimation(el, animationName, options) {
  const customAnimation = customAnimationRegistry.get(el);
  if (customAnimation == null ? void 0 : customAnimation[animationName]) {
    return getLogicalAnimation(customAnimation[animationName], options.dir);
  }
  const defaultAnimation = defaultAnimationRegistry.get(animationName);
  if (defaultAnimation) {
    return getLogicalAnimation(defaultAnimation, options.dir);
  }
  return {
    keyframes: [],
    options: { duration: 0 }
  };
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.B4BZKR24.js
function waitForEvent(el, eventName) {
  return new Promise((resolve) => {
    function done(event) {
      if (event.target === el) {
        el.removeEventListener(eventName, done);
        resolve();
      }
    }
    el.addEventListener(eventName, done);
  });
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.AJ3ENQ5C.js
function animateTo(el, keyframes, options) {
  return new Promise((resolve) => {
    if ((options == null ? void 0 : options.duration) === Infinity) {
      throw new Error("Promise-based animations must be finite.");
    }
    const animation = el.animate(keyframes, __spreadProps(__spreadValues({}, options), {
      duration: prefersReducedMotion() ? 0 : options.duration
    }));
    animation.addEventListener("cancel", resolve, { once: true });
    animation.addEventListener("finish", resolve, { once: true });
  });
}
function parseDuration(delay) {
  delay = delay.toString().toLowerCase();
  if (delay.indexOf("ms") > -1) {
    return parseFloat(delay);
  }
  if (delay.indexOf("s") > -1) {
    return parseFloat(delay) * 1e3;
  }
  return parseFloat(delay);
}
function prefersReducedMotion() {
  const query = window.matchMedia("(prefers-reduced-motion: reduce)");
  return query.matches;
}
function stopAnimations(el) {
  return Promise.all(
    el.getAnimations().map((animation) => {
      return new Promise((resolve) => {
        animation.cancel();
        requestAnimationFrame(resolve);
      });
    })
  );
}
function shimKeyframesHeightAuto(keyframes, calculatedHeight) {
  return keyframes.map((keyframe) => __spreadProps(__spreadValues({}, keyframe), {
    height: keyframe.height === "auto" ? `${calculatedHeight}px` : keyframe.height
  }));
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.GMYPQTFK.js
function watch(propertyName, options) {
  const resolvedOptions = __spreadValues({
    waitUntilFirstUpdate: false
  }, options);
  return (proto, decoratedFnName) => {
    const { update: update2 } = proto;
    const watchedProperties = Array.isArray(propertyName) ? propertyName : [propertyName];
    proto.update = function(changedProps) {
      watchedProperties.forEach((property) => {
        const key = property;
        if (changedProps.has(key)) {
          const oldValue = changedProps.get(key);
          const newValue = this[key];
          if (oldValue !== newValue) {
            if (!resolvedOptions.waitUntilFirstUpdate || this.hasUpdated) {
              this[decoratedFnName](oldValue, newValue);
            }
          }
        }
      });
      update2.call(this, changedProps);
    };
  };
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2E7JDME3.js
var SlTooltip = class extends ShoelaceElement {
  constructor() {
    super();
    this.localize = new LocalizeController2(this);
    this.content = "";
    this.placement = "top";
    this.disabled = false;
    this.distance = 8;
    this.open = false;
    this.skidding = 0;
    this.trigger = "hover focus";
    this.hoist = false;
    this.handleBlur = () => {
      if (this.hasTrigger("focus")) {
        this.hide();
      }
    };
    this.handleClick = () => {
      if (this.hasTrigger("click")) {
        if (this.open) {
          this.hide();
        } else {
          this.show();
        }
      }
    };
    this.handleFocus = () => {
      if (this.hasTrigger("focus")) {
        this.show();
      }
    };
    this.handleDocumentKeyDown = (event) => {
      if (event.key === "Escape") {
        event.stopPropagation();
        this.hide();
      }
    };
    this.handleMouseOver = () => {
      if (this.hasTrigger("hover")) {
        const delay = parseDuration(getComputedStyle(this).getPropertyValue("--show-delay"));
        clearTimeout(this.hoverTimeout);
        this.hoverTimeout = window.setTimeout(() => this.show(), delay);
      }
    };
    this.handleMouseOut = () => {
      if (this.hasTrigger("hover")) {
        const delay = parseDuration(getComputedStyle(this).getPropertyValue("--hide-delay"));
        clearTimeout(this.hoverTimeout);
        this.hoverTimeout = window.setTimeout(() => this.hide(), delay);
      }
    };
    this.addEventListener("blur", this.handleBlur, true);
    this.addEventListener("focus", this.handleFocus, true);
    this.addEventListener("click", this.handleClick);
    this.addEventListener("mouseover", this.handleMouseOver);
    this.addEventListener("mouseout", this.handleMouseOut);
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
  }
  firstUpdated() {
    this.body.hidden = !this.open;
    if (this.open) {
      this.popup.active = true;
      this.popup.reposition();
    }
  }
  hasTrigger(triggerType) {
    const triggers = this.trigger.split(" ");
    return triggers.includes(triggerType);
  }
  async handleOpenChange() {
    var _a, _b;
    if (this.open) {
      if (this.disabled) {
        return;
      }
      this.emit("sl-show");
      if ("CloseWatcher" in window) {
        (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
        this.closeWatcher = new CloseWatcher();
        this.closeWatcher.onclose = () => {
          this.hide();
        };
      } else {
        document.addEventListener("keydown", this.handleDocumentKeyDown);
      }
      await stopAnimations(this.body);
      this.body.hidden = false;
      this.popup.active = true;
      const { keyframes, options } = getAnimation(this, "tooltip.show", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      this.popup.reposition();
      this.emit("sl-after-show");
    } else {
      this.emit("sl-hide");
      (_b = this.closeWatcher) == null ? void 0 : _b.destroy();
      document.removeEventListener("keydown", this.handleDocumentKeyDown);
      await stopAnimations(this.body);
      const { keyframes, options } = getAnimation(this, "tooltip.hide", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      this.popup.active = false;
      this.body.hidden = true;
      this.emit("sl-after-hide");
    }
  }
  async handleOptionsChange() {
    if (this.hasUpdated) {
      await this.updateComplete;
      this.popup.reposition();
    }
  }
  handleDisabledChange() {
    if (this.disabled && this.open) {
      this.hide();
    }
  }
  /** Shows the tooltip. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the tooltip */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  //
  // NOTE: Tooltip is a bit unique in that we're using aria-live instead of aria-labelledby to trick screen readers into
  // announcing the content. It works really well, but it violates an accessibility rule. We're also adding the
  // aria-describedby attribute to a slot, which is required by <sl-popup> to correctly locate the first assigned
  // element, otherwise positioning is incorrect.
  //
  render() {
    return x`
      <sl-popup
        part="base"
        exportparts="
          popup:base__popup,
          arrow:base__arrow
        "
        class=${e7({
      tooltip: true,
      "tooltip--open": this.open
    })}
        placement=${this.placement}
        distance=${this.distance}
        skidding=${this.skidding}
        strategy=${this.hoist ? "fixed" : "absolute"}
        flip
        shift
        arrow
        hover-bridge
      >
        ${""}
        <slot slot="anchor" aria-describedby="tooltip"></slot>

        ${""}
        <div part="body" id="tooltip" class="tooltip__body" role="tooltip" aria-live=${this.open ? "polite" : "off"}>
          <slot name="content">${this.content}</slot>
        </div>
      </sl-popup>
    `;
  }
};
SlTooltip.styles = [component_styles_default, tooltip_styles_default];
SlTooltip.dependencies = { "sl-popup": SlPopup };
__decorateClass([
  e5("slot:not([name])")
], SlTooltip.prototype, "defaultSlot", 2);
__decorateClass([
  e5(".tooltip__body")
], SlTooltip.prototype, "body", 2);
__decorateClass([
  e5("sl-popup")
], SlTooltip.prototype, "popup", 2);
__decorateClass([
  n4()
], SlTooltip.prototype, "content", 2);
__decorateClass([
  n4()
], SlTooltip.prototype, "placement", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTooltip.prototype, "disabled", 2);
__decorateClass([
  n4({ type: Number })
], SlTooltip.prototype, "distance", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTooltip.prototype, "open", 2);
__decorateClass([
  n4({ type: Number })
], SlTooltip.prototype, "skidding", 2);
__decorateClass([
  n4()
], SlTooltip.prototype, "trigger", 2);
__decorateClass([
  n4({ type: Boolean })
], SlTooltip.prototype, "hoist", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlTooltip.prototype, "handleOpenChange", 1);
__decorateClass([
  watch(["content", "distance", "hoist", "placement", "skidding"])
], SlTooltip.prototype, "handleOptionsChange", 1);
__decorateClass([
  watch("disabled")
], SlTooltip.prototype, "handleDisabledChange", 1);
setDefaultAnimation("tooltip.show", {
  keyframes: [
    { opacity: 0, scale: 0.8 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 150, easing: "ease" }
});
setDefaultAnimation("tooltip.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.8 }
  ],
  options: { duration: 150, easing: "ease" }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.5ZRUVMLP.js
SlTooltip.define("sl-tooltip");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.G7B7WU5W.js
var tree_styles_default = i`
  :host {
    /*
     * These are actually used by tree item, but we define them here so they can more easily be set and all tree items
     * stay consistent.
     */
    --indent-guide-color: var(--sl-color-neutral-200);
    --indent-guide-offset: 0;
    --indent-guide-style: solid;
    --indent-guide-width: 0;
    --indent-size: var(--sl-spacing-large);

    display: block;

    /*
     * Tree item indentation uses the "em" unit to increment its width on each level, so setting the font size to zero
     * here removes the indentation for all the nodes on the first level.
     */
    font-size: 0;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.BWVSW6TI.js
var tree_item_styles_default = i`
  :host {
    display: block;
    outline: 0;
    z-index: 0;
  }

  :host(:focus) {
    outline: none;
  }

  slot:not([name])::slotted(sl-icon) {
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .tree-item {
    position: relative;
    display: flex;
    align-items: stretch;
    flex-direction: column;
    color: var(--sl-color-neutral-700);
    cursor: pointer;
    user-select: none;
    -webkit-user-select: none;
  }

  .tree-item__checkbox {
    pointer-events: none;
  }

  .tree-item__expand-button,
  .tree-item__checkbox,
  .tree-item__label {
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    line-height: var(--sl-line-height-dense);
    letter-spacing: var(--sl-letter-spacing-normal);
  }

  .tree-item__checkbox::part(base) {
    display: flex;
    align-items: center;
  }

  .tree-item__indentation {
    display: block;
    width: 1em;
    flex-shrink: 0;
  }

  .tree-item__expand-button {
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: content-box;
    color: var(--sl-color-neutral-500);
    padding: var(--sl-spacing-x-small);
    width: 1rem;
    height: 1rem;
    flex-shrink: 0;
    cursor: pointer;
  }

  .tree-item__expand-button {
    transition: var(--sl-transition-medium) rotate ease;
  }

  .tree-item--expanded .tree-item__expand-button {
    rotate: 90deg;
  }

  .tree-item--expanded.tree-item--rtl .tree-item__expand-button {
    rotate: -90deg;
  }

  .tree-item--expanded slot[name='expand-icon'],
  .tree-item:not(.tree-item--expanded) slot[name='collapse-icon'] {
    display: none;
  }

  .tree-item:not(.tree-item--has-expand-button) .tree-item__expand-icon-slot {
    display: none;
  }

  .tree-item__expand-button--visible {
    cursor: pointer;
  }

  .tree-item__item {
    display: flex;
    align-items: center;
    border-inline-start: solid 3px transparent;
  }

  .tree-item--disabled .tree-item__item {
    opacity: 0.5;
    outline: none;
    cursor: not-allowed;
  }

  :host(:focus-visible) .tree-item__item {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
    z-index: 2;
  }

  :host(:not([aria-disabled='true'])) .tree-item--selected .tree-item__item {
    background-color: var(--sl-color-neutral-100);
    border-inline-start-color: var(--sl-color-primary-600);
  }

  :host(:not([aria-disabled='true'])) .tree-item__expand-button {
    color: var(--sl-color-neutral-600);
  }

  .tree-item__label {
    display: flex;
    align-items: center;
    transition: var(--sl-transition-fast) color;
  }

  .tree-item__children {
    display: block;
    font-size: calc(1em + var(--indent-size, var(--sl-spacing-medium)));
  }

  /* Indentation lines */
  .tree-item__children {
    position: relative;
  }

  .tree-item__children::before {
    content: '';
    position: absolute;
    top: var(--indent-guide-offset);
    bottom: var(--indent-guide-offset);
    left: calc(1em - (var(--indent-guide-width) / 2) - 1px);
    border-inline-end: var(--indent-guide-width) var(--indent-guide-style) var(--indent-guide-color);
    z-index: 1;
  }

  .tree-item--rtl .tree-item__children::before {
    left: auto;
    right: 1em;
  }

  @media (forced-colors: active) {
    :host(:not([aria-disabled='true'])) .tree-item--selected .tree-item__item {
      outline: dashed 1px SelectedItem;
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.R3NF57O3.js
var checkbox_styles_default = i`
  :host {
    display: inline-block;
  }

  .checkbox {
    position: relative;
    display: inline-flex;
    align-items: flex-start;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    color: var(--sl-input-label-color);
    vertical-align: middle;
    cursor: pointer;
  }

  .checkbox--small {
    --toggle-size: var(--sl-toggle-size-small);
    font-size: var(--sl-input-font-size-small);
  }

  .checkbox--medium {
    --toggle-size: var(--sl-toggle-size-medium);
    font-size: var(--sl-input-font-size-medium);
  }

  .checkbox--large {
    --toggle-size: var(--sl-toggle-size-large);
    font-size: var(--sl-input-font-size-large);
  }

  .checkbox__control {
    flex: 0 0 auto;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--toggle-size);
    height: var(--toggle-size);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
    border-radius: 2px;
    background-color: var(--sl-input-background-color);
    color: var(--sl-color-neutral-0);
    transition:
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) box-shadow;
  }

  .checkbox__input {
    position: absolute;
    opacity: 0;
    padding: 0;
    margin: 0;
    pointer-events: none;
  }

  .checkbox__checked-icon,
  .checkbox__indeterminate-icon {
    display: inline-flex;
    width: var(--toggle-size);
    height: var(--toggle-size);
  }

  /* Hover */
  .checkbox:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__control:hover {
    border-color: var(--sl-input-border-color-hover);
    background-color: var(--sl-input-background-color-hover);
  }

  /* Focus */
  .checkbox:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__input:focus-visible ~ .checkbox__control {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  /* Checked/indeterminate */
  .checkbox--checked .checkbox__control,
  .checkbox--indeterminate .checkbox__control {
    border-color: var(--sl-color-primary-600);
    background-color: var(--sl-color-primary-600);
  }

  /* Checked/indeterminate + hover */
  .checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__control:hover,
  .checkbox.checkbox--indeterminate:not(.checkbox--disabled) .checkbox__control:hover {
    border-color: var(--sl-color-primary-500);
    background-color: var(--sl-color-primary-500);
  }

  /* Checked/indeterminate + focus */
  .checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__input:focus-visible ~ .checkbox__control,
  .checkbox.checkbox--indeterminate:not(.checkbox--disabled) .checkbox__input:focus-visible ~ .checkbox__control {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  /* Disabled */
  .checkbox--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .checkbox__label {
    display: inline-block;
    color: var(--sl-input-label-color);
    line-height: var(--toggle-size);
    margin-inline-start: 0.5em;
    user-select: none;
    -webkit-user-select: none;
  }

  :host([required]) .checkbox__label::after {
    content: var(--sl-input-required-content);
    color: var(--sl-input-required-content-color);
    margin-inline-start: var(--sl-input-required-content-offset);
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.GI7VDIWX.js
var defaultValue = (propertyName = "value") => (proto, key) => {
  const ctor = proto.constructor;
  const attributeChangedCallback = ctor.prototype.attributeChangedCallback;
  ctor.prototype.attributeChangedCallback = function(name2, old, value) {
    var _a;
    const options = ctor.getPropertyOptions(propertyName);
    const attributeName = typeof options.attribute === "string" ? options.attribute : propertyName;
    if (name2 === attributeName) {
      const converter = options.converter || u;
      const fromAttribute = typeof converter === "function" ? converter : (_a = converter == null ? void 0 : converter.fromAttribute) != null ? _a : u.fromAttribute;
      const newValue = fromAttribute(value, options.type);
      if (this[propertyName] !== newValue) {
        this[key] = newValue;
      }
    }
    attributeChangedCallback.call(this, name2, old, value);
  };
};

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.SI4ACBFK.js
var form_control_styles_default = i`
  .form-control .form-control__label {
    display: none;
  }

  .form-control .form-control__help-text {
    display: none;
  }

  /* Label */
  .form-control--has-label .form-control__label {
    display: inline-block;
    color: var(--sl-input-label-color);
    margin-bottom: var(--sl-spacing-3x-small);
  }

  .form-control--has-label.form-control--small .form-control__label {
    font-size: var(--sl-input-label-font-size-small);
  }

  .form-control--has-label.form-control--medium .form-control__label {
    font-size: var(--sl-input-label-font-size-medium);
  }

  .form-control--has-label.form-control--large .form-control__label {
    font-size: var(--sl-input-label-font-size-large);
  }

  :host([required]) .form-control--has-label .form-control__label::after {
    content: var(--sl-input-required-content);
    margin-inline-start: var(--sl-input-required-content-offset);
    color: var(--sl-input-required-content-color);
  }

  /* Help text */
  .form-control--has-help-text .form-control__help-text {
    display: block;
    color: var(--sl-input-help-text-color);
    margin-top: var(--sl-spacing-3x-small);
  }

  .form-control--has-help-text.form-control--small .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-small);
  }

  .form-control--has-help-text.form-control--medium .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-medium);
  }

  .form-control--has-help-text.form-control--large .form-control__help-text {
    font-size: var(--sl-input-help-text-font-size-large);
  }

  .form-control--has-help-text.form-control--radio-group .form-control__help-text {
    margin-top: var(--sl-spacing-2x-small);
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.NYIIDP5N.js
var HasSlotController = class {
  constructor(host, ...slotNames) {
    this.slotNames = [];
    this.handleSlotChange = (event) => {
      const slot = event.target;
      if (this.slotNames.includes("[default]") && !slot.name || slot.name && this.slotNames.includes(slot.name)) {
        this.host.requestUpdate();
      }
    };
    (this.host = host).addController(this);
    this.slotNames = slotNames;
  }
  hasDefaultSlot() {
    return [...this.host.childNodes].some((node) => {
      if (node.nodeType === node.TEXT_NODE && node.textContent.trim() !== "") {
        return true;
      }
      if (node.nodeType === node.ELEMENT_NODE) {
        const el = node;
        const tagName = el.tagName.toLowerCase();
        if (tagName === "sl-visually-hidden") {
          return false;
        }
        if (!el.hasAttribute("slot")) {
          return true;
        }
      }
      return false;
    });
  }
  hasNamedSlot(name2) {
    return this.host.querySelector(`:scope > [slot="${name2}"]`) !== null;
  }
  test(slotName) {
    return slotName === "[default]" ? this.hasDefaultSlot() : this.hasNamedSlot(slotName);
  }
  hostConnected() {
    this.host.shadowRoot.addEventListener("slotchange", this.handleSlotChange);
  }
  hostDisconnected() {
    this.host.shadowRoot.removeEventListener("slotchange", this.handleSlotChange);
  }
};
function getTextContent(slot) {
  if (!slot) {
    return "";
  }
  const nodes = slot.assignedNodes({ flatten: true });
  let text = "";
  [...nodes].forEach((node) => {
    if (node.nodeType === Node.TEXT_NODE) {
      text += node.textContent;
    }
  });
  return text;
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.QLXRCYS4.js
var icon_styles_default = i`
  :host {
    display: inline-block;
    width: 1em;
    height: 1em;
    box-sizing: content-box !important;
  }

  svg {
    display: block;
    height: 100%;
    width: 100%;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.3Y6SB6QS.js
var basePath = "";
function setBasePath(path) {
  basePath = path;
}
function getBasePath(subpath = "") {
  if (!basePath) {
    const scripts = [...document.getElementsByTagName("script")];
    const configScript = scripts.find((script) => script.hasAttribute("data-shoelace"));
    if (configScript) {
      setBasePath(configScript.getAttribute("data-shoelace"));
    } else {
      const fallbackScript = scripts.find((s4) => {
        return /shoelace(\.min)?\.js($|\?)/.test(s4.src) || /shoelace-autoloader(\.min)?\.js($|\?)/.test(s4.src);
      });
      let path = "";
      if (fallbackScript) {
        path = fallbackScript.getAttribute("src");
      }
      setBasePath(path.split("/").slice(0, -1).join("/"));
    }
  }
  return basePath.replace(/\/$/, "") + (subpath ? `/${subpath.replace(/^\//, "")}` : ``);
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.P7ZG6EMR.js
var library = {
  name: "default",
  resolver: (name2) => getBasePath(`assets/icons/${name2}.svg`)
};
var library_default_default = library;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.3TFKS637.js
var icons = {
  caret: `
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <polyline points="6 9 12 15 18 9"></polyline>
    </svg>
  `,
  check: `
    <svg part="checked-icon" class="checkbox__icon" viewBox="0 0 16 16">
      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round">
        <g stroke="currentColor">
          <g transform="translate(3.428571, 3.428571)">
            <path d="M0,5.71428571 L3.42857143,9.14285714"></path>
            <path d="M9.14285714,0 L3.42857143,9.14285714"></path>
          </g>
        </g>
      </g>
    </svg>
  `,
  "chevron-down": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-down" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
    </svg>
  `,
  "chevron-left": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-left" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z"/>
    </svg>
  `,
  "chevron-right": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
    </svg>
  `,
  copy: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-copy" viewBox="0 0 16 16">
      <path fill-rule="evenodd" d="M4 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V2Zm2-1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H6ZM2 5a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1v-1h1v1a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h1v1H2Z"/>
    </svg>
  `,
  eye: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16">
      <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/>
      <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
    </svg>
  `,
  "eye-slash": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-slash" viewBox="0 0 16 16">
      <path d="M13.359 11.238C15.06 9.72 16 8 16 8s-3-5.5-8-5.5a7.028 7.028 0 0 0-2.79.588l.77.771A5.944 5.944 0 0 1 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.134 13.134 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755-.165.165-.337.328-.517.486l.708.709z"/>
      <path d="M11.297 9.176a3.5 3.5 0 0 0-4.474-4.474l.823.823a2.5 2.5 0 0 1 2.829 2.829l.822.822zm-2.943 1.299.822.822a3.5 3.5 0 0 1-4.474-4.474l.823.823a2.5 2.5 0 0 0 2.829 2.829z"/>
      <path d="M3.35 5.47c-.18.16-.353.322-.518.487A13.134 13.134 0 0 0 1.172 8l.195.288c.335.48.83 1.12 1.465 1.755C4.121 11.332 5.881 12.5 8 12.5c.716 0 1.39-.133 2.02-.36l.77.772A7.029 7.029 0 0 1 8 13.5C3 13.5 0 8 0 8s.939-1.721 2.641-3.238l.708.709zm10.296 8.884-12-12 .708-.708 12 12-.708.708z"/>
    </svg>
  `,
  eyedropper: `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">
      <path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708l-2-2zM2 12.707l7-7L10.293 7l-7 7H2v-1.293z"></path>
    </svg>
  `,
  "grip-vertical": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grip-vertical" viewBox="0 0 16 16">
      <path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"></path>
    </svg>
  `,
  indeterminate: `
    <svg part="indeterminate-icon" class="checkbox__icon" viewBox="0 0 16 16">
      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" stroke-linecap="round">
        <g stroke="currentColor" stroke-width="2">
          <g transform="translate(2.285714, 6.857143)">
            <path d="M10.2857143,1.14285714 L1.14285714,1.14285714"></path>
          </g>
        </g>
      </g>
    </svg>
  `,
  "person-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
      <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
    </svg>
  `,
  "play-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-fill" viewBox="0 0 16 16">
      <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z"></path>
    </svg>
  `,
  "pause-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pause-fill" viewBox="0 0 16 16">
      <path d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5zm5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5z"></path>
    </svg>
  `,
  radio: `
    <svg part="checked-icon" class="radio__icon" viewBox="0 0 16 16">
      <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g fill="currentColor">
          <circle cx="8" cy="8" r="3.42857143"></circle>
        </g>
      </g>
    </svg>
  `,
  "star-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16">
      <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z"/>
    </svg>
  `,
  "x-lg": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
      <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"/>
    </svg>
  `,
  "x-circle-fill": `
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle-fill" viewBox="0 0 16 16">
      <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"></path>
    </svg>
  `
};
var systemLibrary = {
  name: "system",
  resolver: (name2) => {
    if (name2 in icons) {
      return `data:image/svg+xml,${encodeURIComponent(icons[name2])}`;
    }
    return "";
  }
};
var library_system_default = systemLibrary;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ZL53POKZ.js
var registry = [library_default_default, library_system_default];
var watchedIcons = [];
function watchIcon(icon) {
  watchedIcons.push(icon);
}
function unwatchIcon(icon) {
  watchedIcons = watchedIcons.filter((el) => el !== icon);
}
function getIconLibrary(name2) {
  return registry.find((lib) => lib.name === name2);
}

// node_modules/lit-html/directive-helpers.js
var { I: t5 } = Z;
var e9 = (o13, t6) => void 0 === t6 ? void 0 !== o13?._$litType$ : o13?._$litType$ === t6;
var f3 = (o13) => void 0 === o13.strings;
var u3 = {};
var m2 = (o13, t6 = u3) => o13._$AH = t6;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.5YPURQKE.js
var CACHEABLE_ERROR = Symbol();
var RETRYABLE_ERROR = Symbol();
var parser;
var iconCache = /* @__PURE__ */ new Map();
var SlIcon = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.initialRender = false;
    this.svg = null;
    this.label = "";
    this.library = "default";
  }
  /** Given a URL, this function returns the resulting SVG element or an appropriate error symbol. */
  async resolveIcon(url, library2) {
    var _a;
    let fileData;
    if (library2 == null ? void 0 : library2.spriteSheet) {
      this.svg = x`<svg part="svg">
        <use part="use" href="${url}"></use>
      </svg>`;
      return this.svg;
    }
    try {
      fileData = await fetch(url, { mode: "cors" });
      if (!fileData.ok) return fileData.status === 410 ? CACHEABLE_ERROR : RETRYABLE_ERROR;
    } catch (e12) {
      return RETRYABLE_ERROR;
    }
    try {
      const div = document.createElement("div");
      div.innerHTML = await fileData.text();
      const svg = div.firstElementChild;
      if (((_a = svg == null ? void 0 : svg.tagName) == null ? void 0 : _a.toLowerCase()) !== "svg") return CACHEABLE_ERROR;
      if (!parser) parser = new DOMParser();
      const doc = parser.parseFromString(svg.outerHTML, "text/html");
      const svgEl = doc.body.querySelector("svg");
      if (!svgEl) return CACHEABLE_ERROR;
      svgEl.part.add("svg");
      return document.adoptNode(svgEl);
    } catch (e12) {
      return CACHEABLE_ERROR;
    }
  }
  connectedCallback() {
    super.connectedCallback();
    watchIcon(this);
  }
  firstUpdated() {
    this.initialRender = true;
    this.setIcon();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    unwatchIcon(this);
  }
  getIconSource() {
    const library2 = getIconLibrary(this.library);
    if (this.name && library2) {
      return {
        url: library2.resolver(this.name),
        fromLibrary: true
      };
    }
    return {
      url: this.src,
      fromLibrary: false
    };
  }
  handleLabelChange() {
    const hasLabel = typeof this.label === "string" && this.label.length > 0;
    if (hasLabel) {
      this.setAttribute("role", "img");
      this.setAttribute("aria-label", this.label);
      this.removeAttribute("aria-hidden");
    } else {
      this.removeAttribute("role");
      this.removeAttribute("aria-label");
      this.setAttribute("aria-hidden", "true");
    }
  }
  async setIcon() {
    var _a;
    const { url, fromLibrary } = this.getIconSource();
    const library2 = fromLibrary ? getIconLibrary(this.library) : void 0;
    if (!url) {
      this.svg = null;
      return;
    }
    let iconResolver = iconCache.get(url);
    if (!iconResolver) {
      iconResolver = this.resolveIcon(url, library2);
      iconCache.set(url, iconResolver);
    }
    if (!this.initialRender) {
      return;
    }
    const svg = await iconResolver;
    if (svg === RETRYABLE_ERROR) {
      iconCache.delete(url);
    }
    if (url !== this.getIconSource().url) {
      return;
    }
    if (e9(svg)) {
      this.svg = svg;
      if (library2) {
        await this.updateComplete;
        const shadowSVG = this.shadowRoot.querySelector("[part='svg']");
        if (typeof library2.mutator === "function" && shadowSVG) {
          library2.mutator(shadowSVG);
        }
      }
      return;
    }
    switch (svg) {
      case RETRYABLE_ERROR:
      case CACHEABLE_ERROR:
        this.svg = null;
        this.emit("sl-error");
        break;
      default:
        this.svg = svg.cloneNode(true);
        (_a = library2 == null ? void 0 : library2.mutator) == null ? void 0 : _a.call(library2, this.svg);
        this.emit("sl-load");
    }
  }
  render() {
    return this.svg;
  }
};
SlIcon.styles = [component_styles_default, icon_styles_default];
__decorateClass([
  r6()
], SlIcon.prototype, "svg", 2);
__decorateClass([
  n4({ reflect: true })
], SlIcon.prototype, "name", 2);
__decorateClass([
  n4()
], SlIcon.prototype, "src", 2);
__decorateClass([
  n4()
], SlIcon.prototype, "label", 2);
__decorateClass([
  n4({ reflect: true })
], SlIcon.prototype, "library", 2);
__decorateClass([
  watch("label")
], SlIcon.prototype, "handleLabelChange", 1);
__decorateClass([
  watch(["name", "src", "library"])
], SlIcon.prototype, "setIcon", 1);

// node_modules/lit-html/directives/if-defined.js
var o5 = (o13) => o13 ?? E;

// node_modules/lit-html/directives/live.js
var l3 = e6(class extends i5 {
  constructor(r10) {
    if (super(r10), r10.type !== t4.PROPERTY && r10.type !== t4.ATTRIBUTE && r10.type !== t4.BOOLEAN_ATTRIBUTE) throw Error("The `live` directive is not allowed on child or event bindings");
    if (!f3(r10)) throw Error("`live` bindings can only contain a single expression");
  }
  render(r10) {
    return r10;
  }
  update(i9, [t6]) {
    if (t6 === T || t6 === E) return t6;
    const o13 = i9.element, l5 = i9.name;
    if (i9.type === t4.PROPERTY) {
      if (t6 === o13[l5]) return T;
    } else if (i9.type === t4.BOOLEAN_ATTRIBUTE) {
      if (!!t6 === o13.hasAttribute(l5)) return T;
    } else if (i9.type === t4.ATTRIBUTE && o13.getAttribute(l5) === t6 + "") return T;
    return m2(i9), t6;
  }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.DLKOLJ5T.js
var SlCheckbox = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      value: (control) => control.checked ? control.value || "on" : void 0,
      defaultValue: (control) => control.defaultChecked,
      setValue: (control, checked) => control.checked = checked
    });
    this.hasSlotController = new HasSlotController(this, "help-text");
    this.hasFocus = false;
    this.title = "";
    this.name = "";
    this.size = "medium";
    this.disabled = false;
    this.checked = false;
    this.indeterminate = false;
    this.defaultChecked = false;
    this.form = "";
    this.required = false;
    this.helpText = "";
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  handleClick() {
    this.checked = !this.checked;
    this.indeterminate = false;
    this.emit("sl-change");
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleInput() {
    this.emit("sl-input");
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleDisabledChange() {
    this.formControlController.setValidity(this.disabled);
  }
  handleStateChange() {
    this.input.checked = this.checked;
    this.input.indeterminate = this.indeterminate;
    this.formControlController.updateValidity();
  }
  /** Simulates a click on the checkbox. */
  click() {
    this.input.click();
  }
  /** Sets focus on the checkbox. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the checkbox. */
  blur() {
    this.input.blur();
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /**
   * Sets a custom validation message. The value provided will be shown to the user when the form is submitted. To clear
   * the custom validation message, call this method with an empty string.
   */
  setCustomValidity(message2) {
    this.input.setCustomValidity(message2);
    this.formControlController.updateValidity();
  }
  render() {
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    return x`
      <div
        class=${e7({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          part="base"
          class=${e7({
      checkbox: true,
      "checkbox--checked": this.checked,
      "checkbox--disabled": this.disabled,
      "checkbox--focused": this.hasFocus,
      "checkbox--indeterminate": this.indeterminate,
      "checkbox--small": this.size === "small",
      "checkbox--medium": this.size === "medium",
      "checkbox--large": this.size === "large"
    })}
        >
          <input
            class="checkbox__input"
            type="checkbox"
            title=${this.title}
            name=${this.name}
            value=${o5(this.value)}
            .indeterminate=${l3(this.indeterminate)}
            .checked=${l3(this.checked)}
            .disabled=${this.disabled}
            .required=${this.required}
            aria-checked=${this.checked ? "true" : "false"}
            aria-describedby="help-text"
            @click=${this.handleClick}
            @input=${this.handleInput}
            @invalid=${this.handleInvalid}
            @blur=${this.handleBlur}
            @focus=${this.handleFocus}
          />

          <span
            part="control${this.checked ? " control--checked" : ""}${this.indeterminate ? " control--indeterminate" : ""}"
            class="checkbox__control"
          >
            ${this.checked ? x`
                  <sl-icon part="checked-icon" class="checkbox__checked-icon" library="system" name="check"></sl-icon>
                ` : ""}
            ${!this.checked && this.indeterminate ? x`
                  <sl-icon
                    part="indeterminate-icon"
                    class="checkbox__indeterminate-icon"
                    library="system"
                    name="indeterminate"
                  ></sl-icon>
                ` : ""}
          </span>

          <div part="label" class="checkbox__label">
            <slot></slot>
          </div>
        </label>

        <div
          aria-hidden=${hasHelpText ? "false" : "true"}
          class="form-control__help-text"
          id="help-text"
          part="form-control-help-text"
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlCheckbox.styles = [component_styles_default, form_control_styles_default, checkbox_styles_default];
SlCheckbox.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e5('input[type="checkbox"]')
], SlCheckbox.prototype, "input", 2);
__decorateClass([
  r6()
], SlCheckbox.prototype, "hasFocus", 2);
__decorateClass([
  n4()
], SlCheckbox.prototype, "title", 2);
__decorateClass([
  n4()
], SlCheckbox.prototype, "name", 2);
__decorateClass([
  n4()
], SlCheckbox.prototype, "value", 2);
__decorateClass([
  n4({ reflect: true })
], SlCheckbox.prototype, "size", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlCheckbox.prototype, "disabled", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlCheckbox.prototype, "checked", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlCheckbox.prototype, "indeterminate", 2);
__decorateClass([
  defaultValue("checked")
], SlCheckbox.prototype, "defaultChecked", 2);
__decorateClass([
  n4({ reflect: true })
], SlCheckbox.prototype, "form", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlCheckbox.prototype, "required", 2);
__decorateClass([
  n4({ attribute: "help-text" })
], SlCheckbox.prototype, "helpText", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlCheckbox.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch(["checked", "indeterminate"], { waitUntilFirstUpdate: true })
], SlCheckbox.prototype, "handleStateChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.7DUCI5S4.js
var spinner_styles_default = i`
  :host {
    --track-width: 2px;
    --track-color: rgb(128 128 128 / 25%);
    --indicator-color: var(--sl-color-primary-600);
    --speed: 2s;

    display: inline-flex;
    width: 1em;
    height: 1em;
    flex: none;
  }

  .spinner {
    flex: 1 1 auto;
    height: 100%;
    width: 100%;
  }

  .spinner__track,
  .spinner__indicator {
    fill: none;
    stroke-width: var(--track-width);
    r: calc(0.5em - var(--track-width) / 2);
    cx: 0.5em;
    cy: 0.5em;
    transform-origin: 50% 50%;
  }

  .spinner__track {
    stroke: var(--track-color);
    transform-origin: 0% 0%;
  }

  .spinner__indicator {
    stroke: var(--indicator-color);
    stroke-linecap: round;
    stroke-dasharray: 150% 75%;
    animation: spin var(--speed) linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
      stroke-dasharray: 0.05em, 3em;
    }

    50% {
      transform: rotate(450deg);
      stroke-dasharray: 1.375em, 1.375em;
    }

    100% {
      transform: rotate(1080deg);
      stroke-dasharray: 0.05em, 3em;
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.YB3JVLEN.js
var SlSpinner = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
  }
  render() {
    return x`
      <svg part="base" class="spinner" role="progressbar" aria-label=${this.localize.term("loading")}>
        <circle class="spinner__track"></circle>
        <circle class="spinner__indicator"></circle>
      </svg>
    `;
  }
};
SlSpinner.styles = [component_styles_default, spinner_styles_default];

// node_modules/lit-html/directives/when.js
function n5(n10, r10, t6) {
  return n10 ? r10(n10) : t6?.(n10);
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.NMGKEQOG.js
var _SlTreeItem = class _SlTreeItem2 extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.indeterminate = false;
    this.isLeaf = false;
    this.loading = false;
    this.selectable = false;
    this.expanded = false;
    this.selected = false;
    this.disabled = false;
    this.lazy = false;
  }
  static isTreeItem(node) {
    return node instanceof Element && node.getAttribute("role") === "treeitem";
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "treeitem");
    this.setAttribute("tabindex", "-1");
    if (this.isNestedItem()) {
      this.slot = "children";
    }
  }
  firstUpdated() {
    this.childrenContainer.hidden = !this.expanded;
    this.childrenContainer.style.height = this.expanded ? "auto" : "0";
    this.isLeaf = !this.lazy && this.getChildrenItems().length === 0;
    this.handleExpandedChange();
  }
  async animateCollapse() {
    this.emit("sl-collapse");
    await stopAnimations(this.childrenContainer);
    const { keyframes, options } = getAnimation(this, "tree-item.collapse", { dir: this.localize.dir() });
    await animateTo(
      this.childrenContainer,
      shimKeyframesHeightAuto(keyframes, this.childrenContainer.scrollHeight),
      options
    );
    this.childrenContainer.hidden = true;
    this.emit("sl-after-collapse");
  }
  // Checks whether the item is nested into an item
  isNestedItem() {
    const parent = this.parentElement;
    return !!parent && _SlTreeItem2.isTreeItem(parent);
  }
  handleChildrenSlotChange() {
    this.loading = false;
    this.isLeaf = !this.lazy && this.getChildrenItems().length === 0;
  }
  willUpdate(changedProperties) {
    if (changedProperties.has("selected") && !changedProperties.has("indeterminate")) {
      this.indeterminate = false;
    }
  }
  async animateExpand() {
    this.emit("sl-expand");
    await stopAnimations(this.childrenContainer);
    this.childrenContainer.hidden = false;
    const { keyframes, options } = getAnimation(this, "tree-item.expand", { dir: this.localize.dir() });
    await animateTo(
      this.childrenContainer,
      shimKeyframesHeightAuto(keyframes, this.childrenContainer.scrollHeight),
      options
    );
    this.childrenContainer.style.height = "auto";
    this.emit("sl-after-expand");
  }
  handleLoadingChange() {
    this.setAttribute("aria-busy", this.loading ? "true" : "false");
    if (!this.loading) {
      this.animateExpand();
    }
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  handleSelectedChange() {
    this.setAttribute("aria-selected", this.selected ? "true" : "false");
  }
  handleExpandedChange() {
    if (!this.isLeaf) {
      this.setAttribute("aria-expanded", this.expanded ? "true" : "false");
    } else {
      this.removeAttribute("aria-expanded");
    }
  }
  handleExpandAnimation() {
    if (this.expanded) {
      if (this.lazy) {
        this.loading = true;
        this.emit("sl-lazy-load");
      } else {
        this.animateExpand();
      }
    } else {
      this.animateCollapse();
    }
  }
  handleLazyChange() {
    this.emit("sl-lazy-change");
  }
  /** Gets all the nested tree items in this node. */
  getChildrenItems({ includeDisabled = true } = {}) {
    return this.childrenSlot ? [...this.childrenSlot.assignedElements({ flatten: true })].filter(
      (item) => _SlTreeItem2.isTreeItem(item) && (includeDisabled || !item.disabled)
    ) : [];
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    const showExpandButton = !this.loading && (!this.isLeaf || this.lazy);
    return x`
      <div
        part="base"
        class="${e7({
      "tree-item": true,
      "tree-item--expanded": this.expanded,
      "tree-item--selected": this.selected,
      "tree-item--disabled": this.disabled,
      "tree-item--leaf": this.isLeaf,
      "tree-item--has-expand-button": showExpandButton,
      "tree-item--rtl": this.localize.dir() === "rtl"
    })}"
      >
        <div
          class="tree-item__item"
          part="
            item
            ${this.disabled ? "item--disabled" : ""}
            ${this.expanded ? "item--expanded" : ""}
            ${this.indeterminate ? "item--indeterminate" : ""}
            ${this.selected ? "item--selected" : ""}
          "
        >
          <div class="tree-item__indentation" part="indentation"></div>

          <div
            part="expand-button"
            class=${e7({
      "tree-item__expand-button": true,
      "tree-item__expand-button--visible": showExpandButton
    })}
            aria-hidden="true"
          >
            ${n5(
      this.loading,
      () => x` <sl-spinner part="spinner" exportparts="base:spinner__base"></sl-spinner> `
    )}
            <slot class="tree-item__expand-icon-slot" name="expand-icon">
              <sl-icon library="system" name=${isRtl ? "chevron-left" : "chevron-right"}></sl-icon>
            </slot>
            <slot class="tree-item__expand-icon-slot" name="collapse-icon">
              <sl-icon library="system" name=${isRtl ? "chevron-left" : "chevron-right"}></sl-icon>
            </slot>
          </div>

          ${n5(
      this.selectable,
      () => x`
              <sl-checkbox
                part="checkbox"
                exportparts="
                    base:checkbox__base,
                    control:checkbox__control,
                    control--checked:checkbox__control--checked,
                    control--indeterminate:checkbox__control--indeterminate,
                    checked-icon:checkbox__checked-icon,
                    indeterminate-icon:checkbox__indeterminate-icon,
                    label:checkbox__label
                  "
                class="tree-item__checkbox"
                ?disabled="${this.disabled}"
                ?checked="${l3(this.selected)}"
                ?indeterminate="${this.indeterminate}"
                tabindex="-1"
              ></sl-checkbox>
            `
    )}

          <slot class="tree-item__label" part="label"></slot>
        </div>

        <div class="tree-item__children" part="children" role="group">
          <slot name="children" @slotchange="${this.handleChildrenSlotChange}"></slot>
        </div>
      </div>
    `;
  }
};
_SlTreeItem.styles = [component_styles_default, tree_item_styles_default];
_SlTreeItem.dependencies = {
  "sl-checkbox": SlCheckbox,
  "sl-icon": SlIcon,
  "sl-spinner": SlSpinner
};
__decorateClass([
  r6()
], _SlTreeItem.prototype, "indeterminate", 2);
__decorateClass([
  r6()
], _SlTreeItem.prototype, "isLeaf", 2);
__decorateClass([
  r6()
], _SlTreeItem.prototype, "loading", 2);
__decorateClass([
  r6()
], _SlTreeItem.prototype, "selectable", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], _SlTreeItem.prototype, "expanded", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], _SlTreeItem.prototype, "selected", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], _SlTreeItem.prototype, "disabled", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], _SlTreeItem.prototype, "lazy", 2);
__decorateClass([
  e5("slot:not([name])")
], _SlTreeItem.prototype, "defaultSlot", 2);
__decorateClass([
  e5("slot[name=children]")
], _SlTreeItem.prototype, "childrenSlot", 2);
__decorateClass([
  e5(".tree-item__item")
], _SlTreeItem.prototype, "itemElement", 2);
__decorateClass([
  e5(".tree-item__children")
], _SlTreeItem.prototype, "childrenContainer", 2);
__decorateClass([
  e5(".tree-item__expand-button slot")
], _SlTreeItem.prototype, "expandButtonSlot", 2);
__decorateClass([
  watch("loading", { waitUntilFirstUpdate: true })
], _SlTreeItem.prototype, "handleLoadingChange", 1);
__decorateClass([
  watch("disabled")
], _SlTreeItem.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("selected")
], _SlTreeItem.prototype, "handleSelectedChange", 1);
__decorateClass([
  watch("expanded", { waitUntilFirstUpdate: true })
], _SlTreeItem.prototype, "handleExpandedChange", 1);
__decorateClass([
  watch("expanded", { waitUntilFirstUpdate: true })
], _SlTreeItem.prototype, "handleExpandAnimation", 1);
__decorateClass([
  watch("lazy", { waitUntilFirstUpdate: true })
], _SlTreeItem.prototype, "handleLazyChange", 1);
var SlTreeItem = _SlTreeItem;
setDefaultAnimation("tree-item.expand", {
  keyframes: [
    { height: "0", opacity: "0", overflow: "hidden" },
    { height: "auto", opacity: "1", overflow: "hidden" }
  ],
  options: { duration: 250, easing: "cubic-bezier(0.4, 0.0, 0.2, 1)" }
});
setDefaultAnimation("tree-item.collapse", {
  keyframes: [
    { height: "auto", opacity: "1", overflow: "hidden" },
    { height: "0", opacity: "0", overflow: "hidden" }
  ],
  options: { duration: 200, easing: "cubic-bezier(0.4, 0.0, 0.2, 1)" }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.HF7GESMZ.js
function clamp2(value, min2, max2) {
  const noNegativeZero = (n10) => Object.is(n10, -0) ? 0 : n10;
  if (value < min2) {
    return noNegativeZero(min2);
  }
  if (value > max2) {
    return noNegativeZero(max2);
  }
  return noNegativeZero(value);
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.3YVPMFBE.js
function syncCheckboxes(changedTreeItem, initialSync = false) {
  function syncParentItem(treeItem) {
    const children = treeItem.getChildrenItems({ includeDisabled: false });
    if (children.length) {
      const allChecked = children.every((item) => item.selected);
      const allUnchecked = children.every((item) => !item.selected && !item.indeterminate);
      treeItem.selected = allChecked;
      treeItem.indeterminate = !allChecked && !allUnchecked;
    }
  }
  function syncAncestors(treeItem) {
    const parentItem = treeItem.parentElement;
    if (SlTreeItem.isTreeItem(parentItem)) {
      syncParentItem(parentItem);
      syncAncestors(parentItem);
    }
  }
  function syncDescendants(treeItem) {
    for (const childItem of treeItem.getChildrenItems()) {
      childItem.selected = initialSync ? treeItem.selected || childItem.selected : !childItem.disabled && treeItem.selected;
      syncDescendants(childItem);
    }
    if (initialSync) {
      syncParentItem(treeItem);
    }
  }
  syncDescendants(changedTreeItem);
  syncAncestors(changedTreeItem);
}
var SlTree = class extends ShoelaceElement {
  constructor() {
    super();
    this.selection = "single";
    this.clickTarget = null;
    this.localize = new LocalizeController2(this);
    this.initTreeItem = (item) => {
      item.selectable = this.selection === "multiple";
      ["expand", "collapse"].filter((status) => !!this.querySelector(`[slot="${status}-icon"]`)).forEach((status) => {
        const existingIcon = item.querySelector(`[slot="${status}-icon"]`);
        const expandButtonIcon = this.getExpandButtonIcon(status);
        if (!expandButtonIcon) return;
        if (existingIcon === null) {
          item.append(expandButtonIcon);
        } else if (existingIcon.hasAttribute("data-default")) {
          existingIcon.replaceWith(expandButtonIcon);
        } else {
        }
      });
    };
    this.handleTreeChanged = (mutations) => {
      for (const mutation of mutations) {
        const addedNodes = [...mutation.addedNodes].filter(SlTreeItem.isTreeItem);
        const removedNodes = [...mutation.removedNodes].filter(SlTreeItem.isTreeItem);
        addedNodes.forEach(this.initTreeItem);
        if (this.lastFocusedItem && removedNodes.includes(this.lastFocusedItem)) {
          this.lastFocusedItem = null;
        }
      }
    };
    this.handleFocusOut = (event) => {
      const relatedTarget = event.relatedTarget;
      if (!relatedTarget || !this.contains(relatedTarget)) {
        this.tabIndex = 0;
      }
    };
    this.handleFocusIn = (event) => {
      const target = event.target;
      if (event.target === this) {
        this.focusItem(this.lastFocusedItem || this.getAllTreeItems()[0]);
      }
      if (SlTreeItem.isTreeItem(target) && !target.disabled) {
        if (this.lastFocusedItem) {
          this.lastFocusedItem.tabIndex = -1;
        }
        this.lastFocusedItem = target;
        this.tabIndex = -1;
        target.tabIndex = 0;
      }
    };
    this.addEventListener("focusin", this.handleFocusIn);
    this.addEventListener("focusout", this.handleFocusOut);
    this.addEventListener("sl-lazy-change", this.handleSlotChange);
  }
  async connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "tree");
    this.setAttribute("tabindex", "0");
    await this.updateComplete;
    this.mutationObserver = new MutationObserver(this.handleTreeChanged);
    this.mutationObserver.observe(this, { childList: true, subtree: true });
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.mutationObserver) == null ? void 0 : _a.disconnect();
  }
  // Generates a clone of the expand icon element to use for each tree item
  getExpandButtonIcon(status) {
    const slot = status === "expand" ? this.expandedIconSlot : this.collapsedIconSlot;
    const icon = slot.assignedElements({ flatten: true })[0];
    if (icon) {
      const clone2 = icon.cloneNode(true);
      [clone2, ...clone2.querySelectorAll("[id]")].forEach((el) => el.removeAttribute("id"));
      clone2.setAttribute("data-default", "");
      clone2.slot = `${status}-icon`;
      return clone2;
    }
    return null;
  }
  selectItem(selectedItem) {
    const previousSelection = [...this.selectedItems];
    if (this.selection === "multiple") {
      selectedItem.selected = !selectedItem.selected;
      if (selectedItem.lazy) {
        selectedItem.expanded = true;
      }
      syncCheckboxes(selectedItem);
    } else if (this.selection === "single" || selectedItem.isLeaf) {
      const items = this.getAllTreeItems();
      for (const item of items) {
        item.selected = item === selectedItem;
      }
    } else if (this.selection === "leaf") {
      selectedItem.expanded = !selectedItem.expanded;
    }
    const nextSelection = this.selectedItems;
    if (previousSelection.length !== nextSelection.length || nextSelection.some((item) => !previousSelection.includes(item))) {
      Promise.all(nextSelection.map((el) => el.updateComplete)).then(() => {
        this.emit("sl-selection-change", { detail: { selection: nextSelection } });
      });
    }
  }
  getAllTreeItems() {
    return [...this.querySelectorAll("sl-tree-item")];
  }
  focusItem(item) {
    item == null ? void 0 : item.focus();
  }
  handleKeyDown(event) {
    if (!["ArrowDown", "ArrowUp", "ArrowRight", "ArrowLeft", "Home", "End", "Enter", " "].includes(event.key)) {
      return;
    }
    if (event.composedPath().some((el) => {
      var _a;
      return ["input", "textarea"].includes((_a = el == null ? void 0 : el.tagName) == null ? void 0 : _a.toLowerCase());
    })) {
      return;
    }
    const items = this.getFocusableItems();
    const isLtr = this.localize.dir() === "ltr";
    const isRtl = this.localize.dir() === "rtl";
    if (items.length > 0) {
      event.preventDefault();
      const activeItemIndex = items.findIndex((item) => item.matches(":focus"));
      const activeItem = items[activeItemIndex];
      const focusItemAt = (index) => {
        const item = items[clamp2(index, 0, items.length - 1)];
        this.focusItem(item);
      };
      const toggleExpand = (expanded) => {
        activeItem.expanded = expanded;
      };
      if (event.key === "ArrowDown") {
        focusItemAt(activeItemIndex + 1);
      } else if (event.key === "ArrowUp") {
        focusItemAt(activeItemIndex - 1);
      } else if (isLtr && event.key === "ArrowRight" || isRtl && event.key === "ArrowLeft") {
        if (!activeItem || activeItem.disabled || activeItem.expanded || activeItem.isLeaf && !activeItem.lazy) {
          focusItemAt(activeItemIndex + 1);
        } else {
          toggleExpand(true);
        }
      } else if (isLtr && event.key === "ArrowLeft" || isRtl && event.key === "ArrowRight") {
        if (!activeItem || activeItem.disabled || activeItem.isLeaf || !activeItem.expanded) {
          focusItemAt(activeItemIndex - 1);
        } else {
          toggleExpand(false);
        }
      } else if (event.key === "Home") {
        focusItemAt(0);
      } else if (event.key === "End") {
        focusItemAt(items.length - 1);
      } else if (event.key === "Enter" || event.key === " ") {
        if (!activeItem.disabled) {
          this.selectItem(activeItem);
        }
      }
    }
  }
  handleClick(event) {
    const target = event.target;
    const treeItem = target.closest("sl-tree-item");
    const isExpandButton = event.composedPath().some((el) => {
      var _a;
      return (_a = el == null ? void 0 : el.classList) == null ? void 0 : _a.contains("tree-item__expand-button");
    });
    if (!treeItem || treeItem.disabled || target !== this.clickTarget) {
      return;
    }
    if (isExpandButton) {
      treeItem.expanded = !treeItem.expanded;
    } else {
      this.selectItem(treeItem);
    }
  }
  handleMouseDown(event) {
    this.clickTarget = event.target;
  }
  handleSlotChange() {
    const items = this.getAllTreeItems();
    items.forEach(this.initTreeItem);
  }
  async handleSelectionChange() {
    const isSelectionMultiple = this.selection === "multiple";
    const items = this.getAllTreeItems();
    this.setAttribute("aria-multiselectable", isSelectionMultiple ? "true" : "false");
    for (const item of items) {
      item.selectable = isSelectionMultiple;
    }
    if (isSelectionMultiple) {
      await this.updateComplete;
      [...this.querySelectorAll(":scope > sl-tree-item")].forEach(
        (treeItem) => syncCheckboxes(treeItem, true)
      );
    }
  }
  /** @internal Returns the list of tree items that are selected in the tree. */
  get selectedItems() {
    const items = this.getAllTreeItems();
    const isSelected = (item) => item.selected;
    return items.filter(isSelected);
  }
  /** @internal Gets focusable tree items in the tree. */
  getFocusableItems() {
    const items = this.getAllTreeItems();
    const collapsedItems = /* @__PURE__ */ new Set();
    return items.filter((item) => {
      var _a;
      if (item.disabled) return false;
      const parent = (_a = item.parentElement) == null ? void 0 : _a.closest("[role=treeitem]");
      if (parent && (!parent.expanded || parent.loading || collapsedItems.has(parent))) {
        collapsedItems.add(item);
      }
      return !collapsedItems.has(item);
    });
  }
  render() {
    return x`
      <div
        part="base"
        class="tree"
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
        @mousedown=${this.handleMouseDown}
      >
        <slot @slotchange=${this.handleSlotChange}></slot>
        <span hidden aria-hidden="true"><slot name="expand-icon"></slot></span>
        <span hidden aria-hidden="true"><slot name="collapse-icon"></slot></span>
      </div>
    `;
  }
};
SlTree.styles = [component_styles_default, tree_styles_default];
__decorateClass([
  e5("slot:not([name])")
], SlTree.prototype, "defaultSlot", 2);
__decorateClass([
  e5("slot[name=expand-icon]")
], SlTree.prototype, "expandedIconSlot", 2);
__decorateClass([
  e5("slot[name=collapse-icon]")
], SlTree.prototype, "collapsedIconSlot", 2);
__decorateClass([
  n4()
], SlTree.prototype, "selection", 2);
__decorateClass([
  watch("selection")
], SlTree.prototype, "handleSelectionChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.HNFTQE2V.js
SlTree.define("sl-tree");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.EEWEM62H.js
SlTreeItem.define("sl-tree-item");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XJU7WU2G.js
var tab_group_styles_default = i`
  :host {
    --indicator-color: var(--sl-color-primary-600);
    --track-color: var(--sl-color-neutral-200);
    --track-width: 2px;

    display: block;
  }

  .tab-group {
    display: flex;
    border-radius: 0;
  }

  .tab-group__tabs {
    display: flex;
    position: relative;
  }

  .tab-group__indicator {
    position: absolute;
    transition:
      var(--sl-transition-fast) translate ease,
      var(--sl-transition-fast) width ease;
  }

  .tab-group--has-scroll-controls .tab-group__nav-container {
    position: relative;
    padding: 0 var(--sl-spacing-x-large);
  }

  .tab-group--has-scroll-controls .tab-group__scroll-button--start--hidden,
  .tab-group--has-scroll-controls .tab-group__scroll-button--end--hidden {
    visibility: hidden;
  }

  .tab-group__body {
    display: block;
    overflow: auto;
  }

  .tab-group__scroll-button {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    bottom: 0;
    width: var(--sl-spacing-x-large);
  }

  .tab-group__scroll-button--start {
    left: 0;
  }

  .tab-group__scroll-button--end {
    right: 0;
  }

  .tab-group--rtl .tab-group__scroll-button--start {
    left: auto;
    right: 0;
  }

  .tab-group--rtl .tab-group__scroll-button--end {
    left: 0;
    right: auto;
  }

  /*
   * Top
   */

  .tab-group--top {
    flex-direction: column;
  }

  .tab-group--top .tab-group__nav-container {
    order: 1;
  }

  .tab-group--top .tab-group__nav {
    display: flex;
    overflow-x: auto;

    /* Hide scrollbar in Firefox */
    scrollbar-width: none;
  }

  /* Hide scrollbar in Chrome/Safari */
  .tab-group--top .tab-group__nav::-webkit-scrollbar {
    width: 0;
    height: 0;
  }

  .tab-group--top .tab-group__tabs {
    flex: 1 1 auto;
    position: relative;
    flex-direction: row;
    border-bottom: solid var(--track-width) var(--track-color);
  }

  .tab-group--top .tab-group__indicator {
    bottom: calc(-1 * var(--track-width));
    border-bottom: solid var(--track-width) var(--indicator-color);
  }

  .tab-group--top .tab-group__body {
    order: 2;
  }

  .tab-group--top ::slotted(sl-tab-panel) {
    --padding: var(--sl-spacing-medium) 0;
  }

  /*
   * Bottom
   */

  .tab-group--bottom {
    flex-direction: column;
  }

  .tab-group--bottom .tab-group__nav-container {
    order: 2;
  }

  .tab-group--bottom .tab-group__nav {
    display: flex;
    overflow-x: auto;

    /* Hide scrollbar in Firefox */
    scrollbar-width: none;
  }

  /* Hide scrollbar in Chrome/Safari */
  .tab-group--bottom .tab-group__nav::-webkit-scrollbar {
    width: 0;
    height: 0;
  }

  .tab-group--bottom .tab-group__tabs {
    flex: 1 1 auto;
    position: relative;
    flex-direction: row;
    border-top: solid var(--track-width) var(--track-color);
  }

  .tab-group--bottom .tab-group__indicator {
    top: calc(-1 * var(--track-width));
    border-top: solid var(--track-width) var(--indicator-color);
  }

  .tab-group--bottom .tab-group__body {
    order: 1;
  }

  .tab-group--bottom ::slotted(sl-tab-panel) {
    --padding: var(--sl-spacing-medium) 0;
  }

  /*
   * Start
   */

  .tab-group--start {
    flex-direction: row;
  }

  .tab-group--start .tab-group__nav-container {
    order: 1;
  }

  .tab-group--start .tab-group__tabs {
    flex: 0 0 auto;
    flex-direction: column;
    border-inline-end: solid var(--track-width) var(--track-color);
  }

  .tab-group--start .tab-group__indicator {
    right: calc(-1 * var(--track-width));
    border-right: solid var(--track-width) var(--indicator-color);
  }

  .tab-group--start.tab-group--rtl .tab-group__indicator {
    right: auto;
    left: calc(-1 * var(--track-width));
  }

  .tab-group--start .tab-group__body {
    flex: 1 1 auto;
    order: 2;
  }

  .tab-group--start ::slotted(sl-tab-panel) {
    --padding: 0 var(--sl-spacing-medium);
  }

  /*
   * End
   */

  .tab-group--end {
    flex-direction: row;
  }

  .tab-group--end .tab-group__nav-container {
    order: 2;
  }

  .tab-group--end .tab-group__tabs {
    flex: 0 0 auto;
    flex-direction: column;
    border-left: solid var(--track-width) var(--track-color);
  }

  .tab-group--end .tab-group__indicator {
    left: calc(-1 * var(--track-width));
    border-inline-start: solid var(--track-width) var(--indicator-color);
  }

  .tab-group--end.tab-group--rtl .tab-group__indicator {
    right: calc(-1 * var(--track-width));
    left: auto;
  }

  .tab-group--end .tab-group__body {
    flex: 1 1 auto;
    order: 1;
  }

  .tab-group--end ::slotted(sl-tab-panel) {
    --padding: 0 var(--sl-spacing-medium);
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.5VKIB4HA.js
var resize_observer_styles_default = i`
  :host {
    display: contents;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.KHOIA64U.js
var SlResizeObserver = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.observedElements = [];
    this.disabled = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.resizeObserver = new ResizeObserver((entries) => {
      this.emit("sl-resize", { detail: { entries } });
    });
    if (!this.disabled) {
      this.startObserver();
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.stopObserver();
  }
  handleSlotChange() {
    if (!this.disabled) {
      this.startObserver();
    }
  }
  startObserver() {
    const slot = this.shadowRoot.querySelector("slot");
    if (slot !== null) {
      const elements = slot.assignedElements({ flatten: true });
      this.observedElements.forEach((el) => this.resizeObserver.unobserve(el));
      this.observedElements = [];
      elements.forEach((el) => {
        this.resizeObserver.observe(el);
        this.observedElements.push(el);
      });
    }
  }
  stopObserver() {
    this.resizeObserver.disconnect();
  }
  handleDisabledChange() {
    if (this.disabled) {
      this.stopObserver();
    } else {
      this.startObserver();
    }
  }
  render() {
    return x` <slot @slotchange=${this.handleSlotChange}></slot> `;
  }
};
SlResizeObserver.styles = [component_styles_default, resize_observer_styles_default];
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlResizeObserver.prototype, "disabled", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlResizeObserver.prototype, "handleDisabledChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.RWUUFNUL.js
function getOffset(element, parent) {
  return {
    top: Math.round(element.getBoundingClientRect().top - parent.getBoundingClientRect().top),
    left: Math.round(element.getBoundingClientRect().left - parent.getBoundingClientRect().left)
  };
}
var locks = /* @__PURE__ */ new Set();
function getScrollbarWidth() {
  const documentWidth = document.documentElement.clientWidth;
  return Math.abs(window.innerWidth - documentWidth);
}
function getExistingBodyPadding() {
  const padding = Number(getComputedStyle(document.body).paddingRight.replace(/px/, ""));
  if (isNaN(padding) || !padding) {
    return 0;
  }
  return padding;
}
function lockBodyScrolling(lockingEl) {
  locks.add(lockingEl);
  if (!document.documentElement.classList.contains("sl-scroll-lock")) {
    const scrollbarWidth = getScrollbarWidth() + getExistingBodyPadding();
    let scrollbarGutterProperty = getComputedStyle(document.documentElement).scrollbarGutter;
    if (!scrollbarGutterProperty || scrollbarGutterProperty === "auto") {
      scrollbarGutterProperty = "stable";
    }
    if (scrollbarWidth < 2) {
      scrollbarGutterProperty = "";
    }
    document.documentElement.style.setProperty("--sl-scroll-lock-gutter", scrollbarGutterProperty);
    document.documentElement.classList.add("sl-scroll-lock");
    document.documentElement.style.setProperty("--sl-scroll-lock-size", `${scrollbarWidth}px`);
  }
}
function unlockBodyScrolling(lockingEl) {
  locks.delete(lockingEl);
  if (locks.size === 0) {
    document.documentElement.classList.remove("sl-scroll-lock");
    document.documentElement.style.removeProperty("--sl-scroll-lock-size");
  }
}
function scrollIntoView(element, container, direction = "vertical", behavior = "smooth") {
  const offset3 = getOffset(element, container);
  const offsetTop = offset3.top + container.scrollTop;
  const offsetLeft = offset3.left + container.scrollLeft;
  const minX = container.scrollLeft;
  const maxX = container.scrollLeft + container.offsetWidth;
  const minY = container.scrollTop;
  const maxY = container.scrollTop + container.offsetHeight;
  if (direction === "horizontal" || direction === "both") {
    if (offsetLeft < minX) {
      container.scrollTo({ left: offsetLeft, behavior });
    } else if (offsetLeft + element.clientWidth > maxX) {
      container.scrollTo({ left: offsetLeft - container.offsetWidth + element.clientWidth, behavior });
    }
  }
  if (direction === "vertical" || direction === "both") {
    if (offsetTop < minY) {
      container.scrollTo({ top: offsetTop, behavior });
    } else if (offsetTop + element.clientHeight > maxY) {
      container.scrollTo({ top: offsetTop - container.offsetHeight + element.clientHeight, behavior });
    }
  }
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.6I2T3DLI.js
var icon_button_styles_default = i`
  :host {
    display: inline-block;
    color: var(--sl-color-neutral-600);
  }

  .icon-button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-medium);
    font-size: inherit;
    color: inherit;
    padding: var(--sl-spacing-x-small);
    cursor: pointer;
    transition: var(--sl-transition-x-fast) color;
    -webkit-appearance: none;
  }

  .icon-button:hover:not(.icon-button--disabled),
  .icon-button:focus-visible:not(.icon-button--disabled) {
    color: var(--sl-color-primary-600);
  }

  .icon-button:active:not(.icon-button--disabled) {
    color: var(--sl-color-primary-700);
  }

  .icon-button:focus {
    outline: none;
  }

  .icon-button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .icon-button:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .icon-button__icon {
    pointer-events: none;
  }
`;

// node_modules/lit-html/static.js
var a3 = Symbol.for("");
var o6 = (t6) => {
  if (t6?.r === a3) return t6?._$litStatic$;
};
var i7 = (t6, ...r10) => ({ _$litStatic$: r10.reduce((r11, e12, a4) => r11 + ((t7) => {
  if (void 0 !== t7._$litStatic$) return t7._$litStatic$;
  throw Error(`Value passed to 'literal' function must be a 'literal' result: ${t7}. Use 'unsafeStatic' to pass non-literal values, but
            take care to ensure page security.`);
})(e12) + t6[a4 + 1], t6[0]), r: a3 });
var l4 = /* @__PURE__ */ new Map();
var n6 = (t6) => (r10, ...e12) => {
  const a4 = e12.length;
  let s4, i9;
  const n10 = [], u5 = [];
  let c6, $3 = 0, f5 = false;
  for (; $3 < a4; ) {
    for (c6 = r10[$3]; $3 < a4 && void 0 !== (i9 = e12[$3], s4 = o6(i9)); ) c6 += s4 + r10[++$3], f5 = true;
    $3 !== a4 && u5.push(i9), n10.push(c6), $3++;
  }
  if ($3 === a4 && n10.push(r10[a4]), f5) {
    const t7 = n10.join("$$lit$$");
    void 0 === (r10 = l4.get(t7)) && (n10.raw = n10, l4.set(t7, r10 = n10)), e12 = u5;
  }
  return t6(r10, ...e12);
};
var u4 = n6(x);
var c4 = n6(b2);
var $2 = n6(w);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.MMEGYRNV.js
var SlIconButton = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasFocus = false;
    this.label = "";
    this.disabled = false;
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleClick(event) {
    if (this.disabled) {
      event.preventDefault();
      event.stopPropagation();
    }
  }
  /** Simulates a click on the icon button. */
  click() {
    this.button.click();
  }
  /** Sets focus on the icon button. */
  focus(options) {
    this.button.focus(options);
  }
  /** Removes focus from the icon button. */
  blur() {
    this.button.blur();
  }
  render() {
    const isLink = this.href ? true : false;
    const tag2 = isLink ? i7`a` : i7`button`;
    return u4`
      <${tag2}
        part="base"
        class=${e7({
      "icon-button": true,
      "icon-button--disabled": !isLink && this.disabled,
      "icon-button--focused": this.hasFocus
    })}
        ?disabled=${o5(isLink ? void 0 : this.disabled)}
        type=${o5(isLink ? void 0 : "button")}
        href=${o5(isLink ? this.href : void 0)}
        target=${o5(isLink ? this.target : void 0)}
        download=${o5(isLink ? this.download : void 0)}
        rel=${o5(isLink && this.target ? "noreferrer noopener" : void 0)}
        role=${o5(isLink ? void 0 : "button")}
        aria-disabled=${this.disabled ? "true" : "false"}
        aria-label="${this.label}"
        tabindex=${this.disabled ? "-1" : "0"}
        @blur=${this.handleBlur}
        @focus=${this.handleFocus}
        @click=${this.handleClick}
      >
        <sl-icon
          class="icon-button__icon"
          name=${o5(this.name)}
          library=${o5(this.library)}
          src=${o5(this.src)}
          aria-hidden="true"
        ></sl-icon>
      </${tag2}>
    `;
  }
};
SlIconButton.styles = [component_styles_default, icon_button_styles_default];
SlIconButton.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e5(".icon-button")
], SlIconButton.prototype, "button", 2);
__decorateClass([
  r6()
], SlIconButton.prototype, "hasFocus", 2);
__decorateClass([
  n4()
], SlIconButton.prototype, "name", 2);
__decorateClass([
  n4()
], SlIconButton.prototype, "library", 2);
__decorateClass([
  n4()
], SlIconButton.prototype, "src", 2);
__decorateClass([
  n4()
], SlIconButton.prototype, "href", 2);
__decorateClass([
  n4()
], SlIconButton.prototype, "target", 2);
__decorateClass([
  n4()
], SlIconButton.prototype, "download", 2);
__decorateClass([
  n4()
], SlIconButton.prototype, "label", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlIconButton.prototype, "disabled", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.QIKAGUSA.js
var SlTabGroup = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.tabs = [];
    this.focusableTabs = [];
    this.panels = [];
    this.localize = new LocalizeController2(this);
    this.hasScrollControls = false;
    this.shouldHideScrollStartButton = false;
    this.shouldHideScrollEndButton = false;
    this.placement = "top";
    this.activation = "auto";
    this.noScrollControls = false;
    this.fixedScrollControls = false;
    this.scrollOffset = 1;
  }
  connectedCallback() {
    const whenAllDefined = Promise.all([
      customElements.whenDefined("sl-tab"),
      customElements.whenDefined("sl-tab-panel")
    ]);
    super.connectedCallback();
    this.resizeObserver = new ResizeObserver(() => {
      this.repositionIndicator();
      this.updateScrollControls();
    });
    this.mutationObserver = new MutationObserver((mutations) => {
      if (mutations.some((m3) => !["aria-labelledby", "aria-controls"].includes(m3.attributeName))) {
        setTimeout(() => this.setAriaLabels());
      }
      if (mutations.some((m3) => m3.attributeName === "disabled")) {
        this.syncTabsAndPanels();
      } else if (mutations.some((m3) => m3.attributeName === "active")) {
        const tabs = mutations.filter((m3) => m3.attributeName === "active" && m3.target.tagName.toLowerCase() === "sl-tab").map((m3) => m3.target);
        const newActiveTab = tabs.find((tab) => tab.active);
        if (newActiveTab) {
          this.setActiveTab(newActiveTab);
        }
      }
    });
    this.updateComplete.then(() => {
      this.syncTabsAndPanels();
      this.mutationObserver.observe(this, { attributes: true, childList: true, subtree: true });
      this.resizeObserver.observe(this.nav);
      whenAllDefined.then(() => {
        const intersectionObserver = new IntersectionObserver((entries, observer) => {
          var _a;
          if (entries[0].intersectionRatio > 0) {
            this.setAriaLabels();
            this.setActiveTab((_a = this.getActiveTab()) != null ? _a : this.tabs[0], { emitEvents: false });
            observer.unobserve(entries[0].target);
          }
        });
        intersectionObserver.observe(this.tabGroup);
      });
    });
  }
  disconnectedCallback() {
    var _a, _b;
    super.disconnectedCallback();
    (_a = this.mutationObserver) == null ? void 0 : _a.disconnect();
    if (this.nav) {
      (_b = this.resizeObserver) == null ? void 0 : _b.unobserve(this.nav);
    }
  }
  getAllTabs() {
    const slot = this.shadowRoot.querySelector('slot[name="nav"]');
    return slot.assignedElements();
  }
  getAllPanels() {
    return [...this.body.assignedElements()].filter((el) => el.tagName.toLowerCase() === "sl-tab-panel");
  }
  getActiveTab() {
    return this.tabs.find((el) => el.active);
  }
  handleClick(event) {
    const target = event.target;
    const tab = target.closest("sl-tab");
    const tabGroup = tab == null ? void 0 : tab.closest("sl-tab-group");
    if (tabGroup !== this) {
      return;
    }
    if (tab !== null) {
      this.setActiveTab(tab, { scrollBehavior: "smooth" });
    }
  }
  handleKeyDown(event) {
    const target = event.target;
    const tab = target.closest("sl-tab");
    const tabGroup = tab == null ? void 0 : tab.closest("sl-tab-group");
    if (tabGroup !== this) {
      return;
    }
    if (["Enter", " "].includes(event.key)) {
      if (tab !== null) {
        this.setActiveTab(tab, { scrollBehavior: "smooth" });
        event.preventDefault();
      }
    }
    if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
      const activeEl = this.tabs.find((t6) => t6.matches(":focus"));
      const isRtl = this.localize.dir() === "rtl";
      let nextTab = null;
      if ((activeEl == null ? void 0 : activeEl.tagName.toLowerCase()) === "sl-tab") {
        if (event.key === "Home") {
          nextTab = this.focusableTabs[0];
        } else if (event.key === "End") {
          nextTab = this.focusableTabs[this.focusableTabs.length - 1];
        } else if (["top", "bottom"].includes(this.placement) && event.key === (isRtl ? "ArrowRight" : "ArrowLeft") || ["start", "end"].includes(this.placement) && event.key === "ArrowUp") {
          const currentIndex = this.tabs.findIndex((el) => el === activeEl);
          nextTab = this.findNextFocusableTab(currentIndex, "backward");
        } else if (["top", "bottom"].includes(this.placement) && event.key === (isRtl ? "ArrowLeft" : "ArrowRight") || ["start", "end"].includes(this.placement) && event.key === "ArrowDown") {
          const currentIndex = this.tabs.findIndex((el) => el === activeEl);
          nextTab = this.findNextFocusableTab(currentIndex, "forward");
        }
        if (!nextTab) {
          return;
        }
        nextTab.tabIndex = 0;
        nextTab.focus({ preventScroll: true });
        if (this.activation === "auto") {
          this.setActiveTab(nextTab, { scrollBehavior: "smooth" });
        } else {
          this.tabs.forEach((tabEl) => {
            tabEl.tabIndex = tabEl === nextTab ? 0 : -1;
          });
        }
        if (["top", "bottom"].includes(this.placement)) {
          scrollIntoView(nextTab, this.nav, "horizontal");
        }
        event.preventDefault();
      }
    }
  }
  handleScrollToStart() {
    this.nav.scroll({
      left: this.localize.dir() === "rtl" ? this.nav.scrollLeft + this.nav.clientWidth : this.nav.scrollLeft - this.nav.clientWidth,
      behavior: "smooth"
    });
  }
  handleScrollToEnd() {
    this.nav.scroll({
      left: this.localize.dir() === "rtl" ? this.nav.scrollLeft - this.nav.clientWidth : this.nav.scrollLeft + this.nav.clientWidth,
      behavior: "smooth"
    });
  }
  setActiveTab(tab, options) {
    options = __spreadValues({
      emitEvents: true,
      scrollBehavior: "auto"
    }, options);
    if (tab !== this.activeTab && !tab.disabled) {
      const previousTab = this.activeTab;
      this.activeTab = tab;
      this.tabs.forEach((el) => {
        el.active = el === this.activeTab;
        el.tabIndex = el === this.activeTab ? 0 : -1;
      });
      this.panels.forEach((el) => {
        var _a;
        return el.active = el.name === ((_a = this.activeTab) == null ? void 0 : _a.panel);
      });
      this.syncIndicator();
      if (["top", "bottom"].includes(this.placement)) {
        scrollIntoView(this.activeTab, this.nav, "horizontal", options.scrollBehavior);
      }
      if (options.emitEvents) {
        if (previousTab) {
          this.emit("sl-tab-hide", { detail: { name: previousTab.panel } });
        }
        this.emit("sl-tab-show", { detail: { name: this.activeTab.panel } });
      }
    }
  }
  setAriaLabels() {
    this.tabs.forEach((tab) => {
      const panel = this.panels.find((el) => el.name === tab.panel);
      if (panel) {
        tab.setAttribute("aria-controls", panel.getAttribute("id"));
        panel.setAttribute("aria-labelledby", tab.getAttribute("id"));
      }
    });
  }
  repositionIndicator() {
    const currentTab = this.getActiveTab();
    if (!currentTab) {
      return;
    }
    const width = currentTab.clientWidth;
    const height = currentTab.clientHeight;
    const isRtl = this.localize.dir() === "rtl";
    const allTabs = this.getAllTabs();
    const precedingTabs = allTabs.slice(0, allTabs.indexOf(currentTab));
    const offset3 = precedingTabs.reduce(
      (previous, current) => ({
        left: previous.left + current.clientWidth,
        top: previous.top + current.clientHeight
      }),
      { left: 0, top: 0 }
    );
    switch (this.placement) {
      case "top":
      case "bottom":
        this.indicator.style.width = `${width}px`;
        this.indicator.style.height = "auto";
        this.indicator.style.translate = isRtl ? `${-1 * offset3.left}px` : `${offset3.left}px`;
        break;
      case "start":
      case "end":
        this.indicator.style.width = "auto";
        this.indicator.style.height = `${height}px`;
        this.indicator.style.translate = `0 ${offset3.top}px`;
        break;
    }
  }
  // This stores tabs and panels so we can refer to a cache instead of calling querySelectorAll() multiple times.
  syncTabsAndPanels() {
    this.tabs = this.getAllTabs();
    this.focusableTabs = this.tabs.filter((el) => !el.disabled);
    this.panels = this.getAllPanels();
    this.syncIndicator();
    this.updateComplete.then(() => this.updateScrollControls());
  }
  findNextFocusableTab(currentIndex, direction) {
    let nextTab = null;
    const iterator = direction === "forward" ? 1 : -1;
    let nextIndex = currentIndex + iterator;
    while (currentIndex < this.tabs.length) {
      nextTab = this.tabs[nextIndex] || null;
      if (nextTab === null) {
        if (direction === "forward") {
          nextTab = this.focusableTabs[0];
        } else {
          nextTab = this.focusableTabs[this.focusableTabs.length - 1];
        }
        break;
      }
      if (!nextTab.disabled) {
        break;
      }
      nextIndex += iterator;
    }
    return nextTab;
  }
  updateScrollButtons() {
    if (this.hasScrollControls && !this.fixedScrollControls) {
      this.shouldHideScrollStartButton = this.scrollFromStart() <= this.scrollOffset;
      this.shouldHideScrollEndButton = this.isScrolledToEnd();
    }
  }
  isScrolledToEnd() {
    return this.scrollFromStart() + this.nav.clientWidth >= this.nav.scrollWidth - this.scrollOffset;
  }
  scrollFromStart() {
    return this.localize.dir() === "rtl" ? -this.nav.scrollLeft : this.nav.scrollLeft;
  }
  updateScrollControls() {
    if (this.noScrollControls) {
      this.hasScrollControls = false;
    } else {
      this.hasScrollControls = ["top", "bottom"].includes(this.placement) && this.nav.scrollWidth > this.nav.clientWidth + 1;
    }
    this.updateScrollButtons();
  }
  syncIndicator() {
    const tab = this.getActiveTab();
    if (tab) {
      this.indicator.style.display = "block";
      this.repositionIndicator();
    } else {
      this.indicator.style.display = "none";
    }
  }
  /** Shows the specified tab panel. */
  show(panel) {
    const tab = this.tabs.find((el) => el.panel === panel);
    if (tab) {
      this.setActiveTab(tab, { scrollBehavior: "smooth" });
    }
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    return x`
      <div
        part="base"
        class=${e7({
      "tab-group": true,
      "tab-group--top": this.placement === "top",
      "tab-group--bottom": this.placement === "bottom",
      "tab-group--start": this.placement === "start",
      "tab-group--end": this.placement === "end",
      "tab-group--rtl": this.localize.dir() === "rtl",
      "tab-group--has-scroll-controls": this.hasScrollControls
    })}
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
      >
        <div class="tab-group__nav-container" part="nav">
          ${this.hasScrollControls ? x`
                <sl-icon-button
                  part="scroll-button scroll-button--start"
                  exportparts="base:scroll-button__base"
                  class=${e7({
      "tab-group__scroll-button": true,
      "tab-group__scroll-button--start": true,
      "tab-group__scroll-button--start--hidden": this.shouldHideScrollStartButton
    })}
                  name=${isRtl ? "chevron-right" : "chevron-left"}
                  library="system"
                  tabindex="-1"
                  aria-hidden="true"
                  label=${this.localize.term("scrollToStart")}
                  @click=${this.handleScrollToStart}
                ></sl-icon-button>
              ` : ""}

          <div class="tab-group__nav" @scrollend=${this.updateScrollButtons}>
            <div part="tabs" class="tab-group__tabs" role="tablist">
              <div part="active-tab-indicator" class="tab-group__indicator"></div>
              <sl-resize-observer @sl-resize=${this.syncIndicator}>
                <slot name="nav" @slotchange=${this.syncTabsAndPanels}></slot>
              </sl-resize-observer>
            </div>
          </div>

          ${this.hasScrollControls ? x`
                <sl-icon-button
                  part="scroll-button scroll-button--end"
                  exportparts="base:scroll-button__base"
                  class=${e7({
      "tab-group__scroll-button": true,
      "tab-group__scroll-button--end": true,
      "tab-group__scroll-button--end--hidden": this.shouldHideScrollEndButton
    })}
                  name=${isRtl ? "chevron-left" : "chevron-right"}
                  library="system"
                  tabindex="-1"
                  aria-hidden="true"
                  label=${this.localize.term("scrollToEnd")}
                  @click=${this.handleScrollToEnd}
                ></sl-icon-button>
              ` : ""}
        </div>

        <slot part="body" class="tab-group__body" @slotchange=${this.syncTabsAndPanels}></slot>
      </div>
    `;
  }
};
SlTabGroup.styles = [component_styles_default, tab_group_styles_default];
SlTabGroup.dependencies = { "sl-icon-button": SlIconButton, "sl-resize-observer": SlResizeObserver };
__decorateClass([
  e5(".tab-group")
], SlTabGroup.prototype, "tabGroup", 2);
__decorateClass([
  e5(".tab-group__body")
], SlTabGroup.prototype, "body", 2);
__decorateClass([
  e5(".tab-group__nav")
], SlTabGroup.prototype, "nav", 2);
__decorateClass([
  e5(".tab-group__indicator")
], SlTabGroup.prototype, "indicator", 2);
__decorateClass([
  r6()
], SlTabGroup.prototype, "hasScrollControls", 2);
__decorateClass([
  r6()
], SlTabGroup.prototype, "shouldHideScrollStartButton", 2);
__decorateClass([
  r6()
], SlTabGroup.prototype, "shouldHideScrollEndButton", 2);
__decorateClass([
  n4()
], SlTabGroup.prototype, "placement", 2);
__decorateClass([
  n4()
], SlTabGroup.prototype, "activation", 2);
__decorateClass([
  n4({ attribute: "no-scroll-controls", type: Boolean })
], SlTabGroup.prototype, "noScrollControls", 2);
__decorateClass([
  n4({ attribute: "fixed-scroll-controls", type: Boolean })
], SlTabGroup.prototype, "fixedScrollControls", 2);
__decorateClass([
  t3({ passive: true })
], SlTabGroup.prototype, "updateScrollButtons", 1);
__decorateClass([
  watch("noScrollControls", { waitUntilFirstUpdate: true })
], SlTabGroup.prototype, "updateScrollControls", 1);
__decorateClass([
  watch("placement", { waitUntilFirstUpdate: true })
], SlTabGroup.prototype, "syncIndicator", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FOG5SKXI.js
SlTabGroup.define("sl-tab-group");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.6KE6SBMU.js
var textarea_styles_default = i`
  :host {
    display: block;
  }

  .textarea {
    display: grid;
    align-items: center;
    position: relative;
    width: 100%;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-input-letter-spacing);
    vertical-align: middle;
    transition:
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) border,
      var(--sl-transition-fast) box-shadow,
      var(--sl-transition-fast) background-color;
    cursor: text;
  }

  /* Standard textareas */
  .textarea--standard {
    background-color: var(--sl-input-background-color);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
  }

  .textarea--standard:hover:not(.textarea--disabled) {
    background-color: var(--sl-input-background-color-hover);
    border-color: var(--sl-input-border-color-hover);
  }
  .textarea--standard:hover:not(.textarea--disabled) .textarea__control {
    color: var(--sl-input-color-hover);
  }

  .textarea--standard.textarea--focused:not(.textarea--disabled) {
    background-color: var(--sl-input-background-color-focus);
    border-color: var(--sl-input-border-color-focus);
    color: var(--sl-input-color-focus);
    box-shadow: 0 0 0 var(--sl-focus-ring-width) var(--sl-input-focus-ring-color);
  }

  .textarea--standard.textarea--focused:not(.textarea--disabled) .textarea__control {
    color: var(--sl-input-color-focus);
  }

  .textarea--standard.textarea--disabled {
    background-color: var(--sl-input-background-color-disabled);
    border-color: var(--sl-input-border-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .textarea__control,
  .textarea__size-adjuster {
    grid-area: 1 / 1 / 2 / 2;
  }

  .textarea__size-adjuster {
    visibility: hidden;
    pointer-events: none;
    opacity: 0;
  }

  .textarea--standard.textarea--disabled .textarea__control {
    color: var(--sl-input-color-disabled);
  }

  .textarea--standard.textarea--disabled .textarea__control::placeholder {
    color: var(--sl-input-placeholder-color-disabled);
  }

  /* Filled textareas */
  .textarea--filled {
    border: none;
    background-color: var(--sl-input-filled-background-color);
    color: var(--sl-input-color);
  }

  .textarea--filled:hover:not(.textarea--disabled) {
    background-color: var(--sl-input-filled-background-color-hover);
  }

  .textarea--filled.textarea--focused:not(.textarea--disabled) {
    background-color: var(--sl-input-filled-background-color-focus);
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .textarea--filled.textarea--disabled {
    background-color: var(--sl-input-filled-background-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .textarea__control {
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: 1.4;
    color: var(--sl-input-color);
    border: none;
    background: none;
    box-shadow: none;
    cursor: inherit;
    -webkit-appearance: none;
  }

  .textarea__control::-webkit-search-decoration,
  .textarea__control::-webkit-search-cancel-button,
  .textarea__control::-webkit-search-results-button,
  .textarea__control::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }

  .textarea__control::placeholder {
    color: var(--sl-input-placeholder-color);
    user-select: none;
    -webkit-user-select: none;
  }

  .textarea__control:focus {
    outline: none;
  }

  /*
   * Size modifiers
   */

  .textarea--small {
    border-radius: var(--sl-input-border-radius-small);
    font-size: var(--sl-input-font-size-small);
  }

  .textarea--small .textarea__control {
    padding: 0.5em var(--sl-input-spacing-small);
  }

  .textarea--medium {
    border-radius: var(--sl-input-border-radius-medium);
    font-size: var(--sl-input-font-size-medium);
  }

  .textarea--medium .textarea__control {
    padding: 0.5em var(--sl-input-spacing-medium);
  }

  .textarea--large {
    border-radius: var(--sl-input-border-radius-large);
    font-size: var(--sl-input-font-size-large);
  }

  .textarea--large .textarea__control {
    padding: 0.5em var(--sl-input-spacing-large);
  }

  /*
   * Resize types
   */

  .textarea--resize-none .textarea__control {
    resize: none;
  }

  .textarea--resize-vertical .textarea__control {
    resize: vertical;
  }

  .textarea--resize-auto .textarea__control {
    height: auto;
    resize: none;
    overflow-y: hidden;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.EGN7PILG.js
var SlTextarea = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      assumeInteractionOn: ["sl-blur", "sl-input"]
    });
    this.hasSlotController = new HasSlotController(this, "help-text", "label");
    this.hasFocus = false;
    this.title = "";
    this.name = "";
    this.value = "";
    this.size = "medium";
    this.filled = false;
    this.label = "";
    this.helpText = "";
    this.placeholder = "";
    this.rows = 4;
    this.resize = "vertical";
    this.disabled = false;
    this.readonly = false;
    this.form = "";
    this.required = false;
    this.spellcheck = true;
    this.defaultValue = "";
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  connectedCallback() {
    super.connectedCallback();
    this.resizeObserver = new ResizeObserver(() => this.setTextareaHeight());
    this.updateComplete.then(() => {
      this.setTextareaHeight();
      this.resizeObserver.observe(this.input);
    });
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    if (this.input) {
      (_a = this.resizeObserver) == null ? void 0 : _a.unobserve(this.input);
    }
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleChange() {
    this.value = this.input.value;
    this.setTextareaHeight();
    this.emit("sl-change");
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleInput() {
    this.value = this.input.value;
    this.emit("sl-input");
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  setTextareaHeight() {
    if (this.resize === "auto") {
      this.sizeAdjuster.style.height = `${this.input.clientHeight}px`;
      this.input.style.height = "auto";
      this.input.style.height = `${this.input.scrollHeight}px`;
    } else {
      this.input.style.height = "";
    }
  }
  handleDisabledChange() {
    this.formControlController.setValidity(this.disabled);
  }
  handleRowsChange() {
    this.setTextareaHeight();
  }
  async handleValueChange() {
    await this.updateComplete;
    this.formControlController.updateValidity();
    this.setTextareaHeight();
  }
  /** Sets focus on the textarea. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the textarea. */
  blur() {
    this.input.blur();
  }
  /** Selects all the text in the textarea. */
  select() {
    this.input.select();
  }
  /** Gets or sets the textarea's scroll position. */
  scrollPosition(position) {
    if (position) {
      if (typeof position.top === "number") this.input.scrollTop = position.top;
      if (typeof position.left === "number") this.input.scrollLeft = position.left;
      return void 0;
    }
    return {
      top: this.input.scrollTop,
      left: this.input.scrollTop
    };
  }
  /** Sets the start and end positions of the text selection (0-based). */
  setSelectionRange(selectionStart, selectionEnd, selectionDirection = "none") {
    this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
  }
  /** Replaces a range of text with a new string. */
  setRangeText(replacement, start, end, selectMode = "preserve") {
    const selectionStart = start != null ? start : this.input.selectionStart;
    const selectionEnd = end != null ? end : this.input.selectionEnd;
    this.input.setRangeText(replacement, selectionStart, selectionEnd, selectMode);
    if (this.value !== this.input.value) {
      this.value = this.input.value;
      this.setTextareaHeight();
    }
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message2) {
    this.input.setCustomValidity(message2);
    this.formControlController.updateValidity();
  }
  render() {
    const hasLabelSlot = this.hasSlotController.test("label");
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    return x`
      <div
        part="form-control"
        class=${e7({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-label": hasLabel,
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${hasLabel ? "false" : "true"}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${e7({
      textarea: true,
      "textarea--small": this.size === "small",
      "textarea--medium": this.size === "medium",
      "textarea--large": this.size === "large",
      "textarea--standard": !this.filled,
      "textarea--filled": this.filled,
      "textarea--disabled": this.disabled,
      "textarea--focused": this.hasFocus,
      "textarea--empty": !this.value,
      "textarea--resize-none": this.resize === "none",
      "textarea--resize-vertical": this.resize === "vertical",
      "textarea--resize-auto": this.resize === "auto"
    })}
          >
            <textarea
              part="textarea"
              id="input"
              class="textarea__control"
              title=${this.title}
              name=${o5(this.name)}
              .value=${l3(this.value)}
              ?disabled=${this.disabled}
              ?readonly=${this.readonly}
              ?required=${this.required}
              placeholder=${o5(this.placeholder)}
              rows=${o5(this.rows)}
              minlength=${o5(this.minlength)}
              maxlength=${o5(this.maxlength)}
              autocapitalize=${o5(this.autocapitalize)}
              autocorrect=${o5(this.autocorrect)}
              ?autofocus=${this.autofocus}
              spellcheck=${o5(this.spellcheck)}
              enterkeyhint=${o5(this.enterkeyhint)}
              inputmode=${o5(this.inputmode)}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @focus=${this.handleFocus}
              @blur=${this.handleBlur}
            ></textarea>
            <!-- This "adjuster" exists to prevent layout shifting. https://github.com/shoelace-style/shoelace/issues/2180 -->
            <div part="textarea-adjuster" class="textarea__size-adjuster" ?hidden=${this.resize !== "auto"}></div>
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlTextarea.styles = [component_styles_default, form_control_styles_default, textarea_styles_default];
__decorateClass([
  e5(".textarea__control")
], SlTextarea.prototype, "input", 2);
__decorateClass([
  e5(".textarea__size-adjuster")
], SlTextarea.prototype, "sizeAdjuster", 2);
__decorateClass([
  r6()
], SlTextarea.prototype, "hasFocus", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "title", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "name", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "value", 2);
__decorateClass([
  n4({ reflect: true })
], SlTextarea.prototype, "size", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTextarea.prototype, "filled", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "label", 2);
__decorateClass([
  n4({ attribute: "help-text" })
], SlTextarea.prototype, "helpText", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "placeholder", 2);
__decorateClass([
  n4({ type: Number })
], SlTextarea.prototype, "rows", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "resize", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTextarea.prototype, "disabled", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTextarea.prototype, "readonly", 2);
__decorateClass([
  n4({ reflect: true })
], SlTextarea.prototype, "form", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTextarea.prototype, "required", 2);
__decorateClass([
  n4({ type: Number })
], SlTextarea.prototype, "minlength", 2);
__decorateClass([
  n4({ type: Number })
], SlTextarea.prototype, "maxlength", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "autocapitalize", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "autocorrect", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "autocomplete", 2);
__decorateClass([
  n4({ type: Boolean })
], SlTextarea.prototype, "autofocus", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "enterkeyhint", 2);
__decorateClass([
  n4({
    type: Boolean,
    converter: {
      // Allow "true|false" attribute values but keep the property boolean
      fromAttribute: (value) => !value || value === "false" ? false : true,
      toAttribute: (value) => value ? "true" : "false"
    }
  })
], SlTextarea.prototype, "spellcheck", 2);
__decorateClass([
  n4()
], SlTextarea.prototype, "inputmode", 2);
__decorateClass([
  defaultValue()
], SlTextarea.prototype, "defaultValue", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlTextarea.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("rows", { waitUntilFirstUpdate: true })
], SlTextarea.prototype, "handleRowsChange", 1);
__decorateClass([
  watch("value", { waitUntilFirstUpdate: true })
], SlTextarea.prototype, "handleValueChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.HE6JXFXX.js
SlTextarea.define("sl-textarea");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.V2OL7VMD.js
var tag_styles_default = i`
  :host {
    display: inline-block;
  }

  .tag {
    display: flex;
    align-items: center;
    border: solid 1px;
    line-height: 1;
    white-space: nowrap;
    user-select: none;
    -webkit-user-select: none;
  }

  .tag__remove::part(base) {
    color: inherit;
    padding: 0;
  }

  /*
   * Variant modifiers
   */

  .tag--primary {
    background-color: var(--sl-color-primary-50);
    border-color: var(--sl-color-primary-200);
    color: var(--sl-color-primary-800);
  }

  .tag--primary:active > sl-icon-button {
    color: var(--sl-color-primary-600);
  }

  .tag--success {
    background-color: var(--sl-color-success-50);
    border-color: var(--sl-color-success-200);
    color: var(--sl-color-success-800);
  }

  .tag--success:active > sl-icon-button {
    color: var(--sl-color-success-600);
  }

  .tag--neutral {
    background-color: var(--sl-color-neutral-50);
    border-color: var(--sl-color-neutral-200);
    color: var(--sl-color-neutral-800);
  }

  .tag--neutral:active > sl-icon-button {
    color: var(--sl-color-neutral-600);
  }

  .tag--warning {
    background-color: var(--sl-color-warning-50);
    border-color: var(--sl-color-warning-200);
    color: var(--sl-color-warning-800);
  }

  .tag--warning:active > sl-icon-button {
    color: var(--sl-color-warning-600);
  }

  .tag--danger {
    background-color: var(--sl-color-danger-50);
    border-color: var(--sl-color-danger-200);
    color: var(--sl-color-danger-800);
  }

  .tag--danger:active > sl-icon-button {
    color: var(--sl-color-danger-600);
  }

  /*
   * Size modifiers
   */

  .tag--small {
    font-size: var(--sl-button-font-size-small);
    height: calc(var(--sl-input-height-small) * 0.8);
    line-height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-small);
    padding: 0 var(--sl-spacing-x-small);
  }

  .tag--medium {
    font-size: var(--sl-button-font-size-medium);
    height: calc(var(--sl-input-height-medium) * 0.8);
    line-height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-medium);
    padding: 0 var(--sl-spacing-small);
  }

  .tag--large {
    font-size: var(--sl-button-font-size-large);
    height: calc(var(--sl-input-height-large) * 0.8);
    line-height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-large);
    padding: 0 var(--sl-spacing-medium);
  }

  .tag__remove {
    margin-inline-start: var(--sl-spacing-x-small);
  }

  /*
   * Pill modifier
   */

  .tag--pill {
    border-radius: var(--sl-border-radius-pill);
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.JGSVFUWB.js
var SlTag = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.variant = "neutral";
    this.size = "medium";
    this.pill = false;
    this.removable = false;
  }
  handleRemoveClick() {
    this.emit("sl-remove");
  }
  render() {
    return x`
      <span
        part="base"
        class=${e7({
      tag: true,
      // Types
      "tag--primary": this.variant === "primary",
      "tag--success": this.variant === "success",
      "tag--neutral": this.variant === "neutral",
      "tag--warning": this.variant === "warning",
      "tag--danger": this.variant === "danger",
      "tag--text": this.variant === "text",
      // Sizes
      "tag--small": this.size === "small",
      "tag--medium": this.size === "medium",
      "tag--large": this.size === "large",
      // Modifiers
      "tag--pill": this.pill,
      "tag--removable": this.removable
    })}
      >
        <slot part="content" class="tag__content"></slot>

        ${this.removable ? x`
              <sl-icon-button
                part="remove-button"
                exportparts="base:remove-button__base"
                name="x-lg"
                library="system"
                label=${this.localize.term("remove")}
                class="tag__remove"
                @click=${this.handleRemoveClick}
                tabindex="-1"
              ></sl-icon-button>
            ` : ""}
      </span>
    `;
  }
};
SlTag.styles = [component_styles_default, tag_styles_default];
SlTag.dependencies = { "sl-icon-button": SlIconButton };
__decorateClass([
  n4({ reflect: true })
], SlTag.prototype, "variant", 2);
__decorateClass([
  n4({ reflect: true })
], SlTag.prototype, "size", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTag.prototype, "pill", 2);
__decorateClass([
  n4({ type: Boolean })
], SlTag.prototype, "removable", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.OY4FWIVA.js
SlTag.define("sl-tag");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.CNMNUZLG.js
var tab_styles_default = i`
  :host {
    display: inline-block;
  }

  .tab {
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    border-radius: var(--sl-border-radius-medium);
    color: var(--sl-color-neutral-600);
    padding: var(--sl-spacing-medium) var(--sl-spacing-large);
    white-space: nowrap;
    user-select: none;
    -webkit-user-select: none;
    cursor: pointer;
    transition:
      var(--transition-speed) box-shadow,
      var(--transition-speed) color;
  }

  .tab:hover:not(.tab--disabled) {
    color: var(--sl-color-primary-600);
  }

  :host(:focus) {
    outline: transparent;
  }

  :host(:focus-visible) {
    color: var(--sl-color-primary-600);
    outline: var(--sl-focus-ring);
    outline-offset: calc(-1 * var(--sl-focus-ring-width) - var(--sl-focus-ring-offset));
  }

  .tab.tab--active:not(.tab--disabled) {
    color: var(--sl-color-primary-600);
  }

  .tab.tab--closable {
    padding-inline-end: var(--sl-spacing-small);
  }

  .tab.tab--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .tab__close-button {
    font-size: var(--sl-font-size-small);
    margin-inline-start: var(--sl-spacing-small);
  }

  .tab__close-button::part(base) {
    padding: var(--sl-spacing-3x-small);
  }

  @media (forced-colors: active) {
    .tab.tab--active:not(.tab--disabled) {
      outline: solid 1px transparent;
      outline-offset: -3px;
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.T4WCV3R7.js
var id = 0;
var SlTab = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.attrId = ++id;
    this.componentId = `sl-tab-${this.attrId}`;
    this.panel = "";
    this.active = false;
    this.closable = false;
    this.disabled = false;
    this.tabIndex = 0;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "tab");
  }
  handleCloseClick(event) {
    event.stopPropagation();
    this.emit("sl-close");
  }
  handleActiveChange() {
    this.setAttribute("aria-selected", this.active ? "true" : "false");
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
    if (this.disabled && !this.active) {
      this.tabIndex = -1;
    } else {
      this.tabIndex = 0;
    }
  }
  render() {
    this.id = this.id.length > 0 ? this.id : this.componentId;
    return x`
      <div
        part="base"
        class=${e7({
      tab: true,
      "tab--active": this.active,
      "tab--closable": this.closable,
      "tab--disabled": this.disabled
    })}
      >
        <slot></slot>
        ${this.closable ? x`
              <sl-icon-button
                part="close-button"
                exportparts="base:close-button__base"
                name="x-lg"
                library="system"
                label=${this.localize.term("close")}
                class="tab__close-button"
                @click=${this.handleCloseClick}
                tabindex="-1"
              ></sl-icon-button>
            ` : ""}
      </div>
    `;
  }
};
SlTab.styles = [component_styles_default, tab_styles_default];
SlTab.dependencies = { "sl-icon-button": SlIconButton };
__decorateClass([
  e5(".tab")
], SlTab.prototype, "tab", 2);
__decorateClass([
  n4({ reflect: true })
], SlTab.prototype, "panel", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTab.prototype, "active", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTab.prototype, "closable", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTab.prototype, "disabled", 2);
__decorateClass([
  n4({ type: Number, reflect: true })
], SlTab.prototype, "tabIndex", 2);
__decorateClass([
  watch("active")
], SlTab.prototype, "handleActiveChange", 1);
__decorateClass([
  watch("disabled")
], SlTab.prototype, "handleDisabledChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ZCTQYYI7.js
SlTab.define("sl-tab");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.BQSEJD7X.js
var tab_panel_styles_default = i`
  :host {
    --padding: 0;

    display: none;
  }

  :host([active]) {
    display: block;
  }

  .tab-panel {
    display: block;
    padding: var(--padding);
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FC74HM32.js
var id2 = 0;
var SlTabPanel = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.attrId = ++id2;
    this.componentId = `sl-tab-panel-${this.attrId}`;
    this.name = "";
    this.active = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.id = this.id.length > 0 ? this.id : this.componentId;
    this.setAttribute("role", "tabpanel");
  }
  handleActiveChange() {
    this.setAttribute("aria-hidden", this.active ? "false" : "true");
  }
  render() {
    return x`
      <slot
        part="base"
        class=${e7({
      "tab-panel": true,
      "tab-panel--active": this.active
    })}
      ></slot>
    `;
  }
};
SlTabPanel.styles = [component_styles_default, tab_panel_styles_default];
__decorateClass([
  n4({ reflect: true })
], SlTabPanel.prototype, "name", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlTabPanel.prototype, "active", 2);
__decorateClass([
  watch("active")
], SlTabPanel.prototype, "handleActiveChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ZU7BPP6T.js
SlTabPanel.define("sl-tab-panel");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.K6GIYILV.js
SlSpinner.define("sl-spinner");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.EU44RQUN.js
var switch_styles_default = i`
  :host {
    display: inline-block;
  }

  :host([size='small']) {
    --height: var(--sl-toggle-size-small);
    --thumb-size: calc(var(--sl-toggle-size-small) + 4px);
    --width: calc(var(--height) * 2);

    font-size: var(--sl-input-font-size-small);
  }

  :host([size='medium']) {
    --height: var(--sl-toggle-size-medium);
    --thumb-size: calc(var(--sl-toggle-size-medium) + 4px);
    --width: calc(var(--height) * 2);

    font-size: var(--sl-input-font-size-medium);
  }

  :host([size='large']) {
    --height: var(--sl-toggle-size-large);
    --thumb-size: calc(var(--sl-toggle-size-large) + 4px);
    --width: calc(var(--height) * 2);

    font-size: var(--sl-input-font-size-large);
  }

  .switch {
    position: relative;
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-input-font-family);
    font-size: inherit;
    font-weight: var(--sl-input-font-weight);
    color: var(--sl-input-label-color);
    vertical-align: middle;
    cursor: pointer;
  }

  .switch__control {
    flex: 0 0 auto;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--width);
    height: var(--height);
    background-color: var(--sl-color-neutral-400);
    border: solid var(--sl-input-border-width) var(--sl-color-neutral-400);
    border-radius: var(--height);
    transition:
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) background-color;
  }

  .switch__control .switch__thumb {
    width: var(--thumb-size);
    height: var(--thumb-size);
    background-color: var(--sl-color-neutral-0);
    border-radius: 50%;
    border: solid var(--sl-input-border-width) var(--sl-color-neutral-400);
    translate: calc((var(--width) - var(--height)) / -2);
    transition:
      var(--sl-transition-fast) translate ease,
      var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) box-shadow;
  }

  .switch__input {
    position: absolute;
    opacity: 0;
    padding: 0;
    margin: 0;
    pointer-events: none;
  }

  /* Hover */
  .switch:not(.switch--checked):not(.switch--disabled) .switch__control:hover {
    background-color: var(--sl-color-neutral-400);
    border-color: var(--sl-color-neutral-400);
  }

  .switch:not(.switch--checked):not(.switch--disabled) .switch__control:hover .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-neutral-400);
  }

  /* Focus */
  .switch:not(.switch--checked):not(.switch--disabled) .switch__input:focus-visible ~ .switch__control {
    background-color: var(--sl-color-neutral-400);
    border-color: var(--sl-color-neutral-400);
  }

  .switch:not(.switch--checked):not(.switch--disabled) .switch__input:focus-visible ~ .switch__control .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  /* Checked */
  .switch--checked .switch__control {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
  }

  .switch--checked .switch__control .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    translate: calc((var(--width) - var(--height)) / 2);
  }

  /* Checked + hover */
  .switch.switch--checked:not(.switch--disabled) .switch__control:hover {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
  }

  .switch.switch--checked:not(.switch--disabled) .switch__control:hover .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
  }

  /* Checked + focus */
  .switch.switch--checked:not(.switch--disabled) .switch__input:focus-visible ~ .switch__control {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
  }

  .switch.switch--checked:not(.switch--disabled) .switch__input:focus-visible ~ .switch__control .switch__thumb {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  /* Disabled */
  .switch--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .switch__label {
    display: inline-block;
    line-height: var(--height);
    margin-inline-start: 0.5em;
    user-select: none;
    -webkit-user-select: none;
  }

  :host([required]) .switch__label::after {
    content: var(--sl-input-required-content);
    color: var(--sl-input-required-content-color);
    margin-inline-start: var(--sl-input-required-content-offset);
  }

  @media (forced-colors: active) {
    .switch.switch--checked:not(.switch--disabled) .switch__control:hover .switch__thumb,
    .switch--checked .switch__control .switch__thumb {
      background-color: ButtonText;
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.H2LYPMVY.js
var SlSwitch = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      value: (control) => control.checked ? control.value || "on" : void 0,
      defaultValue: (control) => control.defaultChecked,
      setValue: (control, checked) => control.checked = checked
    });
    this.hasSlotController = new HasSlotController(this, "help-text");
    this.hasFocus = false;
    this.title = "";
    this.name = "";
    this.size = "medium";
    this.disabled = false;
    this.checked = false;
    this.defaultChecked = false;
    this.form = "";
    this.required = false;
    this.helpText = "";
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleInput() {
    this.emit("sl-input");
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  handleClick() {
    this.checked = !this.checked;
    this.emit("sl-change");
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleKeyDown(event) {
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      this.checked = false;
      this.emit("sl-change");
      this.emit("sl-input");
    }
    if (event.key === "ArrowRight") {
      event.preventDefault();
      this.checked = true;
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleCheckedChange() {
    this.input.checked = this.checked;
    this.formControlController.updateValidity();
  }
  handleDisabledChange() {
    this.formControlController.setValidity(true);
  }
  /** Simulates a click on the switch. */
  click() {
    this.input.click();
  }
  /** Sets focus on the switch. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the switch. */
  blur() {
    this.input.blur();
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message2) {
    this.input.setCustomValidity(message2);
    this.formControlController.updateValidity();
  }
  render() {
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    return x`
      <div
        class=${e7({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          part="base"
          class=${e7({
      switch: true,
      "switch--checked": this.checked,
      "switch--disabled": this.disabled,
      "switch--focused": this.hasFocus,
      "switch--small": this.size === "small",
      "switch--medium": this.size === "medium",
      "switch--large": this.size === "large"
    })}
        >
          <input
            class="switch__input"
            type="checkbox"
            title=${this.title}
            name=${this.name}
            value=${o5(this.value)}
            .checked=${l3(this.checked)}
            .disabled=${this.disabled}
            .required=${this.required}
            role="switch"
            aria-checked=${this.checked ? "true" : "false"}
            aria-describedby="help-text"
            @click=${this.handleClick}
            @input=${this.handleInput}
            @invalid=${this.handleInvalid}
            @blur=${this.handleBlur}
            @focus=${this.handleFocus}
            @keydown=${this.handleKeyDown}
          />

          <span part="control" class="switch__control">
            <span part="thumb" class="switch__thumb"></span>
          </span>

          <div part="label" class="switch__label">
            <slot></slot>
          </div>
        </label>

        <div
          aria-hidden=${hasHelpText ? "false" : "true"}
          class="form-control__help-text"
          id="help-text"
          part="form-control-help-text"
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlSwitch.styles = [component_styles_default, form_control_styles_default, switch_styles_default];
__decorateClass([
  e5('input[type="checkbox"]')
], SlSwitch.prototype, "input", 2);
__decorateClass([
  r6()
], SlSwitch.prototype, "hasFocus", 2);
__decorateClass([
  n4()
], SlSwitch.prototype, "title", 2);
__decorateClass([
  n4()
], SlSwitch.prototype, "name", 2);
__decorateClass([
  n4()
], SlSwitch.prototype, "value", 2);
__decorateClass([
  n4({ reflect: true })
], SlSwitch.prototype, "size", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSwitch.prototype, "disabled", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSwitch.prototype, "checked", 2);
__decorateClass([
  defaultValue("checked")
], SlSwitch.prototype, "defaultChecked", 2);
__decorateClass([
  n4({ reflect: true })
], SlSwitch.prototype, "form", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSwitch.prototype, "required", 2);
__decorateClass([
  n4({ attribute: "help-text" })
], SlSwitch.prototype, "helpText", 2);
__decorateClass([
  watch("checked", { waitUntilFirstUpdate: true })
], SlSwitch.prototype, "handleCheckedChange", 1);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlSwitch.prototype, "handleDisabledChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.CXSJTANM.js
SlSwitch.define("sl-switch");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.UAYXD3AN.js
var split_panel_styles_default = i`
  :host {
    --divider-width: 4px;
    --divider-hit-area: 12px;
    --min: 0%;
    --max: 100%;

    display: grid;
  }

  .start,
  .end {
    overflow: hidden;
  }

  .divider {
    flex: 0 0 var(--divider-width);
    display: flex;
    position: relative;
    align-items: center;
    justify-content: center;
    background-color: var(--sl-color-neutral-200);
    color: var(--sl-color-neutral-900);
    z-index: 1;
  }

  .divider:focus {
    outline: none;
  }

  :host(:not([disabled])) .divider:focus-visible {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  :host([disabled]) .divider {
    cursor: not-allowed;
  }

  /* Horizontal */
  :host(:not([vertical], [disabled])) .divider {
    cursor: col-resize;
  }

  :host(:not([vertical])) .divider::after {
    display: flex;
    content: '';
    position: absolute;
    height: 100%;
    left: calc(var(--divider-hit-area) / -2 + var(--divider-width) / 2);
    width: var(--divider-hit-area);
  }

  /* Vertical */
  :host([vertical]) {
    flex-direction: column;
  }

  :host([vertical]:not([disabled])) .divider {
    cursor: row-resize;
  }

  :host([vertical]) .divider::after {
    content: '';
    position: absolute;
    width: 100%;
    top: calc(var(--divider-hit-area) / -2 + var(--divider-width) / 2);
    height: var(--divider-hit-area);
  }

  @media (forced-colors: active) {
    .divider {
      outline: solid 1px transparent;
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ESELY2US.js
function drag(container, options) {
  function move(pointerEvent) {
    const dims = container.getBoundingClientRect();
    const defaultView = container.ownerDocument.defaultView;
    const offsetX = dims.left + defaultView.scrollX;
    const offsetY = dims.top + defaultView.scrollY;
    const x2 = pointerEvent.pageX - offsetX;
    const y3 = pointerEvent.pageY - offsetY;
    if (options == null ? void 0 : options.onMove) {
      options.onMove(x2, y3);
    }
  }
  function stop() {
    document.removeEventListener("pointermove", move);
    document.removeEventListener("pointerup", stop);
    if (options == null ? void 0 : options.onStop) {
      options.onStop();
    }
  }
  document.addEventListener("pointermove", move, { passive: true });
  document.addEventListener("pointerup", stop);
  if ((options == null ? void 0 : options.initialEvent) instanceof PointerEvent) {
    move(options.initialEvent);
  }
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.SOYROQ7I.js
var SlSplitPanel = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.isCollapsed = false;
    this.localize = new LocalizeController2(this);
    this.positionBeforeCollapsing = 0;
    this.position = 50;
    this.vertical = false;
    this.disabled = false;
    this.snapThreshold = 12;
  }
  connectedCallback() {
    super.connectedCallback();
    this.resizeObserver = new ResizeObserver((entries) => this.handleResize(entries));
    this.updateComplete.then(() => this.resizeObserver.observe(this));
    this.detectSize();
    this.cachedPositionInPixels = this.percentageToPixels(this.position);
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.resizeObserver) == null ? void 0 : _a.unobserve(this);
  }
  detectSize() {
    const { width, height } = this.getBoundingClientRect();
    this.size = this.vertical ? height : width;
  }
  percentageToPixels(value) {
    return this.size * (value / 100);
  }
  pixelsToPercentage(value) {
    return value / this.size * 100;
  }
  handleDrag(event) {
    const isRtl = this.localize.dir() === "rtl";
    if (this.disabled) {
      return;
    }
    if (event.cancelable) {
      event.preventDefault();
    }
    drag(this, {
      onMove: (x2, y3) => {
        let newPositionInPixels = this.vertical ? y3 : x2;
        if (this.primary === "end") {
          newPositionInPixels = this.size - newPositionInPixels;
        }
        if (this.snap) {
          const snaps = this.snap.split(" ");
          snaps.forEach((value) => {
            let snapPoint;
            if (value.endsWith("%")) {
              snapPoint = this.size * (parseFloat(value) / 100);
            } else {
              snapPoint = parseFloat(value);
            }
            if (isRtl && !this.vertical) {
              snapPoint = this.size - snapPoint;
            }
            if (newPositionInPixels >= snapPoint - this.snapThreshold && newPositionInPixels <= snapPoint + this.snapThreshold) {
              newPositionInPixels = snapPoint;
            }
          });
        }
        this.position = clamp2(this.pixelsToPercentage(newPositionInPixels), 0, 100);
      },
      initialEvent: event
    });
  }
  handleKeyDown(event) {
    if (this.disabled) {
      return;
    }
    if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Home", "End", "Enter"].includes(event.key)) {
      let newPosition = this.position;
      const incr = (event.shiftKey ? 10 : 1) * (this.primary === "end" ? -1 : 1);
      event.preventDefault();
      if (event.key === "ArrowLeft" && !this.vertical || event.key === "ArrowUp" && this.vertical) {
        newPosition -= incr;
      }
      if (event.key === "ArrowRight" && !this.vertical || event.key === "ArrowDown" && this.vertical) {
        newPosition += incr;
      }
      if (event.key === "Home") {
        newPosition = this.primary === "end" ? 100 : 0;
      }
      if (event.key === "End") {
        newPosition = this.primary === "end" ? 0 : 100;
      }
      if (event.key === "Enter") {
        if (this.isCollapsed) {
          newPosition = this.positionBeforeCollapsing;
          this.isCollapsed = false;
        } else {
          const positionBeforeCollapsing = this.position;
          newPosition = 0;
          requestAnimationFrame(() => {
            this.isCollapsed = true;
            this.positionBeforeCollapsing = positionBeforeCollapsing;
          });
        }
      }
      this.position = clamp2(newPosition, 0, 100);
    }
  }
  handleResize(entries) {
    const { width, height } = entries[0].contentRect;
    this.size = this.vertical ? height : width;
    if (isNaN(this.cachedPositionInPixels) || this.position === Infinity) {
      this.cachedPositionInPixels = Number(this.getAttribute("position-in-pixels"));
      this.positionInPixels = Number(this.getAttribute("position-in-pixels"));
      this.position = this.pixelsToPercentage(this.positionInPixels);
    }
    if (this.primary) {
      this.position = this.pixelsToPercentage(this.cachedPositionInPixels);
    }
  }
  handlePositionChange() {
    this.cachedPositionInPixels = this.percentageToPixels(this.position);
    this.isCollapsed = false;
    this.positionBeforeCollapsing = 0;
    this.positionInPixels = this.percentageToPixels(this.position);
    this.emit("sl-reposition");
  }
  handlePositionInPixelsChange() {
    this.position = this.pixelsToPercentage(this.positionInPixels);
  }
  handleVerticalChange() {
    this.detectSize();
  }
  render() {
    const gridTemplate = this.vertical ? "gridTemplateRows" : "gridTemplateColumns";
    const gridTemplateAlt = this.vertical ? "gridTemplateColumns" : "gridTemplateRows";
    const isRtl = this.localize.dir() === "rtl";
    const primary = `
      clamp(
        0%,
        clamp(
          var(--min),
          ${this.position}% - var(--divider-width) / 2,
          var(--max)
        ),
        calc(100% - var(--divider-width))
      )
    `;
    const secondary = "auto";
    if (this.primary === "end") {
      if (isRtl && !this.vertical) {
        this.style[gridTemplate] = `${primary} var(--divider-width) ${secondary}`;
      } else {
        this.style[gridTemplate] = `${secondary} var(--divider-width) ${primary}`;
      }
    } else {
      if (isRtl && !this.vertical) {
        this.style[gridTemplate] = `${secondary} var(--divider-width) ${primary}`;
      } else {
        this.style[gridTemplate] = `${primary} var(--divider-width) ${secondary}`;
      }
    }
    this.style[gridTemplateAlt] = "";
    return x`
      <slot name="start" part="panel start" class="start"></slot>

      <div
        part="divider"
        class="divider"
        tabindex=${o5(this.disabled ? void 0 : "0")}
        role="separator"
        aria-valuenow=${this.position}
        aria-valuemin="0"
        aria-valuemax="100"
        aria-label=${this.localize.term("resize")}
        @keydown=${this.handleKeyDown}
        @mousedown=${this.handleDrag}
        @touchstart=${this.handleDrag}
      >
        <slot name="divider"></slot>
      </div>

      <slot name="end" part="panel end" class="end"></slot>
    `;
  }
};
SlSplitPanel.styles = [component_styles_default, split_panel_styles_default];
__decorateClass([
  e5(".divider")
], SlSplitPanel.prototype, "divider", 2);
__decorateClass([
  n4({ type: Number, reflect: true })
], SlSplitPanel.prototype, "position", 2);
__decorateClass([
  n4({ attribute: "position-in-pixels", type: Number })
], SlSplitPanel.prototype, "positionInPixels", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSplitPanel.prototype, "vertical", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSplitPanel.prototype, "disabled", 2);
__decorateClass([
  n4()
], SlSplitPanel.prototype, "primary", 2);
__decorateClass([
  n4()
], SlSplitPanel.prototype, "snap", 2);
__decorateClass([
  n4({ type: Number, attribute: "snap-threshold" })
], SlSplitPanel.prototype, "snapThreshold", 2);
__decorateClass([
  watch("position")
], SlSplitPanel.prototype, "handlePositionChange", 1);
__decorateClass([
  watch("positionInPixels")
], SlSplitPanel.prototype, "handlePositionInPixelsChange", 1);
__decorateClass([
  watch("vertical")
], SlSplitPanel.prototype, "handleVerticalChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.VZYE7CKB.js
SlSplitPanel.define("sl-split-panel");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.X2WW2TWJ.js
var rating_styles_default = i`
  :host {
    --symbol-color: var(--sl-color-neutral-300);
    --symbol-color-active: var(--sl-color-amber-500);
    --symbol-size: 1.2rem;
    --symbol-spacing: var(--sl-spacing-3x-small);

    display: inline-flex;
  }

  .rating {
    position: relative;
    display: inline-flex;
    border-radius: var(--sl-border-radius-medium);
    vertical-align: middle;
  }

  .rating:focus {
    outline: none;
  }

  .rating:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .rating__symbols {
    display: inline-flex;
    position: relative;
    font-size: var(--symbol-size);
    line-height: 0;
    color: var(--symbol-color);
    white-space: nowrap;
    cursor: pointer;
  }

  .rating__symbols > * {
    padding: var(--symbol-spacing);
  }

  .rating__symbol--active,
  .rating__partial--filled {
    color: var(--symbol-color-active);
  }

  .rating__partial-symbol-container {
    position: relative;
  }

  .rating__partial--filled {
    position: absolute;
    top: var(--symbol-spacing);
    left: var(--symbol-spacing);
  }

  .rating__symbol {
    transition: var(--sl-transition-fast) scale;
    pointer-events: none;
  }

  .rating__symbol--hover {
    scale: 1.2;
  }

  .rating--disabled .rating__symbols,
  .rating--readonly .rating__symbols {
    cursor: default;
  }

  .rating--disabled .rating__symbol--hover,
  .rating--readonly .rating__symbol--hover {
    scale: none;
  }

  .rating--disabled {
    opacity: 0.5;
  }

  .rating--disabled .rating__symbols {
    cursor: not-allowed;
  }

  /* Forced colors mode */
  @media (forced-colors: active) {
    .rating__symbol--active {
      color: SelectedItem;
    }
  }
`;

// node_modules/lit-html/directives/style-map.js
var n7 = "important";
var i8 = " !" + n7;
var o7 = e6(class extends i5 {
  constructor(t6) {
    if (super(t6), t6.type !== t4.ATTRIBUTE || "style" !== t6.name || t6.strings?.length > 2) throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.");
  }
  render(t6) {
    return Object.keys(t6).reduce((e12, r10) => {
      const s4 = t6[r10];
      return null == s4 ? e12 : e12 + `${r10 = r10.includes("-") ? r10 : r10.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, "-$&").toLowerCase()}:${s4};`;
    }, "");
  }
  update(e12, [r10]) {
    const { style: s4 } = e12.element;
    if (void 0 === this.ft) return this.ft = new Set(Object.keys(r10)), this.render(r10);
    for (const t6 of this.ft) null == r10[t6] && (this.ft.delete(t6), t6.includes("-") ? s4.removeProperty(t6) : s4[t6] = null);
    for (const t6 in r10) {
      const e13 = r10[t6];
      if (null != e13) {
        this.ft.add(t6);
        const r11 = "string" == typeof e13 && e13.endsWith(i8);
        t6.includes("-") || r11 ? s4.setProperty(t6, r11 ? e13.slice(0, -11) : e13, r11 ? n7 : "") : s4[t6] = e13;
      }
    }
    return T;
  }
});

// node_modules/lit-html/directives/unsafe-html.js
var e10 = class extends i5 {
  constructor(i9) {
    if (super(i9), this.it = E, i9.type !== t4.CHILD) throw Error(this.constructor.directiveName + "() can only be used in child bindings");
  }
  render(r10) {
    if (r10 === E || null == r10) return this._t = void 0, this.it = r10;
    if (r10 === T) return r10;
    if ("string" != typeof r10) throw Error(this.constructor.directiveName + "() called with a non-string value");
    if (r10 === this.it) return this._t;
    this.it = r10;
    const s4 = [r10];
    return s4.raw = s4, this._t = { _$litType$: this.constructor.resultType, strings: s4, values: [] };
  }
};
e10.directiveName = "unsafeHTML", e10.resultType = 1;
var o8 = e6(e10);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.7PZ2B2X3.js
var SlRating = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.hoverValue = 0;
    this.isHovering = false;
    this.label = "";
    this.value = 0;
    this.max = 5;
    this.precision = 1;
    this.readonly = false;
    this.disabled = false;
    this.getSymbol = () => '<sl-icon name="star-fill" library="system"></sl-icon>';
  }
  getValueFromMousePosition(event) {
    return this.getValueFromXCoordinate(event.clientX);
  }
  getValueFromTouchPosition(event) {
    return this.getValueFromXCoordinate(event.touches[0].clientX);
  }
  getValueFromXCoordinate(coordinate) {
    const isRtl = this.localize.dir() === "rtl";
    const { left, right, width } = this.rating.getBoundingClientRect();
    const value = isRtl ? this.roundToPrecision((right - coordinate) / width * this.max, this.precision) : this.roundToPrecision((coordinate - left) / width * this.max, this.precision);
    return clamp2(value, 0, this.max);
  }
  handleClick(event) {
    if (this.disabled) {
      return;
    }
    this.setValue(this.getValueFromMousePosition(event));
    this.emit("sl-change");
  }
  setValue(newValue) {
    if (this.disabled || this.readonly) {
      return;
    }
    this.value = newValue === this.value ? 0 : newValue;
    this.isHovering = false;
  }
  handleKeyDown(event) {
    const isLtr = this.localize.dir() === "ltr";
    const isRtl = this.localize.dir() === "rtl";
    const oldValue = this.value;
    if (this.disabled || this.readonly) {
      return;
    }
    if (event.key === "ArrowDown" || isLtr && event.key === "ArrowLeft" || isRtl && event.key === "ArrowRight") {
      const decrement = event.shiftKey ? 1 : this.precision;
      this.value = Math.max(0, this.value - decrement);
      event.preventDefault();
    }
    if (event.key === "ArrowUp" || isLtr && event.key === "ArrowRight" || isRtl && event.key === "ArrowLeft") {
      const increment = event.shiftKey ? 1 : this.precision;
      this.value = Math.min(this.max, this.value + increment);
      event.preventDefault();
    }
    if (event.key === "Home") {
      this.value = 0;
      event.preventDefault();
    }
    if (event.key === "End") {
      this.value = this.max;
      event.preventDefault();
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
    }
  }
  handleMouseEnter(event) {
    this.isHovering = true;
    this.hoverValue = this.getValueFromMousePosition(event);
  }
  handleMouseMove(event) {
    this.hoverValue = this.getValueFromMousePosition(event);
  }
  handleMouseLeave() {
    this.isHovering = false;
  }
  handleTouchStart(event) {
    this.isHovering = true;
    this.hoverValue = this.getValueFromTouchPosition(event);
    event.preventDefault();
  }
  handleTouchMove(event) {
    this.hoverValue = this.getValueFromTouchPosition(event);
  }
  handleTouchEnd(event) {
    this.isHovering = false;
    this.setValue(this.hoverValue);
    this.emit("sl-change");
    event.preventDefault();
  }
  roundToPrecision(numberToRound, precision = 0.5) {
    const multiplier = 1 / precision;
    return Math.ceil(numberToRound * multiplier) / multiplier;
  }
  handleHoverValueChange() {
    this.emit("sl-hover", {
      detail: {
        phase: "move",
        value: this.hoverValue
      }
    });
  }
  handleIsHoveringChange() {
    this.emit("sl-hover", {
      detail: {
        phase: this.isHovering ? "start" : "end",
        value: this.hoverValue
      }
    });
  }
  /** Sets focus on the rating. */
  focus(options) {
    this.rating.focus(options);
  }
  /** Removes focus from the rating. */
  blur() {
    this.rating.blur();
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    const counter = Array.from(Array(this.max).keys());
    let displayValue = 0;
    if (this.disabled || this.readonly) {
      displayValue = this.value;
    } else {
      displayValue = this.isHovering ? this.hoverValue : this.value;
    }
    return x`
      <div
        part="base"
        class=${e7({
      rating: true,
      "rating--readonly": this.readonly,
      "rating--disabled": this.disabled,
      "rating--rtl": isRtl
    })}
        role="slider"
        aria-label=${this.label}
        aria-disabled=${this.disabled ? "true" : "false"}
        aria-readonly=${this.readonly ? "true" : "false"}
        aria-valuenow=${this.value}
        aria-valuemin=${0}
        aria-valuemax=${this.max}
        tabindex=${this.disabled || this.readonly ? "-1" : "0"}
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
        @mouseenter=${this.handleMouseEnter}
        @touchstart=${this.handleTouchStart}
        @mouseleave=${this.handleMouseLeave}
        @touchend=${this.handleTouchEnd}
        @mousemove=${this.handleMouseMove}
        @touchmove=${this.handleTouchMove}
      >
        <span class="rating__symbols">
          ${counter.map((index) => {
      if (displayValue > index && displayValue < index + 1) {
        return x`
                <span
                  class=${e7({
          rating__symbol: true,
          "rating__partial-symbol-container": true,
          "rating__symbol--hover": this.isHovering && Math.ceil(displayValue) === index + 1
        })}
                  role="presentation"
                >
                  <div
                    style=${o7({
          clipPath: isRtl ? `inset(0 ${(displayValue - index) * 100}% 0 0)` : `inset(0 0 0 ${(displayValue - index) * 100}%)`
        })}
                  >
                    ${o8(this.getSymbol(index + 1))}
                  </div>
                  <div
                    class="rating__partial--filled"
                    style=${o7({
          clipPath: isRtl ? `inset(0 0 0 ${100 - (displayValue - index) * 100}%)` : `inset(0 ${100 - (displayValue - index) * 100}% 0 0)`
        })}
                  >
                    ${o8(this.getSymbol(index + 1))}
                  </div>
                </span>
              `;
      }
      return x`
              <span
                class=${e7({
        rating__symbol: true,
        "rating__symbol--hover": this.isHovering && Math.ceil(displayValue) === index + 1,
        "rating__symbol--active": displayValue >= index + 1
      })}
                role="presentation"
              >
                ${o8(this.getSymbol(index + 1))}
              </span>
            `;
    })}
        </span>
      </div>
    `;
  }
};
SlRating.styles = [component_styles_default, rating_styles_default];
SlRating.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e5(".rating")
], SlRating.prototype, "rating", 2);
__decorateClass([
  r6()
], SlRating.prototype, "hoverValue", 2);
__decorateClass([
  r6()
], SlRating.prototype, "isHovering", 2);
__decorateClass([
  n4()
], SlRating.prototype, "label", 2);
__decorateClass([
  n4({ type: Number })
], SlRating.prototype, "value", 2);
__decorateClass([
  n4({ type: Number })
], SlRating.prototype, "max", 2);
__decorateClass([
  n4({ type: Number })
], SlRating.prototype, "precision", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlRating.prototype, "readonly", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlRating.prototype, "disabled", 2);
__decorateClass([
  n4()
], SlRating.prototype, "getSymbol", 2);
__decorateClass([
  t3({ passive: true })
], SlRating.prototype, "handleTouchMove", 1);
__decorateClass([
  watch("hoverValue")
], SlRating.prototype, "handleHoverValueChange", 1);
__decorateClass([
  watch("isHovering")
], SlRating.prototype, "handleIsHoveringChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FU3CGG2O.js
SlRating.define("sl-rating");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.CT5YOBKZ.js
var availableUnits = [
  { max: 276e4, value: 6e4, unit: "minute" },
  // max 46 minutes
  { max: 72e6, value: 36e5, unit: "hour" },
  // max 20 hours
  { max: 5184e5, value: 864e5, unit: "day" },
  // max 6 days
  { max: 24192e5, value: 6048e5, unit: "week" },
  // max 28 days
  { max: 28512e6, value: 2592e6, unit: "month" },
  // max 11 months
  { max: Infinity, value: 31536e6, unit: "year" }
];
var SlRelativeTime = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.isoTime = "";
    this.relativeTime = "";
    this.date = /* @__PURE__ */ new Date();
    this.format = "long";
    this.numeric = "auto";
    this.sync = false;
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    clearTimeout(this.updateTimeout);
  }
  render() {
    const now = /* @__PURE__ */ new Date();
    const then = new Date(this.date);
    if (isNaN(then.getMilliseconds())) {
      this.relativeTime = "";
      this.isoTime = "";
      return "";
    }
    const diff = then.getTime() - now.getTime();
    const { unit, value } = availableUnits.find((singleUnit) => Math.abs(diff) < singleUnit.max);
    this.isoTime = then.toISOString();
    this.relativeTime = this.localize.relativeTime(Math.round(diff / value), unit, {
      numeric: this.numeric,
      style: this.format
    });
    clearTimeout(this.updateTimeout);
    if (this.sync) {
      let nextInterval;
      if (unit === "minute") {
        nextInterval = getTimeUntilNextUnit("second");
      } else if (unit === "hour") {
        nextInterval = getTimeUntilNextUnit("minute");
      } else if (unit === "day") {
        nextInterval = getTimeUntilNextUnit("hour");
      } else {
        nextInterval = getTimeUntilNextUnit("day");
      }
      this.updateTimeout = window.setTimeout(() => this.requestUpdate(), nextInterval);
    }
    return x` <time datetime=${this.isoTime}>${this.relativeTime}</time> `;
  }
};
__decorateClass([
  r6()
], SlRelativeTime.prototype, "isoTime", 2);
__decorateClass([
  r6()
], SlRelativeTime.prototype, "relativeTime", 2);
__decorateClass([
  n4()
], SlRelativeTime.prototype, "date", 2);
__decorateClass([
  n4()
], SlRelativeTime.prototype, "format", 2);
__decorateClass([
  n4()
], SlRelativeTime.prototype, "numeric", 2);
__decorateClass([
  n4({ type: Boolean })
], SlRelativeTime.prototype, "sync", 2);
function getTimeUntilNextUnit(unit) {
  const units = { second: 1e3, minute: 6e4, hour: 36e5, day: 864e5 };
  const value = units[unit];
  return value - Date.now() % value;
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.6JAD53XB.js
SlRelativeTime.define("sl-relative-time");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.HTQNKB5E.js
var skeleton_styles_default = i`
  :host {
    --border-radius: var(--sl-border-radius-pill);
    --color: var(--sl-color-neutral-200);
    --sheen-color: var(--sl-color-neutral-300);

    display: block;
    position: relative;
  }

  .skeleton {
    display: flex;
    width: 100%;
    height: 100%;
    min-height: 1rem;
  }

  .skeleton__indicator {
    flex: 1 1 auto;
    background: var(--color);
    border-radius: var(--border-radius);
  }

  .skeleton--sheen .skeleton__indicator {
    background: linear-gradient(270deg, var(--sheen-color), var(--color), var(--color), var(--sheen-color));
    background-size: 400% 100%;
    animation: sheen 8s ease-in-out infinite;
  }

  .skeleton--pulse .skeleton__indicator {
    animation: pulse 2s ease-in-out 0.5s infinite;
  }

  /* Forced colors mode */
  @media (forced-colors: active) {
    :host {
      --color: GrayText;
    }
  }

  @keyframes sheen {
    0% {
      background-position: 200% 0;
    }
    to {
      background-position: -200% 0;
    }
  }

  @keyframes pulse {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0.4;
    }
    100% {
      opacity: 1;
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.HG6XKLES.js
var SlSkeleton = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.effect = "none";
  }
  render() {
    return x`
      <div
        part="base"
        class=${e7({
      skeleton: true,
      "skeleton--pulse": this.effect === "pulse",
      "skeleton--sheen": this.effect === "sheen"
    })}
      >
        <div part="indicator" class="skeleton__indicator"></div>
      </div>
    `;
  }
};
SlSkeleton.styles = [component_styles_default, skeleton_styles_default];
__decorateClass([
  n4()
], SlSkeleton.prototype, "effect", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.MN4ICWTQ.js
SlSkeleton.define("sl-skeleton");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.5D6IT2SR.js
var range_styles_default = i`
  :host {
    --thumb-size: 20px;
    --tooltip-offset: 10px;
    --track-color-active: var(--sl-color-neutral-200);
    --track-color-inactive: var(--sl-color-neutral-200);
    --track-active-offset: 0%;
    --track-height: 6px;

    display: block;
  }

  .range {
    position: relative;
  }

  .range__control {
    --percent: 0%;
    -webkit-appearance: none;
    border-radius: 3px;
    width: 100%;
    height: var(--track-height);
    background: transparent;
    line-height: var(--sl-input-height-medium);
    vertical-align: middle;
    margin: 0;

    background-image: linear-gradient(
      to right,
      var(--track-color-inactive) 0%,
      var(--track-color-inactive) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) 100%
    );
  }

  .range--rtl .range__control {
    background-image: linear-gradient(
      to left,
      var(--track-color-inactive) 0%,
      var(--track-color-inactive) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) min(var(--percent), var(--track-active-offset)),
      var(--track-color-active) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) max(var(--percent), var(--track-active-offset)),
      var(--track-color-inactive) 100%
    );
  }

  /* Webkit */
  .range__control::-webkit-slider-runnable-track {
    width: 100%;
    height: var(--track-height);
    border-radius: 3px;
    border: none;
  }

  .range__control::-webkit-slider-thumb {
    border: none;
    width: var(--thumb-size);
    height: var(--thumb-size);
    border-radius: 50%;
    background-color: var(--sl-color-primary-600);
    border: solid var(--sl-input-border-width) var(--sl-color-primary-600);
    -webkit-appearance: none;
    margin-top: calc(var(--thumb-size) / -2 + var(--track-height) / 2);
    cursor: pointer;
  }

  .range__control:enabled::-webkit-slider-thumb:hover {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
  }

  .range__control:enabled:focus-visible::-webkit-slider-thumb {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .range__control:enabled::-webkit-slider-thumb:active {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    cursor: grabbing;
  }

  /* Firefox */
  .range__control::-moz-focus-outer {
    border: 0;
  }

  .range__control::-moz-range-progress {
    background-color: var(--track-color-active);
    border-radius: 3px;
    height: var(--track-height);
  }

  .range__control::-moz-range-track {
    width: 100%;
    height: var(--track-height);
    background-color: var(--track-color-inactive);
    border-radius: 3px;
    border: none;
  }

  .range__control::-moz-range-thumb {
    border: none;
    height: var(--thumb-size);
    width: var(--thumb-size);
    border-radius: 50%;
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    transition:
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) box-shadow;
    cursor: pointer;
  }

  .range__control:enabled::-moz-range-thumb:hover {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
  }

  .range__control:enabled:focus-visible::-moz-range-thumb {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .range__control:enabled::-moz-range-thumb:active {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    cursor: grabbing;
  }

  /* States */
  .range__control:focus-visible {
    outline: none;
  }

  .range__control:disabled {
    opacity: 0.5;
  }

  .range__control:disabled::-webkit-slider-thumb {
    cursor: not-allowed;
  }

  .range__control:disabled::-moz-range-thumb {
    cursor: not-allowed;
  }

  /* Tooltip output */
  .range__tooltip {
    position: absolute;
    z-index: var(--sl-z-index-tooltip);
    left: 0;
    border-radius: var(--sl-tooltip-border-radius);
    background-color: var(--sl-tooltip-background-color);
    font-family: var(--sl-tooltip-font-family);
    font-size: var(--sl-tooltip-font-size);
    font-weight: var(--sl-tooltip-font-weight);
    line-height: var(--sl-tooltip-line-height);
    color: var(--sl-tooltip-color);
    opacity: 0;
    padding: var(--sl-tooltip-padding);
    transition: var(--sl-transition-fast) opacity;
    pointer-events: none;
  }

  .range__tooltip:after {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    left: 50%;
    translate: calc(-1 * var(--sl-tooltip-arrow-size));
  }

  .range--tooltip-visible .range__tooltip {
    opacity: 1;
  }

  /* Tooltip on top */
  .range--tooltip-top .range__tooltip {
    top: calc(-1 * var(--thumb-size) - var(--tooltip-offset));
  }

  .range--tooltip-top .range__tooltip:after {
    border-top: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-left: var(--sl-tooltip-arrow-size) solid transparent;
    border-right: var(--sl-tooltip-arrow-size) solid transparent;
    top: 100%;
  }

  /* Tooltip on bottom */
  .range--tooltip-bottom .range__tooltip {
    bottom: calc(-1 * var(--thumb-size) - var(--tooltip-offset));
  }

  .range--tooltip-bottom .range__tooltip:after {
    border-bottom: var(--sl-tooltip-arrow-size) solid var(--sl-tooltip-background-color);
    border-left: var(--sl-tooltip-arrow-size) solid transparent;
    border-right: var(--sl-tooltip-arrow-size) solid transparent;
    bottom: 100%;
  }

  @media (forced-colors: active) {
    .range__control,
    .range__tooltip {
      border: solid 1px transparent;
    }

    .range__control::-webkit-slider-thumb {
      border: solid 1px transparent;
    }

    .range__control::-moz-range-thumb {
      border: solid 1px transparent;
    }

    .range__tooltip:after {
      display: none;
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.QACYBNWK.js
var SlRange = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this);
    this.hasSlotController = new HasSlotController(this, "help-text", "label");
    this.localize = new LocalizeController2(this);
    this.hasFocus = false;
    this.hasTooltip = false;
    this.title = "";
    this.name = "";
    this.value = 0;
    this.label = "";
    this.helpText = "";
    this.disabled = false;
    this.min = 0;
    this.max = 100;
    this.step = 1;
    this.tooltip = "top";
    this.tooltipFormatter = (value) => value.toString();
    this.form = "";
    this.defaultValue = 0;
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  connectedCallback() {
    super.connectedCallback();
    this.resizeObserver = new ResizeObserver(() => this.syncRange());
    if (this.value < this.min) {
      this.value = this.min;
    }
    if (this.value > this.max) {
      this.value = this.max;
    }
    this.updateComplete.then(() => {
      this.syncRange();
      this.resizeObserver.observe(this.input);
    });
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.resizeObserver) == null ? void 0 : _a.unobserve(this.input);
  }
  handleChange() {
    this.emit("sl-change");
  }
  handleInput() {
    this.value = parseFloat(this.input.value);
    this.emit("sl-input");
    this.syncRange();
  }
  handleBlur() {
    this.hasFocus = false;
    this.hasTooltip = false;
    this.emit("sl-blur");
  }
  handleFocus() {
    this.hasFocus = true;
    this.hasTooltip = true;
    this.emit("sl-focus");
  }
  handleThumbDragStart() {
    this.hasTooltip = true;
  }
  handleThumbDragEnd() {
    this.hasTooltip = false;
  }
  syncProgress(percent) {
    this.input.style.setProperty("--percent", `${percent * 100}%`);
  }
  syncTooltip(percent) {
    if (this.output !== null) {
      const inputWidth = this.input.offsetWidth;
      const tooltipWidth = this.output.offsetWidth;
      const thumbSize = getComputedStyle(this.input).getPropertyValue("--thumb-size");
      const isRtl = this.localize.dir() === "rtl";
      const percentAsWidth = inputWidth * percent;
      if (isRtl) {
        const x2 = `${inputWidth - percentAsWidth}px + ${percent} * ${thumbSize}`;
        this.output.style.translate = `calc((${x2} - ${tooltipWidth / 2}px - ${thumbSize} / 2))`;
      } else {
        const x2 = `${percentAsWidth}px - ${percent} * ${thumbSize}`;
        this.output.style.translate = `calc(${x2} - ${tooltipWidth / 2}px + ${thumbSize} / 2)`;
      }
    }
  }
  handleValueChange() {
    this.formControlController.updateValidity();
    this.input.value = this.value.toString();
    this.value = parseFloat(this.input.value);
    this.syncRange();
  }
  handleDisabledChange() {
    this.formControlController.setValidity(this.disabled);
  }
  syncRange() {
    const percent = Math.max(0, (this.value - this.min) / (this.max - this.min));
    this.syncProgress(percent);
    if (this.tooltip !== "none" && this.hasTooltip) {
      this.updateComplete.then(() => this.syncTooltip(percent));
    }
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  /** Sets focus on the range. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the range. */
  blur() {
    this.input.blur();
  }
  /** Increments the value of the range by the value of the step attribute. */
  stepUp() {
    this.input.stepUp();
    if (this.value !== Number(this.input.value)) {
      this.value = Number(this.input.value);
    }
  }
  /** Decrements the value of the range by the value of the step attribute. */
  stepDown() {
    this.input.stepDown();
    if (this.value !== Number(this.input.value)) {
      this.value = Number(this.input.value);
    }
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message2) {
    this.input.setCustomValidity(message2);
    this.formControlController.updateValidity();
  }
  render() {
    const hasLabelSlot = this.hasSlotController.test("label");
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    return x`
      <div
        part="form-control"
        class=${e7({
      "form-control": true,
      "form-control--medium": true,
      // range only has one size
      "form-control--has-label": hasLabel,
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${hasLabel ? "false" : "true"}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${e7({
      range: true,
      "range--disabled": this.disabled,
      "range--focused": this.hasFocus,
      "range--rtl": this.localize.dir() === "rtl",
      "range--tooltip-visible": this.hasTooltip,
      "range--tooltip-top": this.tooltip === "top",
      "range--tooltip-bottom": this.tooltip === "bottom"
    })}
            @mousedown=${this.handleThumbDragStart}
            @mouseup=${this.handleThumbDragEnd}
            @touchstart=${this.handleThumbDragStart}
            @touchend=${this.handleThumbDragEnd}
          >
            <input
              part="input"
              id="input"
              class="range__control"
              title=${this.title}
              type="range"
              name=${o5(this.name)}
              ?disabled=${this.disabled}
              min=${o5(this.min)}
              max=${o5(this.max)}
              step=${o5(this.step)}
              .value=${l3(this.value.toString())}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @focus=${this.handleFocus}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @blur=${this.handleBlur}
            />
            ${this.tooltip !== "none" && !this.disabled ? x`
                  <output part="tooltip" class="range__tooltip">
                    ${typeof this.tooltipFormatter === "function" ? this.tooltipFormatter(this.value) : this.value}
                  </output>
                ` : ""}
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlRange.styles = [component_styles_default, form_control_styles_default, range_styles_default];
__decorateClass([
  e5(".range__control")
], SlRange.prototype, "input", 2);
__decorateClass([
  e5(".range__tooltip")
], SlRange.prototype, "output", 2);
__decorateClass([
  r6()
], SlRange.prototype, "hasFocus", 2);
__decorateClass([
  r6()
], SlRange.prototype, "hasTooltip", 2);
__decorateClass([
  n4()
], SlRange.prototype, "title", 2);
__decorateClass([
  n4()
], SlRange.prototype, "name", 2);
__decorateClass([
  n4({ type: Number })
], SlRange.prototype, "value", 2);
__decorateClass([
  n4()
], SlRange.prototype, "label", 2);
__decorateClass([
  n4({ attribute: "help-text" })
], SlRange.prototype, "helpText", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlRange.prototype, "disabled", 2);
__decorateClass([
  n4({ type: Number })
], SlRange.prototype, "min", 2);
__decorateClass([
  n4({ type: Number })
], SlRange.prototype, "max", 2);
__decorateClass([
  n4({ type: Number })
], SlRange.prototype, "step", 2);
__decorateClass([
  n4()
], SlRange.prototype, "tooltip", 2);
__decorateClass([
  n4({ attribute: false })
], SlRange.prototype, "tooltipFormatter", 2);
__decorateClass([
  n4({ reflect: true })
], SlRange.prototype, "form", 2);
__decorateClass([
  defaultValue()
], SlRange.prototype, "defaultValue", 2);
__decorateClass([
  t3({ passive: true })
], SlRange.prototype, "handleThumbDragStart", 1);
__decorateClass([
  watch("value", { waitUntilFirstUpdate: true })
], SlRange.prototype, "handleValueChange", 1);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlRange.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("hasTooltip", { waitUntilFirstUpdate: true })
], SlRange.prototype, "syncRange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.IED5JJZE.js
SlRange.define("sl-range");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XNOUITPX.js
var select_styles_default = i`
  :host {
    display: block;
  }

  /** The popup */
  .select {
    flex: 1 1 auto;
    display: inline-flex;
    width: 100%;
    position: relative;
    vertical-align: middle;
  }

  .select::part(popup) {
    z-index: var(--sl-z-index-dropdown);
  }

  .select[data-current-placement^='top']::part(popup) {
    transform-origin: bottom;
  }

  .select[data-current-placement^='bottom']::part(popup) {
    transform-origin: top;
  }

  /* Combobox */
  .select__combobox {
    flex: 1;
    display: flex;
    width: 100%;
    min-width: 0;
    position: relative;
    align-items: center;
    justify-content: start;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    letter-spacing: var(--sl-input-letter-spacing);
    vertical-align: middle;
    overflow: hidden;
    cursor: pointer;
    transition:
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) border,
      var(--sl-transition-fast) box-shadow,
      var(--sl-transition-fast) background-color;
  }

  .select__display-input {
    position: relative;
    width: 100%;
    font: inherit;
    border: none;
    background: none;
    color: var(--sl-input-color);
    cursor: inherit;
    overflow: hidden;
    padding: 0;
    margin: 0;
    -webkit-appearance: none;
  }

  .select__display-input::placeholder {
    color: var(--sl-input-placeholder-color);
  }

  .select:not(.select--disabled):hover .select__display-input {
    color: var(--sl-input-color-hover);
  }

  .select__display-input:focus {
    outline: none;
  }

  /* Visually hide the display input when multiple is enabled */
  .select--multiple:not(.select--placeholder-visible) .select__display-input {
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
  }

  .select__value-input {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    padding: 0;
    margin: 0;
    opacity: 0;
    z-index: -1;
  }

  .select__tags {
    display: flex;
    flex: 1;
    align-items: center;
    flex-wrap: wrap;
    margin-inline-start: var(--sl-spacing-2x-small);
  }

  .select__tags::slotted(sl-tag) {
    cursor: pointer !important;
  }

  .select--disabled .select__tags,
  .select--disabled .select__tags::slotted(sl-tag) {
    cursor: not-allowed !important;
  }

  /* Standard selects */
  .select--standard .select__combobox {
    background-color: var(--sl-input-background-color);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
  }

  .select--standard.select--disabled .select__combobox {
    background-color: var(--sl-input-background-color-disabled);
    border-color: var(--sl-input-border-color-disabled);
    color: var(--sl-input-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
    outline: none;
  }

  .select--standard:not(.select--disabled).select--open .select__combobox,
  .select--standard:not(.select--disabled).select--focused .select__combobox {
    background-color: var(--sl-input-background-color-focus);
    border-color: var(--sl-input-border-color-focus);
    box-shadow: 0 0 0 var(--sl-focus-ring-width) var(--sl-input-focus-ring-color);
  }

  /* Filled selects */
  .select--filled .select__combobox {
    border: none;
    background-color: var(--sl-input-filled-background-color);
    color: var(--sl-input-color);
  }

  .select--filled:hover:not(.select--disabled) .select__combobox {
    background-color: var(--sl-input-filled-background-color-hover);
  }

  .select--filled.select--disabled .select__combobox {
    background-color: var(--sl-input-filled-background-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .select--filled:not(.select--disabled).select--open .select__combobox,
  .select--filled:not(.select--disabled).select--focused .select__combobox {
    background-color: var(--sl-input-filled-background-color-focus);
    outline: var(--sl-focus-ring);
  }

  /* Sizes */
  .select--small .select__combobox {
    border-radius: var(--sl-input-border-radius-small);
    font-size: var(--sl-input-font-size-small);
    min-height: var(--sl-input-height-small);
    padding-block: 0;
    padding-inline: var(--sl-input-spacing-small);
  }

  .select--small .select__clear {
    margin-inline-start: var(--sl-input-spacing-small);
  }

  .select--small .select__prefix::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-small);
  }

  .select--small.select--multiple:not(.select--placeholder-visible) .select__prefix::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-small);
  }

  .select--small.select--multiple:not(.select--placeholder-visible) .select__combobox {
    padding-block: 2px;
    padding-inline-start: 0;
  }

  .select--small .select__tags {
    gap: 2px;
  }

  .select--medium .select__combobox {
    border-radius: var(--sl-input-border-radius-medium);
    font-size: var(--sl-input-font-size-medium);
    min-height: var(--sl-input-height-medium);
    padding-block: 0;
    padding-inline: var(--sl-input-spacing-medium);
  }

  .select--medium .select__clear {
    margin-inline-start: var(--sl-input-spacing-medium);
  }

  .select--medium .select__prefix::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-medium);
  }

  .select--medium.select--multiple:not(.select--placeholder-visible) .select__prefix::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-medium);
  }

  .select--medium.select--multiple:not(.select--placeholder-visible) .select__combobox {
    padding-inline-start: 0;
    padding-block: 3px;
  }

  .select--medium .select__tags {
    gap: 3px;
  }

  .select--large .select__combobox {
    border-radius: var(--sl-input-border-radius-large);
    font-size: var(--sl-input-font-size-large);
    min-height: var(--sl-input-height-large);
    padding-block: 0;
    padding-inline: var(--sl-input-spacing-large);
  }

  .select--large .select__clear {
    margin-inline-start: var(--sl-input-spacing-large);
  }

  .select--large .select__prefix::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-large);
  }

  .select--large.select--multiple:not(.select--placeholder-visible) .select__prefix::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-large);
  }

  .select--large.select--multiple:not(.select--placeholder-visible) .select__combobox {
    padding-inline-start: 0;
    padding-block: 4px;
  }

  .select--large .select__tags {
    gap: 4px;
  }

  /* Pills */
  .select--pill.select--small .select__combobox {
    border-radius: var(--sl-input-height-small);
  }

  .select--pill.select--medium .select__combobox {
    border-radius: var(--sl-input-height-medium);
  }

  .select--pill.select--large .select__combobox {
    border-radius: var(--sl-input-height-large);
  }

  /* Prefix and Suffix */
  .select__prefix,
  .select__suffix {
    flex: 0;
    display: inline-flex;
    align-items: center;
    color: var(--sl-input-placeholder-color);
  }

  .select__suffix::slotted(*) {
    margin-inline-start: var(--sl-spacing-small);
  }

  /* Clear button */
  .select__clear {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: inherit;
    color: var(--sl-input-icon-color);
    border: none;
    background: none;
    padding: 0;
    transition: var(--sl-transition-fast) color;
    cursor: pointer;
  }

  .select__clear:hover {
    color: var(--sl-input-icon-color-hover);
  }

  .select__clear:focus {
    outline: none;
  }

  /* Expand icon */
  .select__expand-icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    transition: var(--sl-transition-medium) rotate ease;
    rotate: 0;
    margin-inline-start: var(--sl-spacing-small);
  }

  .select--open .select__expand-icon {
    rotate: -180deg;
  }

  /* Listbox */
  .select__listbox {
    display: block;
    position: relative;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    box-shadow: var(--sl-shadow-large);
    background: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-radius: var(--sl-border-radius-medium);
    padding-block: var(--sl-spacing-x-small);
    padding-inline: 0;
    overflow: auto;
    overscroll-behavior: none;

    /* Make sure it adheres to the popup's auto size */
    max-width: var(--auto-size-available-width);
    max-height: var(--auto-size-available-height);
  }

  .select__listbox ::slotted(sl-divider) {
    --spacing: var(--sl-spacing-x-small);
  }

  .select__listbox ::slotted(small) {
    display: block;
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    color: var(--sl-color-neutral-500);
    padding-block: var(--sl-spacing-2x-small);
    padding-inline: var(--sl-spacing-x-large);
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.DL3WPSFB.js
var SlSelect = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      assumeInteractionOn: ["sl-blur", "sl-input"]
    });
    this.hasSlotController = new HasSlotController(this, "help-text", "label");
    this.localize = new LocalizeController2(this);
    this.typeToSelectString = "";
    this.hasFocus = false;
    this.displayLabel = "";
    this.selectedOptions = [];
    this.valueHasChanged = false;
    this.name = "";
    this._value = "";
    this.defaultValue = "";
    this.size = "medium";
    this.placeholder = "";
    this.multiple = false;
    this.maxOptionsVisible = 3;
    this.disabled = false;
    this.clearable = false;
    this.open = false;
    this.hoist = false;
    this.filled = false;
    this.pill = false;
    this.label = "";
    this.placement = "bottom";
    this.helpText = "";
    this.form = "";
    this.required = false;
    this.getTag = (option) => {
      return x`
      <sl-tag
        part="tag"
        exportparts="
              base:tag__base,
              content:tag__content,
              remove-button:tag__remove-button,
              remove-button__base:tag__remove-button__base
            "
        ?pill=${this.pill}
        size=${this.size}
        removable
        @sl-remove=${(event) => this.handleTagRemove(event, option)}
      >
        ${option.getTextLabel()}
      </sl-tag>
    `;
    };
    this.handleDocumentFocusIn = (event) => {
      const path = event.composedPath();
      if (this && !path.includes(this)) {
        this.hide();
      }
    };
    this.handleDocumentKeyDown = (event) => {
      const target = event.target;
      const isClearButton = target.closest(".select__clear") !== null;
      const isIconButton = target.closest("sl-icon-button") !== null;
      if (isClearButton || isIconButton) {
        return;
      }
      if (event.key === "Escape" && this.open && !this.closeWatcher) {
        event.preventDefault();
        event.stopPropagation();
        this.hide();
        this.displayInput.focus({ preventScroll: true });
      }
      if (event.key === "Enter" || event.key === " " && this.typeToSelectString === "") {
        event.preventDefault();
        event.stopImmediatePropagation();
        if (!this.open) {
          this.show();
          return;
        }
        if (this.currentOption && !this.currentOption.disabled) {
          this.valueHasChanged = true;
          if (this.multiple) {
            this.toggleOptionSelection(this.currentOption);
          } else {
            this.setSelectedOptions(this.currentOption);
          }
          this.updateComplete.then(() => {
            this.emit("sl-input");
            this.emit("sl-change");
          });
          if (!this.multiple) {
            this.hide();
            this.displayInput.focus({ preventScroll: true });
          }
        }
        return;
      }
      if (["ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
        const allOptions = this.getAllOptions();
        const currentIndex = allOptions.indexOf(this.currentOption);
        let newIndex = Math.max(0, currentIndex);
        event.preventDefault();
        if (!this.open) {
          this.show();
          if (this.currentOption) {
            return;
          }
        }
        if (event.key === "ArrowDown") {
          newIndex = currentIndex + 1;
          if (newIndex > allOptions.length - 1) newIndex = 0;
        } else if (event.key === "ArrowUp") {
          newIndex = currentIndex - 1;
          if (newIndex < 0) newIndex = allOptions.length - 1;
        } else if (event.key === "Home") {
          newIndex = 0;
        } else if (event.key === "End") {
          newIndex = allOptions.length - 1;
        }
        this.setCurrentOption(allOptions[newIndex]);
      }
      if (event.key && event.key.length === 1 || event.key === "Backspace") {
        const allOptions = this.getAllOptions();
        if (event.metaKey || event.ctrlKey || event.altKey) {
          return;
        }
        if (!this.open) {
          if (event.key === "Backspace") {
            return;
          }
          this.show();
        }
        event.stopPropagation();
        event.preventDefault();
        clearTimeout(this.typeToSelectTimeout);
        this.typeToSelectTimeout = window.setTimeout(() => this.typeToSelectString = "", 1e3);
        if (event.key === "Backspace") {
          this.typeToSelectString = this.typeToSelectString.slice(0, -1);
        } else {
          this.typeToSelectString += event.key.toLowerCase();
        }
        for (const option of allOptions) {
          const label = option.getTextLabel().toLowerCase();
          if (label.startsWith(this.typeToSelectString)) {
            this.setCurrentOption(option);
            break;
          }
        }
      }
    };
    this.handleDocumentMouseDown = (event) => {
      const path = event.composedPath();
      if (this && !path.includes(this)) {
        this.hide();
      }
    };
  }
  get value() {
    return this._value;
  }
  set value(val) {
    if (this.multiple) {
      val = Array.isArray(val) ? val : val.split(" ");
    } else {
      val = Array.isArray(val) ? val.join(" ") : val;
    }
    if (this._value === val) {
      return;
    }
    this.valueHasChanged = true;
    this._value = val;
  }
  /** Gets the validity state object */
  get validity() {
    return this.valueInput.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.valueInput.validationMessage;
  }
  connectedCallback() {
    super.connectedCallback();
    setTimeout(() => {
      this.handleDefaultSlotChange();
    });
    this.open = false;
  }
  addOpenListeners() {
    var _a;
    document.addEventListener("focusin", this.handleDocumentFocusIn);
    document.addEventListener("keydown", this.handleDocumentKeyDown);
    document.addEventListener("mousedown", this.handleDocumentMouseDown);
    if (this.getRootNode() !== document) {
      this.getRootNode().addEventListener("focusin", this.handleDocumentFocusIn);
    }
    if ("CloseWatcher" in window) {
      (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
      this.closeWatcher = new CloseWatcher();
      this.closeWatcher.onclose = () => {
        if (this.open) {
          this.hide();
          this.displayInput.focus({ preventScroll: true });
        }
      };
    }
  }
  removeOpenListeners() {
    var _a;
    document.removeEventListener("focusin", this.handleDocumentFocusIn);
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
    document.removeEventListener("mousedown", this.handleDocumentMouseDown);
    if (this.getRootNode() !== document) {
      this.getRootNode().removeEventListener("focusin", this.handleDocumentFocusIn);
    }
    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
  }
  handleFocus() {
    this.hasFocus = true;
    this.displayInput.setSelectionRange(0, 0);
    this.emit("sl-focus");
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleLabelClick() {
    this.displayInput.focus();
  }
  handleComboboxMouseDown(event) {
    const path = event.composedPath();
    const isIconButton = path.some((el) => el instanceof Element && el.tagName.toLowerCase() === "sl-icon-button");
    if (this.disabled || isIconButton) {
      return;
    }
    event.preventDefault();
    this.displayInput.focus({ preventScroll: true });
    this.open = !this.open;
  }
  handleComboboxKeyDown(event) {
    if (event.key === "Tab") {
      return;
    }
    event.stopPropagation();
    this.handleDocumentKeyDown(event);
  }
  handleClearClick(event) {
    event.stopPropagation();
    this.valueHasChanged = true;
    if (this.value !== "") {
      this.setSelectedOptions([]);
      this.displayInput.focus({ preventScroll: true });
      this.updateComplete.then(() => {
        this.emit("sl-clear");
        this.emit("sl-input");
        this.emit("sl-change");
      });
    }
  }
  handleClearMouseDown(event) {
    event.stopPropagation();
    event.preventDefault();
  }
  handleOptionClick(event) {
    const target = event.target;
    const option = target.closest("sl-option");
    const oldValue = this.value;
    if (option && !option.disabled) {
      this.valueHasChanged = true;
      if (this.multiple) {
        this.toggleOptionSelection(option);
      } else {
        this.setSelectedOptions(option);
      }
      this.updateComplete.then(() => this.displayInput.focus({ preventScroll: true }));
      if (this.value !== oldValue) {
        this.updateComplete.then(() => {
          this.emit("sl-input");
          this.emit("sl-change");
        });
      }
      if (!this.multiple) {
        this.hide();
        this.displayInput.focus({ preventScroll: true });
      }
    }
  }
  /* @internal - used by options to update labels */
  handleDefaultSlotChange() {
    if (!customElements.get("sl-option")) {
      customElements.whenDefined("sl-option").then(() => this.handleDefaultSlotChange());
    }
    const allOptions = this.getAllOptions();
    const val = this.valueHasChanged ? this.value : this.defaultValue;
    const value = Array.isArray(val) ? val : [val];
    const values = [];
    allOptions.forEach((option) => values.push(option.value));
    this.setSelectedOptions(allOptions.filter((el) => value.includes(el.value)));
  }
  handleTagRemove(event, option) {
    event.stopPropagation();
    this.valueHasChanged = true;
    if (!this.disabled) {
      this.toggleOptionSelection(option, false);
      this.updateComplete.then(() => {
        this.emit("sl-input");
        this.emit("sl-change");
      });
    }
  }
  // Gets an array of all <sl-option> elements
  getAllOptions() {
    return [...this.querySelectorAll("sl-option")];
  }
  // Gets the first <sl-option> element
  getFirstOption() {
    return this.querySelector("sl-option");
  }
  // Sets the current option, which is the option the user is currently interacting with (e.g. via keyboard). Only one
  // option may be "current" at a time.
  setCurrentOption(option) {
    const allOptions = this.getAllOptions();
    allOptions.forEach((el) => {
      el.current = false;
      el.tabIndex = -1;
    });
    if (option) {
      this.currentOption = option;
      option.current = true;
      option.tabIndex = 0;
      option.focus();
    }
  }
  // Sets the selected option(s)
  setSelectedOptions(option) {
    const allOptions = this.getAllOptions();
    const newSelectedOptions = Array.isArray(option) ? option : [option];
    allOptions.forEach((el) => el.selected = false);
    if (newSelectedOptions.length) {
      newSelectedOptions.forEach((el) => el.selected = true);
    }
    this.selectionChanged();
  }
  // Toggles an option's selected state
  toggleOptionSelection(option, force) {
    if (force === true || force === false) {
      option.selected = force;
    } else {
      option.selected = !option.selected;
    }
    this.selectionChanged();
  }
  // This method must be called whenever the selection changes. It will update the selected options cache, the current
  // value, and the display value
  selectionChanged() {
    var _a, _b, _c;
    const options = this.getAllOptions();
    this.selectedOptions = options.filter((el) => el.selected);
    const cachedValueHasChanged = this.valueHasChanged;
    if (this.multiple) {
      this.value = this.selectedOptions.map((el) => el.value);
      if (this.placeholder && this.value.length === 0) {
        this.displayLabel = "";
      } else {
        this.displayLabel = this.localize.term("numOptionsSelected", this.selectedOptions.length);
      }
    } else {
      const selectedOption = this.selectedOptions[0];
      this.value = (_a = selectedOption == null ? void 0 : selectedOption.value) != null ? _a : "";
      this.displayLabel = (_c = (_b = selectedOption == null ? void 0 : selectedOption.getTextLabel) == null ? void 0 : _b.call(selectedOption)) != null ? _c : "";
    }
    this.valueHasChanged = cachedValueHasChanged;
    this.updateComplete.then(() => {
      this.formControlController.updateValidity();
    });
  }
  get tags() {
    return this.selectedOptions.map((option, index) => {
      if (index < this.maxOptionsVisible || this.maxOptionsVisible <= 0) {
        const tag2 = this.getTag(option, index);
        return x`<div @sl-remove=${(e12) => this.handleTagRemove(e12, option)}>
          ${typeof tag2 === "string" ? o8(tag2) : tag2}
        </div>`;
      } else if (index === this.maxOptionsVisible) {
        return x`<sl-tag size=${this.size}>+${this.selectedOptions.length - index}</sl-tag>`;
      }
      return x``;
    });
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  handleDisabledChange() {
    if (this.disabled) {
      this.open = false;
      this.handleOpenChange();
    }
  }
  attributeChangedCallback(name2, oldVal, newVal) {
    super.attributeChangedCallback(name2, oldVal, newVal);
    if (name2 === "value") {
      const cachedValueHasChanged = this.valueHasChanged;
      this.value = this.defaultValue;
      this.valueHasChanged = cachedValueHasChanged;
    }
  }
  handleValueChange() {
    if (!this.valueHasChanged) {
      const cachedValueHasChanged = this.valueHasChanged;
      this.value = this.defaultValue;
      this.valueHasChanged = cachedValueHasChanged;
    }
    const allOptions = this.getAllOptions();
    const value = Array.isArray(this.value) ? this.value : [this.value];
    this.setSelectedOptions(allOptions.filter((el) => value.includes(el.value)));
  }
  async handleOpenChange() {
    if (this.open && !this.disabled) {
      this.setCurrentOption(this.selectedOptions[0] || this.getFirstOption());
      this.emit("sl-show");
      this.addOpenListeners();
      await stopAnimations(this);
      this.listbox.hidden = false;
      this.popup.active = true;
      requestAnimationFrame(() => {
        this.setCurrentOption(this.currentOption);
      });
      const { keyframes, options } = getAnimation(this, "select.show", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      if (this.currentOption) {
        scrollIntoView(this.currentOption, this.listbox, "vertical", "auto");
      }
      this.emit("sl-after-show");
    } else {
      this.emit("sl-hide");
      this.removeOpenListeners();
      await stopAnimations(this);
      const { keyframes, options } = getAnimation(this, "select.hide", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      this.listbox.hidden = true;
      this.popup.active = false;
      this.emit("sl-after-hide");
    }
  }
  /** Shows the listbox. */
  async show() {
    if (this.open || this.disabled) {
      this.open = false;
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the listbox. */
  async hide() {
    if (!this.open || this.disabled) {
      this.open = false;
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.valueInput.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.valueInput.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message2) {
    this.valueInput.setCustomValidity(message2);
    this.formControlController.updateValidity();
  }
  /** Sets focus on the control. */
  focus(options) {
    this.displayInput.focus(options);
  }
  /** Removes focus from the control. */
  blur() {
    this.displayInput.blur();
  }
  render() {
    const hasLabelSlot = this.hasSlotController.test("label");
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    const hasClearIcon = this.clearable && !this.disabled && this.value.length > 0;
    const isPlaceholderVisible = this.placeholder && this.value && this.value.length <= 0;
    return x`
      <div
        part="form-control"
        class=${e7({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-label": hasLabel,
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          id="label"
          part="form-control-label"
          class="form-control__label"
          aria-hidden=${hasLabel ? "false" : "true"}
          @click=${this.handleLabelClick}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <sl-popup
            class=${e7({
      select: true,
      "select--standard": true,
      "select--filled": this.filled,
      "select--pill": this.pill,
      "select--open": this.open,
      "select--disabled": this.disabled,
      "select--multiple": this.multiple,
      "select--focused": this.hasFocus,
      "select--placeholder-visible": isPlaceholderVisible,
      "select--top": this.placement === "top",
      "select--bottom": this.placement === "bottom",
      "select--small": this.size === "small",
      "select--medium": this.size === "medium",
      "select--large": this.size === "large"
    })}
            placement=${this.placement}
            strategy=${this.hoist ? "fixed" : "absolute"}
            flip
            shift
            sync="width"
            auto-size="vertical"
            auto-size-padding="10"
          >
            <div
              part="combobox"
              class="select__combobox"
              slot="anchor"
              @keydown=${this.handleComboboxKeyDown}
              @mousedown=${this.handleComboboxMouseDown}
            >
              <slot part="prefix" name="prefix" class="select__prefix"></slot>

              <input
                part="display-input"
                class="select__display-input"
                type="text"
                placeholder=${this.placeholder}
                .disabled=${this.disabled}
                .value=${this.displayLabel}
                autocomplete="off"
                spellcheck="false"
                autocapitalize="off"
                readonly
                aria-controls="listbox"
                aria-expanded=${this.open ? "true" : "false"}
                aria-haspopup="listbox"
                aria-labelledby="label"
                aria-disabled=${this.disabled ? "true" : "false"}
                aria-describedby="help-text"
                role="combobox"
                tabindex="0"
                @focus=${this.handleFocus}
                @blur=${this.handleBlur}
              />

              ${this.multiple ? x`<div part="tags" class="select__tags">${this.tags}</div>` : ""}

              <input
                class="select__value-input"
                type="text"
                ?disabled=${this.disabled}
                ?required=${this.required}
                .value=${Array.isArray(this.value) ? this.value.join(", ") : this.value}
                tabindex="-1"
                aria-hidden="true"
                @focus=${() => this.focus()}
                @invalid=${this.handleInvalid}
              />

              ${hasClearIcon ? x`
                    <button
                      part="clear-button"
                      class="select__clear"
                      type="button"
                      aria-label=${this.localize.term("clearEntry")}
                      @mousedown=${this.handleClearMouseDown}
                      @click=${this.handleClearClick}
                      tabindex="-1"
                    >
                      <slot name="clear-icon">
                        <sl-icon name="x-circle-fill" library="system"></sl-icon>
                      </slot>
                    </button>
                  ` : ""}

              <slot name="suffix" part="suffix" class="select__suffix"></slot>

              <slot name="expand-icon" part="expand-icon" class="select__expand-icon">
                <sl-icon library="system" name="chevron-down"></sl-icon>
              </slot>
            </div>

            <div
              id="listbox"
              role="listbox"
              aria-expanded=${this.open ? "true" : "false"}
              aria-multiselectable=${this.multiple ? "true" : "false"}
              aria-labelledby="label"
              part="listbox"
              class="select__listbox"
              tabindex="-1"
              @mouseup=${this.handleOptionClick}
              @slotchange=${this.handleDefaultSlotChange}
            >
              <slot></slot>
            </div>
          </sl-popup>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlSelect.styles = [component_styles_default, form_control_styles_default, select_styles_default];
SlSelect.dependencies = {
  "sl-icon": SlIcon,
  "sl-popup": SlPopup,
  "sl-tag": SlTag
};
__decorateClass([
  e5(".select")
], SlSelect.prototype, "popup", 2);
__decorateClass([
  e5(".select__combobox")
], SlSelect.prototype, "combobox", 2);
__decorateClass([
  e5(".select__display-input")
], SlSelect.prototype, "displayInput", 2);
__decorateClass([
  e5(".select__value-input")
], SlSelect.prototype, "valueInput", 2);
__decorateClass([
  e5(".select__listbox")
], SlSelect.prototype, "listbox", 2);
__decorateClass([
  r6()
], SlSelect.prototype, "hasFocus", 2);
__decorateClass([
  r6()
], SlSelect.prototype, "displayLabel", 2);
__decorateClass([
  r6()
], SlSelect.prototype, "currentOption", 2);
__decorateClass([
  r6()
], SlSelect.prototype, "selectedOptions", 2);
__decorateClass([
  r6()
], SlSelect.prototype, "valueHasChanged", 2);
__decorateClass([
  n4()
], SlSelect.prototype, "name", 2);
__decorateClass([
  r6()
], SlSelect.prototype, "value", 1);
__decorateClass([
  n4({ attribute: "value" })
], SlSelect.prototype, "defaultValue", 2);
__decorateClass([
  n4({ reflect: true })
], SlSelect.prototype, "size", 2);
__decorateClass([
  n4()
], SlSelect.prototype, "placeholder", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSelect.prototype, "multiple", 2);
__decorateClass([
  n4({ attribute: "max-options-visible", type: Number })
], SlSelect.prototype, "maxOptionsVisible", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSelect.prototype, "disabled", 2);
__decorateClass([
  n4({ type: Boolean })
], SlSelect.prototype, "clearable", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSelect.prototype, "open", 2);
__decorateClass([
  n4({ type: Boolean })
], SlSelect.prototype, "hoist", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSelect.prototype, "filled", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSelect.prototype, "pill", 2);
__decorateClass([
  n4()
], SlSelect.prototype, "label", 2);
__decorateClass([
  n4({ reflect: true })
], SlSelect.prototype, "placement", 2);
__decorateClass([
  n4({ attribute: "help-text" })
], SlSelect.prototype, "helpText", 2);
__decorateClass([
  n4({ reflect: true })
], SlSelect.prototype, "form", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlSelect.prototype, "required", 2);
__decorateClass([
  n4()
], SlSelect.prototype, "getTag", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlSelect.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch(["defaultValue", "value"], { waitUntilFirstUpdate: true })
], SlSelect.prototype, "handleValueChange", 1);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlSelect.prototype, "handleOpenChange", 1);
setDefaultAnimation("select.show", {
  keyframes: [
    { opacity: 0, scale: 0.9 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 100, easing: "ease" }
});
setDefaultAnimation("select.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.9 }
  ],
  options: { duration: 100, easing: "ease" }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.V5BHNRQG.js
SlSelect.define("sl-select");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.D2B657UE.js
SlResizeObserver.define("sl-resize-observer");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.B63YXDJO.js
var radio_group_styles_default = i`
  :host {
    display: block;
  }

  .form-control {
    position: relative;
    border: none;
    padding: 0;
    margin: 0;
  }

  .form-control__label {
    padding: 0;
  }

  .radio-group--required .radio-group__label::after {
    content: var(--sl-input-required-content);
    margin-inline-start: var(--sl-input-required-content-offset);
  }

  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2OUC42YY.js
var button_group_styles_default = i`
  :host {
    display: inline-block;
  }

  .button-group {
    display: flex;
    flex-wrap: nowrap;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.CPAVN2SR.js
var SlButtonGroup = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.disableRole = false;
    this.label = "";
  }
  handleFocus(event) {
    const button = findButton(event.target);
    button == null ? void 0 : button.toggleAttribute("data-sl-button-group__button--focus", true);
  }
  handleBlur(event) {
    const button = findButton(event.target);
    button == null ? void 0 : button.toggleAttribute("data-sl-button-group__button--focus", false);
  }
  handleMouseOver(event) {
    const button = findButton(event.target);
    button == null ? void 0 : button.toggleAttribute("data-sl-button-group__button--hover", true);
  }
  handleMouseOut(event) {
    const button = findButton(event.target);
    button == null ? void 0 : button.toggleAttribute("data-sl-button-group__button--hover", false);
  }
  handleSlotChange() {
    const slottedElements = [...this.defaultSlot.assignedElements({ flatten: true })];
    slottedElements.forEach((el) => {
      const index = slottedElements.indexOf(el);
      const button = findButton(el);
      if (button) {
        button.toggleAttribute("data-sl-button-group__button", true);
        button.toggleAttribute("data-sl-button-group__button--first", index === 0);
        button.toggleAttribute("data-sl-button-group__button--inner", index > 0 && index < slottedElements.length - 1);
        button.toggleAttribute("data-sl-button-group__button--last", index === slottedElements.length - 1);
        button.toggleAttribute(
          "data-sl-button-group__button--radio",
          button.tagName.toLowerCase() === "sl-radio-button"
        );
      }
    });
  }
  render() {
    return x`
      <div
        part="base"
        class="button-group"
        role="${this.disableRole ? "presentation" : "group"}"
        aria-label=${this.label}
        @focusout=${this.handleBlur}
        @focusin=${this.handleFocus}
        @mouseover=${this.handleMouseOver}
        @mouseout=${this.handleMouseOut}
      >
        <slot @slotchange=${this.handleSlotChange}></slot>
      </div>
    `;
  }
};
SlButtonGroup.styles = [component_styles_default, button_group_styles_default];
__decorateClass([
  e5("slot")
], SlButtonGroup.prototype, "defaultSlot", 2);
__decorateClass([
  r6()
], SlButtonGroup.prototype, "disableRole", 2);
__decorateClass([
  n4()
], SlButtonGroup.prototype, "label", 2);
function findButton(el) {
  var _a;
  const selector = "sl-button, sl-radio-button";
  return (_a = el.closest(selector)) != null ? _a : el.querySelector(selector);
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.6W5VKBP2.js
var SlRadioGroup = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this);
    this.hasSlotController = new HasSlotController(this, "help-text", "label");
    this.customValidityMessage = "";
    this.hasButtonGroup = false;
    this.errorMessage = "";
    this.defaultValue = "";
    this.label = "";
    this.helpText = "";
    this.name = "option";
    this.value = "";
    this.size = "medium";
    this.form = "";
    this.required = false;
  }
  /** Gets the validity state object */
  get validity() {
    const isRequiredAndEmpty = this.required && !this.value;
    const hasCustomValidityMessage = this.customValidityMessage !== "";
    if (hasCustomValidityMessage) {
      return customErrorValidityState;
    } else if (isRequiredAndEmpty) {
      return valueMissingValidityState;
    }
    return validValidityState;
  }
  /** Gets the validation message */
  get validationMessage() {
    const isRequiredAndEmpty = this.required && !this.value;
    const hasCustomValidityMessage = this.customValidityMessage !== "";
    if (hasCustomValidityMessage) {
      return this.customValidityMessage;
    } else if (isRequiredAndEmpty) {
      return this.validationInput.validationMessage;
    }
    return "";
  }
  connectedCallback() {
    super.connectedCallback();
    this.defaultValue = this.value;
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  getAllRadios() {
    return [...this.querySelectorAll("sl-radio, sl-radio-button")];
  }
  handleRadioClick(event) {
    const target = event.target.closest("sl-radio, sl-radio-button");
    const radios = this.getAllRadios();
    const oldValue = this.value;
    if (!target || target.disabled) {
      return;
    }
    this.value = target.value;
    radios.forEach((radio) => radio.checked = radio === target);
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleKeyDown(event) {
    var _a;
    if (!["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", " "].includes(event.key)) {
      return;
    }
    const radios = this.getAllRadios().filter((radio) => !radio.disabled);
    const checkedRadio = (_a = radios.find((radio) => radio.checked)) != null ? _a : radios[0];
    const incr = event.key === " " ? 0 : ["ArrowUp", "ArrowLeft"].includes(event.key) ? -1 : 1;
    const oldValue = this.value;
    let index = radios.indexOf(checkedRadio) + incr;
    if (index < 0) {
      index = radios.length - 1;
    }
    if (index > radios.length - 1) {
      index = 0;
    }
    this.getAllRadios().forEach((radio) => {
      radio.checked = false;
      if (!this.hasButtonGroup) {
        radio.setAttribute("tabindex", "-1");
      }
    });
    this.value = radios[index].value;
    radios[index].checked = true;
    if (!this.hasButtonGroup) {
      radios[index].setAttribute("tabindex", "0");
      radios[index].focus();
    } else {
      radios[index].shadowRoot.querySelector("button").focus();
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
    event.preventDefault();
  }
  handleLabelClick() {
    this.focus();
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  async syncRadioElements() {
    var _a, _b;
    const radios = this.getAllRadios();
    await Promise.all(
      // Sync the checked state and size
      radios.map(async (radio) => {
        await radio.updateComplete;
        radio.checked = radio.value === this.value;
        radio.size = this.size;
      })
    );
    this.hasButtonGroup = radios.some((radio) => radio.tagName.toLowerCase() === "sl-radio-button");
    if (radios.length > 0 && !radios.some((radio) => radio.checked)) {
      if (this.hasButtonGroup) {
        const buttonRadio = (_a = radios[0].shadowRoot) == null ? void 0 : _a.querySelector("button");
        if (buttonRadio) {
          buttonRadio.setAttribute("tabindex", "0");
        }
      } else {
        radios[0].setAttribute("tabindex", "0");
      }
    }
    if (this.hasButtonGroup) {
      const buttonGroup = (_b = this.shadowRoot) == null ? void 0 : _b.querySelector("sl-button-group");
      if (buttonGroup) {
        buttonGroup.disableRole = true;
      }
    }
  }
  syncRadios() {
    if (customElements.get("sl-radio") && customElements.get("sl-radio-button")) {
      this.syncRadioElements();
      return;
    }
    if (customElements.get("sl-radio")) {
      this.syncRadioElements();
    } else {
      customElements.whenDefined("sl-radio").then(() => this.syncRadios());
    }
    if (customElements.get("sl-radio-button")) {
      this.syncRadioElements();
    } else {
      customElements.whenDefined("sl-radio-button").then(() => this.syncRadios());
    }
  }
  updateCheckedRadio() {
    const radios = this.getAllRadios();
    radios.forEach((radio) => radio.checked = radio.value === this.value);
    this.formControlController.setValidity(this.validity.valid);
  }
  handleSizeChange() {
    this.syncRadios();
  }
  handleValueChange() {
    if (this.hasUpdated) {
      this.updateCheckedRadio();
    }
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    const isRequiredAndEmpty = this.required && !this.value;
    const hasCustomValidityMessage = this.customValidityMessage !== "";
    if (isRequiredAndEmpty || hasCustomValidityMessage) {
      this.formControlController.emitInvalidEvent();
      return false;
    }
    return true;
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    const isValid = this.validity.valid;
    this.errorMessage = this.customValidityMessage || isValid ? "" : this.validationInput.validationMessage;
    this.formControlController.setValidity(isValid);
    this.validationInput.hidden = true;
    clearTimeout(this.validationTimeout);
    if (!isValid) {
      this.validationInput.hidden = false;
      this.validationInput.reportValidity();
      this.validationTimeout = setTimeout(() => this.validationInput.hidden = true, 1e4);
    }
    return isValid;
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message2 = "") {
    this.customValidityMessage = message2;
    this.errorMessage = message2;
    this.validationInput.setCustomValidity(message2);
    this.formControlController.updateValidity();
  }
  /** Sets focus on the radio-group. */
  focus(options) {
    const radios = this.getAllRadios();
    const checked = radios.find((radio) => radio.checked);
    const firstEnabledRadio = radios.find((radio) => !radio.disabled);
    const radioToFocus = checked || firstEnabledRadio;
    if (radioToFocus) {
      radioToFocus.focus(options);
    }
  }
  render() {
    const hasLabelSlot = this.hasSlotController.test("label");
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    const defaultSlot = x`
      <slot @slotchange=${this.syncRadios} @click=${this.handleRadioClick} @keydown=${this.handleKeyDown}></slot>
    `;
    return x`
      <fieldset
        part="form-control"
        class=${e7({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--radio-group": true,
      "form-control--has-label": hasLabel,
      "form-control--has-help-text": hasHelpText
    })}
        role="radiogroup"
        aria-labelledby="label"
        aria-describedby="help-text"
        aria-errormessage="error-message"
      >
        <label
          part="form-control-label"
          id="label"
          class="form-control__label"
          aria-hidden=${hasLabel ? "false" : "true"}
          @click=${this.handleLabelClick}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div class="visually-hidden">
            <div id="error-message" aria-live="assertive">${this.errorMessage}</div>
            <label class="radio-group__validation">
              <input
                type="text"
                class="radio-group__validation-input"
                ?required=${this.required}
                tabindex="-1"
                hidden
                @invalid=${this.handleInvalid}
              />
            </label>
          </div>

          ${this.hasButtonGroup ? x`
                <sl-button-group part="button-group" exportparts="base:button-group__base" role="presentation">
                  ${defaultSlot}
                </sl-button-group>
              ` : defaultSlot}
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </fieldset>
    `;
  }
};
SlRadioGroup.styles = [component_styles_default, form_control_styles_default, radio_group_styles_default];
SlRadioGroup.dependencies = { "sl-button-group": SlButtonGroup };
__decorateClass([
  e5("slot:not([name])")
], SlRadioGroup.prototype, "defaultSlot", 2);
__decorateClass([
  e5(".radio-group__validation-input")
], SlRadioGroup.prototype, "validationInput", 2);
__decorateClass([
  r6()
], SlRadioGroup.prototype, "hasButtonGroup", 2);
__decorateClass([
  r6()
], SlRadioGroup.prototype, "errorMessage", 2);
__decorateClass([
  r6()
], SlRadioGroup.prototype, "defaultValue", 2);
__decorateClass([
  n4()
], SlRadioGroup.prototype, "label", 2);
__decorateClass([
  n4({ attribute: "help-text" })
], SlRadioGroup.prototype, "helpText", 2);
__decorateClass([
  n4()
], SlRadioGroup.prototype, "name", 2);
__decorateClass([
  n4({ reflect: true })
], SlRadioGroup.prototype, "value", 2);
__decorateClass([
  n4({ reflect: true })
], SlRadioGroup.prototype, "size", 2);
__decorateClass([
  n4({ reflect: true })
], SlRadioGroup.prototype, "form", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlRadioGroup.prototype, "required", 2);
__decorateClass([
  watch("size", { waitUntilFirstUpdate: true })
], SlRadioGroup.prototype, "handleSizeChange", 1);
__decorateClass([
  watch("value")
], SlRadioGroup.prototype, "handleValueChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.BV4DJ45A.js
SlRadioGroup.define("sl-radio-group");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.MAQXLKQ7.js
var button_styles_default = i`
  :host {
    display: inline-block;
    position: relative;
    width: auto;
    cursor: pointer;
  }

  .button {
    display: inline-flex;
    align-items: stretch;
    justify-content: center;
    width: 100%;
    border-style: solid;
    border-width: var(--sl-input-border-width);
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-font-weight-semibold);
    text-decoration: none;
    user-select: none;
    -webkit-user-select: none;
    white-space: nowrap;
    vertical-align: middle;
    padding: 0;
    transition:
      var(--sl-transition-x-fast) background-color,
      var(--sl-transition-x-fast) color,
      var(--sl-transition-x-fast) border,
      var(--sl-transition-x-fast) box-shadow;
    cursor: inherit;
  }

  .button::-moz-focus-inner {
    border: 0;
  }

  .button:focus {
    outline: none;
  }

  .button:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* When disabled, prevent mouse events from bubbling up from children */
  .button--disabled * {
    pointer-events: none;
  }

  .button__prefix,
  .button__suffix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    pointer-events: none;
  }

  .button__label {
    display: inline-block;
  }

  .button__label::slotted(sl-icon) {
    vertical-align: -2px;
  }

  /*
   * Standard buttons
   */

  /* Default */
  .button--standard.button--default {
    background-color: var(--sl-color-neutral-0);
    border-color: var(--sl-input-border-color);
    color: var(--sl-color-neutral-700);
  }

  .button--standard.button--default:hover:not(.button--disabled) {
    background-color: var(--sl-color-primary-50);
    border-color: var(--sl-color-primary-300);
    color: var(--sl-color-primary-700);
  }

  .button--standard.button--default:active:not(.button--disabled) {
    background-color: var(--sl-color-primary-100);
    border-color: var(--sl-color-primary-400);
    color: var(--sl-color-primary-700);
  }

  /* Primary */
  .button--standard.button--primary {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--primary:hover:not(.button--disabled) {
    background-color: var(--sl-color-primary-500);
    border-color: var(--sl-color-primary-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--primary:active:not(.button--disabled) {
    background-color: var(--sl-color-primary-600);
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  /* Success */
  .button--standard.button--success {
    background-color: var(--sl-color-success-600);
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--success:hover:not(.button--disabled) {
    background-color: var(--sl-color-success-500);
    border-color: var(--sl-color-success-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--success:active:not(.button--disabled) {
    background-color: var(--sl-color-success-600);
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  /* Neutral */
  .button--standard.button--neutral {
    background-color: var(--sl-color-neutral-600);
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--neutral:hover:not(.button--disabled) {
    background-color: var(--sl-color-neutral-500);
    border-color: var(--sl-color-neutral-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--neutral:active:not(.button--disabled) {
    background-color: var(--sl-color-neutral-600);
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  /* Warning */
  .button--standard.button--warning {
    background-color: var(--sl-color-warning-600);
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }
  .button--standard.button--warning:hover:not(.button--disabled) {
    background-color: var(--sl-color-warning-500);
    border-color: var(--sl-color-warning-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--warning:active:not(.button--disabled) {
    background-color: var(--sl-color-warning-600);
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  /* Danger */
  .button--standard.button--danger {
    background-color: var(--sl-color-danger-600);
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--danger:hover:not(.button--disabled) {
    background-color: var(--sl-color-danger-500);
    border-color: var(--sl-color-danger-500);
    color: var(--sl-color-neutral-0);
  }

  .button--standard.button--danger:active:not(.button--disabled) {
    background-color: var(--sl-color-danger-600);
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  /*
   * Outline buttons
   */

  .button--outline {
    background: none;
    border: solid 1px;
  }

  /* Default */
  .button--outline.button--default {
    border-color: var(--sl-input-border-color);
    color: var(--sl-color-neutral-700);
  }

  .button--outline.button--default:hover:not(.button--disabled),
  .button--outline.button--default.button--checked:not(.button--disabled) {
    border-color: var(--sl-color-primary-600);
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--default:active:not(.button--disabled) {
    border-color: var(--sl-color-primary-700);
    background-color: var(--sl-color-primary-700);
    color: var(--sl-color-neutral-0);
  }

  /* Primary */
  .button--outline.button--primary {
    border-color: var(--sl-color-primary-600);
    color: var(--sl-color-primary-600);
  }

  .button--outline.button--primary:hover:not(.button--disabled),
  .button--outline.button--primary.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--primary:active:not(.button--disabled) {
    border-color: var(--sl-color-primary-700);
    background-color: var(--sl-color-primary-700);
    color: var(--sl-color-neutral-0);
  }

  /* Success */
  .button--outline.button--success {
    border-color: var(--sl-color-success-600);
    color: var(--sl-color-success-600);
  }

  .button--outline.button--success:hover:not(.button--disabled),
  .button--outline.button--success.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--success:active:not(.button--disabled) {
    border-color: var(--sl-color-success-700);
    background-color: var(--sl-color-success-700);
    color: var(--sl-color-neutral-0);
  }

  /* Neutral */
  .button--outline.button--neutral {
    border-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-600);
  }

  .button--outline.button--neutral:hover:not(.button--disabled),
  .button--outline.button--neutral.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--neutral:active:not(.button--disabled) {
    border-color: var(--sl-color-neutral-700);
    background-color: var(--sl-color-neutral-700);
    color: var(--sl-color-neutral-0);
  }

  /* Warning */
  .button--outline.button--warning {
    border-color: var(--sl-color-warning-600);
    color: var(--sl-color-warning-600);
  }

  .button--outline.button--warning:hover:not(.button--disabled),
  .button--outline.button--warning.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--warning:active:not(.button--disabled) {
    border-color: var(--sl-color-warning-700);
    background-color: var(--sl-color-warning-700);
    color: var(--sl-color-neutral-0);
  }

  /* Danger */
  .button--outline.button--danger {
    border-color: var(--sl-color-danger-600);
    color: var(--sl-color-danger-600);
  }

  .button--outline.button--danger:hover:not(.button--disabled),
  .button--outline.button--danger.button--checked:not(.button--disabled) {
    background-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  .button--outline.button--danger:active:not(.button--disabled) {
    border-color: var(--sl-color-danger-700);
    background-color: var(--sl-color-danger-700);
    color: var(--sl-color-neutral-0);
  }

  @media (forced-colors: active) {
    .button.button--outline.button--checked:not(.button--disabled) {
      outline: solid 2px transparent;
    }
  }

  /*
   * Text buttons
   */

  .button--text {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-600);
  }

  .button--text:hover:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-500);
  }

  .button--text:focus-visible:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-500);
  }

  .button--text:active:not(.button--disabled) {
    background-color: transparent;
    border-color: transparent;
    color: var(--sl-color-primary-700);
  }

  /*
   * Size modifiers
   */

  .button--small {
    height: auto;
    min-height: var(--sl-input-height-small);
    font-size: var(--sl-button-font-size-small);
    line-height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-small);
  }

  .button--medium {
    height: auto;
    min-height: var(--sl-input-height-medium);
    font-size: var(--sl-button-font-size-medium);
    line-height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-medium);
  }

  .button--large {
    height: auto;
    min-height: var(--sl-input-height-large);
    font-size: var(--sl-button-font-size-large);
    line-height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    border-radius: var(--sl-input-border-radius-large);
  }

  /*
   * Pill modifier
   */

  .button--pill.button--small {
    border-radius: var(--sl-input-height-small);
  }

  .button--pill.button--medium {
    border-radius: var(--sl-input-height-medium);
  }

  .button--pill.button--large {
    border-radius: var(--sl-input-height-large);
  }

  /*
   * Circle modifier
   */

  .button--circle {
    padding-left: 0;
    padding-right: 0;
  }

  .button--circle.button--small {
    width: var(--sl-input-height-small);
    border-radius: 50%;
  }

  .button--circle.button--medium {
    width: var(--sl-input-height-medium);
    border-radius: 50%;
  }

  .button--circle.button--large {
    width: var(--sl-input-height-large);
    border-radius: 50%;
  }

  .button--circle .button__prefix,
  .button--circle .button__suffix,
  .button--circle .button__caret {
    display: none;
  }

  /*
   * Caret modifier
   */

  .button--caret .button__suffix {
    display: none;
  }

  .button--caret .button__caret {
    height: auto;
  }

  /*
   * Loading modifier
   */

  .button--loading {
    position: relative;
    cursor: wait;
  }

  .button--loading .button__prefix,
  .button--loading .button__label,
  .button--loading .button__suffix,
  .button--loading .button__caret {
    visibility: hidden;
  }

  .button--loading sl-spinner {
    --indicator-color: currentColor;
    position: absolute;
    font-size: 1em;
    height: 1em;
    width: 1em;
    top: calc(50% - 0.5em);
    left: calc(50% - 0.5em);
  }

  /*
   * Badges
   */

  .button ::slotted(sl-badge) {
    position: absolute;
    top: 0;
    right: 0;
    translate: 50% -50%;
    pointer-events: none;
  }

  .button--rtl ::slotted(sl-badge) {
    right: auto;
    left: 0;
    translate: -50% -50%;
  }

  /*
   * Button spacing
   */

  .button--has-label.button--small .button__label {
    padding: 0 var(--sl-spacing-small);
  }

  .button--has-label.button--medium .button__label {
    padding: 0 var(--sl-spacing-medium);
  }

  .button--has-label.button--large .button__label {
    padding: 0 var(--sl-spacing-large);
  }

  .button--has-prefix.button--small {
    padding-inline-start: var(--sl-spacing-x-small);
  }

  .button--has-prefix.button--small .button__label {
    padding-inline-start: var(--sl-spacing-x-small);
  }

  .button--has-prefix.button--medium {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-prefix.button--medium .button__label {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-prefix.button--large {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-prefix.button--large .button__label {
    padding-inline-start: var(--sl-spacing-small);
  }

  .button--has-suffix.button--small,
  .button--caret.button--small {
    padding-inline-end: var(--sl-spacing-x-small);
  }

  .button--has-suffix.button--small .button__label,
  .button--caret.button--small .button__label {
    padding-inline-end: var(--sl-spacing-x-small);
  }

  .button--has-suffix.button--medium,
  .button--caret.button--medium {
    padding-inline-end: var(--sl-spacing-small);
  }

  .button--has-suffix.button--medium .button__label,
  .button--caret.button--medium .button__label {
    padding-inline-end: var(--sl-spacing-small);
  }

  .button--has-suffix.button--large,
  .button--caret.button--large {
    padding-inline-end: var(--sl-spacing-small);
  }

  .button--has-suffix.button--large .button__label,
  .button--caret.button--large .button__label {
    padding-inline-end: var(--sl-spacing-small);
  }

  /*
   * Button groups support a variety of button types (e.g. buttons with tooltips, buttons as dropdown triggers, etc.).
   * This means buttons aren't always direct descendants of the button group, thus we can't target them with the
   * ::slotted selector. To work around this, the button group component does some magic to add these special classes to
   * buttons and we style them here instead.
   */

  :host([data-sl-button-group__button--first]:not([data-sl-button-group__button--last])) .button {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }

  :host([data-sl-button-group__button--inner]) .button {
    border-radius: 0;
  }

  :host([data-sl-button-group__button--last]:not([data-sl-button-group__button--first])) .button {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
  }

  /* All except the first */
  :host([data-sl-button-group__button]:not([data-sl-button-group__button--first])) {
    margin-inline-start: calc(-1 * var(--sl-input-border-width));
  }

  /* Add a visual separator between solid buttons */
  :host(
      [data-sl-button-group__button]:not(
          [data-sl-button-group__button--first],
          [data-sl-button-group__button--radio],
          [variant='default']
        ):not(:hover)
    )
    .button:after {
    content: '';
    position: absolute;
    top: 0;
    inset-inline-start: 0;
    bottom: 0;
    border-left: solid 1px rgb(128 128 128 / 33%);
    mix-blend-mode: multiply;
  }

  /* Bump hovered, focused, and checked buttons up so their focus ring isn't clipped */
  :host([data-sl-button-group__button--hover]) {
    z-index: 1;
  }

  /* Focus and checked are always on top */
  :host([data-sl-button-group__button--focus]),
  :host([data-sl-button-group__button][checked]) {
    z-index: 2;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2P5EQCYK.js
var radio_button_styles_default = i`
  ${button_styles_default}

  .button__prefix,
  .button__suffix,
  .button__label {
    display: inline-flex;
    position: relative;
    align-items: center;
  }

  /* We use a hidden input so constraint validation errors work, since they don't appear to show when used with buttons.
    We can't actually hide it, though, otherwise the messages will be suppressed by the browser. */
  .hidden-input {
    all: unset;
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    outline: dotted 1px red;
    opacity: 0;
    z-index: -1;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.R6DRYWZJ.js
var SlRadioButton = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "[default]", "prefix", "suffix");
    this.hasFocus = false;
    this.checked = false;
    this.disabled = false;
    this.size = "medium";
    this.pill = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "presentation");
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleClick(e12) {
    if (this.disabled) {
      e12.preventDefault();
      e12.stopPropagation();
      return;
    }
    this.checked = true;
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  /** Sets focus on the radio button. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the radio button. */
  blur() {
    this.input.blur();
  }
  render() {
    return u4`
      <div part="base" role="presentation">
        <button
          part="${`button${this.checked ? " button--checked" : ""}`}"
          role="radio"
          aria-checked="${this.checked}"
          class=${e7({
      button: true,
      "button--default": true,
      "button--small": this.size === "small",
      "button--medium": this.size === "medium",
      "button--large": this.size === "large",
      "button--checked": this.checked,
      "button--disabled": this.disabled,
      "button--focused": this.hasFocus,
      "button--outline": true,
      "button--pill": this.pill,
      "button--has-label": this.hasSlotController.test("[default]"),
      "button--has-prefix": this.hasSlotController.test("prefix"),
      "button--has-suffix": this.hasSlotController.test("suffix")
    })}
          aria-disabled=${this.disabled}
          type="button"
          value=${o5(this.value)}
          @blur=${this.handleBlur}
          @focus=${this.handleFocus}
          @click=${this.handleClick}
        >
          <slot name="prefix" part="prefix" class="button__prefix"></slot>
          <slot part="label" class="button__label"></slot>
          <slot name="suffix" part="suffix" class="button__suffix"></slot>
        </button>
      </div>
    `;
  }
};
SlRadioButton.styles = [component_styles_default, radio_button_styles_default];
__decorateClass([
  e5(".button")
], SlRadioButton.prototype, "input", 2);
__decorateClass([
  e5(".hidden-input")
], SlRadioButton.prototype, "hiddenInput", 2);
__decorateClass([
  r6()
], SlRadioButton.prototype, "hasFocus", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlRadioButton.prototype, "checked", 2);
__decorateClass([
  n4()
], SlRadioButton.prototype, "value", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlRadioButton.prototype, "disabled", 2);
__decorateClass([
  n4({ reflect: true })
], SlRadioButton.prototype, "size", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlRadioButton.prototype, "pill", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlRadioButton.prototype, "handleDisabledChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.3SGXMLGV.js
SlRadioButton.define("sl-radio-button");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XOSELTMG.js
var progress_ring_styles_default = i`
  :host {
    --size: 128px;
    --track-width: 4px;
    --track-color: var(--sl-color-neutral-200);
    --indicator-width: var(--track-width);
    --indicator-color: var(--sl-color-primary-600);
    --indicator-transition-duration: 0.35s;

    display: inline-flex;
  }

  .progress-ring {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .progress-ring__image {
    width: var(--size);
    height: var(--size);
    rotate: -90deg;
    transform-origin: 50% 50%;
  }

  .progress-ring__track,
  .progress-ring__indicator {
    --radius: calc(var(--size) / 2 - max(var(--track-width), var(--indicator-width)) * 0.5);
    --circumference: calc(var(--radius) * 2 * 3.141592654);

    fill: none;
    r: var(--radius);
    cx: calc(var(--size) / 2);
    cy: calc(var(--size) / 2);
  }

  .progress-ring__track {
    stroke: var(--track-color);
    stroke-width: var(--track-width);
  }

  .progress-ring__indicator {
    stroke: var(--indicator-color);
    stroke-width: var(--indicator-width);
    stroke-linecap: round;
    transition-property: stroke-dashoffset;
    transition-duration: var(--indicator-transition-duration);
    stroke-dasharray: var(--circumference) var(--circumference);
    stroke-dashoffset: calc(var(--circumference) - var(--percentage) * var(--circumference));
  }

  .progress-ring__label {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    text-align: center;
    user-select: none;
    -webkit-user-select: none;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.OIF4ZNZS.js
var SlProgressRing = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.value = 0;
    this.label = "";
  }
  updated(changedProps) {
    super.updated(changedProps);
    if (changedProps.has("value")) {
      const radius = parseFloat(getComputedStyle(this.indicator).getPropertyValue("r"));
      const circumference = 2 * Math.PI * radius;
      const offset3 = circumference - this.value / 100 * circumference;
      this.indicatorOffset = `${offset3}px`;
    }
  }
  render() {
    return x`
      <div
        part="base"
        class="progress-ring"
        role="progressbar"
        aria-label=${this.label.length > 0 ? this.label : this.localize.term("progress")}
        aria-describedby="label"
        aria-valuemin="0"
        aria-valuemax="100"
        aria-valuenow="${this.value}"
        style="--percentage: ${this.value / 100}"
      >
        <svg class="progress-ring__image">
          <circle class="progress-ring__track"></circle>
          <circle class="progress-ring__indicator" style="stroke-dashoffset: ${this.indicatorOffset}"></circle>
        </svg>

        <slot id="label" part="label" class="progress-ring__label"></slot>
      </div>
    `;
  }
};
SlProgressRing.styles = [component_styles_default, progress_ring_styles_default];
__decorateClass([
  e5(".progress-ring__indicator")
], SlProgressRing.prototype, "indicator", 2);
__decorateClass([
  r6()
], SlProgressRing.prototype, "indicatorOffset", 2);
__decorateClass([
  n4({ type: Number, reflect: true })
], SlProgressRing.prototype, "value", 2);
__decorateClass([
  n4()
], SlProgressRing.prototype, "label", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.MD4QFFJM.js
SlProgressRing.define("sl-progress-ring");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2IHMH66B.js
var qr_code_styles_default = i`
  :host {
    display: inline-block;
  }
`;

// node_modules/qr-creator/dist/qr-creator.es6.min.js
var G = null;
var H2 = class {
};
H2.render = function(w2, B2) {
  G(w2, B2);
};
self.QrCreator = H2;
(function(w2) {
  function B2(t6, c6, a4, e12) {
    var b3 = {}, h5 = w2(a4, c6);
    h5.u(t6);
    h5.J();
    e12 = e12 || 0;
    var r10 = h5.h(), d3 = h5.h() + 2 * e12;
    b3.text = t6;
    b3.level = c6;
    b3.version = a4;
    b3.O = d3;
    b3.a = function(b4, a5) {
      b4 -= e12;
      a5 -= e12;
      return 0 > b4 || b4 >= r10 || 0 > a5 || a5 >= r10 ? false : h5.a(b4, a5);
    };
    return b3;
  }
  function C2(t6, c6, a4, e12, b3, h5, r10, d3, g2, x2) {
    function u5(b4, a5, f5, c7, d4, r11, g3) {
      b4 ? (t6.lineTo(a5 + r11, f5 + g3), t6.arcTo(a5, f5, c7, d4, h5)) : t6.lineTo(a5, f5);
    }
    r10 ? t6.moveTo(c6 + h5, a4) : t6.moveTo(c6, a4);
    u5(d3, e12, a4, e12, b3, -h5, 0);
    u5(g2, e12, b3, c6, b3, 0, -h5);
    u5(x2, c6, b3, c6, a4, h5, 0);
    u5(r10, c6, a4, e12, a4, 0, h5);
  }
  function z2(t6, c6, a4, e12, b3, h5, r10, d3, g2, x2) {
    function u5(b4, a5, c7, d4) {
      t6.moveTo(b4 + c7, a5);
      t6.lineTo(
        b4,
        a5
      );
      t6.lineTo(b4, a5 + d4);
      t6.arcTo(b4, a5, b4 + c7, a5, h5);
    }
    r10 && u5(c6, a4, h5, h5);
    d3 && u5(e12, a4, -h5, h5);
    g2 && u5(e12, b3, -h5, -h5);
    x2 && u5(c6, b3, h5, -h5);
  }
  function A2(t6, c6) {
    var a4 = c6.fill;
    if ("string" === typeof a4) t6.fillStyle = a4;
    else {
      var e12 = a4.type, b3 = a4.colorStops;
      a4 = a4.position.map((b4) => Math.round(b4 * c6.size));
      if ("linear-gradient" === e12) var h5 = t6.createLinearGradient.apply(t6, a4);
      else if ("radial-gradient" === e12) h5 = t6.createRadialGradient.apply(t6, a4);
      else throw Error("Unsupported fill");
      b3.forEach(([b4, a5]) => {
        h5.addColorStop(b4, a5);
      });
      t6.fillStyle = h5;
    }
  }
  function y3(t6, c6) {
    a: {
      var a4 = c6.text, e12 = c6.v, b3 = c6.N, h5 = c6.K, r10 = c6.P;
      b3 = Math.max(1, b3 || 1);
      for (h5 = Math.min(40, h5 || 40); b3 <= h5; b3 += 1) try {
        var d3 = B2(a4, e12, b3, r10);
        break a;
      } catch (J) {
      }
      d3 = void 0;
    }
    if (!d3) return null;
    a4 = t6.getContext("2d");
    c6.background && (a4.fillStyle = c6.background, a4.fillRect(c6.left, c6.top, c6.size, c6.size));
    e12 = d3.O;
    h5 = c6.size / e12;
    a4.beginPath();
    for (r10 = 0; r10 < e12; r10 += 1) for (b3 = 0; b3 < e12; b3 += 1) {
      var g2 = a4, x2 = c6.left + b3 * h5, u5 = c6.top + r10 * h5, p3 = r10, q = b3, f5 = d3.a, k2 = x2 + h5, m3 = u5 + h5, D = p3 - 1, E2 = p3 + 1, n10 = q - 1, l5 = q + 1, y4 = Math.floor(Math.min(0.5, Math.max(0, c6.R)) * h5), v3 = f5(p3, q), I2 = f5(D, n10), w3 = f5(D, q);
      D = f5(D, l5);
      var F = f5(p3, l5);
      l5 = f5(E2, l5);
      q = f5(
        E2,
        q
      );
      E2 = f5(E2, n10);
      p3 = f5(p3, n10);
      x2 = Math.round(x2);
      u5 = Math.round(u5);
      k2 = Math.round(k2);
      m3 = Math.round(m3);
      v3 ? C2(g2, x2, u5, k2, m3, y4, !w3 && !p3, !w3 && !F, !q && !F, !q && !p3) : z2(g2, x2, u5, k2, m3, y4, w3 && p3 && I2, w3 && F && D, q && F && l5, q && p3 && E2);
    }
    A2(a4, c6);
    a4.fill();
    return t6;
  }
  var v2 = { minVersion: 1, maxVersion: 40, ecLevel: "L", left: 0, top: 0, size: 200, fill: "#000", background: null, text: "no text", radius: 0.5, quiet: 0 };
  G = function(t6, c6) {
    var a4 = {};
    Object.assign(a4, v2, t6);
    a4.N = a4.minVersion;
    a4.K = a4.maxVersion;
    a4.v = a4.ecLevel;
    a4.left = a4.left;
    a4.top = a4.top;
    a4.size = a4.size;
    a4.fill = a4.fill;
    a4.background = a4.background;
    a4.text = a4.text;
    a4.R = a4.radius;
    a4.P = a4.quiet;
    if (c6 instanceof HTMLCanvasElement) {
      if (c6.width !== a4.size || c6.height !== a4.size) c6.width = a4.size, c6.height = a4.size;
      c6.getContext("2d").clearRect(0, 0, c6.width, c6.height);
      y3(c6, a4);
    } else t6 = document.createElement("canvas"), t6.width = a4.size, t6.height = a4.size, a4 = y3(t6, a4), c6.appendChild(a4);
  };
})(function() {
  function w2(c6) {
    var a4 = C2.s(c6);
    return { S: function() {
      return 4;
    }, b: function() {
      return a4.length;
    }, write: function(c7) {
      for (var b3 = 0; b3 < a4.length; b3 += 1) c7.put(a4[b3], 8);
    } };
  }
  function B2() {
    var c6 = [], a4 = 0, e12 = {
      B: function() {
        return c6;
      },
      c: function(b3) {
        return 1 == (c6[Math.floor(b3 / 8)] >>> 7 - b3 % 8 & 1);
      },
      put: function(b3, h5) {
        for (var a5 = 0; a5 < h5; a5 += 1) e12.m(1 == (b3 >>> h5 - a5 - 1 & 1));
      },
      f: function() {
        return a4;
      },
      m: function(b3) {
        var h5 = Math.floor(a4 / 8);
        c6.length <= h5 && c6.push(0);
        b3 && (c6[h5] |= 128 >>> a4 % 8);
        a4 += 1;
      }
    };
    return e12;
  }
  function C2(c6, a4) {
    function e12(b4, h6) {
      for (var a5 = -1; 7 >= a5; a5 += 1) if (!(-1 >= b4 + a5 || d3 <= b4 + a5)) for (var c7 = -1; 7 >= c7; c7 += 1) -1 >= h6 + c7 || d3 <= h6 + c7 || (r10[b4 + a5][h6 + c7] = 0 <= a5 && 6 >= a5 && (0 == c7 || 6 == c7) || 0 <= c7 && 6 >= c7 && (0 == a5 || 6 == a5) || 2 <= a5 && 4 >= a5 && 2 <= c7 && 4 >= c7 ? true : false);
    }
    function b3(b4, a5) {
      for (var f5 = d3 = 4 * c6 + 17, k2 = Array(f5), m3 = 0; m3 < f5; m3 += 1) {
        k2[m3] = Array(f5);
        for (var p3 = 0; p3 < f5; p3 += 1) k2[m3][p3] = null;
      }
      r10 = k2;
      e12(0, 0);
      e12(d3 - 7, 0);
      e12(0, d3 - 7);
      f5 = y3.G(c6);
      for (k2 = 0; k2 < f5.length; k2 += 1) for (m3 = 0; m3 < f5.length; m3 += 1) {
        p3 = f5[k2];
        var q = f5[m3];
        if (null == r10[p3][q]) for (var n10 = -2; 2 >= n10; n10 += 1) for (var l5 = -2; 2 >= l5; l5 += 1) r10[p3 + n10][q + l5] = -2 == n10 || 2 == n10 || -2 == l5 || 2 == l5 || 0 == n10 && 0 == l5;
      }
      for (f5 = 8; f5 < d3 - 8; f5 += 1) null == r10[f5][6] && (r10[f5][6] = 0 == f5 % 2);
      for (f5 = 8; f5 < d3 - 8; f5 += 1) null == r10[6][f5] && (r10[6][f5] = 0 == f5 % 2);
      f5 = y3.w(h5 << 3 | a5);
      for (k2 = 0; 15 > k2; k2 += 1) m3 = !b4 && 1 == (f5 >> k2 & 1), r10[6 > k2 ? k2 : 8 > k2 ? k2 + 1 : d3 - 15 + k2][8] = m3, r10[8][8 > k2 ? d3 - k2 - 1 : 9 > k2 ? 15 - k2 : 14 - k2] = m3;
      r10[d3 - 8][8] = !b4;
      if (7 <= c6) {
        f5 = y3.A(c6);
        for (k2 = 0; 18 > k2; k2 += 1) m3 = !b4 && 1 == (f5 >> k2 & 1), r10[Math.floor(k2 / 3)][k2 % 3 + d3 - 8 - 3] = m3;
        for (k2 = 0; 18 > k2; k2 += 1) m3 = !b4 && 1 == (f5 >> k2 & 1), r10[k2 % 3 + d3 - 8 - 3][Math.floor(k2 / 3)] = m3;
      }
      if (null == g2) {
        b4 = t6.I(c6, h5);
        f5 = B2();
        for (k2 = 0; k2 < x2.length; k2 += 1) m3 = x2[k2], f5.put(4, 4), f5.put(m3.b(), y3.f(4, c6)), m3.write(f5);
        for (k2 = m3 = 0; k2 < b4.length; k2 += 1) m3 += b4[k2].j;
        if (f5.f() > 8 * m3) throw Error("code length overflow. (" + f5.f() + ">" + 8 * m3 + ")");
        for (f5.f() + 4 <= 8 * m3 && f5.put(0, 4); 0 != f5.f() % 8; ) f5.m(false);
        for (; !(f5.f() >= 8 * m3); ) {
          f5.put(236, 8);
          if (f5.f() >= 8 * m3) break;
          f5.put(17, 8);
        }
        var u6 = 0;
        m3 = k2 = 0;
        p3 = Array(b4.length);
        q = Array(b4.length);
        for (n10 = 0; n10 < b4.length; n10 += 1) {
          var v3 = b4[n10].j, w3 = b4[n10].o - v3;
          k2 = Math.max(k2, v3);
          m3 = Math.max(m3, w3);
          p3[n10] = Array(v3);
          for (l5 = 0; l5 < p3[n10].length; l5 += 1) p3[n10][l5] = 255 & f5.B()[l5 + u6];
          u6 += v3;
          l5 = y3.C(w3);
          v3 = z2(p3[n10], l5.b() - 1).l(l5);
          q[n10] = Array(l5.b() - 1);
          for (l5 = 0; l5 < q[n10].length; l5 += 1) w3 = l5 + v3.b() - q[n10].length, q[n10][l5] = 0 <= w3 ? v3.c(w3) : 0;
        }
        for (l5 = f5 = 0; l5 < b4.length; l5 += 1) f5 += b4[l5].o;
        f5 = Array(f5);
        for (l5 = u6 = 0; l5 < k2; l5 += 1) for (n10 = 0; n10 < b4.length; n10 += 1) l5 < p3[n10].length && (f5[u6] = p3[n10][l5], u6 += 1);
        for (l5 = 0; l5 < m3; l5 += 1) for (n10 = 0; n10 < b4.length; n10 += 1) l5 < q[n10].length && (f5[u6] = q[n10][l5], u6 += 1);
        g2 = f5;
      }
      b4 = g2;
      f5 = -1;
      k2 = d3 - 1;
      m3 = 7;
      p3 = 0;
      a5 = y3.F(a5);
      for (q = d3 - 1; 0 < q; q -= 2) for (6 == q && --q; ; ) {
        for (n10 = 0; 2 > n10; n10 += 1) null == r10[k2][q - n10] && (l5 = false, p3 < b4.length && (l5 = 1 == (b4[p3] >>> m3 & 1)), a5(k2, q - n10) && (l5 = !l5), r10[k2][q - n10] = l5, --m3, -1 == m3 && (p3 += 1, m3 = 7));
        k2 += f5;
        if (0 > k2 || d3 <= k2) {
          k2 -= f5;
          f5 = -f5;
          break;
        }
      }
    }
    var h5 = A2[a4], r10 = null, d3 = 0, g2 = null, x2 = [], u5 = { u: function(b4) {
      b4 = w2(b4);
      x2.push(b4);
      g2 = null;
    }, a: function(b4, a5) {
      if (0 > b4 || d3 <= b4 || 0 > a5 || d3 <= a5) throw Error(b4 + "," + a5);
      return r10[b4][a5];
    }, h: function() {
      return d3;
    }, J: function() {
      for (var a5 = 0, h6 = 0, c7 = 0; 8 > c7; c7 += 1) {
        b3(true, c7);
        var d4 = y3.D(u5);
        if (0 == c7 || a5 > d4) a5 = d4, h6 = c7;
      }
      b3(false, h6);
    } };
    return u5;
  }
  function z2(c6, a4) {
    if ("undefined" == typeof c6.length) throw Error(c6.length + "/" + a4);
    var e12 = function() {
      for (var b4 = 0; b4 < c6.length && 0 == c6[b4]; ) b4 += 1;
      for (var r10 = Array(c6.length - b4 + a4), d3 = 0; d3 < c6.length - b4; d3 += 1) r10[d3] = c6[d3 + b4];
      return r10;
    }(), b3 = { c: function(b4) {
      return e12[b4];
    }, b: function() {
      return e12.length;
    }, multiply: function(a5) {
      for (var h5 = Array(b3.b() + a5.b() - 1), c7 = 0; c7 < b3.b(); c7 += 1) for (var g2 = 0; g2 < a5.b(); g2 += 1) h5[c7 + g2] ^= v2.i(v2.g(b3.c(c7)) + v2.g(a5.c(g2)));
      return z2(h5, 0);
    }, l: function(a5) {
      if (0 > b3.b() - a5.b()) return b3;
      for (var c7 = v2.g(b3.c(0)) - v2.g(a5.c(0)), h5 = Array(b3.b()), g2 = 0; g2 < b3.b(); g2 += 1) h5[g2] = b3.c(g2);
      for (g2 = 0; g2 < a5.b(); g2 += 1) h5[g2] ^= v2.i(v2.g(a5.c(g2)) + c7);
      return z2(h5, 0).l(a5);
    } };
    return b3;
  }
  C2.s = function(c6) {
    for (var a4 = [], e12 = 0; e12 < c6.length; e12++) {
      var b3 = c6.charCodeAt(e12);
      128 > b3 ? a4.push(b3) : 2048 > b3 ? a4.push(192 | b3 >> 6, 128 | b3 & 63) : 55296 > b3 || 57344 <= b3 ? a4.push(224 | b3 >> 12, 128 | b3 >> 6 & 63, 128 | b3 & 63) : (e12++, b3 = 65536 + ((b3 & 1023) << 10 | c6.charCodeAt(e12) & 1023), a4.push(240 | b3 >> 18, 128 | b3 >> 12 & 63, 128 | b3 >> 6 & 63, 128 | b3 & 63));
    }
    return a4;
  };
  var A2 = { L: 1, M: 0, Q: 3, H: 2 }, y3 = /* @__PURE__ */ function() {
    function c6(b3) {
      for (var a5 = 0; 0 != b3; ) a5 += 1, b3 >>>= 1;
      return a5;
    }
    var a4 = [
      [],
      [6, 18],
      [6, 22],
      [6, 26],
      [6, 30],
      [6, 34],
      [6, 22, 38],
      [6, 24, 42],
      [6, 26, 46],
      [6, 28, 50],
      [6, 30, 54],
      [6, 32, 58],
      [6, 34, 62],
      [6, 26, 46, 66],
      [6, 26, 48, 70],
      [6, 26, 50, 74],
      [6, 30, 54, 78],
      [6, 30, 56, 82],
      [6, 30, 58, 86],
      [6, 34, 62, 90],
      [6, 28, 50, 72, 94],
      [6, 26, 50, 74, 98],
      [6, 30, 54, 78, 102],
      [6, 28, 54, 80, 106],
      [6, 32, 58, 84, 110],
      [6, 30, 58, 86, 114],
      [6, 34, 62, 90, 118],
      [6, 26, 50, 74, 98, 122],
      [6, 30, 54, 78, 102, 126],
      [6, 26, 52, 78, 104, 130],
      [6, 30, 56, 82, 108, 134],
      [6, 34, 60, 86, 112, 138],
      [6, 30, 58, 86, 114, 142],
      [6, 34, 62, 90, 118, 146],
      [6, 30, 54, 78, 102, 126, 150],
      [6, 24, 50, 76, 102, 128, 154],
      [6, 28, 54, 80, 106, 132, 158],
      [6, 32, 58, 84, 110, 136, 162],
      [6, 26, 54, 82, 110, 138, 166],
      [6, 30, 58, 86, 114, 142, 170]
    ], e12 = { w: function(b3) {
      for (var a5 = b3 << 10; 0 <= c6(a5) - c6(1335); ) a5 ^= 1335 << c6(a5) - c6(1335);
      return (b3 << 10 | a5) ^ 21522;
    }, A: function(b3) {
      for (var a5 = b3 << 12; 0 <= c6(a5) - c6(7973); ) a5 ^= 7973 << c6(a5) - c6(7973);
      return b3 << 12 | a5;
    }, G: function(b3) {
      return a4[b3 - 1];
    }, F: function(b3) {
      switch (b3) {
        case 0:
          return function(b4, a5) {
            return 0 == (b4 + a5) % 2;
          };
        case 1:
          return function(b4) {
            return 0 == b4 % 2;
          };
        case 2:
          return function(b4, a5) {
            return 0 == a5 % 3;
          };
        case 3:
          return function(b4, a5) {
            return 0 == (b4 + a5) % 3;
          };
        case 4:
          return function(b4, a5) {
            return 0 == (Math.floor(b4 / 2) + Math.floor(a5 / 3)) % 2;
          };
        case 5:
          return function(b4, a5) {
            return 0 == b4 * a5 % 2 + b4 * a5 % 3;
          };
        case 6:
          return function(b4, a5) {
            return 0 == (b4 * a5 % 2 + b4 * a5 % 3) % 2;
          };
        case 7:
          return function(b4, a5) {
            return 0 == (b4 * a5 % 3 + (b4 + a5) % 2) % 2;
          };
        default:
          throw Error("bad maskPattern:" + b3);
      }
    }, C: function(b3) {
      for (var a5 = z2([1], 0), c7 = 0; c7 < b3; c7 += 1) a5 = a5.multiply(z2([1, v2.i(c7)], 0));
      return a5;
    }, f: function(b3, a5) {
      if (4 != b3 || 1 > a5 || 40 < a5) throw Error("mode: " + b3 + "; type: " + a5);
      return 10 > a5 ? 8 : 16;
    }, D: function(b3) {
      for (var a5 = b3.h(), c7 = 0, d3 = 0; d3 < a5; d3 += 1) for (var g2 = 0; g2 < a5; g2 += 1) {
        for (var e13 = 0, t7 = b3.a(d3, g2), p3 = -1; 1 >= p3; p3 += 1) if (!(0 > d3 + p3 || a5 <= d3 + p3)) for (var q = -1; 1 >= q; q += 1) 0 > g2 + q || a5 <= g2 + q || (0 != p3 || 0 != q) && t7 == b3.a(d3 + p3, g2 + q) && (e13 += 1);
        5 < e13 && (c7 += 3 + e13 - 5);
      }
      for (d3 = 0; d3 < a5 - 1; d3 += 1) for (g2 = 0; g2 < a5 - 1; g2 += 1) if (e13 = 0, b3.a(d3, g2) && (e13 += 1), b3.a(d3 + 1, g2) && (e13 += 1), b3.a(d3, g2 + 1) && (e13 += 1), b3.a(d3 + 1, g2 + 1) && (e13 += 1), 0 == e13 || 4 == e13) c7 += 3;
      for (d3 = 0; d3 < a5; d3 += 1) for (g2 = 0; g2 < a5 - 6; g2 += 1) b3.a(d3, g2) && !b3.a(d3, g2 + 1) && b3.a(d3, g2 + 2) && b3.a(d3, g2 + 3) && b3.a(d3, g2 + 4) && !b3.a(d3, g2 + 5) && b3.a(d3, g2 + 6) && (c7 += 40);
      for (g2 = 0; g2 < a5; g2 += 1) for (d3 = 0; d3 < a5 - 6; d3 += 1) b3.a(d3, g2) && !b3.a(d3 + 1, g2) && b3.a(d3 + 2, g2) && b3.a(d3 + 3, g2) && b3.a(d3 + 4, g2) && !b3.a(d3 + 5, g2) && b3.a(d3 + 6, g2) && (c7 += 40);
      for (g2 = e13 = 0; g2 < a5; g2 += 1) for (d3 = 0; d3 < a5; d3 += 1) b3.a(d3, g2) && (e13 += 1);
      return c7 += Math.abs(100 * e13 / a5 / a5 - 50) / 5 * 10;
    } };
    return e12;
  }(), v2 = function() {
    for (var c6 = Array(256), a4 = Array(256), e12 = 0; 8 > e12; e12 += 1) c6[e12] = 1 << e12;
    for (e12 = 8; 256 > e12; e12 += 1) c6[e12] = c6[e12 - 4] ^ c6[e12 - 5] ^ c6[e12 - 6] ^ c6[e12 - 8];
    for (e12 = 0; 255 > e12; e12 += 1) a4[c6[e12]] = e12;
    return { g: function(b3) {
      if (1 > b3) throw Error("glog(" + b3 + ")");
      return a4[b3];
    }, i: function(b3) {
      for (; 0 > b3; ) b3 += 255;
      for (; 256 <= b3; ) b3 -= 255;
      return c6[b3];
    } };
  }(), t6 = /* @__PURE__ */ function() {
    function c6(b3, c7) {
      switch (c7) {
        case A2.L:
          return a4[4 * (b3 - 1)];
        case A2.M:
          return a4[4 * (b3 - 1) + 1];
        case A2.Q:
          return a4[4 * (b3 - 1) + 2];
        case A2.H:
          return a4[4 * (b3 - 1) + 3];
      }
    }
    var a4 = [
      [1, 26, 19],
      [1, 26, 16],
      [1, 26, 13],
      [1, 26, 9],
      [1, 44, 34],
      [1, 44, 28],
      [1, 44, 22],
      [1, 44, 16],
      [1, 70, 55],
      [1, 70, 44],
      [2, 35, 17],
      [2, 35, 13],
      [1, 100, 80],
      [2, 50, 32],
      [2, 50, 24],
      [4, 25, 9],
      [1, 134, 108],
      [2, 67, 43],
      [2, 33, 15, 2, 34, 16],
      [2, 33, 11, 2, 34, 12],
      [2, 86, 68],
      [4, 43, 27],
      [4, 43, 19],
      [4, 43, 15],
      [2, 98, 78],
      [4, 49, 31],
      [2, 32, 14, 4, 33, 15],
      [4, 39, 13, 1, 40, 14],
      [2, 121, 97],
      [2, 60, 38, 2, 61, 39],
      [4, 40, 18, 2, 41, 19],
      [4, 40, 14, 2, 41, 15],
      [2, 146, 116],
      [
        3,
        58,
        36,
        2,
        59,
        37
      ],
      [4, 36, 16, 4, 37, 17],
      [4, 36, 12, 4, 37, 13],
      [2, 86, 68, 2, 87, 69],
      [4, 69, 43, 1, 70, 44],
      [6, 43, 19, 2, 44, 20],
      [6, 43, 15, 2, 44, 16],
      [4, 101, 81],
      [1, 80, 50, 4, 81, 51],
      [4, 50, 22, 4, 51, 23],
      [3, 36, 12, 8, 37, 13],
      [2, 116, 92, 2, 117, 93],
      [6, 58, 36, 2, 59, 37],
      [4, 46, 20, 6, 47, 21],
      [7, 42, 14, 4, 43, 15],
      [4, 133, 107],
      [8, 59, 37, 1, 60, 38],
      [8, 44, 20, 4, 45, 21],
      [12, 33, 11, 4, 34, 12],
      [3, 145, 115, 1, 146, 116],
      [4, 64, 40, 5, 65, 41],
      [11, 36, 16, 5, 37, 17],
      [11, 36, 12, 5, 37, 13],
      [5, 109, 87, 1, 110, 88],
      [5, 65, 41, 5, 66, 42],
      [5, 54, 24, 7, 55, 25],
      [11, 36, 12, 7, 37, 13],
      [5, 122, 98, 1, 123, 99],
      [
        7,
        73,
        45,
        3,
        74,
        46
      ],
      [15, 43, 19, 2, 44, 20],
      [3, 45, 15, 13, 46, 16],
      [1, 135, 107, 5, 136, 108],
      [10, 74, 46, 1, 75, 47],
      [1, 50, 22, 15, 51, 23],
      [2, 42, 14, 17, 43, 15],
      [5, 150, 120, 1, 151, 121],
      [9, 69, 43, 4, 70, 44],
      [17, 50, 22, 1, 51, 23],
      [2, 42, 14, 19, 43, 15],
      [3, 141, 113, 4, 142, 114],
      [3, 70, 44, 11, 71, 45],
      [17, 47, 21, 4, 48, 22],
      [9, 39, 13, 16, 40, 14],
      [3, 135, 107, 5, 136, 108],
      [3, 67, 41, 13, 68, 42],
      [15, 54, 24, 5, 55, 25],
      [15, 43, 15, 10, 44, 16],
      [4, 144, 116, 4, 145, 117],
      [17, 68, 42],
      [17, 50, 22, 6, 51, 23],
      [19, 46, 16, 6, 47, 17],
      [2, 139, 111, 7, 140, 112],
      [17, 74, 46],
      [7, 54, 24, 16, 55, 25],
      [34, 37, 13],
      [
        4,
        151,
        121,
        5,
        152,
        122
      ],
      [4, 75, 47, 14, 76, 48],
      [11, 54, 24, 14, 55, 25],
      [16, 45, 15, 14, 46, 16],
      [6, 147, 117, 4, 148, 118],
      [6, 73, 45, 14, 74, 46],
      [11, 54, 24, 16, 55, 25],
      [30, 46, 16, 2, 47, 17],
      [8, 132, 106, 4, 133, 107],
      [8, 75, 47, 13, 76, 48],
      [7, 54, 24, 22, 55, 25],
      [22, 45, 15, 13, 46, 16],
      [10, 142, 114, 2, 143, 115],
      [19, 74, 46, 4, 75, 47],
      [28, 50, 22, 6, 51, 23],
      [33, 46, 16, 4, 47, 17],
      [8, 152, 122, 4, 153, 123],
      [22, 73, 45, 3, 74, 46],
      [8, 53, 23, 26, 54, 24],
      [12, 45, 15, 28, 46, 16],
      [3, 147, 117, 10, 148, 118],
      [3, 73, 45, 23, 74, 46],
      [4, 54, 24, 31, 55, 25],
      [11, 45, 15, 31, 46, 16],
      [7, 146, 116, 7, 147, 117],
      [21, 73, 45, 7, 74, 46],
      [1, 53, 23, 37, 54, 24],
      [19, 45, 15, 26, 46, 16],
      [5, 145, 115, 10, 146, 116],
      [19, 75, 47, 10, 76, 48],
      [15, 54, 24, 25, 55, 25],
      [23, 45, 15, 25, 46, 16],
      [13, 145, 115, 3, 146, 116],
      [2, 74, 46, 29, 75, 47],
      [42, 54, 24, 1, 55, 25],
      [23, 45, 15, 28, 46, 16],
      [17, 145, 115],
      [10, 74, 46, 23, 75, 47],
      [10, 54, 24, 35, 55, 25],
      [19, 45, 15, 35, 46, 16],
      [17, 145, 115, 1, 146, 116],
      [14, 74, 46, 21, 75, 47],
      [29, 54, 24, 19, 55, 25],
      [11, 45, 15, 46, 46, 16],
      [13, 145, 115, 6, 146, 116],
      [14, 74, 46, 23, 75, 47],
      [44, 54, 24, 7, 55, 25],
      [59, 46, 16, 1, 47, 17],
      [12, 151, 121, 7, 152, 122],
      [12, 75, 47, 26, 76, 48],
      [39, 54, 24, 14, 55, 25],
      [22, 45, 15, 41, 46, 16],
      [6, 151, 121, 14, 152, 122],
      [6, 75, 47, 34, 76, 48],
      [46, 54, 24, 10, 55, 25],
      [2, 45, 15, 64, 46, 16],
      [17, 152, 122, 4, 153, 123],
      [29, 74, 46, 14, 75, 47],
      [49, 54, 24, 10, 55, 25],
      [24, 45, 15, 46, 46, 16],
      [4, 152, 122, 18, 153, 123],
      [13, 74, 46, 32, 75, 47],
      [48, 54, 24, 14, 55, 25],
      [42, 45, 15, 32, 46, 16],
      [20, 147, 117, 4, 148, 118],
      [40, 75, 47, 7, 76, 48],
      [43, 54, 24, 22, 55, 25],
      [10, 45, 15, 67, 46, 16],
      [19, 148, 118, 6, 149, 119],
      [18, 75, 47, 31, 76, 48],
      [34, 54, 24, 34, 55, 25],
      [20, 45, 15, 61, 46, 16]
    ], e12 = { I: function(b3, a5) {
      var e13 = c6(b3, a5);
      if ("undefined" == typeof e13) throw Error("bad rs block @ typeNumber:" + b3 + "/errorCorrectLevel:" + a5);
      b3 = e13.length / 3;
      a5 = [];
      for (var d3 = 0; d3 < b3; d3 += 1) for (var g2 = e13[3 * d3], h5 = e13[3 * d3 + 1], t7 = e13[3 * d3 + 2], p3 = 0; p3 < g2; p3 += 1) {
        var q = t7, f5 = {};
        f5.o = h5;
        f5.j = q;
        a5.push(f5);
      }
      return a5;
    } };
    return e12;
  }();
  return C2;
}());
var qr_creator_es6_min_default = QrCreator;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.Y2GEERDL.js
var SlQrCode = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.value = "";
    this.label = "";
    this.size = 128;
    this.fill = "black";
    this.background = "white";
    this.radius = 0;
    this.errorCorrection = "H";
  }
  firstUpdated() {
    this.generate();
  }
  generate() {
    if (!this.hasUpdated) {
      return;
    }
    qr_creator_es6_min_default.render(
      {
        text: this.value,
        radius: this.radius,
        ecLevel: this.errorCorrection,
        fill: this.fill,
        background: this.background,
        // We draw the canvas larger and scale its container down to avoid blurring on high-density displays
        size: this.size * 2
      },
      this.canvas
    );
  }
  render() {
    var _a;
    return x`
      <canvas
        part="base"
        class="qr-code"
        role="img"
        aria-label=${((_a = this.label) == null ? void 0 : _a.length) > 0 ? this.label : this.value}
        style=${o7({
      width: `${this.size}px`,
      height: `${this.size}px`
    })}
      ></canvas>
    `;
  }
};
SlQrCode.styles = [component_styles_default, qr_code_styles_default];
__decorateClass([
  e5("canvas")
], SlQrCode.prototype, "canvas", 2);
__decorateClass([
  n4()
], SlQrCode.prototype, "value", 2);
__decorateClass([
  n4()
], SlQrCode.prototype, "label", 2);
__decorateClass([
  n4({ type: Number })
], SlQrCode.prototype, "size", 2);
__decorateClass([
  n4()
], SlQrCode.prototype, "fill", 2);
__decorateClass([
  n4()
], SlQrCode.prototype, "background", 2);
__decorateClass([
  n4({ type: Number })
], SlQrCode.prototype, "radius", 2);
__decorateClass([
  n4({ attribute: "error-correction" })
], SlQrCode.prototype, "errorCorrection", 2);
__decorateClass([
  watch(["background", "errorCorrection", "fill", "radius", "size", "value"])
], SlQrCode.prototype, "generate", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.3YQ2JMJ2.js
SlQrCode.define("sl-qr-code");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FKMWLPHV.js
var radio_styles_default = i`
  :host {
    display: block;
  }

  :host(:focus-visible) {
    outline: 0px;
  }

  .radio {
    display: inline-flex;
    align-items: top;
    font-family: var(--sl-input-font-family);
    font-size: var(--sl-input-font-size-medium);
    font-weight: var(--sl-input-font-weight);
    color: var(--sl-input-label-color);
    vertical-align: middle;
    cursor: pointer;
  }

  .radio--small {
    --toggle-size: var(--sl-toggle-size-small);
    font-size: var(--sl-input-font-size-small);
  }

  .radio--medium {
    --toggle-size: var(--sl-toggle-size-medium);
    font-size: var(--sl-input-font-size-medium);
  }

  .radio--large {
    --toggle-size: var(--sl-toggle-size-large);
    font-size: var(--sl-input-font-size-large);
  }

  .radio__checked-icon {
    display: inline-flex;
    width: var(--toggle-size);
    height: var(--toggle-size);
  }

  .radio__control {
    flex: 0 0 auto;
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--toggle-size);
    height: var(--toggle-size);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
    border-radius: 50%;
    background-color: var(--sl-input-background-color);
    color: transparent;
    transition:
      var(--sl-transition-fast) border-color,
      var(--sl-transition-fast) background-color,
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) box-shadow;
  }

  .radio__input {
    position: absolute;
    opacity: 0;
    padding: 0;
    margin: 0;
    pointer-events: none;
  }

  /* Hover */
  .radio:not(.radio--checked):not(.radio--disabled) .radio__control:hover {
    border-color: var(--sl-input-border-color-hover);
    background-color: var(--sl-input-background-color-hover);
  }

  /* Checked */
  .radio--checked .radio__control {
    color: var(--sl-color-neutral-0);
    border-color: var(--sl-color-primary-600);
    background-color: var(--sl-color-primary-600);
  }

  /* Checked + hover */
  .radio.radio--checked:not(.radio--disabled) .radio__control:hover {
    border-color: var(--sl-color-primary-500);
    background-color: var(--sl-color-primary-500);
  }

  /* Checked + focus */
  :host(:focus-visible) .radio__control {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  /* Disabled */
  .radio--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* When the control isn't checked, hide the circle for Windows High Contrast mode a11y */
  .radio:not(.radio--checked) svg circle {
    opacity: 0;
  }

  .radio__label {
    display: inline-block;
    color: var(--sl-input-label-color);
    line-height: var(--toggle-size);
    margin-inline-start: 0.5em;
    user-select: none;
    -webkit-user-select: none;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.6X44KTBH.js
var SlRadio = class extends ShoelaceElement {
  constructor() {
    super();
    this.checked = false;
    this.hasFocus = false;
    this.size = "medium";
    this.disabled = false;
    this.handleBlur = () => {
      this.hasFocus = false;
      this.emit("sl-blur");
    };
    this.handleClick = () => {
      if (!this.disabled) {
        this.checked = true;
      }
    };
    this.handleFocus = () => {
      this.hasFocus = true;
      this.emit("sl-focus");
    };
    this.addEventListener("blur", this.handleBlur);
    this.addEventListener("click", this.handleClick);
    this.addEventListener("focus", this.handleFocus);
  }
  connectedCallback() {
    super.connectedCallback();
    this.setInitialAttributes();
  }
  setInitialAttributes() {
    this.setAttribute("role", "radio");
    this.setAttribute("tabindex", "-1");
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  handleCheckedChange() {
    this.setAttribute("aria-checked", this.checked ? "true" : "false");
    this.setAttribute("tabindex", this.checked ? "0" : "-1");
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  render() {
    return x`
      <span
        part="base"
        class=${e7({
      radio: true,
      "radio--checked": this.checked,
      "radio--disabled": this.disabled,
      "radio--focused": this.hasFocus,
      "radio--small": this.size === "small",
      "radio--medium": this.size === "medium",
      "radio--large": this.size === "large"
    })}
      >
        <span part="${`control${this.checked ? " control--checked" : ""}`}" class="radio__control">
          ${this.checked ? x` <sl-icon part="checked-icon" class="radio__checked-icon" library="system" name="radio"></sl-icon> ` : ""}
        </span>

        <slot part="label" class="radio__label"></slot>
      </span>
    `;
  }
};
SlRadio.styles = [component_styles_default, radio_styles_default];
SlRadio.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  r6()
], SlRadio.prototype, "checked", 2);
__decorateClass([
  r6()
], SlRadio.prototype, "hasFocus", 2);
__decorateClass([
  n4()
], SlRadio.prototype, "value", 2);
__decorateClass([
  n4({ reflect: true })
], SlRadio.prototype, "size", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlRadio.prototype, "disabled", 2);
__decorateClass([
  watch("checked")
], SlRadio.prototype, "handleCheckedChange", 1);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlRadio.prototype, "handleDisabledChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.7ZRV3LMN.js
SlRadio.define("sl-radio");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.OEGOQNYI.js
SlPopup.define("sl-popup");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FXXKMG2P.js
var option_styles_default = i`
  :host {
    display: block;
    user-select: none;
    -webkit-user-select: none;
  }

  :host(:focus) {
    outline: none;
  }

  .option {
    position: relative;
    display: flex;
    align-items: center;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-letter-spacing-normal);
    color: var(--sl-color-neutral-700);
    padding: var(--sl-spacing-x-small) var(--sl-spacing-medium) var(--sl-spacing-x-small) var(--sl-spacing-x-small);
    transition: var(--sl-transition-fast) fill;
    cursor: pointer;
  }

  .option--hover:not(.option--current):not(.option--disabled) {
    background-color: var(--sl-color-neutral-100);
    color: var(--sl-color-neutral-1000);
  }

  .option--current,
  .option--current.option--disabled {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
    opacity: 1;
  }

  .option--disabled {
    outline: none;
    opacity: 0.5;
    cursor: not-allowed;
  }

  .option__label {
    flex: 1 1 auto;
    display: inline-block;
    line-height: var(--sl-line-height-dense);
  }

  .option .option__check {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    visibility: hidden;
    padding-inline-end: var(--sl-spacing-2x-small);
  }

  .option--selected .option__check {
    visibility: visible;
  }

  .option__prefix,
  .option__suffix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .option__prefix::slotted(*) {
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .option__suffix::slotted(*) {
    margin-inline-start: var(--sl-spacing-x-small);
  }

  @media (forced-colors: active) {
    :host(:hover:not([aria-disabled='true'])) .option {
      outline: dashed 1px SelectedItem;
      outline-offset: -1px;
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.W4UKBSNN.js
var SlOption = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.current = false;
    this.selected = false;
    this.hasHover = false;
    this.value = "";
    this.disabled = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "option");
    this.setAttribute("aria-selected", "false");
  }
  handleDefaultSlotChange() {
    customElements.whenDefined("sl-select").then(() => {
      const controller = this.closest("sl-select");
      if (controller) {
        controller.handleDefaultSlotChange();
      }
    });
  }
  handleMouseEnter() {
    this.hasHover = true;
  }
  handleMouseLeave() {
    this.hasHover = false;
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  handleSelectedChange() {
    this.setAttribute("aria-selected", this.selected ? "true" : "false");
  }
  handleValueChange() {
    if (typeof this.value !== "string") {
      this.value = String(this.value);
    }
    if (this.value.includes(" ")) {
      console.error(`Option values cannot include a space. All spaces have been replaced with underscores.`, this);
      this.value = this.value.replace(/ /g, "_");
    }
  }
  /** Returns a plain text label based on the option's content. */
  getTextLabel() {
    const nodes = this.childNodes;
    let label = "";
    [...nodes].forEach((node) => {
      if (node.nodeType === Node.ELEMENT_NODE) {
        if (!node.hasAttribute("slot")) {
          label += node.textContent;
        }
      }
      if (node.nodeType === Node.TEXT_NODE) {
        label += node.textContent;
      }
    });
    return label.trim();
  }
  render() {
    return x`
      <div
        part="base"
        class=${e7({
      option: true,
      "option--current": this.current,
      "option--disabled": this.disabled,
      "option--selected": this.selected,
      "option--hover": this.hasHover
    })}
        @mouseenter=${this.handleMouseEnter}
        @mouseleave=${this.handleMouseLeave}
      >
        <sl-icon part="checked-icon" class="option__check" name="check" library="system" aria-hidden="true"></sl-icon>
        <slot part="prefix" name="prefix" class="option__prefix"></slot>
        <slot part="label" class="option__label" @slotchange=${this.handleDefaultSlotChange}></slot>
        <slot part="suffix" name="suffix" class="option__suffix"></slot>
      </div>
    `;
  }
};
SlOption.styles = [component_styles_default, option_styles_default];
SlOption.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e5(".option__label")
], SlOption.prototype, "defaultSlot", 2);
__decorateClass([
  r6()
], SlOption.prototype, "current", 2);
__decorateClass([
  r6()
], SlOption.prototype, "selected", 2);
__decorateClass([
  r6()
], SlOption.prototype, "hasHover", 2);
__decorateClass([
  n4({ reflect: true })
], SlOption.prototype, "value", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlOption.prototype, "disabled", 2);
__decorateClass([
  watch("disabled")
], SlOption.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("selected")
], SlOption.prototype, "handleSelectedChange", 1);
__decorateClass([
  watch("value")
], SlOption.prototype, "handleValueChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.7B2AJG4K.js
SlOption.define("sl-option");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.GXC456DW.js
var progress_bar_styles_default = i`
  :host {
    --height: 1rem;
    --track-color: var(--sl-color-neutral-200);
    --indicator-color: var(--sl-color-primary-600);
    --label-color: var(--sl-color-neutral-0);

    display: block;
  }

  .progress-bar {
    position: relative;
    background-color: var(--track-color);
    height: var(--height);
    border-radius: var(--sl-border-radius-pill);
    box-shadow: inset var(--sl-shadow-small);
    overflow: hidden;
  }

  .progress-bar__indicator {
    height: 100%;
    font-family: var(--sl-font-sans);
    font-size: 12px;
    font-weight: var(--sl-font-weight-normal);
    background-color: var(--indicator-color);
    color: var(--label-color);
    text-align: center;
    line-height: var(--height);
    white-space: nowrap;
    overflow: hidden;
    transition:
      400ms width,
      400ms background-color;
    user-select: none;
    -webkit-user-select: none;
  }

  /* Indeterminate */
  .progress-bar--indeterminate .progress-bar__indicator {
    position: absolute;
    animation: indeterminate 2.5s infinite cubic-bezier(0.37, 0, 0.63, 1);
  }

  .progress-bar--indeterminate.progress-bar--rtl .progress-bar__indicator {
    animation-name: indeterminate-rtl;
  }

  @media (forced-colors: active) {
    .progress-bar {
      outline: solid 1px SelectedItem;
      background-color: var(--sl-color-neutral-0);
    }

    .progress-bar__indicator {
      outline: solid 1px SelectedItem;
      background-color: SelectedItem;
    }
  }

  @keyframes indeterminate {
    0% {
      left: -50%;
      width: 50%;
    }
    75%,
    100% {
      left: 100%;
      width: 50%;
    }
  }

  @keyframes indeterminate-rtl {
    0% {
      right: -50%;
      width: 50%;
    }
    75%,
    100% {
      right: 100%;
      width: 50%;
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.LXWAWAF2.js
var SlProgressBar = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.value = 0;
    this.indeterminate = false;
    this.label = "";
  }
  render() {
    return x`
      <div
        part="base"
        class=${e7({
      "progress-bar": true,
      "progress-bar--indeterminate": this.indeterminate,
      "progress-bar--rtl": this.localize.dir() === "rtl"
    })}
        role="progressbar"
        title=${o5(this.title)}
        aria-label=${this.label.length > 0 ? this.label : this.localize.term("progress")}
        aria-valuemin="0"
        aria-valuemax="100"
        aria-valuenow=${this.indeterminate ? 0 : this.value}
      >
        <div part="indicator" class="progress-bar__indicator" style=${o7({ width: `${this.value}%` })}>
          ${!this.indeterminate ? x` <slot part="label" class="progress-bar__label"></slot> ` : ""}
        </div>
      </div>
    `;
  }
};
SlProgressBar.styles = [component_styles_default, progress_bar_styles_default];
__decorateClass([
  n4({ type: Number, reflect: true })
], SlProgressBar.prototype, "value", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlProgressBar.prototype, "indeterminate", 2);
__decorateClass([
  n4()
], SlProgressBar.prototype, "label", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ARU2ONKC.js
SlProgressBar.define("sl-progress-bar");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2W6X55FG.js
var mutation_observer_styles_default = i`
  :host {
    display: contents;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.WLPFSH7W.js
var SlMutationObserver = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.attrOldValue = false;
    this.charData = false;
    this.charDataOldValue = false;
    this.childList = false;
    this.disabled = false;
    this.handleMutation = (mutationList) => {
      this.emit("sl-mutation", {
        detail: { mutationList }
      });
    };
  }
  connectedCallback() {
    super.connectedCallback();
    this.mutationObserver = new MutationObserver(this.handleMutation);
    if (!this.disabled) {
      this.startObserver();
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.stopObserver();
  }
  startObserver() {
    const observeAttributes = typeof this.attr === "string" && this.attr.length > 0;
    const attributeFilter = observeAttributes && this.attr !== "*" ? this.attr.split(" ") : void 0;
    try {
      this.mutationObserver.observe(this, {
        subtree: true,
        childList: this.childList,
        attributes: observeAttributes,
        attributeFilter,
        attributeOldValue: this.attrOldValue,
        characterData: this.charData,
        characterDataOldValue: this.charDataOldValue
      });
    } catch (e12) {
    }
  }
  stopObserver() {
    this.mutationObserver.disconnect();
  }
  handleDisabledChange() {
    if (this.disabled) {
      this.stopObserver();
    } else {
      this.startObserver();
    }
  }
  handleChange() {
    this.stopObserver();
    this.startObserver();
  }
  render() {
    return x` <slot></slot> `;
  }
};
SlMutationObserver.styles = [component_styles_default, mutation_observer_styles_default];
__decorateClass([
  n4({ reflect: true })
], SlMutationObserver.prototype, "attr", 2);
__decorateClass([
  n4({ attribute: "attr-old-value", type: Boolean, reflect: true })
], SlMutationObserver.prototype, "attrOldValue", 2);
__decorateClass([
  n4({ attribute: "char-data", type: Boolean, reflect: true })
], SlMutationObserver.prototype, "charData", 2);
__decorateClass([
  n4({ attribute: "char-data-old-value", type: Boolean, reflect: true })
], SlMutationObserver.prototype, "charDataOldValue", 2);
__decorateClass([
  n4({ attribute: "child-list", type: Boolean, reflect: true })
], SlMutationObserver.prototype, "childList", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlMutationObserver.prototype, "disabled", 2);
__decorateClass([
  watch("disabled")
], SlMutationObserver.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("attr", { waitUntilFirstUpdate: true }),
  watch("attr-old-value", { waitUntilFirstUpdate: true }),
  watch("char-data", { waitUntilFirstUpdate: true }),
  watch("char-data-old-value", { waitUntilFirstUpdate: true }),
  watch("childList", { waitUntilFirstUpdate: true })
], SlMutationObserver.prototype, "handleChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.6YGUJ5DK.js
SlMutationObserver.define("sl-mutation-observer");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ORTZCIID.js
var menu_label_styles_default = i`
  :host {
    display: block;
  }

  .menu-label {
    display: inline-block;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-letter-spacing-normal);
    color: var(--sl-color-neutral-500);
    padding: var(--sl-spacing-2x-small) var(--sl-spacing-x-large);
    user-select: none;
    -webkit-user-select: none;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.6PAZSLXU.js
var SlMenuLabel = class extends ShoelaceElement {
  render() {
    return x` <slot part="base" class="menu-label"></slot> `;
  }
};
SlMenuLabel.styles = [component_styles_default, menu_label_styles_default];

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.DK627MCR.js
SlMenuLabel.define("sl-menu-label");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.GGT72J62.js
var input_styles_default = i`
  :host {
    display: block;
  }

  .input {
    flex: 1 1 auto;
    display: inline-flex;
    align-items: stretch;
    justify-content: start;
    position: relative;
    width: 100%;
    font-family: var(--sl-input-font-family);
    font-weight: var(--sl-input-font-weight);
    letter-spacing: var(--sl-input-letter-spacing);
    vertical-align: middle;
    overflow: hidden;
    cursor: text;
    transition:
      var(--sl-transition-fast) color,
      var(--sl-transition-fast) border,
      var(--sl-transition-fast) box-shadow,
      var(--sl-transition-fast) background-color;
  }

  /* Standard inputs */
  .input--standard {
    background-color: var(--sl-input-background-color);
    border: solid var(--sl-input-border-width) var(--sl-input-border-color);
  }

  .input--standard:hover:not(.input--disabled) {
    background-color: var(--sl-input-background-color-hover);
    border-color: var(--sl-input-border-color-hover);
  }

  .input--standard.input--focused:not(.input--disabled) {
    background-color: var(--sl-input-background-color-focus);
    border-color: var(--sl-input-border-color-focus);
    box-shadow: 0 0 0 var(--sl-focus-ring-width) var(--sl-input-focus-ring-color);
  }

  .input--standard.input--focused:not(.input--disabled) .input__control {
    color: var(--sl-input-color-focus);
  }

  .input--standard.input--disabled {
    background-color: var(--sl-input-background-color-disabled);
    border-color: var(--sl-input-border-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .input--standard.input--disabled .input__control {
    color: var(--sl-input-color-disabled);
  }

  .input--standard.input--disabled .input__control::placeholder {
    color: var(--sl-input-placeholder-color-disabled);
  }

  /* Filled inputs */
  .input--filled {
    border: none;
    background-color: var(--sl-input-filled-background-color);
    color: var(--sl-input-color);
  }

  .input--filled:hover:not(.input--disabled) {
    background-color: var(--sl-input-filled-background-color-hover);
  }

  .input--filled.input--focused:not(.input--disabled) {
    background-color: var(--sl-input-filled-background-color-focus);
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .input--filled.input--disabled {
    background-color: var(--sl-input-filled-background-color-disabled);
    opacity: 0.5;
    cursor: not-allowed;
  }

  .input__control {
    flex: 1 1 auto;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    min-width: 0;
    height: 100%;
    color: var(--sl-input-color);
    border: none;
    background: inherit;
    box-shadow: none;
    padding: 0;
    margin: 0;
    cursor: inherit;
    -webkit-appearance: none;
  }

  .input__control::-webkit-search-decoration,
  .input__control::-webkit-search-cancel-button,
  .input__control::-webkit-search-results-button,
  .input__control::-webkit-search-results-decoration {
    -webkit-appearance: none;
  }

  .input__control:-webkit-autofill,
  .input__control:-webkit-autofill:hover,
  .input__control:-webkit-autofill:focus,
  .input__control:-webkit-autofill:active {
    box-shadow: 0 0 0 var(--sl-input-height-large) var(--sl-input-background-color-hover) inset !important;
    -webkit-text-fill-color: var(--sl-color-primary-500);
    caret-color: var(--sl-input-color);
  }

  .input--filled .input__control:-webkit-autofill,
  .input--filled .input__control:-webkit-autofill:hover,
  .input--filled .input__control:-webkit-autofill:focus,
  .input--filled .input__control:-webkit-autofill:active {
    box-shadow: 0 0 0 var(--sl-input-height-large) var(--sl-input-filled-background-color) inset !important;
  }

  .input__control::placeholder {
    color: var(--sl-input-placeholder-color);
    user-select: none;
    -webkit-user-select: none;
  }

  .input:hover:not(.input--disabled) .input__control {
    color: var(--sl-input-color-hover);
  }

  .input__control:focus {
    outline: none;
  }

  .input__prefix,
  .input__suffix {
    display: inline-flex;
    flex: 0 0 auto;
    align-items: center;
    cursor: default;
  }

  .input__prefix ::slotted(sl-icon),
  .input__suffix ::slotted(sl-icon) {
    color: var(--sl-input-icon-color);
  }

  /*
   * Size modifiers
   */

  .input--small {
    border-radius: var(--sl-input-border-radius-small);
    font-size: var(--sl-input-font-size-small);
    height: var(--sl-input-height-small);
  }

  .input--small .input__control {
    height: calc(var(--sl-input-height-small) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-small);
  }

  .input--small .input__clear,
  .input--small .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-small) * 2);
  }

  .input--small .input__prefix ::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-small);
  }

  .input--small .input__suffix ::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-small);
  }

  .input--medium {
    border-radius: var(--sl-input-border-radius-medium);
    font-size: var(--sl-input-font-size-medium);
    height: var(--sl-input-height-medium);
  }

  .input--medium .input__control {
    height: calc(var(--sl-input-height-medium) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-medium);
  }

  .input--medium .input__clear,
  .input--medium .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-medium) * 2);
  }

  .input--medium .input__prefix ::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-medium);
  }

  .input--medium .input__suffix ::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-medium);
  }

  .input--large {
    border-radius: var(--sl-input-border-radius-large);
    font-size: var(--sl-input-font-size-large);
    height: var(--sl-input-height-large);
  }

  .input--large .input__control {
    height: calc(var(--sl-input-height-large) - var(--sl-input-border-width) * 2);
    padding: 0 var(--sl-input-spacing-large);
  }

  .input--large .input__clear,
  .input--large .input__password-toggle {
    width: calc(1em + var(--sl-input-spacing-large) * 2);
  }

  .input--large .input__prefix ::slotted(*) {
    margin-inline-start: var(--sl-input-spacing-large);
  }

  .input--large .input__suffix ::slotted(*) {
    margin-inline-end: var(--sl-input-spacing-large);
  }

  /*
   * Pill modifier
   */

  .input--pill.input--small {
    border-radius: var(--sl-input-height-small);
  }

  .input--pill.input--medium {
    border-radius: var(--sl-input-height-medium);
  }

  .input--pill.input--large {
    border-radius: var(--sl-input-height-large);
  }

  /*
   * Clearable + Password Toggle
   */

  .input__clear,
  .input__password-toggle {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: inherit;
    color: var(--sl-input-icon-color);
    border: none;
    background: none;
    padding: 0;
    transition: var(--sl-transition-fast) color;
    cursor: pointer;
  }

  .input__clear:hover,
  .input__password-toggle:hover {
    color: var(--sl-input-icon-color-hover);
  }

  .input__clear:focus,
  .input__password-toggle:focus {
    outline: none;
  }

  /* Don't show the browser's password toggle in Edge */
  ::-ms-reveal {
    display: none;
  }

  /* Hide the built-in number spinner */
  .input--no-spin-buttons input[type='number']::-webkit-outer-spin-button,
  .input--no-spin-buttons input[type='number']::-webkit-inner-spin-button {
    -webkit-appearance: none;
    display: none;
  }

  .input--no-spin-buttons input[type='number'] {
    -moz-appearance: textfield;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.22JN5JYK.js
var SlInput = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      assumeInteractionOn: ["sl-blur", "sl-input"]
    });
    this.hasSlotController = new HasSlotController(this, "help-text", "label");
    this.localize = new LocalizeController2(this);
    this.hasFocus = false;
    this.title = "";
    this.__numberInput = Object.assign(document.createElement("input"), { type: "number" });
    this.__dateInput = Object.assign(document.createElement("input"), { type: "date" });
    this.type = "text";
    this.name = "";
    this.value = "";
    this.defaultValue = "";
    this.size = "medium";
    this.filled = false;
    this.pill = false;
    this.label = "";
    this.helpText = "";
    this.clearable = false;
    this.disabled = false;
    this.placeholder = "";
    this.readonly = false;
    this.passwordToggle = false;
    this.passwordVisible = false;
    this.noSpinButtons = false;
    this.form = "";
    this.required = false;
    this.spellcheck = true;
  }
  //
  // NOTE: We use an in-memory input for these getters/setters instead of the one in the template because the properties
  // can be set before the component is rendered.
  //
  /**
   * Gets or sets the current value as a `Date` object. Returns `null` if the value can't be converted. This will use the native `<input type="{{type}}">` implementation and may result in an error.
   */
  get valueAsDate() {
    var _a;
    this.__dateInput.type = this.type;
    this.__dateInput.value = this.value;
    return ((_a = this.input) == null ? void 0 : _a.valueAsDate) || this.__dateInput.valueAsDate;
  }
  set valueAsDate(newValue) {
    this.__dateInput.type = this.type;
    this.__dateInput.valueAsDate = newValue;
    this.value = this.__dateInput.value;
  }
  /** Gets or sets the current value as a number. Returns `NaN` if the value can't be converted. */
  get valueAsNumber() {
    var _a;
    this.__numberInput.value = this.value;
    return ((_a = this.input) == null ? void 0 : _a.valueAsNumber) || this.__numberInput.valueAsNumber;
  }
  set valueAsNumber(newValue) {
    this.__numberInput.valueAsNumber = newValue;
    this.value = this.__numberInput.value;
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  firstUpdated() {
    this.formControlController.updateValidity();
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleChange() {
    this.value = this.input.value;
    this.emit("sl-change");
  }
  handleClearClick(event) {
    event.preventDefault();
    if (this.value !== "") {
      this.value = "";
      this.emit("sl-clear");
      this.emit("sl-input");
      this.emit("sl-change");
    }
    this.input.focus();
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleInput() {
    this.value = this.input.value;
    this.formControlController.updateValidity();
    this.emit("sl-input");
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  handleKeyDown(event) {
    const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;
    if (event.key === "Enter" && !hasModifier) {
      setTimeout(() => {
        if (!event.defaultPrevented && !event.isComposing) {
          this.formControlController.submit();
        }
      });
    }
  }
  handlePasswordToggle() {
    this.passwordVisible = !this.passwordVisible;
  }
  handleDisabledChange() {
    this.formControlController.setValidity(this.disabled);
  }
  handleStepChange() {
    this.input.step = String(this.step);
    this.formControlController.updateValidity();
  }
  async handleValueChange() {
    await this.updateComplete;
    this.formControlController.updateValidity();
  }
  /** Sets focus on the input. */
  focus(options) {
    this.input.focus(options);
  }
  /** Removes focus from the input. */
  blur() {
    this.input.blur();
  }
  /** Selects all the text in the input. */
  select() {
    this.input.select();
  }
  /** Sets the start and end positions of the text selection (0-based). */
  setSelectionRange(selectionStart, selectionEnd, selectionDirection = "none") {
    this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);
  }
  /** Replaces a range of text with a new string. */
  setRangeText(replacement, start, end, selectMode = "preserve") {
    const selectionStart = start != null ? start : this.input.selectionStart;
    const selectionEnd = end != null ? end : this.input.selectionEnd;
    this.input.setRangeText(replacement, selectionStart, selectionEnd, selectMode);
    if (this.value !== this.input.value) {
      this.value = this.input.value;
    }
  }
  /** Displays the browser picker for an input element (only works if the browser supports it for the input type). */
  showPicker() {
    if ("showPicker" in HTMLInputElement.prototype) {
      this.input.showPicker();
    }
  }
  /** Increments the value of a numeric input type by the value of the step attribute. */
  stepUp() {
    this.input.stepUp();
    if (this.value !== this.input.value) {
      this.value = this.input.value;
    }
  }
  /** Decrements the value of a numeric input type by the value of the step attribute. */
  stepDown() {
    this.input.stepDown();
    if (this.value !== this.input.value) {
      this.value = this.input.value;
    }
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message2) {
    this.input.setCustomValidity(message2);
    this.formControlController.updateValidity();
  }
  render() {
    const hasLabelSlot = this.hasSlotController.test("label");
    const hasHelpTextSlot = this.hasSlotController.test("help-text");
    const hasLabel = this.label ? true : !!hasLabelSlot;
    const hasHelpText = this.helpText ? true : !!hasHelpTextSlot;
    const hasClearIcon = this.clearable && !this.disabled && !this.readonly;
    const isClearIconVisible = hasClearIcon && (typeof this.value === "number" || this.value.length > 0);
    return x`
      <div
        part="form-control"
        class=${e7({
      "form-control": true,
      "form-control--small": this.size === "small",
      "form-control--medium": this.size === "medium",
      "form-control--large": this.size === "large",
      "form-control--has-label": hasLabel,
      "form-control--has-help-text": hasHelpText
    })}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${hasLabel ? "false" : "true"}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${e7({
      input: true,
      // Sizes
      "input--small": this.size === "small",
      "input--medium": this.size === "medium",
      "input--large": this.size === "large",
      // States
      "input--pill": this.pill,
      "input--standard": !this.filled,
      "input--filled": this.filled,
      "input--disabled": this.disabled,
      "input--focused": this.hasFocus,
      "input--empty": !this.value,
      "input--no-spin-buttons": this.noSpinButtons
    })}
          >
            <span part="prefix" class="input__prefix">
              <slot name="prefix"></slot>
            </span>

            <input
              part="input"
              id="input"
              class="input__control"
              type=${this.type === "password" && this.passwordVisible ? "text" : this.type}
              title=${this.title}
              name=${o5(this.name)}
              ?disabled=${this.disabled}
              ?readonly=${this.readonly}
              ?required=${this.required}
              placeholder=${o5(this.placeholder)}
              minlength=${o5(this.minlength)}
              maxlength=${o5(this.maxlength)}
              min=${o5(this.min)}
              max=${o5(this.max)}
              step=${o5(this.step)}
              .value=${l3(this.value)}
              autocapitalize=${o5(this.autocapitalize)}
              autocomplete=${o5(this.autocomplete)}
              autocorrect=${o5(this.autocorrect)}
              ?autofocus=${this.autofocus}
              spellcheck=${this.spellcheck}
              pattern=${o5(this.pattern)}
              enterkeyhint=${o5(this.enterkeyhint)}
              inputmode=${o5(this.inputmode)}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @keydown=${this.handleKeyDown}
              @focus=${this.handleFocus}
              @blur=${this.handleBlur}
            />

            ${isClearIconVisible ? x`
                  <button
                    part="clear-button"
                    class="input__clear"
                    type="button"
                    aria-label=${this.localize.term("clearEntry")}
                    @click=${this.handleClearClick}
                    tabindex="-1"
                  >
                    <slot name="clear-icon">
                      <sl-icon name="x-circle-fill" library="system"></sl-icon>
                    </slot>
                  </button>
                ` : ""}
            ${this.passwordToggle && !this.disabled ? x`
                  <button
                    part="password-toggle-button"
                    class="input__password-toggle"
                    type="button"
                    aria-label=${this.localize.term(this.passwordVisible ? "hidePassword" : "showPassword")}
                    @click=${this.handlePasswordToggle}
                    tabindex="-1"
                  >
                    ${this.passwordVisible ? x`
                          <slot name="show-password-icon">
                            <sl-icon name="eye-slash" library="system"></sl-icon>
                          </slot>
                        ` : x`
                          <slot name="hide-password-icon">
                            <sl-icon name="eye" library="system"></sl-icon>
                          </slot>
                        `}
                  </button>
                ` : ""}

            <span part="suffix" class="input__suffix">
              <slot name="suffix"></slot>
            </span>
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${hasHelpText ? "false" : "true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `;
  }
};
SlInput.styles = [component_styles_default, form_control_styles_default, input_styles_default];
SlInput.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e5(".input__control")
], SlInput.prototype, "input", 2);
__decorateClass([
  r6()
], SlInput.prototype, "hasFocus", 2);
__decorateClass([
  n4()
], SlInput.prototype, "title", 2);
__decorateClass([
  n4({ reflect: true })
], SlInput.prototype, "type", 2);
__decorateClass([
  n4()
], SlInput.prototype, "name", 2);
__decorateClass([
  n4()
], SlInput.prototype, "value", 2);
__decorateClass([
  defaultValue()
], SlInput.prototype, "defaultValue", 2);
__decorateClass([
  n4({ reflect: true })
], SlInput.prototype, "size", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlInput.prototype, "filled", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlInput.prototype, "pill", 2);
__decorateClass([
  n4()
], SlInput.prototype, "label", 2);
__decorateClass([
  n4({ attribute: "help-text" })
], SlInput.prototype, "helpText", 2);
__decorateClass([
  n4({ type: Boolean })
], SlInput.prototype, "clearable", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlInput.prototype, "disabled", 2);
__decorateClass([
  n4()
], SlInput.prototype, "placeholder", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlInput.prototype, "readonly", 2);
__decorateClass([
  n4({ attribute: "password-toggle", type: Boolean })
], SlInput.prototype, "passwordToggle", 2);
__decorateClass([
  n4({ attribute: "password-visible", type: Boolean })
], SlInput.prototype, "passwordVisible", 2);
__decorateClass([
  n4({ attribute: "no-spin-buttons", type: Boolean })
], SlInput.prototype, "noSpinButtons", 2);
__decorateClass([
  n4({ reflect: true })
], SlInput.prototype, "form", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlInput.prototype, "required", 2);
__decorateClass([
  n4()
], SlInput.prototype, "pattern", 2);
__decorateClass([
  n4({ type: Number })
], SlInput.prototype, "minlength", 2);
__decorateClass([
  n4({ type: Number })
], SlInput.prototype, "maxlength", 2);
__decorateClass([
  n4()
], SlInput.prototype, "min", 2);
__decorateClass([
  n4()
], SlInput.prototype, "max", 2);
__decorateClass([
  n4()
], SlInput.prototype, "step", 2);
__decorateClass([
  n4()
], SlInput.prototype, "autocapitalize", 2);
__decorateClass([
  n4()
], SlInput.prototype, "autocorrect", 2);
__decorateClass([
  n4()
], SlInput.prototype, "autocomplete", 2);
__decorateClass([
  n4({ type: Boolean })
], SlInput.prototype, "autofocus", 2);
__decorateClass([
  n4()
], SlInput.prototype, "enterkeyhint", 2);
__decorateClass([
  n4({
    type: Boolean,
    converter: {
      // Allow "true|false" attribute values but keep the property boolean
      fromAttribute: (value) => !value || value === "false" ? false : true,
      toAttribute: (value) => value ? "true" : "false"
    }
  })
], SlInput.prototype, "spellcheck", 2);
__decorateClass([
  n4()
], SlInput.prototype, "inputmode", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlInput.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("step", { waitUntilFirstUpdate: true })
], SlInput.prototype, "handleStepChange", 1);
__decorateClass([
  watch("value", { waitUntilFirstUpdate: true })
], SlInput.prototype, "handleValueChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.SDBB5L2R.js
SlInput.define("sl-input");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.VVA35HTY.js
var menu_styles_default = i`
  :host {
    display: block;
    position: relative;
    background: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-radius: var(--sl-border-radius-medium);
    padding: var(--sl-spacing-x-small) 0;
    overflow: auto;
    overscroll-behavior: none;
  }

  ::slotted(sl-divider) {
    --spacing: var(--sl-spacing-x-small);
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.RDL5MF4M.js
var SlMenu = class extends ShoelaceElement {
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "menu");
  }
  handleClick(event) {
    const menuItemTypes = ["menuitem", "menuitemcheckbox"];
    const composedPath = event.composedPath();
    const target = composedPath.find((el) => {
      var _a;
      return menuItemTypes.includes(((_a = el == null ? void 0 : el.getAttribute) == null ? void 0 : _a.call(el, "role")) || "");
    });
    if (!target) return;
    const closestMenu = composedPath.find((el) => {
      var _a;
      return ((_a = el == null ? void 0 : el.getAttribute) == null ? void 0 : _a.call(el, "role")) === "menu";
    });
    const clickHasSubmenu = closestMenu !== this;
    if (clickHasSubmenu) return;
    const item = target;
    if (item.type === "checkbox") {
      item.checked = !item.checked;
    }
    this.emit("sl-select", { detail: { item } });
  }
  handleKeyDown(event) {
    if (event.key === "Enter" || event.key === " ") {
      const item = this.getCurrentItem();
      event.preventDefault();
      event.stopPropagation();
      item == null ? void 0 : item.click();
    } else if (["ArrowDown", "ArrowUp", "Home", "End"].includes(event.key)) {
      const items = this.getAllItems();
      const activeItem = this.getCurrentItem();
      let index = activeItem ? items.indexOf(activeItem) : 0;
      if (items.length > 0) {
        event.preventDefault();
        event.stopPropagation();
        if (event.key === "ArrowDown") {
          index++;
        } else if (event.key === "ArrowUp") {
          index--;
        } else if (event.key === "Home") {
          index = 0;
        } else if (event.key === "End") {
          index = items.length - 1;
        }
        if (index < 0) {
          index = items.length - 1;
        }
        if (index > items.length - 1) {
          index = 0;
        }
        this.setCurrentItem(items[index]);
        items[index].focus();
      }
    }
  }
  handleMouseDown(event) {
    const target = event.target;
    if (this.isMenuItem(target)) {
      this.setCurrentItem(target);
    }
  }
  handleSlotChange() {
    const items = this.getAllItems();
    if (items.length > 0) {
      this.setCurrentItem(items[0]);
    }
  }
  isMenuItem(item) {
    var _a;
    return item.tagName.toLowerCase() === "sl-menu-item" || ["menuitem", "menuitemcheckbox", "menuitemradio"].includes((_a = item.getAttribute("role")) != null ? _a : "");
  }
  /** @internal Gets all slotted menu items, ignoring dividers, headers, and other elements. */
  getAllItems() {
    return [...this.defaultSlot.assignedElements({ flatten: true })].filter((el) => {
      if (el.inert || !this.isMenuItem(el)) {
        return false;
      }
      return true;
    });
  }
  /**
   * @internal Gets the current menu item, which is the menu item that has `tabindex="0"` within the roving tab index.
   * The menu item may or may not have focus, but for keyboard interaction purposes it's considered the "active" item.
   */
  getCurrentItem() {
    return this.getAllItems().find((i9) => i9.getAttribute("tabindex") === "0");
  }
  /**
   * @internal Sets the current menu item to the specified element. This sets `tabindex="0"` on the target element and
   * `tabindex="-1"` to all other items. This method must be called prior to setting focus on a menu item.
   */
  setCurrentItem(item) {
    const items = this.getAllItems();
    items.forEach((i9) => {
      i9.setAttribute("tabindex", i9 === item ? "0" : "-1");
    });
  }
  render() {
    return x`
      <slot
        @slotchange=${this.handleSlotChange}
        @click=${this.handleClick}
        @keydown=${this.handleKeyDown}
        @mousedown=${this.handleMouseDown}
      ></slot>
    `;
  }
};
SlMenu.styles = [component_styles_default, menu_styles_default];
__decorateClass([
  e5("slot")
], SlMenu.prototype, "defaultSlot", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2IP2T4OH.js
SlMenu.define("sl-menu");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.KZJNDGFO.js
var menu_item_styles_default = i`
  :host {
    --submenu-offset: -2px;

    display: block;
  }

  :host([inert]) {
    display: none;
  }

  .menu-item {
    position: relative;
    display: flex;
    align-items: stretch;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    line-height: var(--sl-line-height-normal);
    letter-spacing: var(--sl-letter-spacing-normal);
    color: var(--sl-color-neutral-700);
    padding: var(--sl-spacing-2x-small) var(--sl-spacing-2x-small);
    transition: var(--sl-transition-fast) fill;
    user-select: none;
    -webkit-user-select: none;
    white-space: nowrap;
    cursor: pointer;
  }

  .menu-item.menu-item--disabled {
    outline: none;
    opacity: 0.5;
    cursor: not-allowed;
  }

  .menu-item.menu-item--loading {
    outline: none;
    cursor: wait;
  }

  .menu-item.menu-item--loading *:not(sl-spinner) {
    opacity: 0.5;
  }

  .menu-item--loading sl-spinner {
    --indicator-color: currentColor;
    --track-width: 1px;
    position: absolute;
    font-size: 0.75em;
    top: calc(50% - 0.5em);
    left: 0.65rem;
    opacity: 1;
  }

  .menu-item .menu-item__label {
    flex: 1 1 auto;
    display: inline-block;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  .menu-item .menu-item__prefix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .menu-item .menu-item__prefix::slotted(*) {
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .menu-item .menu-item__suffix {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .menu-item .menu-item__suffix::slotted(*) {
    margin-inline-start: var(--sl-spacing-x-small);
  }

  /* Safe triangle */
  .menu-item--submenu-expanded::after {
    content: '';
    position: fixed;
    z-index: calc(var(--sl-z-index-dropdown) - 1);
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    clip-path: polygon(
      var(--safe-triangle-cursor-x, 0) var(--safe-triangle-cursor-y, 0),
      var(--safe-triangle-submenu-start-x, 0) var(--safe-triangle-submenu-start-y, 0),
      var(--safe-triangle-submenu-end-x, 0) var(--safe-triangle-submenu-end-y, 0)
    );
  }

  :host(:focus-visible) {
    outline: none;
  }

  :host(:hover:not([aria-disabled='true'], :focus-visible)) .menu-item,
  .menu-item--submenu-expanded {
    background-color: var(--sl-color-neutral-100);
    color: var(--sl-color-neutral-1000);
  }

  :host(:focus-visible) .menu-item {
    outline: none;
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
    opacity: 1;
  }

  .menu-item .menu-item__check,
  .menu-item .menu-item__chevron {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.5em;
    visibility: hidden;
  }

  .menu-item--checked .menu-item__check,
  .menu-item--has-submenu .menu-item__chevron {
    visibility: visible;
  }

  /* Add elevation and z-index to submenus */
  sl-popup::part(popup) {
    box-shadow: var(--sl-shadow-large);
    z-index: var(--sl-z-index-dropdown);
    margin-left: var(--submenu-offset);
  }

  .menu-item--rtl sl-popup::part(popup) {
    margin-left: calc(-1 * var(--submenu-offset));
  }

  @media (forced-colors: active) {
    :host(:hover:not([aria-disabled='true'])) .menu-item,
    :host(:focus-visible) .menu-item {
      outline: dashed 1px SelectedItem;
      outline-offset: -1px;
    }
  }

  ::slotted(sl-menu) {
    max-width: var(--auto-size-available-width) !important;
    max-height: var(--auto-size-available-height) !important;
  }
`;

// node_modules/lit-html/async-directive.js
var s3 = (i9, t6) => {
  const e12 = i9._$AN;
  if (void 0 === e12) return false;
  for (const i10 of e12) i10._$AO?.(t6, false), s3(i10, t6);
  return true;
};
var o9 = (i9) => {
  let t6, e12;
  do {
    if (void 0 === (t6 = i9._$AM)) break;
    e12 = t6._$AN, e12.delete(i9), i9 = t6;
  } while (0 === e12?.size);
};
var r9 = (i9) => {
  for (let t6; t6 = i9._$AM; i9 = t6) {
    let e12 = t6._$AN;
    if (void 0 === e12) t6._$AN = e12 = /* @__PURE__ */ new Set();
    else if (e12.has(i9)) break;
    e12.add(i9), c5(t6);
  }
};
function h3(i9) {
  void 0 !== this._$AN ? (o9(this), this._$AM = i9, r9(this)) : this._$AM = i9;
}
function n8(i9, t6 = false, e12 = 0) {
  const r10 = this._$AH, h5 = this._$AN;
  if (void 0 !== h5 && 0 !== h5.size) if (t6) if (Array.isArray(r10)) for (let i10 = e12; i10 < r10.length; i10++) s3(r10[i10], false), o9(r10[i10]);
  else null != r10 && (s3(r10, false), o9(r10));
  else s3(this, i9);
}
var c5 = (i9) => {
  i9.type == t4.CHILD && (i9._$AP ??= n8, i9._$AQ ??= h3);
};
var f4 = class extends i5 {
  constructor() {
    super(...arguments), this._$AN = void 0;
  }
  _$AT(i9, t6, e12) {
    super._$AT(i9, t6, e12), r9(this), this.isConnected = i9._$AU;
  }
  _$AO(i9, t6 = true) {
    i9 !== this.isConnected && (this.isConnected = i9, i9 ? this.reconnected?.() : this.disconnected?.()), t6 && (s3(this, i9), o9(this));
  }
  setValue(t6) {
    if (f3(this._$Ct)) this._$Ct._$AI(t6, this);
    else {
      const i9 = [...this._$Ct._$AH];
      i9[this._$Ci] = t6, this._$Ct._$AI(i9, this, 0);
    }
  }
  disconnected() {
  }
  reconnected() {
  }
};

// node_modules/lit-html/directives/ref.js
var e11 = () => new h4();
var h4 = class {
};
var o10 = /* @__PURE__ */ new WeakMap();
var n9 = e6(class extends f4 {
  render(i9) {
    return E;
  }
  update(i9, [s4]) {
    const e12 = s4 !== this.Y;
    return e12 && void 0 !== this.Y && this.rt(void 0), (e12 || this.lt !== this.ct) && (this.Y = s4, this.ht = i9.options?.host, this.rt(this.ct = i9.element)), E;
  }
  rt(t6) {
    if (this.isConnected || (t6 = void 0), "function" == typeof this.Y) {
      const i9 = this.ht ?? globalThis;
      let s4 = o10.get(i9);
      void 0 === s4 && (s4 = /* @__PURE__ */ new WeakMap(), o10.set(i9, s4)), void 0 !== s4.get(this.Y) && this.Y.call(this.ht, void 0), s4.set(this.Y, t6), void 0 !== t6 && this.Y.call(this.ht, t6);
    } else this.Y.value = t6;
  }
  get lt() {
    return "function" == typeof this.Y ? o10.get(this.ht ?? globalThis)?.get(this.Y) : this.Y?.value;
  }
  disconnected() {
    this.lt === this.ct && this.rt(void 0);
  }
  reconnected() {
    this.rt(this.ct);
  }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ZLIGP6HZ.js
var SubmenuController = class {
  constructor(host, hasSlotController) {
    this.popupRef = e11();
    this.enableSubmenuTimer = -1;
    this.isConnected = false;
    this.isPopupConnected = false;
    this.skidding = 0;
    this.submenuOpenDelay = 100;
    this.handleMouseMove = (event) => {
      this.host.style.setProperty("--safe-triangle-cursor-x", `${event.clientX}px`);
      this.host.style.setProperty("--safe-triangle-cursor-y", `${event.clientY}px`);
    };
    this.handleMouseOver = () => {
      if (this.hasSlotController.test("submenu")) {
        this.enableSubmenu();
      }
    };
    this.handleKeyDown = (event) => {
      switch (event.key) {
        case "Escape":
        case "Tab":
          this.disableSubmenu();
          break;
        case "ArrowLeft":
          if (event.target !== this.host) {
            event.preventDefault();
            event.stopPropagation();
            this.host.focus();
            this.disableSubmenu();
          }
          break;
        case "ArrowRight":
        case "Enter":
        case " ":
          this.handleSubmenuEntry(event);
          break;
        default:
          break;
      }
    };
    this.handleClick = (event) => {
      var _a;
      if (event.target === this.host) {
        event.preventDefault();
        event.stopPropagation();
      } else if (event.target instanceof Element && (event.target.tagName === "sl-menu-item" || ((_a = event.target.role) == null ? void 0 : _a.startsWith("menuitem")))) {
        this.disableSubmenu();
      }
    };
    this.handleFocusOut = (event) => {
      if (event.relatedTarget && event.relatedTarget instanceof Element && this.host.contains(event.relatedTarget)) {
        return;
      }
      this.disableSubmenu();
    };
    this.handlePopupMouseover = (event) => {
      event.stopPropagation();
    };
    this.handlePopupReposition = () => {
      const submenuSlot = this.host.renderRoot.querySelector("slot[name='submenu']");
      const menu = submenuSlot == null ? void 0 : submenuSlot.assignedElements({ flatten: true }).filter((el) => el.localName === "sl-menu")[0];
      const isRtl = getComputedStyle(this.host).direction === "rtl";
      if (!menu) {
        return;
      }
      const { left, top, width, height } = menu.getBoundingClientRect();
      this.host.style.setProperty("--safe-triangle-submenu-start-x", `${isRtl ? left + width : left}px`);
      this.host.style.setProperty("--safe-triangle-submenu-start-y", `${top}px`);
      this.host.style.setProperty("--safe-triangle-submenu-end-x", `${isRtl ? left + width : left}px`);
      this.host.style.setProperty("--safe-triangle-submenu-end-y", `${top + height}px`);
    };
    (this.host = host).addController(this);
    this.hasSlotController = hasSlotController;
  }
  hostConnected() {
    if (this.hasSlotController.test("submenu") && !this.host.disabled) {
      this.addListeners();
    }
  }
  hostDisconnected() {
    this.removeListeners();
  }
  hostUpdated() {
    if (this.hasSlotController.test("submenu") && !this.host.disabled) {
      this.addListeners();
      this.updateSkidding();
    } else {
      this.removeListeners();
    }
  }
  addListeners() {
    if (!this.isConnected) {
      this.host.addEventListener("mousemove", this.handleMouseMove);
      this.host.addEventListener("mouseover", this.handleMouseOver);
      this.host.addEventListener("keydown", this.handleKeyDown);
      this.host.addEventListener("click", this.handleClick);
      this.host.addEventListener("focusout", this.handleFocusOut);
      this.isConnected = true;
    }
    if (!this.isPopupConnected) {
      if (this.popupRef.value) {
        this.popupRef.value.addEventListener("mouseover", this.handlePopupMouseover);
        this.popupRef.value.addEventListener("sl-reposition", this.handlePopupReposition);
        this.isPopupConnected = true;
      }
    }
  }
  removeListeners() {
    if (this.isConnected) {
      this.host.removeEventListener("mousemove", this.handleMouseMove);
      this.host.removeEventListener("mouseover", this.handleMouseOver);
      this.host.removeEventListener("keydown", this.handleKeyDown);
      this.host.removeEventListener("click", this.handleClick);
      this.host.removeEventListener("focusout", this.handleFocusOut);
      this.isConnected = false;
    }
    if (this.isPopupConnected) {
      if (this.popupRef.value) {
        this.popupRef.value.removeEventListener("mouseover", this.handlePopupMouseover);
        this.popupRef.value.removeEventListener("sl-reposition", this.handlePopupReposition);
        this.isPopupConnected = false;
      }
    }
  }
  handleSubmenuEntry(event) {
    const submenuSlot = this.host.renderRoot.querySelector("slot[name='submenu']");
    if (!submenuSlot) {
      console.error("Cannot activate a submenu if no corresponding menuitem can be found.", this);
      return;
    }
    let menuItems = null;
    for (const elt of submenuSlot.assignedElements()) {
      menuItems = elt.querySelectorAll("sl-menu-item, [role^='menuitem']");
      if (menuItems.length !== 0) {
        break;
      }
    }
    if (!menuItems || menuItems.length === 0) {
      return;
    }
    menuItems[0].setAttribute("tabindex", "0");
    for (let i9 = 1; i9 !== menuItems.length; ++i9) {
      menuItems[i9].setAttribute("tabindex", "-1");
    }
    if (this.popupRef.value) {
      event.preventDefault();
      event.stopPropagation();
      if (this.popupRef.value.active) {
        if (menuItems[0] instanceof HTMLElement) {
          menuItems[0].focus();
        }
      } else {
        this.enableSubmenu(false);
        this.host.updateComplete.then(() => {
          if (menuItems[0] instanceof HTMLElement) {
            menuItems[0].focus();
          }
        });
        this.host.requestUpdate();
      }
    }
  }
  setSubmenuState(state) {
    if (this.popupRef.value) {
      if (this.popupRef.value.active !== state) {
        this.popupRef.value.active = state;
        this.host.requestUpdate();
      }
    }
  }
  // Shows the submenu. Supports disabling the opening delay, e.g. for keyboard events that want to set the focus to the
  // newly opened menu.
  enableSubmenu(delay = true) {
    if (delay) {
      window.clearTimeout(this.enableSubmenuTimer);
      this.enableSubmenuTimer = window.setTimeout(() => {
        this.setSubmenuState(true);
      }, this.submenuOpenDelay);
    } else {
      this.setSubmenuState(true);
    }
  }
  disableSubmenu() {
    window.clearTimeout(this.enableSubmenuTimer);
    this.setSubmenuState(false);
  }
  // Calculate the space the top of a menu takes-up, for aligning the popup menu-item with the activating element.
  updateSkidding() {
    var _a;
    if (!((_a = this.host.parentElement) == null ? void 0 : _a.computedStyleMap)) {
      return;
    }
    const styleMap = this.host.parentElement.computedStyleMap();
    const attrs = ["padding-top", "border-top-width", "margin-top"];
    const skidding = attrs.reduce((accumulator, attr) => {
      var _a2;
      const styleValue = (_a2 = styleMap.get(attr)) != null ? _a2 : new CSSUnitValue(0, "px");
      const unitValue = styleValue instanceof CSSUnitValue ? styleValue : new CSSUnitValue(0, "px");
      const pxValue = unitValue.to("px");
      return accumulator - pxValue.value;
    }, 0);
    this.skidding = skidding;
  }
  isExpanded() {
    return this.popupRef.value ? this.popupRef.value.active : false;
  }
  renderSubmenu() {
    const isRtl = getComputedStyle(this.host).direction === "rtl";
    if (!this.isConnected) {
      return x` <slot name="submenu" hidden></slot> `;
    }
    return x`
      <sl-popup
        ${n9(this.popupRef)}
        placement=${isRtl ? "left-start" : "right-start"}
        anchor="anchor"
        flip
        flip-fallback-strategy="best-fit"
        skidding="${this.skidding}"
        strategy="fixed"
        auto-size="vertical"
        auto-size-padding="10"
      >
        <slot name="submenu"></slot>
      </sl-popup>
    `;
  }
};

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.KHNTC3FI.js
var SlMenuItem = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.type = "normal";
    this.checked = false;
    this.value = "";
    this.loading = false;
    this.disabled = false;
    this.hasSlotController = new HasSlotController(this, "submenu");
    this.submenuController = new SubmenuController(this, this.hasSlotController);
    this.handleHostClick = (event) => {
      if (this.disabled) {
        event.preventDefault();
        event.stopImmediatePropagation();
      }
    };
    this.handleMouseOver = (event) => {
      this.focus();
      event.stopPropagation();
    };
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("click", this.handleHostClick);
    this.addEventListener("mouseover", this.handleMouseOver);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("click", this.handleHostClick);
    this.removeEventListener("mouseover", this.handleMouseOver);
  }
  handleDefaultSlotChange() {
    const textLabel = this.getTextLabel();
    if (typeof this.cachedTextLabel === "undefined") {
      this.cachedTextLabel = textLabel;
      return;
    }
    if (textLabel !== this.cachedTextLabel) {
      this.cachedTextLabel = textLabel;
      this.emit("slotchange", { bubbles: true, composed: false, cancelable: false });
    }
  }
  handleCheckedChange() {
    if (this.checked && this.type !== "checkbox") {
      this.checked = false;
      console.error('The checked attribute can only be used on menu items with type="checkbox"', this);
      return;
    }
    if (this.type === "checkbox") {
      this.setAttribute("aria-checked", this.checked ? "true" : "false");
    } else {
      this.removeAttribute("aria-checked");
    }
  }
  handleDisabledChange() {
    this.setAttribute("aria-disabled", this.disabled ? "true" : "false");
  }
  handleTypeChange() {
    if (this.type === "checkbox") {
      this.setAttribute("role", "menuitemcheckbox");
      this.setAttribute("aria-checked", this.checked ? "true" : "false");
    } else {
      this.setAttribute("role", "menuitem");
      this.removeAttribute("aria-checked");
    }
  }
  /** Returns a text label based on the contents of the menu item's default slot. */
  getTextLabel() {
    return getTextContent(this.defaultSlot);
  }
  isSubmenu() {
    return this.hasSlotController.test("submenu");
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    const isSubmenuExpanded = this.submenuController.isExpanded();
    return x`
      <div
        id="anchor"
        part="base"
        class=${e7({
      "menu-item": true,
      "menu-item--rtl": isRtl,
      "menu-item--checked": this.checked,
      "menu-item--disabled": this.disabled,
      "menu-item--loading": this.loading,
      "menu-item--has-submenu": this.isSubmenu(),
      "menu-item--submenu-expanded": isSubmenuExpanded
    })}
        ?aria-haspopup="${this.isSubmenu()}"
        ?aria-expanded="${isSubmenuExpanded ? true : false}"
      >
        <span part="checked-icon" class="menu-item__check">
          <sl-icon name="check" library="system" aria-hidden="true"></sl-icon>
        </span>

        <slot name="prefix" part="prefix" class="menu-item__prefix"></slot>

        <slot part="label" class="menu-item__label" @slotchange=${this.handleDefaultSlotChange}></slot>

        <slot name="suffix" part="suffix" class="menu-item__suffix"></slot>

        <span part="submenu-icon" class="menu-item__chevron">
          <sl-icon name=${isRtl ? "chevron-left" : "chevron-right"} library="system" aria-hidden="true"></sl-icon>
        </span>

        ${this.submenuController.renderSubmenu()}
        ${this.loading ? x` <sl-spinner part="spinner" exportparts="base:spinner__base"></sl-spinner> ` : ""}
      </div>
    `;
  }
};
SlMenuItem.styles = [component_styles_default, menu_item_styles_default];
SlMenuItem.dependencies = {
  "sl-icon": SlIcon,
  "sl-popup": SlPopup,
  "sl-spinner": SlSpinner
};
__decorateClass([
  e5("slot:not([name])")
], SlMenuItem.prototype, "defaultSlot", 2);
__decorateClass([
  e5(".menu-item")
], SlMenuItem.prototype, "menuItem", 2);
__decorateClass([
  n4()
], SlMenuItem.prototype, "type", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlMenuItem.prototype, "checked", 2);
__decorateClass([
  n4()
], SlMenuItem.prototype, "value", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlMenuItem.prototype, "loading", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlMenuItem.prototype, "disabled", 2);
__decorateClass([
  watch("checked")
], SlMenuItem.prototype, "handleCheckedChange", 1);
__decorateClass([
  watch("disabled")
], SlMenuItem.prototype, "handleDisabledChange", 1);
__decorateClass([
  watch("type")
], SlMenuItem.prototype, "handleTypeChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.PCIMCNOI.js
SlMenuItem.define("sl-menu-item");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.RCGFCKTU.js
var image_comparer_styles_default = i`
  :host {
    --divider-width: 2px;
    --handle-size: 2.5rem;

    display: inline-block;
    position: relative;
  }

  .image-comparer {
    max-width: 100%;
    max-height: 100%;
    overflow: hidden;
  }

  .image-comparer__before,
  .image-comparer__after {
    display: block;
    pointer-events: none;
  }

  .image-comparer__before::slotted(img),
  .image-comparer__after::slotted(img),
  .image-comparer__before::slotted(svg),
  .image-comparer__after::slotted(svg) {
    display: block;
    max-width: 100% !important;
    height: auto;
  }

  .image-comparer__after {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }

  .image-comparer__divider {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    width: var(--divider-width);
    height: 100%;
    background-color: var(--sl-color-neutral-0);
    translate: calc(var(--divider-width) / -2);
    cursor: ew-resize;
  }

  .image-comparer__handle {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: calc(50% - (var(--handle-size) / 2));
    width: var(--handle-size);
    height: var(--handle-size);
    background-color: var(--sl-color-neutral-0);
    border-radius: var(--sl-border-radius-circle);
    font-size: calc(var(--handle-size) * 0.5);
    color: var(--sl-color-neutral-700);
    cursor: inherit;
    z-index: 10;
  }

  .image-comparer__handle:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.OVKBSKAJ.js
var SlImageComparer = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.position = 50;
  }
  handleDrag(event) {
    const { width } = this.base.getBoundingClientRect();
    const isRtl = this.localize.dir() === "rtl";
    event.preventDefault();
    drag(this.base, {
      onMove: (x2) => {
        this.position = parseFloat(clamp2(x2 / width * 100, 0, 100).toFixed(2));
        if (isRtl) this.position = 100 - this.position;
      },
      initialEvent: event
    });
  }
  handleKeyDown(event) {
    const isLtr = this.localize.dir() === "ltr";
    const isRtl = this.localize.dir() === "rtl";
    if (["ArrowLeft", "ArrowRight", "Home", "End"].includes(event.key)) {
      const incr = event.shiftKey ? 10 : 1;
      let newPosition = this.position;
      event.preventDefault();
      if (isLtr && event.key === "ArrowLeft" || isRtl && event.key === "ArrowRight") {
        newPosition -= incr;
      }
      if (isLtr && event.key === "ArrowRight" || isRtl && event.key === "ArrowLeft") {
        newPosition += incr;
      }
      if (event.key === "Home") {
        newPosition = 0;
      }
      if (event.key === "End") {
        newPosition = 100;
      }
      newPosition = clamp2(newPosition, 0, 100);
      this.position = newPosition;
    }
  }
  handlePositionChange() {
    this.emit("sl-change");
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    return x`
      <div
        part="base"
        id="image-comparer"
        class=${e7({
      "image-comparer": true,
      "image-comparer--rtl": isRtl
    })}
        @keydown=${this.handleKeyDown}
      >
        <div class="image-comparer__image">
          <div part="before" class="image-comparer__before">
            <slot name="before"></slot>
          </div>

          <div
            part="after"
            class="image-comparer__after"
            style=${o7({
      clipPath: isRtl ? `inset(0 0 0 ${100 - this.position}%)` : `inset(0 ${100 - this.position}% 0 0)`
    })}
          >
            <slot name="after"></slot>
          </div>
        </div>

        <div
          part="divider"
          class="image-comparer__divider"
          style=${o7({
      left: isRtl ? `${100 - this.position}%` : `${this.position}%`
    })}
          @mousedown=${this.handleDrag}
          @touchstart=${this.handleDrag}
        >
          <div
            part="handle"
            class="image-comparer__handle"
            role="scrollbar"
            aria-valuenow=${this.position}
            aria-valuemin="0"
            aria-valuemax="100"
            aria-controls="image-comparer"
            tabindex="0"
          >
            <slot name="handle">
              <sl-icon library="system" name="grip-vertical"></sl-icon>
            </slot>
          </div>
        </div>
      </div>
    `;
  }
};
SlImageComparer.styles = [component_styles_default, image_comparer_styles_default];
SlImageComparer.scopedElement = { "sl-icon": SlIcon };
__decorateClass([
  e5(".image-comparer")
], SlImageComparer.prototype, "base", 2);
__decorateClass([
  e5(".image-comparer__handle")
], SlImageComparer.prototype, "handle", 2);
__decorateClass([
  n4({ type: Number, reflect: true })
], SlImageComparer.prototype, "position", 2);
__decorateClass([
  watch("position", { waitUntilFirstUpdate: true })
], SlImageComparer.prototype, "handlePositionChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.HOSYJ2OS.js
SlImageComparer.define("sl-image-comparer");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FY7IKLNL.js
var include_styles_default = i`
  :host {
    display: block;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XNEONNEJ.js
var includeFiles = /* @__PURE__ */ new Map();
function requestInclude(src2, mode = "cors") {
  const prev = includeFiles.get(src2);
  if (prev !== void 0) {
    return Promise.resolve(prev);
  }
  const fileDataPromise = fetch(src2, { mode }).then(async (response) => {
    const res = {
      ok: response.ok,
      status: response.status,
      html: await response.text()
    };
    includeFiles.set(src2, res);
    return res;
  });
  includeFiles.set(src2, fileDataPromise);
  return fileDataPromise;
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.AXVY7XIZ.js
var SlInclude = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.mode = "cors";
    this.allowScripts = false;
  }
  executeScript(script) {
    const newScript = document.createElement("script");
    [...script.attributes].forEach((attr) => newScript.setAttribute(attr.name, attr.value));
    newScript.textContent = script.textContent;
    script.parentNode.replaceChild(newScript, script);
  }
  async handleSrcChange() {
    try {
      const src2 = this.src;
      const file = await requestInclude(src2, this.mode);
      if (src2 !== this.src) {
        return;
      }
      if (!file.ok) {
        this.emit("sl-error", { detail: { status: file.status } });
        return;
      }
      this.innerHTML = file.html;
      if (this.allowScripts) {
        [...this.querySelectorAll("script")].forEach((script) => this.executeScript(script));
      }
      this.emit("sl-load");
    } catch (e12) {
      this.emit("sl-error", { detail: { status: -1 } });
    }
  }
  render() {
    return x`<slot></slot>`;
  }
};
SlInclude.styles = [component_styles_default, include_styles_default];
__decorateClass([
  n4()
], SlInclude.prototype, "src", 2);
__decorateClass([
  n4()
], SlInclude.prototype, "mode", 2);
__decorateClass([
  n4({ attribute: "allow-scripts", type: Boolean })
], SlInclude.prototype, "allowScripts", 2);
__decorateClass([
  watch("src")
], SlInclude.prototype, "handleSrcChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ALDZ5DZZ.js
SlInclude.define("sl-include");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.5APSYMXQ.js
SlIconButton.define("sl-icon-button");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.TFITRWI4.js
SlIcon.define("sl-icon");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.T7KPOK3G.js
var SlFormatBytes = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.value = 0;
    this.unit = "byte";
    this.display = "short";
  }
  render() {
    if (isNaN(this.value)) {
      return "";
    }
    const bitPrefixes = ["", "kilo", "mega", "giga", "tera"];
    const bytePrefixes = ["", "kilo", "mega", "giga", "tera", "peta"];
    const prefix = this.unit === "bit" ? bitPrefixes : bytePrefixes;
    const index = Math.max(0, Math.min(Math.floor(Math.log10(this.value) / 3), prefix.length - 1));
    const unit = prefix[index] + this.unit;
    const valueToFormat = parseFloat((this.value / Math.pow(1e3, index)).toPrecision(3));
    return this.localize.number(valueToFormat, {
      style: "unit",
      unit,
      unitDisplay: this.display
    });
  }
};
__decorateClass([
  n4({ type: Number })
], SlFormatBytes.prototype, "value", 2);
__decorateClass([
  n4()
], SlFormatBytes.prototype, "unit", 2);
__decorateClass([
  n4()
], SlFormatBytes.prototype, "display", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XOXL3AMF.js
SlFormatBytes.define("sl-format-bytes");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.MGHWNPL2.js
var SlFormatDate = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.date = /* @__PURE__ */ new Date();
    this.hourFormat = "auto";
  }
  render() {
    const date = new Date(this.date);
    const hour12 = this.hourFormat === "auto" ? void 0 : this.hourFormat === "12";
    if (isNaN(date.getMilliseconds())) {
      return void 0;
    }
    return x`
      <time datetime=${date.toISOString()}>
        ${this.localize.date(date, {
      weekday: this.weekday,
      era: this.era,
      year: this.year,
      month: this.month,
      day: this.day,
      hour: this.hour,
      minute: this.minute,
      second: this.second,
      timeZoneName: this.timeZoneName,
      timeZone: this.timeZone,
      hour12
    })}
      </time>
    `;
  }
};
__decorateClass([
  n4()
], SlFormatDate.prototype, "date", 2);
__decorateClass([
  n4()
], SlFormatDate.prototype, "weekday", 2);
__decorateClass([
  n4()
], SlFormatDate.prototype, "era", 2);
__decorateClass([
  n4()
], SlFormatDate.prototype, "year", 2);
__decorateClass([
  n4()
], SlFormatDate.prototype, "month", 2);
__decorateClass([
  n4()
], SlFormatDate.prototype, "day", 2);
__decorateClass([
  n4()
], SlFormatDate.prototype, "hour", 2);
__decorateClass([
  n4()
], SlFormatDate.prototype, "minute", 2);
__decorateClass([
  n4()
], SlFormatDate.prototype, "second", 2);
__decorateClass([
  n4({ attribute: "time-zone-name" })
], SlFormatDate.prototype, "timeZoneName", 2);
__decorateClass([
  n4({ attribute: "time-zone" })
], SlFormatDate.prototype, "timeZone", 2);
__decorateClass([
  n4({ attribute: "hour-format" })
], SlFormatDate.prototype, "hourFormat", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.47ROBIHB.js
SlFormatDate.define("sl-format-date");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.SENZBKQG.js
var SlFormatNumber = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.value = 0;
    this.type = "decimal";
    this.noGrouping = false;
    this.currency = "USD";
    this.currencyDisplay = "symbol";
  }
  render() {
    if (isNaN(this.value)) {
      return "";
    }
    return this.localize.number(this.value, {
      style: this.type,
      currency: this.currency,
      currencyDisplay: this.currencyDisplay,
      useGrouping: !this.noGrouping,
      minimumIntegerDigits: this.minimumIntegerDigits,
      minimumFractionDigits: this.minimumFractionDigits,
      maximumFractionDigits: this.maximumFractionDigits,
      minimumSignificantDigits: this.minimumSignificantDigits,
      maximumSignificantDigits: this.maximumSignificantDigits
    });
  }
};
__decorateClass([
  n4({ type: Number })
], SlFormatNumber.prototype, "value", 2);
__decorateClass([
  n4()
], SlFormatNumber.prototype, "type", 2);
__decorateClass([
  n4({ attribute: "no-grouping", type: Boolean })
], SlFormatNumber.prototype, "noGrouping", 2);
__decorateClass([
  n4()
], SlFormatNumber.prototype, "currency", 2);
__decorateClass([
  n4({ attribute: "currency-display" })
], SlFormatNumber.prototype, "currencyDisplay", 2);
__decorateClass([
  n4({ attribute: "minimum-integer-digits", type: Number })
], SlFormatNumber.prototype, "minimumIntegerDigits", 2);
__decorateClass([
  n4({ attribute: "minimum-fraction-digits", type: Number })
], SlFormatNumber.prototype, "minimumFractionDigits", 2);
__decorateClass([
  n4({ attribute: "maximum-fraction-digits", type: Number })
], SlFormatNumber.prototype, "maximumFractionDigits", 2);
__decorateClass([
  n4({ attribute: "minimum-significant-digits", type: Number })
], SlFormatNumber.prototype, "minimumSignificantDigits", 2);
__decorateClass([
  n4({ attribute: "maximum-significant-digits", type: Number })
], SlFormatNumber.prototype, "maximumSignificantDigits", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.B7CQFSON.js
SlFormatNumber.define("sl-format-number");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.SUSCR7CI.js
var divider_styles_default = i`
  :host {
    --color: var(--sl-panel-border-color);
    --width: var(--sl-panel-border-width);
    --spacing: var(--sl-spacing-medium);
  }

  :host(:not([vertical])) {
    display: block;
    border-top: solid var(--width) var(--color);
    margin: var(--spacing) 0;
  }

  :host([vertical]) {
    display: inline-block;
    height: 100%;
    border-left: solid var(--width) var(--color);
    margin: 0 var(--spacing);
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FWNMG5P5.js
var SlDivider = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.vertical = false;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "separator");
  }
  handleVerticalChange() {
    this.setAttribute("aria-orientation", this.vertical ? "vertical" : "horizontal");
  }
};
SlDivider.styles = [component_styles_default, divider_styles_default];
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlDivider.prototype, "vertical", 2);
__decorateClass([
  watch("vertical")
], SlDivider.prototype, "handleVerticalChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FDPXBVDV.js
SlDivider.define("sl-divider");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.BRQKZQRB.js
var drawer_styles_default = i`
  :host {
    --size: 25rem;
    --header-spacing: var(--sl-spacing-large);
    --body-spacing: var(--sl-spacing-large);
    --footer-spacing: var(--sl-spacing-large);

    display: contents;
  }

  .drawer {
    top: 0;
    inset-inline-start: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    overflow: hidden;
  }

  .drawer--contained {
    position: absolute;
    z-index: initial;
  }

  .drawer--fixed {
    position: fixed;
    z-index: var(--sl-z-index-drawer);
  }

  .drawer__panel {
    position: absolute;
    display: flex;
    flex-direction: column;
    z-index: 2;
    max-width: 100%;
    max-height: 100%;
    background-color: var(--sl-panel-background-color);
    box-shadow: var(--sl-shadow-x-large);
    overflow: auto;
    pointer-events: all;
  }

  .drawer__panel:focus {
    outline: none;
  }

  .drawer--top .drawer__panel {
    top: 0;
    inset-inline-end: auto;
    bottom: auto;
    inset-inline-start: 0;
    width: 100%;
    height: var(--size);
  }

  .drawer--end .drawer__panel {
    top: 0;
    inset-inline-end: 0;
    bottom: auto;
    inset-inline-start: auto;
    width: var(--size);
    height: 100%;
  }

  .drawer--bottom .drawer__panel {
    top: auto;
    inset-inline-end: auto;
    bottom: 0;
    inset-inline-start: 0;
    width: 100%;
    height: var(--size);
  }

  .drawer--start .drawer__panel {
    top: 0;
    inset-inline-end: auto;
    bottom: auto;
    inset-inline-start: 0;
    width: var(--size);
    height: 100%;
  }

  .drawer__header {
    display: flex;
  }

  .drawer__title {
    flex: 1 1 auto;
    font: inherit;
    font-size: var(--sl-font-size-large);
    line-height: var(--sl-line-height-dense);
    padding: var(--header-spacing);
    margin: 0;
  }

  .drawer__header-actions {
    flex-shrink: 0;
    display: flex;
    flex-wrap: wrap;
    justify-content: end;
    gap: var(--sl-spacing-2x-small);
    padding: 0 var(--header-spacing);
  }

  .drawer__header-actions sl-icon-button,
  .drawer__header-actions ::slotted(sl-icon-button) {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-medium);
  }

  .drawer__body {
    flex: 1 1 auto;
    display: block;
    padding: var(--body-spacing);
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  .drawer__footer {
    text-align: right;
    padding: var(--footer-spacing);
  }

  .drawer__footer ::slotted(sl-button:not(:last-of-type)) {
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .drawer:not(.drawer--has-footer) .drawer__footer {
    display: none;
  }

  .drawer__overlay {
    display: block;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: var(--sl-overlay-background-color);
    pointer-events: all;
  }

  .drawer--contained .drawer__overlay {
    display: none;
  }

  @media (forced-colors: active) {
    .drawer__panel {
      border: solid 1px var(--sl-color-neutral-0);
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.LXDTFLWU.js
var computedStyleMap = /* @__PURE__ */ new WeakMap();
function getCachedComputedStyle(el) {
  let computedStyle = computedStyleMap.get(el);
  if (!computedStyle) {
    computedStyle = window.getComputedStyle(el, null);
    computedStyleMap.set(el, computedStyle);
  }
  return computedStyle;
}
function isVisible(el) {
  if (typeof el.checkVisibility === "function") {
    return el.checkVisibility({ checkOpacity: false, checkVisibilityCSS: true });
  }
  const computedStyle = getCachedComputedStyle(el);
  return computedStyle.visibility !== "hidden" && computedStyle.display !== "none";
}
function isOverflowingAndTabbable(el) {
  const computedStyle = getCachedComputedStyle(el);
  const { overflowY, overflowX } = computedStyle;
  if (overflowY === "scroll" || overflowX === "scroll") {
    return true;
  }
  if (overflowY !== "auto" || overflowX !== "auto") {
    return false;
  }
  const isOverflowingY = el.scrollHeight > el.clientHeight;
  if (isOverflowingY && overflowY === "auto") {
    return true;
  }
  const isOverflowingX = el.scrollWidth > el.clientWidth;
  if (isOverflowingX && overflowX === "auto") {
    return true;
  }
  return false;
}
function isTabbable(el) {
  const tag2 = el.tagName.toLowerCase();
  const tabindex = Number(el.getAttribute("tabindex"));
  const hasTabindex = el.hasAttribute("tabindex");
  if (hasTabindex && (isNaN(tabindex) || tabindex <= -1)) {
    return false;
  }
  if (el.hasAttribute("disabled")) {
    return false;
  }
  if (el.closest("[inert]")) {
    return false;
  }
  if (tag2 === "input" && el.getAttribute("type") === "radio" && !el.hasAttribute("checked")) {
    return false;
  }
  if (!isVisible(el)) {
    return false;
  }
  if ((tag2 === "audio" || tag2 === "video") && el.hasAttribute("controls")) {
    return true;
  }
  if (el.hasAttribute("tabindex")) {
    return true;
  }
  if (el.hasAttribute("contenteditable") && el.getAttribute("contenteditable") !== "false") {
    return true;
  }
  const isNativelyTabbable = [
    "button",
    "input",
    "select",
    "textarea",
    "a",
    "audio",
    "video",
    "summary",
    "iframe"
  ].includes(tag2);
  if (isNativelyTabbable) {
    return true;
  }
  return isOverflowingAndTabbable(el);
}
function getTabbableBoundary(root) {
  var _a, _b;
  const tabbableElements = getTabbableElements(root);
  const start = (_a = tabbableElements[0]) != null ? _a : null;
  const end = (_b = tabbableElements[tabbableElements.length - 1]) != null ? _b : null;
  return { start, end };
}
function getSlottedChildrenOutsideRootElement(slotElement, root) {
  var _a;
  return ((_a = slotElement.getRootNode({ composed: true })) == null ? void 0 : _a.host) !== root;
}
function getTabbableElements(root) {
  const walkedEls = /* @__PURE__ */ new WeakMap();
  const tabbableElements = [];
  function walk(el) {
    if (el instanceof Element) {
      if (el.hasAttribute("inert") || el.closest("[inert]")) {
        return;
      }
      if (walkedEls.has(el)) {
        return;
      }
      walkedEls.set(el, true);
      if (!tabbableElements.includes(el) && isTabbable(el)) {
        tabbableElements.push(el);
      }
      if (el instanceof HTMLSlotElement && getSlottedChildrenOutsideRootElement(el, root)) {
        el.assignedElements({ flatten: true }).forEach((assignedEl) => {
          walk(assignedEl);
        });
      }
      if (el.shadowRoot !== null && el.shadowRoot.mode === "open") {
        walk(el.shadowRoot);
      }
    }
    for (const e12 of el.children) {
      walk(e12);
    }
  }
  walk(root);
  return tabbableElements.sort((a4, b3) => {
    const aTabindex = Number(a4.getAttribute("tabindex")) || 0;
    const bTabindex = Number(b3.getAttribute("tabindex")) || 0;
    return bTabindex - aTabindex;
  });
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FRD7DRZ6.js
function* activeElements(activeElement = document.activeElement) {
  if (activeElement === null || activeElement === void 0) return;
  yield activeElement;
  if ("shadowRoot" in activeElement && activeElement.shadowRoot && activeElement.shadowRoot.mode !== "closed") {
    yield* __yieldStar(activeElements(activeElement.shadowRoot.activeElement));
  }
}
function getDeepestActiveElement() {
  return [...activeElements()].pop();
}
var activeModals = [];
var Modal = class {
  constructor(element) {
    this.tabDirection = "forward";
    this.handleFocusIn = () => {
      if (!this.isActive()) return;
      this.checkFocus();
    };
    this.handleKeyDown = (event) => {
      var _a;
      if (event.key !== "Tab" || this.isExternalActivated) return;
      if (!this.isActive()) return;
      const currentActiveElement = getDeepestActiveElement();
      this.previousFocus = currentActiveElement;
      if (this.previousFocus && this.possiblyHasTabbableChildren(this.previousFocus)) {
        return;
      }
      if (event.shiftKey) {
        this.tabDirection = "backward";
      } else {
        this.tabDirection = "forward";
      }
      const tabbableElements = getTabbableElements(this.element);
      let currentFocusIndex = tabbableElements.findIndex((el) => el === currentActiveElement);
      this.previousFocus = this.currentFocus;
      const addition = this.tabDirection === "forward" ? 1 : -1;
      while (true) {
        if (currentFocusIndex + addition >= tabbableElements.length) {
          currentFocusIndex = 0;
        } else if (currentFocusIndex + addition < 0) {
          currentFocusIndex = tabbableElements.length - 1;
        } else {
          currentFocusIndex += addition;
        }
        this.previousFocus = this.currentFocus;
        const nextFocus = (
          /** @type {HTMLElement} */
          tabbableElements[currentFocusIndex]
        );
        if (this.tabDirection === "backward") {
          if (this.previousFocus && this.possiblyHasTabbableChildren(this.previousFocus)) {
            return;
          }
        }
        if (nextFocus && this.possiblyHasTabbableChildren(nextFocus)) {
          return;
        }
        event.preventDefault();
        this.currentFocus = nextFocus;
        (_a = this.currentFocus) == null ? void 0 : _a.focus({ preventScroll: false });
        const allActiveElements = [...activeElements()];
        if (allActiveElements.includes(this.currentFocus) || !allActiveElements.includes(this.previousFocus)) {
          break;
        }
      }
      setTimeout(() => this.checkFocus());
    };
    this.handleKeyUp = () => {
      this.tabDirection = "forward";
    };
    this.element = element;
    this.elementsWithTabbableControls = ["iframe"];
  }
  /** Activates focus trapping. */
  activate() {
    activeModals.push(this.element);
    document.addEventListener("focusin", this.handleFocusIn);
    document.addEventListener("keydown", this.handleKeyDown);
    document.addEventListener("keyup", this.handleKeyUp);
  }
  /** Deactivates focus trapping. */
  deactivate() {
    activeModals = activeModals.filter((modal) => modal !== this.element);
    this.currentFocus = null;
    document.removeEventListener("focusin", this.handleFocusIn);
    document.removeEventListener("keydown", this.handleKeyDown);
    document.removeEventListener("keyup", this.handleKeyUp);
  }
  /** Determines if this modal element is currently active or not. */
  isActive() {
    return activeModals[activeModals.length - 1] === this.element;
  }
  /** Activates external modal behavior and temporarily disables focus trapping. */
  activateExternal() {
    this.isExternalActivated = true;
  }
  /** Deactivates external modal behavior and re-enables focus trapping. */
  deactivateExternal() {
    this.isExternalActivated = false;
  }
  checkFocus() {
    if (this.isActive() && !this.isExternalActivated) {
      const tabbableElements = getTabbableElements(this.element);
      if (!this.element.matches(":focus-within")) {
        const start = tabbableElements[0];
        const end = tabbableElements[tabbableElements.length - 1];
        const target = this.tabDirection === "forward" ? start : end;
        if (typeof (target == null ? void 0 : target.focus) === "function") {
          this.currentFocus = target;
          target.focus({ preventScroll: false });
        }
      }
    }
  }
  possiblyHasTabbableChildren(element) {
    return this.elementsWithTabbableControls.includes(element.tagName.toLowerCase()) || element.hasAttribute("controls");
  }
};

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.VB2NURXV.js
function uppercaseFirstLetter(string2) {
  return string2.charAt(0).toUpperCase() + string2.slice(1);
}
var SlDrawer = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "footer");
    this.localize = new LocalizeController2(this);
    this.modal = new Modal(this);
    this.open = false;
    this.label = "";
    this.placement = "end";
    this.contained = false;
    this.noHeader = false;
    this.handleDocumentKeyDown = (event) => {
      if (this.contained) {
        return;
      }
      if (event.key === "Escape" && this.modal.isActive() && this.open) {
        event.stopImmediatePropagation();
        this.requestClose("keyboard");
      }
    };
  }
  firstUpdated() {
    this.drawer.hidden = !this.open;
    if (this.open) {
      this.addOpenListeners();
      if (!this.contained) {
        this.modal.activate();
        lockBodyScrolling(this);
      }
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    unlockBodyScrolling(this);
    this.removeOpenListeners();
  }
  requestClose(source) {
    const slRequestClose = this.emit("sl-request-close", {
      cancelable: true,
      detail: { source }
    });
    if (slRequestClose.defaultPrevented) {
      const animation = getAnimation(this, "drawer.denyClose", { dir: this.localize.dir() });
      animateTo(this.panel, animation.keyframes, animation.options);
      return;
    }
    this.hide();
  }
  addOpenListeners() {
    var _a;
    if ("CloseWatcher" in window) {
      (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
      if (!this.contained) {
        this.closeWatcher = new CloseWatcher();
        this.closeWatcher.onclose = () => this.requestClose("keyboard");
      }
    } else {
      document.addEventListener("keydown", this.handleDocumentKeyDown);
    }
  }
  removeOpenListeners() {
    var _a;
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
  }
  async handleOpenChange() {
    if (this.open) {
      this.emit("sl-show");
      this.addOpenListeners();
      this.originalTrigger = document.activeElement;
      if (!this.contained) {
        this.modal.activate();
        lockBodyScrolling(this);
      }
      const autoFocusTarget = this.querySelector("[autofocus]");
      if (autoFocusTarget) {
        autoFocusTarget.removeAttribute("autofocus");
      }
      await Promise.all([stopAnimations(this.drawer), stopAnimations(this.overlay)]);
      this.drawer.hidden = false;
      requestAnimationFrame(() => {
        const slInitialFocus = this.emit("sl-initial-focus", { cancelable: true });
        if (!slInitialFocus.defaultPrevented) {
          if (autoFocusTarget) {
            autoFocusTarget.focus({ preventScroll: true });
          } else {
            this.panel.focus({ preventScroll: true });
          }
        }
        if (autoFocusTarget) {
          autoFocusTarget.setAttribute("autofocus", "");
        }
      });
      const panelAnimation = getAnimation(this, `drawer.show${uppercaseFirstLetter(this.placement)}`, {
        dir: this.localize.dir()
      });
      const overlayAnimation = getAnimation(this, "drawer.overlay.show", { dir: this.localize.dir() });
      await Promise.all([
        animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options),
        animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)
      ]);
      this.emit("sl-after-show");
    } else {
      this.emit("sl-hide");
      this.removeOpenListeners();
      if (!this.contained) {
        this.modal.deactivate();
        unlockBodyScrolling(this);
      }
      await Promise.all([stopAnimations(this.drawer), stopAnimations(this.overlay)]);
      const panelAnimation = getAnimation(this, `drawer.hide${uppercaseFirstLetter(this.placement)}`, {
        dir: this.localize.dir()
      });
      const overlayAnimation = getAnimation(this, "drawer.overlay.hide", { dir: this.localize.dir() });
      await Promise.all([
        animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options).then(() => {
          this.overlay.hidden = true;
        }),
        animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options).then(() => {
          this.panel.hidden = true;
        })
      ]);
      this.drawer.hidden = true;
      this.overlay.hidden = false;
      this.panel.hidden = false;
      const trigger = this.originalTrigger;
      if (typeof (trigger == null ? void 0 : trigger.focus) === "function") {
        setTimeout(() => trigger.focus());
      }
      this.emit("sl-after-hide");
    }
  }
  handleNoModalChange() {
    if (this.open && !this.contained) {
      this.modal.activate();
      lockBodyScrolling(this);
    }
    if (this.open && this.contained) {
      this.modal.deactivate();
      unlockBodyScrolling(this);
    }
  }
  /** Shows the drawer. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the drawer */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  render() {
    return x`
      <div
        part="base"
        class=${e7({
      drawer: true,
      "drawer--open": this.open,
      "drawer--top": this.placement === "top",
      "drawer--end": this.placement === "end",
      "drawer--bottom": this.placement === "bottom",
      "drawer--start": this.placement === "start",
      "drawer--contained": this.contained,
      "drawer--fixed": !this.contained,
      "drawer--rtl": this.localize.dir() === "rtl",
      "drawer--has-footer": this.hasSlotController.test("footer")
    })}
      >
        <div part="overlay" class="drawer__overlay" @click=${() => this.requestClose("overlay")} tabindex="-1"></div>

        <div
          part="panel"
          class="drawer__panel"
          role="dialog"
          aria-modal="true"
          aria-hidden=${this.open ? "false" : "true"}
          aria-label=${o5(this.noHeader ? this.label : void 0)}
          aria-labelledby=${o5(!this.noHeader ? "title" : void 0)}
          tabindex="0"
        >
          ${!this.noHeader ? x`
                <header part="header" class="drawer__header">
                  <h2 part="title" class="drawer__title" id="title">
                    <!-- If there's no label, use an invisible character to prevent the header from collapsing -->
                    <slot name="label"> ${this.label.length > 0 ? this.label : String.fromCharCode(65279)} </slot>
                  </h2>
                  <div part="header-actions" class="drawer__header-actions">
                    <slot name="header-actions"></slot>
                    <sl-icon-button
                      part="close-button"
                      exportparts="base:close-button__base"
                      class="drawer__close"
                      name="x-lg"
                      label=${this.localize.term("close")}
                      library="system"
                      @click=${() => this.requestClose("close-button")}
                    ></sl-icon-button>
                  </div>
                </header>
              ` : ""}

          <slot part="body" class="drawer__body"></slot>

          <footer part="footer" class="drawer__footer">
            <slot name="footer"></slot>
          </footer>
        </div>
      </div>
    `;
  }
};
SlDrawer.styles = [component_styles_default, drawer_styles_default];
SlDrawer.dependencies = { "sl-icon-button": SlIconButton };
__decorateClass([
  e5(".drawer")
], SlDrawer.prototype, "drawer", 2);
__decorateClass([
  e5(".drawer__panel")
], SlDrawer.prototype, "panel", 2);
__decorateClass([
  e5(".drawer__overlay")
], SlDrawer.prototype, "overlay", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlDrawer.prototype, "open", 2);
__decorateClass([
  n4({ reflect: true })
], SlDrawer.prototype, "label", 2);
__decorateClass([
  n4({ reflect: true })
], SlDrawer.prototype, "placement", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlDrawer.prototype, "contained", 2);
__decorateClass([
  n4({ attribute: "no-header", type: Boolean, reflect: true })
], SlDrawer.prototype, "noHeader", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlDrawer.prototype, "handleOpenChange", 1);
__decorateClass([
  watch("contained", { waitUntilFirstUpdate: true })
], SlDrawer.prototype, "handleNoModalChange", 1);
setDefaultAnimation("drawer.showTop", {
  keyframes: [
    { opacity: 0, translate: "0 -100%" },
    { opacity: 1, translate: "0 0" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.hideTop", {
  keyframes: [
    { opacity: 1, translate: "0 0" },
    { opacity: 0, translate: "0 -100%" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.showEnd", {
  keyframes: [
    { opacity: 0, translate: "100%" },
    { opacity: 1, translate: "0" }
  ],
  rtlKeyframes: [
    { opacity: 0, translate: "-100%" },
    { opacity: 1, translate: "0" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.hideEnd", {
  keyframes: [
    { opacity: 1, translate: "0" },
    { opacity: 0, translate: "100%" }
  ],
  rtlKeyframes: [
    { opacity: 1, translate: "0" },
    { opacity: 0, translate: "-100%" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.showBottom", {
  keyframes: [
    { opacity: 0, translate: "0 100%" },
    { opacity: 1, translate: "0 0" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.hideBottom", {
  keyframes: [
    { opacity: 1, translate: "0 0" },
    { opacity: 0, translate: "0 100%" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.showStart", {
  keyframes: [
    { opacity: 0, translate: "-100%" },
    { opacity: 1, translate: "0" }
  ],
  rtlKeyframes: [
    { opacity: 0, translate: "100%" },
    { opacity: 1, translate: "0" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.hideStart", {
  keyframes: [
    { opacity: 1, translate: "0" },
    { opacity: 0, translate: "-100%" }
  ],
  rtlKeyframes: [
    { opacity: 1, translate: "0" },
    { opacity: 0, translate: "100%" }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("drawer.denyClose", {
  keyframes: [{ scale: 1 }, { scale: 1.01 }, { scale: 1 }],
  options: { duration: 250 }
});
setDefaultAnimation("drawer.overlay.show", {
  keyframes: [{ opacity: 0 }, { opacity: 1 }],
  options: { duration: 250 }
});
setDefaultAnimation("drawer.overlay.hide", {
  keyframes: [{ opacity: 1 }, { opacity: 0 }],
  options: { duration: 250 }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.BWLYJ7KT.js
SlDrawer.define("sl-drawer");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.LXP7GVU3.js
var dropdown_styles_default = i`
  :host {
    display: inline-block;
  }

  .dropdown::part(popup) {
    z-index: var(--sl-z-index-dropdown);
  }

  .dropdown[data-current-placement^='top']::part(popup) {
    transform-origin: bottom;
  }

  .dropdown[data-current-placement^='bottom']::part(popup) {
    transform-origin: top;
  }

  .dropdown[data-current-placement^='left']::part(popup) {
    transform-origin: right;
  }

  .dropdown[data-current-placement^='right']::part(popup) {
    transform-origin: left;
  }

  .dropdown__trigger {
    display: block;
  }

  .dropdown__panel {
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    box-shadow: var(--sl-shadow-large);
    border-radius: var(--sl-border-radius-medium);
    pointer-events: none;
  }

  .dropdown--open .dropdown__panel {
    display: block;
    pointer-events: all;
  }

  /* When users slot a menu, make sure it conforms to the popup's auto-size */
  ::slotted(sl-menu) {
    max-width: var(--auto-size-available-width) !important;
    max-height: var(--auto-size-available-height) !important;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XJ4BJVZH.js
var SlDropdown = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.open = false;
    this.placement = "bottom-start";
    this.disabled = false;
    this.stayOpenOnSelect = false;
    this.distance = 0;
    this.skidding = 0;
    this.hoist = false;
    this.sync = void 0;
    this.handleKeyDown = (event) => {
      if (this.open && event.key === "Escape") {
        event.stopPropagation();
        this.hide();
        this.focusOnTrigger();
      }
    };
    this.handleDocumentKeyDown = (event) => {
      var _a;
      if (event.key === "Escape" && this.open && !this.closeWatcher) {
        event.stopPropagation();
        this.focusOnTrigger();
        this.hide();
        return;
      }
      if (event.key === "Tab") {
        if (this.open && ((_a = document.activeElement) == null ? void 0 : _a.tagName.toLowerCase()) === "sl-menu-item") {
          event.preventDefault();
          this.hide();
          this.focusOnTrigger();
          return;
        }
        setTimeout(() => {
          var _a2, _b, _c;
          const activeElement = ((_a2 = this.containingElement) == null ? void 0 : _a2.getRootNode()) instanceof ShadowRoot ? (_c = (_b = document.activeElement) == null ? void 0 : _b.shadowRoot) == null ? void 0 : _c.activeElement : document.activeElement;
          if (!this.containingElement || (activeElement == null ? void 0 : activeElement.closest(this.containingElement.tagName.toLowerCase())) !== this.containingElement) {
            this.hide();
          }
        });
      }
    };
    this.handleDocumentMouseDown = (event) => {
      const path = event.composedPath();
      if (this.containingElement && !path.includes(this.containingElement)) {
        this.hide();
      }
    };
    this.handlePanelSelect = (event) => {
      const target = event.target;
      if (!this.stayOpenOnSelect && target.tagName.toLowerCase() === "sl-menu") {
        this.hide();
        this.focusOnTrigger();
      }
    };
  }
  connectedCallback() {
    super.connectedCallback();
    if (!this.containingElement) {
      this.containingElement = this;
    }
  }
  firstUpdated() {
    this.panel.hidden = !this.open;
    if (this.open) {
      this.addOpenListeners();
      this.popup.active = true;
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeOpenListeners();
    this.hide();
  }
  focusOnTrigger() {
    const trigger = this.trigger.assignedElements({ flatten: true })[0];
    if (typeof (trigger == null ? void 0 : trigger.focus) === "function") {
      trigger.focus();
    }
  }
  getMenu() {
    return this.panel.assignedElements({ flatten: true }).find((el) => el.tagName.toLowerCase() === "sl-menu");
  }
  handleTriggerClick() {
    if (this.open) {
      this.hide();
    } else {
      this.show();
      this.focusOnTrigger();
    }
  }
  async handleTriggerKeyDown(event) {
    if ([" ", "Enter"].includes(event.key)) {
      event.preventDefault();
      this.handleTriggerClick();
      return;
    }
    const menu = this.getMenu();
    if (menu) {
      const menuItems = menu.getAllItems();
      const firstMenuItem = menuItems[0];
      const lastMenuItem = menuItems[menuItems.length - 1];
      if (["ArrowDown", "ArrowUp", "Home", "End"].includes(event.key)) {
        event.preventDefault();
        if (!this.open) {
          this.show();
          await this.updateComplete;
        }
        if (menuItems.length > 0) {
          this.updateComplete.then(() => {
            if (event.key === "ArrowDown" || event.key === "Home") {
              menu.setCurrentItem(firstMenuItem);
              firstMenuItem.focus();
            }
            if (event.key === "ArrowUp" || event.key === "End") {
              menu.setCurrentItem(lastMenuItem);
              lastMenuItem.focus();
            }
          });
        }
      }
    }
  }
  handleTriggerKeyUp(event) {
    if (event.key === " ") {
      event.preventDefault();
    }
  }
  handleTriggerSlotChange() {
    this.updateAccessibleTrigger();
  }
  //
  // Slotted triggers can be arbitrary content, but we need to link them to the dropdown panel with `aria-haspopup` and
  // `aria-expanded`. These must be applied to the "accessible trigger" (the tabbable portion of the trigger element
  // that gets slotted in) so screen readers will understand them. The accessible trigger could be the slotted element,
  // a child of the slotted element, or an element in the slotted element's shadow root.
  //
  // For example, the accessible trigger of an <sl-button> is a <button> located inside its shadow root.
  //
  // To determine this, we assume the first tabbable element in the trigger slot is the "accessible trigger."
  //
  updateAccessibleTrigger() {
    const assignedElements = this.trigger.assignedElements({ flatten: true });
    const accessibleTrigger = assignedElements.find((el) => getTabbableBoundary(el).start);
    let target;
    if (accessibleTrigger) {
      switch (accessibleTrigger.tagName.toLowerCase()) {
        // Shoelace buttons have to update the internal button so it's announced correctly by screen readers
        case "sl-button":
        case "sl-icon-button":
          target = accessibleTrigger.button;
          break;
        default:
          target = accessibleTrigger;
      }
      target.setAttribute("aria-haspopup", "true");
      target.setAttribute("aria-expanded", this.open ? "true" : "false");
    }
  }
  /** Shows the dropdown panel. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the dropdown panel */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  /**
   * Instructs the dropdown menu to reposition. Useful when the position or size of the trigger changes when the menu
   * is activated.
   */
  reposition() {
    this.popup.reposition();
  }
  addOpenListeners() {
    var _a;
    this.panel.addEventListener("sl-select", this.handlePanelSelect);
    if ("CloseWatcher" in window) {
      (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
      this.closeWatcher = new CloseWatcher();
      this.closeWatcher.onclose = () => {
        this.hide();
        this.focusOnTrigger();
      };
    } else {
      this.panel.addEventListener("keydown", this.handleKeyDown);
    }
    document.addEventListener("keydown", this.handleDocumentKeyDown);
    document.addEventListener("mousedown", this.handleDocumentMouseDown);
  }
  removeOpenListeners() {
    var _a;
    if (this.panel) {
      this.panel.removeEventListener("sl-select", this.handlePanelSelect);
      this.panel.removeEventListener("keydown", this.handleKeyDown);
    }
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
    document.removeEventListener("mousedown", this.handleDocumentMouseDown);
    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
  }
  async handleOpenChange() {
    if (this.disabled) {
      this.open = false;
      return;
    }
    this.updateAccessibleTrigger();
    if (this.open) {
      this.emit("sl-show");
      this.addOpenListeners();
      await stopAnimations(this);
      this.panel.hidden = false;
      this.popup.active = true;
      const { keyframes, options } = getAnimation(this, "dropdown.show", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      this.emit("sl-after-show");
    } else {
      this.emit("sl-hide");
      this.removeOpenListeners();
      await stopAnimations(this);
      const { keyframes, options } = getAnimation(this, "dropdown.hide", { dir: this.localize.dir() });
      await animateTo(this.popup.popup, keyframes, options);
      this.panel.hidden = true;
      this.popup.active = false;
      this.emit("sl-after-hide");
    }
  }
  render() {
    return x`
      <sl-popup
        part="base"
        exportparts="popup:base__popup"
        id="dropdown"
        placement=${this.placement}
        distance=${this.distance}
        skidding=${this.skidding}
        strategy=${this.hoist ? "fixed" : "absolute"}
        flip
        shift
        auto-size="vertical"
        auto-size-padding="10"
        sync=${o5(this.sync ? this.sync : void 0)}
        class=${e7({
      dropdown: true,
      "dropdown--open": this.open
    })}
      >
        <slot
          name="trigger"
          slot="anchor"
          part="trigger"
          class="dropdown__trigger"
          @click=${this.handleTriggerClick}
          @keydown=${this.handleTriggerKeyDown}
          @keyup=${this.handleTriggerKeyUp}
          @slotchange=${this.handleTriggerSlotChange}
        ></slot>

        <div aria-hidden=${this.open ? "false" : "true"} aria-labelledby="dropdown">
          <slot part="panel" class="dropdown__panel"></slot>
        </div>
      </sl-popup>
    `;
  }
};
SlDropdown.styles = [component_styles_default, dropdown_styles_default];
SlDropdown.dependencies = { "sl-popup": SlPopup };
__decorateClass([
  e5(".dropdown")
], SlDropdown.prototype, "popup", 2);
__decorateClass([
  e5(".dropdown__trigger")
], SlDropdown.prototype, "trigger", 2);
__decorateClass([
  e5(".dropdown__panel")
], SlDropdown.prototype, "panel", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlDropdown.prototype, "open", 2);
__decorateClass([
  n4({ reflect: true })
], SlDropdown.prototype, "placement", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlDropdown.prototype, "disabled", 2);
__decorateClass([
  n4({ attribute: "stay-open-on-select", type: Boolean, reflect: true })
], SlDropdown.prototype, "stayOpenOnSelect", 2);
__decorateClass([
  n4({ attribute: false })
], SlDropdown.prototype, "containingElement", 2);
__decorateClass([
  n4({ type: Number })
], SlDropdown.prototype, "distance", 2);
__decorateClass([
  n4({ type: Number })
], SlDropdown.prototype, "skidding", 2);
__decorateClass([
  n4({ type: Boolean })
], SlDropdown.prototype, "hoist", 2);
__decorateClass([
  n4({ reflect: true })
], SlDropdown.prototype, "sync", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlDropdown.prototype, "handleOpenChange", 1);
setDefaultAnimation("dropdown.show", {
  keyframes: [
    { opacity: 0, scale: 0.9 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 100, easing: "ease" }
});
setDefaultAnimation("dropdown.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.9 }
  ],
  options: { duration: 100, easing: "ease" }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.CKEABH2A.js
SlDropdown.define("sl-dropdown");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.WSSNCNLM.js
var copy_button_styles_default = i`
  :host {
    --error-color: var(--sl-color-danger-600);
    --success-color: var(--sl-color-success-600);

    display: inline-block;
  }

  .copy-button__button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-medium);
    font-size: inherit;
    color: inherit;
    padding: var(--sl-spacing-x-small);
    cursor: pointer;
    transition: var(--sl-transition-x-fast) color;
  }

  .copy-button--success .copy-button__button {
    color: var(--success-color);
  }

  .copy-button--error .copy-button__button {
    color: var(--error-color);
  }

  .copy-button__button:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .copy-button__button[disabled] {
    opacity: 0.5;
    cursor: not-allowed !important;
  }

  slot {
    display: inline-flex;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.3S5QDNZI.js
var SlCopyButton = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.isCopying = false;
    this.status = "rest";
    this.value = "";
    this.from = "";
    this.disabled = false;
    this.copyLabel = "";
    this.successLabel = "";
    this.errorLabel = "";
    this.feedbackDuration = 1e3;
    this.tooltipPlacement = "top";
    this.hoist = false;
  }
  async handleCopy() {
    if (this.disabled || this.isCopying) {
      return;
    }
    this.isCopying = true;
    let valueToCopy = this.value;
    if (this.from) {
      const root = this.getRootNode();
      const isProperty = this.from.includes(".");
      const isAttribute = this.from.includes("[") && this.from.includes("]");
      let id3 = this.from;
      let field = "";
      if (isProperty) {
        [id3, field] = this.from.trim().split(".");
      } else if (isAttribute) {
        [id3, field] = this.from.trim().replace(/\]$/, "").split("[");
      }
      const target = "getElementById" in root ? root.getElementById(id3) : null;
      if (target) {
        if (isAttribute) {
          valueToCopy = target.getAttribute(field) || "";
        } else if (isProperty) {
          valueToCopy = target[field] || "";
        } else {
          valueToCopy = target.textContent || "";
        }
      } else {
        this.showStatus("error");
        this.emit("sl-error");
      }
    }
    if (!valueToCopy) {
      this.showStatus("error");
      this.emit("sl-error");
    } else {
      try {
        await navigator.clipboard.writeText(valueToCopy);
        this.showStatus("success");
        this.emit("sl-copy", {
          detail: {
            value: valueToCopy
          }
        });
      } catch (error) {
        this.showStatus("error");
        this.emit("sl-error");
      }
    }
  }
  async showStatus(status) {
    const copyLabel = this.copyLabel || this.localize.term("copy");
    const successLabel = this.successLabel || this.localize.term("copied");
    const errorLabel = this.errorLabel || this.localize.term("error");
    const iconToShow = status === "success" ? this.successIcon : this.errorIcon;
    const showAnimation = getAnimation(this, "copy.in", { dir: "ltr" });
    const hideAnimation = getAnimation(this, "copy.out", { dir: "ltr" });
    this.tooltip.content = status === "success" ? successLabel : errorLabel;
    await this.copyIcon.animate(hideAnimation.keyframes, hideAnimation.options).finished;
    this.copyIcon.hidden = true;
    this.status = status;
    iconToShow.hidden = false;
    await iconToShow.animate(showAnimation.keyframes, showAnimation.options).finished;
    setTimeout(async () => {
      await iconToShow.animate(hideAnimation.keyframes, hideAnimation.options).finished;
      iconToShow.hidden = true;
      this.status = "rest";
      this.copyIcon.hidden = false;
      await this.copyIcon.animate(showAnimation.keyframes, showAnimation.options).finished;
      this.tooltip.content = copyLabel;
      this.isCopying = false;
    }, this.feedbackDuration);
  }
  render() {
    const copyLabel = this.copyLabel || this.localize.term("copy");
    return x`
      <sl-tooltip
        class=${e7({
      "copy-button": true,
      "copy-button--success": this.status === "success",
      "copy-button--error": this.status === "error"
    })}
        content=${copyLabel}
        placement=${this.tooltipPlacement}
        ?disabled=${this.disabled}
        ?hoist=${this.hoist}
        exportparts="
          base:tooltip__base,
          base__popup:tooltip__base__popup,
          base__arrow:tooltip__base__arrow,
          body:tooltip__body
        "
      >
        <button
          class="copy-button__button"
          part="button"
          type="button"
          ?disabled=${this.disabled}
          @click=${this.handleCopy}
        >
          <slot part="copy-icon" name="copy-icon">
            <sl-icon library="system" name="copy"></sl-icon>
          </slot>
          <slot part="success-icon" name="success-icon" hidden>
            <sl-icon library="system" name="check"></sl-icon>
          </slot>
          <slot part="error-icon" name="error-icon" hidden>
            <sl-icon library="system" name="x-lg"></sl-icon>
          </slot>
        </button>
      </sl-tooltip>
    `;
  }
};
SlCopyButton.styles = [component_styles_default, copy_button_styles_default];
SlCopyButton.dependencies = {
  "sl-icon": SlIcon,
  "sl-tooltip": SlTooltip
};
__decorateClass([
  e5('slot[name="copy-icon"]')
], SlCopyButton.prototype, "copyIcon", 2);
__decorateClass([
  e5('slot[name="success-icon"]')
], SlCopyButton.prototype, "successIcon", 2);
__decorateClass([
  e5('slot[name="error-icon"]')
], SlCopyButton.prototype, "errorIcon", 2);
__decorateClass([
  e5("sl-tooltip")
], SlCopyButton.prototype, "tooltip", 2);
__decorateClass([
  r6()
], SlCopyButton.prototype, "isCopying", 2);
__decorateClass([
  r6()
], SlCopyButton.prototype, "status", 2);
__decorateClass([
  n4()
], SlCopyButton.prototype, "value", 2);
__decorateClass([
  n4()
], SlCopyButton.prototype, "from", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlCopyButton.prototype, "disabled", 2);
__decorateClass([
  n4({ attribute: "copy-label" })
], SlCopyButton.prototype, "copyLabel", 2);
__decorateClass([
  n4({ attribute: "success-label" })
], SlCopyButton.prototype, "successLabel", 2);
__decorateClass([
  n4({ attribute: "error-label" })
], SlCopyButton.prototype, "errorLabel", 2);
__decorateClass([
  n4({ attribute: "feedback-duration", type: Number })
], SlCopyButton.prototype, "feedbackDuration", 2);
__decorateClass([
  n4({ attribute: "tooltip-placement" })
], SlCopyButton.prototype, "tooltipPlacement", 2);
__decorateClass([
  n4({ type: Boolean })
], SlCopyButton.prototype, "hoist", 2);
setDefaultAnimation("copy.in", {
  keyframes: [
    { scale: ".25", opacity: ".25" },
    { scale: "1", opacity: "1" }
  ],
  options: { duration: 100 }
});
setDefaultAnimation("copy.out", {
  keyframes: [
    { scale: "1", opacity: "1" },
    { scale: ".25", opacity: "0" }
  ],
  options: { duration: 100 }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XDPXTS7O.js
SlCopyButton.define("sl-copy-button");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.J7PLVEQM.js
var details_styles_default = i`
  :host {
    display: block;
  }

  .details {
    border: solid 1px var(--sl-color-neutral-200);
    border-radius: var(--sl-border-radius-medium);
    background-color: var(--sl-color-neutral-0);
    overflow-anchor: none;
  }

  .details--disabled {
    opacity: 0.5;
  }

  .details__header {
    display: flex;
    align-items: center;
    border-radius: inherit;
    padding: var(--sl-spacing-medium);
    user-select: none;
    -webkit-user-select: none;
    cursor: pointer;
  }

  .details__header::-webkit-details-marker {
    display: none;
  }

  .details__header:focus {
    outline: none;
  }

  .details__header:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: calc(1px + var(--sl-focus-ring-offset));
  }

  .details--disabled .details__header {
    cursor: not-allowed;
  }

  .details--disabled .details__header:focus-visible {
    outline: none;
    box-shadow: none;
  }

  .details__summary {
    flex: 1 1 auto;
    display: flex;
    align-items: center;
  }

  .details__summary-icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    transition: var(--sl-transition-medium) rotate ease;
  }

  .details--open .details__summary-icon {
    rotate: 90deg;
  }

  .details--open.details--rtl .details__summary-icon {
    rotate: -90deg;
  }

  .details--open slot[name='expand-icon'],
  .details:not(.details--open) slot[name='collapse-icon'] {
    display: none;
  }

  .details__body {
    overflow: hidden;
  }

  .details__content {
    display: block;
    padding: var(--sl-spacing-medium);
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2SZ4G2LK.js
var SlDetails = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.open = false;
    this.disabled = false;
  }
  firstUpdated() {
    this.body.style.height = this.open ? "auto" : "0";
    if (this.open) {
      this.details.open = true;
    }
    this.detailsObserver = new MutationObserver((changes) => {
      for (const change of changes) {
        if (change.type === "attributes" && change.attributeName === "open") {
          if (this.details.open) {
            this.show();
          } else {
            this.hide();
          }
        }
      }
    });
    this.detailsObserver.observe(this.details, { attributes: true });
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.detailsObserver) == null ? void 0 : _a.disconnect();
  }
  handleSummaryClick(event) {
    event.preventDefault();
    if (!this.disabled) {
      if (this.open) {
        this.hide();
      } else {
        this.show();
      }
      this.header.focus();
    }
  }
  handleSummaryKeyDown(event) {
    if (event.key === "Enter" || event.key === " ") {
      event.preventDefault();
      if (this.open) {
        this.hide();
      } else {
        this.show();
      }
    }
    if (event.key === "ArrowUp" || event.key === "ArrowLeft") {
      event.preventDefault();
      this.hide();
    }
    if (event.key === "ArrowDown" || event.key === "ArrowRight") {
      event.preventDefault();
      this.show();
    }
  }
  async handleOpenChange() {
    if (this.open) {
      this.details.open = true;
      const slShow = this.emit("sl-show", { cancelable: true });
      if (slShow.defaultPrevented) {
        this.open = false;
        this.details.open = false;
        return;
      }
      await stopAnimations(this.body);
      const { keyframes, options } = getAnimation(this, "details.show", { dir: this.localize.dir() });
      await animateTo(this.body, shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
      this.body.style.height = "auto";
      this.emit("sl-after-show");
    } else {
      const slHide = this.emit("sl-hide", { cancelable: true });
      if (slHide.defaultPrevented) {
        this.details.open = true;
        this.open = true;
        return;
      }
      await stopAnimations(this.body);
      const { keyframes, options } = getAnimation(this, "details.hide", { dir: this.localize.dir() });
      await animateTo(this.body, shimKeyframesHeightAuto(keyframes, this.body.scrollHeight), options);
      this.body.style.height = "auto";
      this.details.open = false;
      this.emit("sl-after-hide");
    }
  }
  /** Shows the details. */
  async show() {
    if (this.open || this.disabled) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the details */
  async hide() {
    if (!this.open || this.disabled) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  render() {
    const isRtl = this.localize.dir() === "rtl";
    return x`
      <details
        part="base"
        class=${e7({
      details: true,
      "details--open": this.open,
      "details--disabled": this.disabled,
      "details--rtl": isRtl
    })}
      >
        <summary
          part="header"
          id="header"
          class="details__header"
          role="button"
          aria-expanded=${this.open ? "true" : "false"}
          aria-controls="content"
          aria-disabled=${this.disabled ? "true" : "false"}
          tabindex=${this.disabled ? "-1" : "0"}
          @click=${this.handleSummaryClick}
          @keydown=${this.handleSummaryKeyDown}
        >
          <slot name="summary" part="summary" class="details__summary">${this.summary}</slot>

          <span part="summary-icon" class="details__summary-icon">
            <slot name="expand-icon">
              <sl-icon library="system" name=${isRtl ? "chevron-left" : "chevron-right"}></sl-icon>
            </slot>
            <slot name="collapse-icon">
              <sl-icon library="system" name=${isRtl ? "chevron-left" : "chevron-right"}></sl-icon>
            </slot>
          </span>
        </summary>

        <div class="details__body" role="region" aria-labelledby="header">
          <slot part="content" id="content" class="details__content"></slot>
        </div>
      </details>
    `;
  }
};
SlDetails.styles = [component_styles_default, details_styles_default];
SlDetails.dependencies = {
  "sl-icon": SlIcon
};
__decorateClass([
  e5(".details")
], SlDetails.prototype, "details", 2);
__decorateClass([
  e5(".details__header")
], SlDetails.prototype, "header", 2);
__decorateClass([
  e5(".details__body")
], SlDetails.prototype, "body", 2);
__decorateClass([
  e5(".details__expand-icon-slot")
], SlDetails.prototype, "expandIconSlot", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlDetails.prototype, "open", 2);
__decorateClass([
  n4()
], SlDetails.prototype, "summary", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlDetails.prototype, "disabled", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlDetails.prototype, "handleOpenChange", 1);
setDefaultAnimation("details.show", {
  keyframes: [
    { height: "0", opacity: "0" },
    { height: "auto", opacity: "1" }
  ],
  options: { duration: 250, easing: "linear" }
});
setDefaultAnimation("details.hide", {
  keyframes: [
    { height: "auto", opacity: "1" },
    { height: "0", opacity: "0" }
  ],
  options: { duration: 250, easing: "linear" }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.6YX5GKMK.js
SlDetails.define("sl-details");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.G5RKA5HF.js
var dialog_styles_default = i`
  :host {
    --width: 31rem;
    --header-spacing: var(--sl-spacing-large);
    --body-spacing: var(--sl-spacing-large);
    --footer-spacing: var(--sl-spacing-large);

    display: contents;
  }

  .dialog {
    display: flex;
    align-items: center;
    justify-content: center;
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: var(--sl-z-index-dialog);
  }

  .dialog__panel {
    display: flex;
    flex-direction: column;
    z-index: 2;
    width: var(--width);
    max-width: calc(100% - var(--sl-spacing-2x-large));
    max-height: calc(100% - var(--sl-spacing-2x-large));
    background-color: var(--sl-panel-background-color);
    border-radius: var(--sl-border-radius-medium);
    box-shadow: var(--sl-shadow-x-large);
  }

  .dialog__panel:focus {
    outline: none;
  }

  /* Ensure there's enough vertical padding for phones that don't update vh when chrome appears (e.g. iPhone) */
  @media screen and (max-width: 420px) {
    .dialog__panel {
      max-height: 80vh;
    }
  }

  .dialog--open .dialog__panel {
    display: flex;
    opacity: 1;
  }

  .dialog__header {
    flex: 0 0 auto;
    display: flex;
  }

  .dialog__title {
    flex: 1 1 auto;
    font: inherit;
    font-size: var(--sl-font-size-large);
    line-height: var(--sl-line-height-dense);
    padding: var(--header-spacing);
    margin: 0;
  }

  .dialog__header-actions {
    flex-shrink: 0;
    display: flex;
    flex-wrap: wrap;
    justify-content: end;
    gap: var(--sl-spacing-2x-small);
    padding: 0 var(--header-spacing);
  }

  .dialog__header-actions sl-icon-button,
  .dialog__header-actions ::slotted(sl-icon-button) {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-medium);
  }

  .dialog__body {
    flex: 1 1 auto;
    display: block;
    padding: var(--body-spacing);
    overflow: auto;
    -webkit-overflow-scrolling: touch;
  }

  .dialog__footer {
    flex: 0 0 auto;
    text-align: right;
    padding: var(--footer-spacing);
  }

  .dialog__footer ::slotted(sl-button:not(:first-of-type)) {
    margin-inline-start: var(--sl-spacing-x-small);
  }

  .dialog:not(.dialog--has-footer) .dialog__footer {
    display: none;
  }

  .dialog__overlay {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    background-color: var(--sl-overlay-background-color);
  }

  @media (forced-colors: active) {
    .dialog__panel {
      border: solid 1px var(--sl-color-neutral-0);
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.6SBTOKGT.js
var SlDialog = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "footer");
    this.localize = new LocalizeController2(this);
    this.modal = new Modal(this);
    this.open = false;
    this.label = "";
    this.noHeader = false;
    this.handleDocumentKeyDown = (event) => {
      if (event.key === "Escape" && this.modal.isActive() && this.open) {
        event.stopPropagation();
        this.requestClose("keyboard");
      }
    };
  }
  firstUpdated() {
    this.dialog.hidden = !this.open;
    if (this.open) {
      this.addOpenListeners();
      this.modal.activate();
      lockBodyScrolling(this);
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.modal.deactivate();
    unlockBodyScrolling(this);
    this.removeOpenListeners();
  }
  requestClose(source) {
    const slRequestClose = this.emit("sl-request-close", {
      cancelable: true,
      detail: { source }
    });
    if (slRequestClose.defaultPrevented) {
      const animation = getAnimation(this, "dialog.denyClose", { dir: this.localize.dir() });
      animateTo(this.panel, animation.keyframes, animation.options);
      return;
    }
    this.hide();
  }
  addOpenListeners() {
    var _a;
    if ("CloseWatcher" in window) {
      (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
      this.closeWatcher = new CloseWatcher();
      this.closeWatcher.onclose = () => this.requestClose("keyboard");
    } else {
      document.addEventListener("keydown", this.handleDocumentKeyDown);
    }
  }
  removeOpenListeners() {
    var _a;
    (_a = this.closeWatcher) == null ? void 0 : _a.destroy();
    document.removeEventListener("keydown", this.handleDocumentKeyDown);
  }
  async handleOpenChange() {
    if (this.open) {
      this.emit("sl-show");
      this.addOpenListeners();
      this.originalTrigger = document.activeElement;
      this.modal.activate();
      lockBodyScrolling(this);
      const autoFocusTarget = this.querySelector("[autofocus]");
      if (autoFocusTarget) {
        autoFocusTarget.removeAttribute("autofocus");
      }
      await Promise.all([stopAnimations(this.dialog), stopAnimations(this.overlay)]);
      this.dialog.hidden = false;
      requestAnimationFrame(() => {
        const slInitialFocus = this.emit("sl-initial-focus", { cancelable: true });
        if (!slInitialFocus.defaultPrevented) {
          if (autoFocusTarget) {
            autoFocusTarget.focus({ preventScroll: true });
          } else {
            this.panel.focus({ preventScroll: true });
          }
        }
        if (autoFocusTarget) {
          autoFocusTarget.setAttribute("autofocus", "");
        }
      });
      const panelAnimation = getAnimation(this, "dialog.show", { dir: this.localize.dir() });
      const overlayAnimation = getAnimation(this, "dialog.overlay.show", { dir: this.localize.dir() });
      await Promise.all([
        animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options),
        animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options)
      ]);
      this.emit("sl-after-show");
    } else {
      this.emit("sl-hide");
      this.removeOpenListeners();
      this.modal.deactivate();
      await Promise.all([stopAnimations(this.dialog), stopAnimations(this.overlay)]);
      const panelAnimation = getAnimation(this, "dialog.hide", { dir: this.localize.dir() });
      const overlayAnimation = getAnimation(this, "dialog.overlay.hide", { dir: this.localize.dir() });
      await Promise.all([
        animateTo(this.overlay, overlayAnimation.keyframes, overlayAnimation.options).then(() => {
          this.overlay.hidden = true;
        }),
        animateTo(this.panel, panelAnimation.keyframes, panelAnimation.options).then(() => {
          this.panel.hidden = true;
        })
      ]);
      this.dialog.hidden = true;
      this.overlay.hidden = false;
      this.panel.hidden = false;
      unlockBodyScrolling(this);
      const trigger = this.originalTrigger;
      if (typeof (trigger == null ? void 0 : trigger.focus) === "function") {
        setTimeout(() => trigger.focus());
      }
      this.emit("sl-after-hide");
    }
  }
  /** Shows the dialog. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the dialog */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  render() {
    return x`
      <div
        part="base"
        class=${e7({
      dialog: true,
      "dialog--open": this.open,
      "dialog--has-footer": this.hasSlotController.test("footer")
    })}
      >
        <div part="overlay" class="dialog__overlay" @click=${() => this.requestClose("overlay")} tabindex="-1"></div>

        <div
          part="panel"
          class="dialog__panel"
          role="dialog"
          aria-modal="true"
          aria-hidden=${this.open ? "false" : "true"}
          aria-label=${o5(this.noHeader ? this.label : void 0)}
          aria-labelledby=${o5(!this.noHeader ? "title" : void 0)}
          tabindex="-1"
        >
          ${!this.noHeader ? x`
                <header part="header" class="dialog__header">
                  <h2 part="title" class="dialog__title" id="title">
                    <slot name="label"> ${this.label.length > 0 ? this.label : String.fromCharCode(65279)} </slot>
                  </h2>
                  <div part="header-actions" class="dialog__header-actions">
                    <slot name="header-actions"></slot>
                    <sl-icon-button
                      part="close-button"
                      exportparts="base:close-button__base"
                      class="dialog__close"
                      name="x-lg"
                      label=${this.localize.term("close")}
                      library="system"
                      @click="${() => this.requestClose("close-button")}"
                    ></sl-icon-button>
                  </div>
                </header>
              ` : ""}
          ${""}
          <div part="body" class="dialog__body" tabindex="-1"><slot></slot></div>

          <footer part="footer" class="dialog__footer">
            <slot name="footer"></slot>
          </footer>
        </div>
      </div>
    `;
  }
};
SlDialog.styles = [component_styles_default, dialog_styles_default];
SlDialog.dependencies = {
  "sl-icon-button": SlIconButton
};
__decorateClass([
  e5(".dialog")
], SlDialog.prototype, "dialog", 2);
__decorateClass([
  e5(".dialog__panel")
], SlDialog.prototype, "panel", 2);
__decorateClass([
  e5(".dialog__overlay")
], SlDialog.prototype, "overlay", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlDialog.prototype, "open", 2);
__decorateClass([
  n4({ reflect: true })
], SlDialog.prototype, "label", 2);
__decorateClass([
  n4({ attribute: "no-header", type: Boolean, reflect: true })
], SlDialog.prototype, "noHeader", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlDialog.prototype, "handleOpenChange", 1);
setDefaultAnimation("dialog.show", {
  keyframes: [
    { opacity: 0, scale: 0.8 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("dialog.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.8 }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("dialog.denyClose", {
  keyframes: [{ scale: 1 }, { scale: 1.02 }, { scale: 1 }],
  options: { duration: 250 }
});
setDefaultAnimation("dialog.overlay.show", {
  keyframes: [{ opacity: 0 }, { opacity: 1 }],
  options: { duration: 250 }
});
setDefaultAnimation("dialog.overlay.hide", {
  keyframes: [{ opacity: 1 }, { opacity: 0 }],
  options: { duration: 250 }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.WKBPPP3T.js
SlDialog.define("sl-dialog");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.GKEBKPRZ.js
SlCheckbox.define("sl-checkbox");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.O6CEROC7.js
var color_picker_styles_default = i`
  :host {
    --grid-width: 280px;
    --grid-height: 200px;
    --grid-handle-size: 16px;
    --slider-height: 15px;
    --slider-handle-size: 17px;
    --swatch-size: 25px;

    display: inline-block;
  }

  .color-picker {
    width: var(--grid-width);
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-medium);
    font-weight: var(--sl-font-weight-normal);
    color: var(--color);
    background-color: var(--sl-panel-background-color);
    border-radius: var(--sl-border-radius-medium);
    user-select: none;
    -webkit-user-select: none;
  }

  .color-picker--inline {
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
  }

  .color-picker--inline:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .color-picker__grid {
    position: relative;
    height: var(--grid-height);
    background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%),
      linear-gradient(to right, #fff 0%, rgba(255, 255, 255, 0) 100%);
    border-top-left-radius: var(--sl-border-radius-medium);
    border-top-right-radius: var(--sl-border-radius-medium);
    cursor: crosshair;
    forced-color-adjust: none;
  }

  .color-picker__grid-handle {
    position: absolute;
    width: var(--grid-handle-size);
    height: var(--grid-handle-size);
    border-radius: 50%;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.25);
    border: solid 2px white;
    margin-top: calc(var(--grid-handle-size) / -2);
    margin-left: calc(var(--grid-handle-size) / -2);
    transition: var(--sl-transition-fast) scale;
  }

  .color-picker__grid-handle--dragging {
    cursor: none;
    scale: 1.5;
  }

  .color-picker__grid-handle:focus-visible {
    outline: var(--sl-focus-ring);
  }

  .color-picker__controls {
    padding: var(--sl-spacing-small);
    display: flex;
    align-items: center;
  }

  .color-picker__sliders {
    flex: 1 1 auto;
  }

  .color-picker__slider {
    position: relative;
    height: var(--slider-height);
    border-radius: var(--sl-border-radius-pill);
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.2);
    forced-color-adjust: none;
  }

  .color-picker__slider:not(:last-of-type) {
    margin-bottom: var(--sl-spacing-small);
  }

  .color-picker__slider-handle {
    position: absolute;
    top: calc(50% - var(--slider-handle-size) / 2);
    width: var(--slider-handle-size);
    height: var(--slider-handle-size);
    background-color: white;
    border-radius: 50%;
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.25);
    margin-left: calc(var(--slider-handle-size) / -2);
  }

  .color-picker__slider-handle:focus-visible {
    outline: var(--sl-focus-ring);
  }

  .color-picker__hue {
    background-image: linear-gradient(
      to right,
      rgb(255, 0, 0) 0%,
      rgb(255, 255, 0) 17%,
      rgb(0, 255, 0) 33%,
      rgb(0, 255, 255) 50%,
      rgb(0, 0, 255) 67%,
      rgb(255, 0, 255) 83%,
      rgb(255, 0, 0) 100%
    );
  }

  .color-picker__alpha .color-picker__alpha-gradient {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
  }

  .color-picker__preview {
    flex: 0 0 auto;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
    width: 2.25rem;
    height: 2.25rem;
    border: none;
    border-radius: var(--sl-border-radius-circle);
    background: none;
    margin-left: var(--sl-spacing-small);
    cursor: copy;
    forced-color-adjust: none;
  }

  .color-picker__preview:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.2);

    /* We use a custom property in lieu of currentColor because of https://bugs.webkit.org/show_bug.cgi?id=216780 */
    background-color: var(--preview-color);
  }

  .color-picker__preview:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .color-picker__preview-color {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: solid 1px rgba(0, 0, 0, 0.125);
  }

  .color-picker__preview-color--copied {
    animation: pulse 0.75s;
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 var(--sl-color-primary-500);
    }
    70% {
      box-shadow: 0 0 0 0.5rem transparent;
    }
    100% {
      box-shadow: 0 0 0 0 transparent;
    }
  }

  .color-picker__user-input {
    display: flex;
    padding: 0 var(--sl-spacing-small) var(--sl-spacing-small) var(--sl-spacing-small);
  }

  .color-picker__user-input sl-input {
    min-width: 0; /* fix input width in Safari */
    flex: 1 1 auto;
  }

  .color-picker__user-input sl-button-group {
    margin-left: var(--sl-spacing-small);
  }

  .color-picker__user-input sl-button {
    min-width: 3.25rem;
    max-width: 3.25rem;
    font-size: 1rem;
  }

  .color-picker__swatches {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    grid-gap: 0.5rem;
    justify-items: center;
    border-top: solid 1px var(--sl-color-neutral-200);
    padding: var(--sl-spacing-small);
    forced-color-adjust: none;
  }

  .color-picker__swatch {
    position: relative;
    width: var(--swatch-size);
    height: var(--swatch-size);
    border-radius: var(--sl-border-radius-small);
  }

  .color-picker__swatch .color-picker__swatch-color {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border: solid 1px rgba(0, 0, 0, 0.125);
    border-radius: inherit;
    cursor: pointer;
  }

  .color-picker__swatch:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .color-picker__transparent-bg {
    background-image: linear-gradient(45deg, var(--sl-color-neutral-300) 25%, transparent 25%),
      linear-gradient(45deg, transparent 75%, var(--sl-color-neutral-300) 75%),
      linear-gradient(45deg, transparent 75%, var(--sl-color-neutral-300) 75%),
      linear-gradient(45deg, var(--sl-color-neutral-300) 25%, transparent 25%);
    background-size: 10px 10px;
    background-position:
      0 0,
      0 0,
      -5px -5px,
      5px 5px;
  }

  .color-picker--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .color-picker--disabled .color-picker__grid,
  .color-picker--disabled .color-picker__grid-handle,
  .color-picker--disabled .color-picker__slider,
  .color-picker--disabled .color-picker__slider-handle,
  .color-picker--disabled .color-picker__preview,
  .color-picker--disabled .color-picker__swatch,
  .color-picker--disabled .color-picker__swatch-color {
    pointer-events: none;
  }

  /*
   * Color dropdown
   */

  .color-dropdown::part(panel) {
    max-height: none;
    background-color: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-radius: var(--sl-border-radius-medium);
    overflow: visible;
  }

  .color-dropdown__trigger {
    display: inline-block;
    position: relative;
    background-color: transparent;
    border: none;
    cursor: pointer;
    forced-color-adjust: none;
  }

  .color-dropdown__trigger.color-dropdown__trigger--small {
    width: var(--sl-input-height-small);
    height: var(--sl-input-height-small);
    border-radius: var(--sl-border-radius-circle);
  }

  .color-dropdown__trigger.color-dropdown__trigger--medium {
    width: var(--sl-input-height-medium);
    height: var(--sl-input-height-medium);
    border-radius: var(--sl-border-radius-circle);
  }

  .color-dropdown__trigger.color-dropdown__trigger--large {
    width: var(--sl-input-height-large);
    height: var(--sl-input-height-large);
    border-radius: var(--sl-border-radius-circle);
  }

  .color-dropdown__trigger:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: inherit;
    background-color: currentColor;
    box-shadow:
      inset 0 0 0 2px var(--sl-input-border-color),
      inset 0 0 0 4px var(--sl-color-neutral-0);
  }

  .color-dropdown__trigger--empty:before {
    background-color: transparent;
  }

  .color-dropdown__trigger:focus-visible {
    outline: none;
  }

  .color-dropdown__trigger:focus-visible:not(.color-dropdown__trigger--disabled) {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .color-dropdown__trigger.color-dropdown__trigger--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.HSRY62XN.js
var SlButton = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.formControlController = new FormControlController(this, {
      assumeInteractionOn: ["click"]
    });
    this.hasSlotController = new HasSlotController(this, "[default]", "prefix", "suffix");
    this.localize = new LocalizeController2(this);
    this.hasFocus = false;
    this.invalid = false;
    this.title = "";
    this.variant = "default";
    this.size = "medium";
    this.caret = false;
    this.disabled = false;
    this.loading = false;
    this.outline = false;
    this.pill = false;
    this.circle = false;
    this.type = "button";
    this.name = "";
    this.value = "";
    this.href = "";
    this.rel = "noreferrer noopener";
  }
  /** Gets the validity state object */
  get validity() {
    if (this.isButton()) {
      return this.button.validity;
    }
    return validValidityState;
  }
  /** Gets the validation message */
  get validationMessage() {
    if (this.isButton()) {
      return this.button.validationMessage;
    }
    return "";
  }
  firstUpdated() {
    if (this.isButton()) {
      this.formControlController.updateValidity();
    }
  }
  handleBlur() {
    this.hasFocus = false;
    this.emit("sl-blur");
  }
  handleFocus() {
    this.hasFocus = true;
    this.emit("sl-focus");
  }
  handleClick() {
    if (this.type === "submit") {
      this.formControlController.submit(this);
    }
    if (this.type === "reset") {
      this.formControlController.reset(this);
    }
  }
  handleInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  isButton() {
    return this.href ? false : true;
  }
  isLink() {
    return this.href ? true : false;
  }
  handleDisabledChange() {
    if (this.isButton()) {
      this.formControlController.setValidity(this.disabled);
    }
  }
  /** Simulates a click on the button. */
  click() {
    this.button.click();
  }
  /** Sets focus on the button. */
  focus(options) {
    this.button.focus(options);
  }
  /** Removes focus from the button. */
  blur() {
    this.button.blur();
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    if (this.isButton()) {
      return this.button.checkValidity();
    }
    return true;
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    if (this.isButton()) {
      return this.button.reportValidity();
    }
    return true;
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message2) {
    if (this.isButton()) {
      this.button.setCustomValidity(message2);
      this.formControlController.updateValidity();
    }
  }
  render() {
    const isLink = this.isLink();
    const tag2 = isLink ? i7`a` : i7`button`;
    return u4`
      <${tag2}
        part="base"
        class=${e7({
      button: true,
      "button--default": this.variant === "default",
      "button--primary": this.variant === "primary",
      "button--success": this.variant === "success",
      "button--neutral": this.variant === "neutral",
      "button--warning": this.variant === "warning",
      "button--danger": this.variant === "danger",
      "button--text": this.variant === "text",
      "button--small": this.size === "small",
      "button--medium": this.size === "medium",
      "button--large": this.size === "large",
      "button--caret": this.caret,
      "button--circle": this.circle,
      "button--disabled": this.disabled,
      "button--focused": this.hasFocus,
      "button--loading": this.loading,
      "button--standard": !this.outline,
      "button--outline": this.outline,
      "button--pill": this.pill,
      "button--rtl": this.localize.dir() === "rtl",
      "button--has-label": this.hasSlotController.test("[default]"),
      "button--has-prefix": this.hasSlotController.test("prefix"),
      "button--has-suffix": this.hasSlotController.test("suffix")
    })}
        ?disabled=${o5(isLink ? void 0 : this.disabled)}
        type=${o5(isLink ? void 0 : this.type)}
        title=${this.title}
        name=${o5(isLink ? void 0 : this.name)}
        value=${o5(isLink ? void 0 : this.value)}
        href=${o5(isLink && !this.disabled ? this.href : void 0)}
        target=${o5(isLink ? this.target : void 0)}
        download=${o5(isLink ? this.download : void 0)}
        rel=${o5(isLink ? this.rel : void 0)}
        role=${o5(isLink ? void 0 : "button")}
        aria-disabled=${this.disabled ? "true" : "false"}
        tabindex=${this.disabled ? "-1" : "0"}
        @blur=${this.handleBlur}
        @focus=${this.handleFocus}
        @invalid=${this.isButton() ? this.handleInvalid : null}
        @click=${this.handleClick}
      >
        <slot name="prefix" part="prefix" class="button__prefix"></slot>
        <slot part="label" class="button__label"></slot>
        <slot name="suffix" part="suffix" class="button__suffix"></slot>
        ${this.caret ? u4` <sl-icon part="caret" class="button__caret" library="system" name="caret"></sl-icon> ` : ""}
        ${this.loading ? u4`<sl-spinner part="spinner"></sl-spinner>` : ""}
      </${tag2}>
    `;
  }
};
SlButton.styles = [component_styles_default, button_styles_default];
SlButton.dependencies = {
  "sl-icon": SlIcon,
  "sl-spinner": SlSpinner
};
__decorateClass([
  e5(".button")
], SlButton.prototype, "button", 2);
__decorateClass([
  r6()
], SlButton.prototype, "hasFocus", 2);
__decorateClass([
  r6()
], SlButton.prototype, "invalid", 2);
__decorateClass([
  n4()
], SlButton.prototype, "title", 2);
__decorateClass([
  n4({ reflect: true })
], SlButton.prototype, "variant", 2);
__decorateClass([
  n4({ reflect: true })
], SlButton.prototype, "size", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlButton.prototype, "caret", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlButton.prototype, "disabled", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlButton.prototype, "loading", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlButton.prototype, "outline", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlButton.prototype, "pill", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlButton.prototype, "circle", 2);
__decorateClass([
  n4()
], SlButton.prototype, "type", 2);
__decorateClass([
  n4()
], SlButton.prototype, "name", 2);
__decorateClass([
  n4()
], SlButton.prototype, "value", 2);
__decorateClass([
  n4()
], SlButton.prototype, "href", 2);
__decorateClass([
  n4()
], SlButton.prototype, "target", 2);
__decorateClass([
  n4()
], SlButton.prototype, "rel", 2);
__decorateClass([
  n4()
], SlButton.prototype, "download", 2);
__decorateClass([
  n4()
], SlButton.prototype, "form", 2);
__decorateClass([
  n4({ attribute: "formaction" })
], SlButton.prototype, "formAction", 2);
__decorateClass([
  n4({ attribute: "formenctype" })
], SlButton.prototype, "formEnctype", 2);
__decorateClass([
  n4({ attribute: "formmethod" })
], SlButton.prototype, "formMethod", 2);
__decorateClass([
  n4({ attribute: "formnovalidate", type: Boolean })
], SlButton.prototype, "formNoValidate", 2);
__decorateClass([
  n4({ attribute: "formtarget" })
], SlButton.prototype, "formTarget", 2);
__decorateClass([
  watch("disabled", { waitUntilFirstUpdate: true })
], SlButton.prototype, "handleDisabledChange", 1);

// node_modules/@ctrl/tinycolor/dist/module/util.js
function bound01(n10, max2) {
  if (isOnePointZero(n10)) {
    n10 = "100%";
  }
  const isPercent = isPercentage(n10);
  n10 = max2 === 360 ? n10 : Math.min(max2, Math.max(0, parseFloat(n10)));
  if (isPercent) {
    n10 = parseInt(String(n10 * max2), 10) / 100;
  }
  if (Math.abs(n10 - max2) < 1e-6) {
    return 1;
  }
  if (max2 === 360) {
    n10 = (n10 < 0 ? n10 % max2 + max2 : n10 % max2) / parseFloat(String(max2));
  } else {
    n10 = n10 % max2 / parseFloat(String(max2));
  }
  return n10;
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function isOnePointZero(n10) {
  return typeof n10 === "string" && n10.indexOf(".") !== -1 && parseFloat(n10) === 1;
}
function isPercentage(n10) {
  return typeof n10 === "string" && n10.indexOf("%") !== -1;
}
function boundAlpha(a4) {
  a4 = parseFloat(a4);
  if (isNaN(a4) || a4 < 0 || a4 > 1) {
    a4 = 1;
  }
  return a4;
}
function convertToPercentage(n10) {
  if (Number(n10) <= 1) {
    return `${Number(n10) * 100}%`;
  }
  return n10;
}
function pad2(c6) {
  return c6.length === 1 ? "0" + c6 : String(c6);
}

// node_modules/@ctrl/tinycolor/dist/module/conversion.js
function rgbToRgb(r10, g2, b3) {
  return {
    r: bound01(r10, 255) * 255,
    g: bound01(g2, 255) * 255,
    b: bound01(b3, 255) * 255
  };
}
function rgbToHsl(r10, g2, b3) {
  r10 = bound01(r10, 255);
  g2 = bound01(g2, 255);
  b3 = bound01(b3, 255);
  const max2 = Math.max(r10, g2, b3);
  const min2 = Math.min(r10, g2, b3);
  let h5 = 0;
  let s4 = 0;
  const l5 = (max2 + min2) / 2;
  if (max2 === min2) {
    s4 = 0;
    h5 = 0;
  } else {
    const d3 = max2 - min2;
    s4 = l5 > 0.5 ? d3 / (2 - max2 - min2) : d3 / (max2 + min2);
    switch (max2) {
      case r10:
        h5 = (g2 - b3) / d3 + (g2 < b3 ? 6 : 0);
        break;
      case g2:
        h5 = (b3 - r10) / d3 + 2;
        break;
      case b3:
        h5 = (r10 - g2) / d3 + 4;
        break;
      default:
        break;
    }
    h5 /= 6;
  }
  return { h: h5, s: s4, l: l5 };
}
function hue2rgb(p3, q, t6) {
  if (t6 < 0) {
    t6 += 1;
  }
  if (t6 > 1) {
    t6 -= 1;
  }
  if (t6 < 1 / 6) {
    return p3 + (q - p3) * (6 * t6);
  }
  if (t6 < 1 / 2) {
    return q;
  }
  if (t6 < 2 / 3) {
    return p3 + (q - p3) * (2 / 3 - t6) * 6;
  }
  return p3;
}
function hslToRgb(h5, s4, l5) {
  let r10;
  let g2;
  let b3;
  h5 = bound01(h5, 360);
  s4 = bound01(s4, 100);
  l5 = bound01(l5, 100);
  if (s4 === 0) {
    g2 = l5;
    b3 = l5;
    r10 = l5;
  } else {
    const q = l5 < 0.5 ? l5 * (1 + s4) : l5 + s4 - l5 * s4;
    const p3 = 2 * l5 - q;
    r10 = hue2rgb(p3, q, h5 + 1 / 3);
    g2 = hue2rgb(p3, q, h5);
    b3 = hue2rgb(p3, q, h5 - 1 / 3);
  }
  return { r: r10 * 255, g: g2 * 255, b: b3 * 255 };
}
function rgbToHsv(r10, g2, b3) {
  r10 = bound01(r10, 255);
  g2 = bound01(g2, 255);
  b3 = bound01(b3, 255);
  const max2 = Math.max(r10, g2, b3);
  const min2 = Math.min(r10, g2, b3);
  let h5 = 0;
  const v2 = max2;
  const d3 = max2 - min2;
  const s4 = max2 === 0 ? 0 : d3 / max2;
  if (max2 === min2) {
    h5 = 0;
  } else {
    switch (max2) {
      case r10:
        h5 = (g2 - b3) / d3 + (g2 < b3 ? 6 : 0);
        break;
      case g2:
        h5 = (b3 - r10) / d3 + 2;
        break;
      case b3:
        h5 = (r10 - g2) / d3 + 4;
        break;
      default:
        break;
    }
    h5 /= 6;
  }
  return { h: h5, s: s4, v: v2 };
}
function hsvToRgb(h5, s4, v2) {
  h5 = bound01(h5, 360) * 6;
  s4 = bound01(s4, 100);
  v2 = bound01(v2, 100);
  const i9 = Math.floor(h5);
  const f5 = h5 - i9;
  const p3 = v2 * (1 - s4);
  const q = v2 * (1 - f5 * s4);
  const t6 = v2 * (1 - (1 - f5) * s4);
  const mod = i9 % 6;
  const r10 = [v2, q, p3, p3, t6, v2][mod];
  const g2 = [t6, v2, v2, q, p3, p3][mod];
  const b3 = [p3, p3, t6, v2, v2, q][mod];
  return { r: r10 * 255, g: g2 * 255, b: b3 * 255 };
}
function rgbToHex(r10, g2, b3, allow3Char) {
  const hex = [
    pad2(Math.round(r10).toString(16)),
    pad2(Math.round(g2).toString(16)),
    pad2(Math.round(b3).toString(16))
  ];
  if (allow3Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1))) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
  }
  return hex.join("");
}
function rgbaToHex(r10, g2, b3, a4, allow4Char) {
  const hex = [
    pad2(Math.round(r10).toString(16)),
    pad2(Math.round(g2).toString(16)),
    pad2(Math.round(b3).toString(16)),
    pad2(convertDecimalToHex(a4))
  ];
  if (allow4Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1)) && hex[3].startsWith(hex[3].charAt(1))) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
  }
  return hex.join("");
}
function cmykToRgb(c6, m3, y3, k2) {
  const cConv = c6 / 100;
  const mConv = m3 / 100;
  const yConv = y3 / 100;
  const kConv = k2 / 100;
  const r10 = 255 * (1 - cConv) * (1 - kConv);
  const g2 = 255 * (1 - mConv) * (1 - kConv);
  const b3 = 255 * (1 - yConv) * (1 - kConv);
  return { r: r10, g: g2, b: b3 };
}
function rgbToCmyk(r10, g2, b3) {
  let c6 = 1 - r10 / 255;
  let m3 = 1 - g2 / 255;
  let y3 = 1 - b3 / 255;
  let k2 = Math.min(c6, m3, y3);
  if (k2 === 1) {
    c6 = 0;
    m3 = 0;
    y3 = 0;
  } else {
    c6 = (c6 - k2) / (1 - k2) * 100;
    m3 = (m3 - k2) / (1 - k2) * 100;
    y3 = (y3 - k2) / (1 - k2) * 100;
  }
  k2 *= 100;
  return {
    c: Math.round(c6),
    m: Math.round(m3),
    y: Math.round(y3),
    k: Math.round(k2)
  };
}
function convertDecimalToHex(d3) {
  return Math.round(parseFloat(d3) * 255).toString(16);
}
function convertHexToDecimal(h5) {
  return parseIntFromHex(h5) / 255;
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function numberInputToObject(color) {
  return {
    r: color >> 16,
    g: (color & 65280) >> 8,
    b: color & 255
  };
}

// node_modules/@ctrl/tinycolor/dist/module/css-color-names.js
var names = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  goldenrod: "#daa520",
  gold: "#ffd700",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavenderblush: "#fff0f5",
  lavender: "#e6e6fa",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};

// node_modules/@ctrl/tinycolor/dist/module/format-input.js
function inputToRGB(color) {
  let rgb = { r: 0, g: 0, b: 0 };
  let a4 = 1;
  let s4 = null;
  let v2 = null;
  let l5 = null;
  let ok = false;
  let format = false;
  if (typeof color === "string") {
    color = stringInputToObject(color);
  }
  if (typeof color === "object") {
    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
      rgb = rgbToRgb(color.r, color.g, color.b);
      ok = true;
      format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
      s4 = convertToPercentage(color.s);
      v2 = convertToPercentage(color.v);
      rgb = hsvToRgb(color.h, s4, v2);
      ok = true;
      format = "hsv";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
      s4 = convertToPercentage(color.s);
      l5 = convertToPercentage(color.l);
      rgb = hslToRgb(color.h, s4, l5);
      ok = true;
      format = "hsl";
    } else if (isValidCSSUnit(color.c) && isValidCSSUnit(color.m) && isValidCSSUnit(color.y) && isValidCSSUnit(color.k)) {
      rgb = cmykToRgb(color.c, color.m, color.y, color.k);
      ok = true;
      format = "cmyk";
    }
    if (Object.prototype.hasOwnProperty.call(color, "a")) {
      a4 = color.a;
    }
  }
  a4 = boundAlpha(a4);
  return {
    ok,
    format: color.format || format,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a: a4
  };
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
var PERMISSIVE_MATCH4 = (
  // eslint-disable-next-line prettier/prettier
  "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?"
);
var matchers = {
  CSS_UNIT: new RegExp(CSS_UNIT),
  rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
  rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
  hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
  hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
  hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
  hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
  cmyk: new RegExp("cmyk" + PERMISSIVE_MATCH4),
  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color) {
  color = color.trim().toLowerCase();
  if (color.length === 0) {
    return false;
  }
  let named = false;
  if (names[color]) {
    color = names[color];
    named = true;
  } else if (color === "transparent") {
    return { r: 0, g: 0, b: 0, a: 0, format: "name" };
  }
  let match = matchers.rgb.exec(color);
  if (match) {
    return { r: match[1], g: match[2], b: match[3] };
  }
  match = matchers.rgba.exec(color);
  if (match) {
    return { r: match[1], g: match[2], b: match[3], a: match[4] };
  }
  match = matchers.hsl.exec(color);
  if (match) {
    return { h: match[1], s: match[2], l: match[3] };
  }
  match = matchers.hsla.exec(color);
  if (match) {
    return { h: match[1], s: match[2], l: match[3], a: match[4] };
  }
  match = matchers.hsv.exec(color);
  if (match) {
    return { h: match[1], s: match[2], v: match[3] };
  }
  match = matchers.hsva.exec(color);
  if (match) {
    return { h: match[1], s: match[2], v: match[3], a: match[4] };
  }
  match = matchers.cmyk.exec(color);
  if (match) {
    return {
      c: match[1],
      m: match[2],
      y: match[3],
      k: match[4]
    };
  }
  match = matchers.hex8.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex6.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named ? "name" : "hex"
    };
  }
  match = matchers.hex4.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      a: convertHexToDecimal(match[4] + match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex3.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function isValidCSSUnit(color) {
  if (typeof color === "number") {
    return !Number.isNaN(color);
  }
  return matchers.CSS_UNIT.test(color);
}

// node_modules/@ctrl/tinycolor/dist/module/index.js
var TinyColor = class _TinyColor {
  constructor(color = "", opts = {}) {
    if (color instanceof _TinyColor) {
      return color;
    }
    if (typeof color === "number") {
      color = numberInputToObject(color);
    }
    this.originalInput = color;
    const rgb = inputToRGB(color);
    this.originalInput = color;
    this.r = rgb.r;
    this.g = rgb.g;
    this.b = rgb.b;
    this.a = rgb.a;
    this.roundA = Math.round(100 * this.a) / 100;
    this.format = opts.format ?? rgb.format;
    this.gradientType = opts.gradientType;
    if (this.r < 1) {
      this.r = Math.round(this.r);
    }
    if (this.g < 1) {
      this.g = Math.round(this.g);
    }
    if (this.b < 1) {
      this.b = Math.round(this.b);
    }
    this.isValid = rgb.ok;
  }
  isDark() {
    return this.getBrightness() < 128;
  }
  isLight() {
    return !this.isDark();
  }
  /**
   * Returns the perceived brightness of the color, from 0-255.
   */
  getBrightness() {
    const rgb = this.toRgb();
    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
  }
  /**
   * Returns the perceived luminance of a color, from 0-1.
   */
  getLuminance() {
    const rgb = this.toRgb();
    let R2;
    let G2;
    let B2;
    const RsRGB = rgb.r / 255;
    const GsRGB = rgb.g / 255;
    const BsRGB = rgb.b / 255;
    if (RsRGB <= 0.03928) {
      R2 = RsRGB / 12.92;
    } else {
      R2 = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
    }
    if (GsRGB <= 0.03928) {
      G2 = GsRGB / 12.92;
    } else {
      G2 = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
    }
    if (BsRGB <= 0.03928) {
      B2 = BsRGB / 12.92;
    } else {
      B2 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
    }
    return 0.2126 * R2 + 0.7152 * G2 + 0.0722 * B2;
  }
  /**
   * Returns the alpha value of a color, from 0-1.
   */
  getAlpha() {
    return this.a;
  }
  /**
   * Sets the alpha value on the current color.
   *
   * @param alpha - The new alpha value. The accepted range is 0-1.
   */
  setAlpha(alpha) {
    this.a = boundAlpha(alpha);
    this.roundA = Math.round(100 * this.a) / 100;
    return this;
  }
  /**
   * Returns whether the color is monochrome.
   */
  isMonochrome() {
    const { s: s4 } = this.toHsl();
    return s4 === 0;
  }
  /**
   * Returns the object as a HSVA object.
   */
  toHsv() {
    const hsv = rgbToHsv(this.r, this.g, this.b);
    return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
  }
  /**
   * Returns the hsva values interpolated into a string with the following format:
   * "hsva(xxx, xxx, xxx, xx)".
   */
  toHsvString() {
    const hsv = rgbToHsv(this.r, this.g, this.b);
    const h5 = Math.round(hsv.h * 360);
    const s4 = Math.round(hsv.s * 100);
    const v2 = Math.round(hsv.v * 100);
    return this.a === 1 ? `hsv(${h5}, ${s4}%, ${v2}%)` : `hsva(${h5}, ${s4}%, ${v2}%, ${this.roundA})`;
  }
  /**
   * Returns the object as a HSLA object.
   */
  toHsl() {
    const hsl = rgbToHsl(this.r, this.g, this.b);
    return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
  }
  /**
   * Returns the hsla values interpolated into a string with the following format:
   * "hsla(xxx, xxx, xxx, xx)".
   */
  toHslString() {
    const hsl = rgbToHsl(this.r, this.g, this.b);
    const h5 = Math.round(hsl.h * 360);
    const s4 = Math.round(hsl.s * 100);
    const l5 = Math.round(hsl.l * 100);
    return this.a === 1 ? `hsl(${h5}, ${s4}%, ${l5}%)` : `hsla(${h5}, ${s4}%, ${l5}%, ${this.roundA})`;
  }
  /**
   * Returns the hex value of the color.
   * @param allow3Char will shorten hex value to 3 char if possible
   */
  toHex(allow3Char = false) {
    return rgbToHex(this.r, this.g, this.b, allow3Char);
  }
  /**
   * Returns the hex value of the color -with a # prefixed.
   * @param allow3Char will shorten hex value to 3 char if possible
   */
  toHexString(allow3Char = false) {
    return "#" + this.toHex(allow3Char);
  }
  /**
   * Returns the hex 8 value of the color.
   * @param allow4Char will shorten hex value to 4 char if possible
   */
  toHex8(allow4Char = false) {
    return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
  }
  /**
   * Returns the hex 8 value of the color -with a # prefixed.
   * @param allow4Char will shorten hex value to 4 char if possible
   */
  toHex8String(allow4Char = false) {
    return "#" + this.toHex8(allow4Char);
  }
  /**
   * Returns the shorter hex value of the color depends on its alpha -with a # prefixed.
   * @param allowShortChar will shorten hex value to 3 or 4 char if possible
   */
  toHexShortString(allowShortChar = false) {
    return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
  }
  /**
   * Returns the object as a RGBA object.
   */
  toRgb() {
    return {
      r: Math.round(this.r),
      g: Math.round(this.g),
      b: Math.round(this.b),
      a: this.a
    };
  }
  /**
   * Returns the RGBA values interpolated into a string with the following format:
   * "RGBA(xxx, xxx, xxx, xx)".
   */
  toRgbString() {
    const r10 = Math.round(this.r);
    const g2 = Math.round(this.g);
    const b3 = Math.round(this.b);
    return this.a === 1 ? `rgb(${r10}, ${g2}, ${b3})` : `rgba(${r10}, ${g2}, ${b3}, ${this.roundA})`;
  }
  /**
   * Returns the object as a RGBA object.
   */
  toPercentageRgb() {
    const fmt = (x2) => `${Math.round(bound01(x2, 255) * 100)}%`;
    return {
      r: fmt(this.r),
      g: fmt(this.g),
      b: fmt(this.b),
      a: this.a
    };
  }
  /**
   * Returns the RGBA relative values interpolated into a string
   */
  toPercentageRgbString() {
    const rnd = (x2) => Math.round(bound01(x2, 255) * 100);
    return this.a === 1 ? `rgb(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%)` : `rgba(${rnd(this.r)}%, ${rnd(this.g)}%, ${rnd(this.b)}%, ${this.roundA})`;
  }
  toCmyk() {
    return {
      ...rgbToCmyk(this.r, this.g, this.b)
    };
  }
  toCmykString() {
    const { c: c6, m: m3, y: y3, k: k2 } = rgbToCmyk(this.r, this.g, this.b);
    return `cmyk(${c6}, ${m3}, ${y3}, ${k2})`;
  }
  /**
   * The 'real' name of the color -if there is one.
   */
  toName() {
    if (this.a === 0) {
      return "transparent";
    }
    if (this.a < 1) {
      return false;
    }
    const hex = "#" + rgbToHex(this.r, this.g, this.b, false);
    for (const [key, value] of Object.entries(names)) {
      if (hex === value) {
        return key;
      }
    }
    return false;
  }
  toString(format) {
    const formatSet = Boolean(format);
    format = format ?? this.format;
    let formattedString = false;
    const hasAlpha = this.a < 1 && this.a >= 0;
    const needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith("hex") || format === "name");
    if (needsAlphaFormat) {
      if (format === "name" && this.a === 0) {
        return this.toName();
      }
      return this.toRgbString();
    }
    if (format === "rgb") {
      formattedString = this.toRgbString();
    }
    if (format === "prgb") {
      formattedString = this.toPercentageRgbString();
    }
    if (format === "hex" || format === "hex6") {
      formattedString = this.toHexString();
    }
    if (format === "hex3") {
      formattedString = this.toHexString(true);
    }
    if (format === "hex4") {
      formattedString = this.toHex8String(true);
    }
    if (format === "hex8") {
      formattedString = this.toHex8String();
    }
    if (format === "name") {
      formattedString = this.toName();
    }
    if (format === "hsl") {
      formattedString = this.toHslString();
    }
    if (format === "hsv") {
      formattedString = this.toHsvString();
    }
    if (format === "cmyk") {
      formattedString = this.toCmykString();
    }
    return formattedString || this.toHexString();
  }
  toNumber() {
    return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
  }
  clone() {
    return new _TinyColor(this.toString());
  }
  /**
   * Lighten the color a given amount. Providing 100 will always return white.
   * @param amount - valid between 1-100
   */
  lighten(amount = 10) {
    const hsl = this.toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return new _TinyColor(hsl);
  }
  /**
   * Brighten the color a given amount, from 0 to 100.
   * @param amount - valid between 1-100
   */
  brighten(amount = 10) {
    const rgb = this.toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return new _TinyColor(rgb);
  }
  /**
   * Darken the color a given amount, from 0 to 100.
   * Providing 100 will always return black.
   * @param amount - valid between 1-100
   */
  darken(amount = 10) {
    const hsl = this.toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return new _TinyColor(hsl);
  }
  /**
   * Mix the color with pure white, from 0 to 100.
   * Providing 0 will do nothing, providing 100 will always return white.
   * @param amount - valid between 1-100
   */
  tint(amount = 10) {
    return this.mix("white", amount);
  }
  /**
   * Mix the color with pure black, from 0 to 100.
   * Providing 0 will do nothing, providing 100 will always return black.
   * @param amount - valid between 1-100
   */
  shade(amount = 10) {
    return this.mix("black", amount);
  }
  /**
   * Desaturate the color a given amount, from 0 to 100.
   * Providing 100 will is the same as calling greyscale
   * @param amount - valid between 1-100
   */
  desaturate(amount = 10) {
    const hsl = this.toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return new _TinyColor(hsl);
  }
  /**
   * Saturate the color a given amount, from 0 to 100.
   * @param amount - valid between 1-100
   */
  saturate(amount = 10) {
    const hsl = this.toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return new _TinyColor(hsl);
  }
  /**
   * Completely desaturates a color into greyscale.
   * Same as calling `desaturate(100)`
   */
  greyscale() {
    return this.desaturate(100);
  }
  /**
   * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
   * Values outside of this range will be wrapped into this range.
   */
  spin(amount) {
    const hsl = this.toHsl();
    const hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return new _TinyColor(hsl);
  }
  /**
   * Mix the current color a given amount with another color, from 0 to 100.
   * 0 means no mixing (return current color).
   */
  mix(color, amount = 50) {
    const rgb1 = this.toRgb();
    const rgb2 = new _TinyColor(color).toRgb();
    const p3 = amount / 100;
    const rgba = {
      r: (rgb2.r - rgb1.r) * p3 + rgb1.r,
      g: (rgb2.g - rgb1.g) * p3 + rgb1.g,
      b: (rgb2.b - rgb1.b) * p3 + rgb1.b,
      a: (rgb2.a - rgb1.a) * p3 + rgb1.a
    };
    return new _TinyColor(rgba);
  }
  analogous(results = 6, slices = 30) {
    const hsl = this.toHsl();
    const part = 360 / slices;
    const ret = [this];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(new _TinyColor(hsl));
    }
    return ret;
  }
  /**
   * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js
   */
  complement() {
    const hsl = this.toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return new _TinyColor(hsl);
  }
  monochromatic(results = 6) {
    const hsv = this.toHsv();
    const { h: h5 } = hsv;
    const { s: s4 } = hsv;
    let { v: v2 } = hsv;
    const res = [];
    const modification = 1 / results;
    while (results--) {
      res.push(new _TinyColor({ h: h5, s: s4, v: v2 }));
      v2 = (v2 + modification) % 1;
    }
    return res;
  }
  splitcomplement() {
    const hsl = this.toHsl();
    const { h: h5 } = hsl;
    return [
      this,
      new _TinyColor({ h: (h5 + 72) % 360, s: hsl.s, l: hsl.l }),
      new _TinyColor({ h: (h5 + 216) % 360, s: hsl.s, l: hsl.l })
    ];
  }
  /**
   * Compute how the color would appear on a background
   */
  onBackground(background) {
    const fg = this.toRgb();
    const bg = new _TinyColor(background).toRgb();
    const alpha = fg.a + bg.a * (1 - fg.a);
    return new _TinyColor({
      r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,
      g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,
      b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,
      a: alpha
    });
  }
  /**
   * Alias for `polyad(3)`
   */
  triad() {
    return this.polyad(3);
  }
  /**
   * Alias for `polyad(4)`
   */
  tetrad() {
    return this.polyad(4);
  }
  /**
   * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)
   * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...
   */
  polyad(n10) {
    const hsl = this.toHsl();
    const { h: h5 } = hsl;
    const result = [this];
    const increment = 360 / n10;
    for (let i9 = 1; i9 < n10; i9++) {
      result.push(new _TinyColor({ h: (h5 + i9 * increment) % 360, s: hsl.s, l: hsl.l }));
    }
    return result;
  }
  /**
   * compare color vs current color
   */
  equals(color) {
    const comparedColor = new _TinyColor(color);
    if (this.format === "cmyk" || comparedColor.format === "cmyk") {
      return this.toCmykString() === comparedColor.toCmykString();
    }
    return this.toRgbString() === comparedColor.toRgbString();
  }
};

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.OWWKE5SK.js
var hasEyeDropper = "EyeDropper" in window;
var SlColorPicker = class extends ShoelaceElement {
  constructor() {
    super();
    this.formControlController = new FormControlController(this);
    this.isSafeValue = false;
    this.localize = new LocalizeController2(this);
    this.hasFocus = false;
    this.isDraggingGridHandle = false;
    this.isEmpty = false;
    this.inputValue = "";
    this.hue = 0;
    this.saturation = 100;
    this.brightness = 100;
    this.alpha = 100;
    this.value = "";
    this.defaultValue = "";
    this.label = "";
    this.format = "hex";
    this.inline = false;
    this.size = "medium";
    this.noFormatToggle = false;
    this.name = "";
    this.disabled = false;
    this.hoist = false;
    this.opacity = false;
    this.uppercase = false;
    this.swatches = "";
    this.form = "";
    this.required = false;
    this.handleFocusIn = () => {
      this.hasFocus = true;
      this.emit("sl-focus");
    };
    this.handleFocusOut = () => {
      this.hasFocus = false;
      this.emit("sl-blur");
    };
    this.addEventListener("focusin", this.handleFocusIn);
    this.addEventListener("focusout", this.handleFocusOut);
  }
  /** Gets the validity state object */
  get validity() {
    return this.input.validity;
  }
  /** Gets the validation message */
  get validationMessage() {
    return this.input.validationMessage;
  }
  firstUpdated() {
    this.input.updateComplete.then(() => {
      this.formControlController.updateValidity();
    });
  }
  handleCopy() {
    this.input.select();
    document.execCommand("copy");
    this.previewButton.focus();
    this.previewButton.classList.add("color-picker__preview-color--copied");
    this.previewButton.addEventListener("animationend", () => {
      this.previewButton.classList.remove("color-picker__preview-color--copied");
    });
  }
  handleFormatToggle() {
    const formats = ["hex", "rgb", "hsl", "hsv"];
    const nextIndex = (formats.indexOf(this.format) + 1) % formats.length;
    this.format = formats[nextIndex];
    this.setColor(this.value);
    this.emit("sl-change");
    this.emit("sl-input");
  }
  handleAlphaDrag(event) {
    const container = this.shadowRoot.querySelector(".color-picker__slider.color-picker__alpha");
    const handle = container.querySelector(".color-picker__slider-handle");
    const { width } = container.getBoundingClientRect();
    let initialValue = this.value;
    let currentValue = this.value;
    handle.focus();
    event.preventDefault();
    drag(container, {
      onMove: (x2) => {
        this.alpha = clamp2(x2 / width * 100, 0, 100);
        this.syncValues();
        if (this.value !== currentValue) {
          currentValue = this.value;
          this.emit("sl-input");
        }
      },
      onStop: () => {
        if (this.value !== initialValue) {
          initialValue = this.value;
          this.emit("sl-change");
        }
      },
      initialEvent: event
    });
  }
  handleHueDrag(event) {
    const container = this.shadowRoot.querySelector(".color-picker__slider.color-picker__hue");
    const handle = container.querySelector(".color-picker__slider-handle");
    const { width } = container.getBoundingClientRect();
    let initialValue = this.value;
    let currentValue = this.value;
    handle.focus();
    event.preventDefault();
    drag(container, {
      onMove: (x2) => {
        this.hue = clamp2(x2 / width * 360, 0, 360);
        this.syncValues();
        if (this.value !== currentValue) {
          currentValue = this.value;
          this.emit("sl-input");
        }
      },
      onStop: () => {
        if (this.value !== initialValue) {
          initialValue = this.value;
          this.emit("sl-change");
        }
      },
      initialEvent: event
    });
  }
  handleGridDrag(event) {
    const grid = this.shadowRoot.querySelector(".color-picker__grid");
    const handle = grid.querySelector(".color-picker__grid-handle");
    const { width, height } = grid.getBoundingClientRect();
    let initialValue = this.value;
    let currentValue = this.value;
    handle.focus();
    event.preventDefault();
    this.isDraggingGridHandle = true;
    drag(grid, {
      onMove: (x2, y3) => {
        this.saturation = clamp2(x2 / width * 100, 0, 100);
        this.brightness = clamp2(100 - y3 / height * 100, 0, 100);
        this.syncValues();
        if (this.value !== currentValue) {
          currentValue = this.value;
          this.emit("sl-input");
        }
      },
      onStop: () => {
        this.isDraggingGridHandle = false;
        if (this.value !== initialValue) {
          initialValue = this.value;
          this.emit("sl-change");
        }
      },
      initialEvent: event
    });
  }
  handleAlphaKeyDown(event) {
    const increment = event.shiftKey ? 10 : 1;
    const oldValue = this.value;
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      this.alpha = clamp2(this.alpha - increment, 0, 100);
      this.syncValues();
    }
    if (event.key === "ArrowRight") {
      event.preventDefault();
      this.alpha = clamp2(this.alpha + increment, 0, 100);
      this.syncValues();
    }
    if (event.key === "Home") {
      event.preventDefault();
      this.alpha = 0;
      this.syncValues();
    }
    if (event.key === "End") {
      event.preventDefault();
      this.alpha = 100;
      this.syncValues();
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleHueKeyDown(event) {
    const increment = event.shiftKey ? 10 : 1;
    const oldValue = this.value;
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      this.hue = clamp2(this.hue - increment, 0, 360);
      this.syncValues();
    }
    if (event.key === "ArrowRight") {
      event.preventDefault();
      this.hue = clamp2(this.hue + increment, 0, 360);
      this.syncValues();
    }
    if (event.key === "Home") {
      event.preventDefault();
      this.hue = 0;
      this.syncValues();
    }
    if (event.key === "End") {
      event.preventDefault();
      this.hue = 360;
      this.syncValues();
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleGridKeyDown(event) {
    const increment = event.shiftKey ? 10 : 1;
    const oldValue = this.value;
    if (event.key === "ArrowLeft") {
      event.preventDefault();
      this.saturation = clamp2(this.saturation - increment, 0, 100);
      this.syncValues();
    }
    if (event.key === "ArrowRight") {
      event.preventDefault();
      this.saturation = clamp2(this.saturation + increment, 0, 100);
      this.syncValues();
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      this.brightness = clamp2(this.brightness + increment, 0, 100);
      this.syncValues();
    }
    if (event.key === "ArrowDown") {
      event.preventDefault();
      this.brightness = clamp2(this.brightness - increment, 0, 100);
      this.syncValues();
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleInputChange(event) {
    const target = event.target;
    const oldValue = this.value;
    event.stopPropagation();
    if (this.input.value) {
      this.setColor(target.value);
      target.value = this.value;
    } else {
      this.value = "";
    }
    if (this.value !== oldValue) {
      this.emit("sl-change");
      this.emit("sl-input");
    }
  }
  handleInputInput(event) {
    this.formControlController.updateValidity();
    event.stopPropagation();
  }
  handleInputKeyDown(event) {
    if (event.key === "Enter") {
      const oldValue = this.value;
      if (this.input.value) {
        this.setColor(this.input.value);
        this.input.value = this.value;
        if (this.value !== oldValue) {
          this.emit("sl-change");
          this.emit("sl-input");
        }
        setTimeout(() => this.input.select());
      } else {
        this.hue = 0;
      }
    }
  }
  handleInputInvalid(event) {
    this.formControlController.setValidity(false);
    this.formControlController.emitInvalidEvent(event);
  }
  handleTouchMove(event) {
    event.preventDefault();
  }
  parseColor(colorString) {
    const color = new TinyColor(colorString);
    if (!color.isValid) {
      return null;
    }
    const hslColor = color.toHsl();
    const hsl = {
      h: hslColor.h,
      s: hslColor.s * 100,
      l: hslColor.l * 100,
      a: hslColor.a
    };
    const rgb = color.toRgb();
    const hex = color.toHexString();
    const hexa = color.toHex8String();
    const hsvColor = color.toHsv();
    const hsv = {
      h: hsvColor.h,
      s: hsvColor.s * 100,
      v: hsvColor.v * 100,
      a: hsvColor.a
    };
    return {
      hsl: {
        h: hsl.h,
        s: hsl.s,
        l: hsl.l,
        string: this.setLetterCase(`hsl(${Math.round(hsl.h)}, ${Math.round(hsl.s)}%, ${Math.round(hsl.l)}%)`)
      },
      hsla: {
        h: hsl.h,
        s: hsl.s,
        l: hsl.l,
        a: hsl.a,
        string: this.setLetterCase(
          `hsla(${Math.round(hsl.h)}, ${Math.round(hsl.s)}%, ${Math.round(hsl.l)}%, ${hsl.a.toFixed(2).toString()})`
        )
      },
      hsv: {
        h: hsv.h,
        s: hsv.s,
        v: hsv.v,
        string: this.setLetterCase(`hsv(${Math.round(hsv.h)}, ${Math.round(hsv.s)}%, ${Math.round(hsv.v)}%)`)
      },
      hsva: {
        h: hsv.h,
        s: hsv.s,
        v: hsv.v,
        a: hsv.a,
        string: this.setLetterCase(
          `hsva(${Math.round(hsv.h)}, ${Math.round(hsv.s)}%, ${Math.round(hsv.v)}%, ${hsv.a.toFixed(2).toString()})`
        )
      },
      rgb: {
        r: rgb.r,
        g: rgb.g,
        b: rgb.b,
        string: this.setLetterCase(`rgb(${Math.round(rgb.r)}, ${Math.round(rgb.g)}, ${Math.round(rgb.b)})`)
      },
      rgba: {
        r: rgb.r,
        g: rgb.g,
        b: rgb.b,
        a: rgb.a,
        string: this.setLetterCase(
          `rgba(${Math.round(rgb.r)}, ${Math.round(rgb.g)}, ${Math.round(rgb.b)}, ${rgb.a.toFixed(2).toString()})`
        )
      },
      hex: this.setLetterCase(hex),
      hexa: this.setLetterCase(hexa)
    };
  }
  setColor(colorString) {
    const newColor = this.parseColor(colorString);
    if (newColor === null) {
      return false;
    }
    this.hue = newColor.hsva.h;
    this.saturation = newColor.hsva.s;
    this.brightness = newColor.hsva.v;
    this.alpha = this.opacity ? newColor.hsva.a * 100 : 100;
    this.syncValues();
    return true;
  }
  setLetterCase(string2) {
    if (typeof string2 !== "string") {
      return "";
    }
    return this.uppercase ? string2.toUpperCase() : string2.toLowerCase();
  }
  async syncValues() {
    const currentColor = this.parseColor(
      `hsva(${this.hue}, ${this.saturation}%, ${this.brightness}%, ${this.alpha / 100})`
    );
    if (currentColor === null) {
      return;
    }
    if (this.format === "hsl") {
      this.inputValue = this.opacity ? currentColor.hsla.string : currentColor.hsl.string;
    } else if (this.format === "rgb") {
      this.inputValue = this.opacity ? currentColor.rgba.string : currentColor.rgb.string;
    } else if (this.format === "hsv") {
      this.inputValue = this.opacity ? currentColor.hsva.string : currentColor.hsv.string;
    } else {
      this.inputValue = this.opacity ? currentColor.hexa : currentColor.hex;
    }
    this.isSafeValue = true;
    this.value = this.inputValue;
    await this.updateComplete;
    this.isSafeValue = false;
  }
  handleAfterHide() {
    this.previewButton.classList.remove("color-picker__preview-color--copied");
  }
  handleEyeDropper() {
    if (!hasEyeDropper) {
      return;
    }
    const eyeDropper = new EyeDropper();
    eyeDropper.open().then((colorSelectionResult) => {
      const oldValue = this.value;
      this.setColor(colorSelectionResult.sRGBHex);
      if (this.value !== oldValue) {
        this.emit("sl-change");
        this.emit("sl-input");
      }
    }).catch(() => {
    });
  }
  selectSwatch(color) {
    const oldValue = this.value;
    if (!this.disabled) {
      this.setColor(color);
      if (this.value !== oldValue) {
        this.emit("sl-change");
        this.emit("sl-input");
      }
    }
  }
  /** Generates a hex string from HSV values. Hue must be 0-360. All other arguments must be 0-100. */
  getHexString(hue, saturation, brightness, alpha = 100) {
    const color = new TinyColor(`hsva(${hue}, ${saturation}%, ${brightness}%, ${alpha / 100})`);
    if (!color.isValid) {
      return "";
    }
    return color.toHex8String();
  }
  // Prevents nested components from leaking events
  stopNestedEventPropagation(event) {
    event.stopImmediatePropagation();
  }
  handleFormatChange() {
    this.syncValues();
  }
  handleOpacityChange() {
    this.alpha = 100;
  }
  handleValueChange(oldValue, newValue) {
    this.isEmpty = !newValue;
    if (!newValue) {
      this.hue = 0;
      this.saturation = 0;
      this.brightness = 100;
      this.alpha = 100;
    }
    if (!this.isSafeValue) {
      const newColor = this.parseColor(newValue);
      if (newColor !== null) {
        this.inputValue = this.value;
        this.hue = newColor.hsva.h;
        this.saturation = newColor.hsva.s;
        this.brightness = newColor.hsva.v;
        this.alpha = newColor.hsva.a * 100;
        this.syncValues();
      } else {
        this.inputValue = oldValue != null ? oldValue : "";
      }
    }
  }
  /** Sets focus on the color picker. */
  focus(options) {
    if (this.inline) {
      this.base.focus(options);
    } else {
      this.trigger.focus(options);
    }
  }
  /** Removes focus from the color picker. */
  blur() {
    var _a;
    const elementToBlur = this.inline ? this.base : this.trigger;
    if (this.hasFocus) {
      elementToBlur.focus({ preventScroll: true });
      elementToBlur.blur();
    }
    if ((_a = this.dropdown) == null ? void 0 : _a.open) {
      this.dropdown.hide();
    }
  }
  /** Returns the current value as a string in the specified format. */
  getFormattedValue(format = "hex") {
    const currentColor = this.parseColor(
      `hsva(${this.hue}, ${this.saturation}%, ${this.brightness}%, ${this.alpha / 100})`
    );
    if (currentColor === null) {
      return "";
    }
    switch (format) {
      case "hex":
        return currentColor.hex;
      case "hexa":
        return currentColor.hexa;
      case "rgb":
        return currentColor.rgb.string;
      case "rgba":
        return currentColor.rgba.string;
      case "hsl":
        return currentColor.hsl.string;
      case "hsla":
        return currentColor.hsla.string;
      case "hsv":
        return currentColor.hsv.string;
      case "hsva":
        return currentColor.hsva.string;
      default:
        return "";
    }
  }
  /** Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid. */
  checkValidity() {
    return this.input.checkValidity();
  }
  /** Gets the associated form, if one exists. */
  getForm() {
    return this.formControlController.getForm();
  }
  /** Checks for validity and shows the browser's validation message if the control is invalid. */
  reportValidity() {
    if (!this.inline && !this.validity.valid) {
      this.dropdown.show();
      this.addEventListener("sl-after-show", () => this.input.reportValidity(), { once: true });
      if (!this.disabled) {
        this.formControlController.emitInvalidEvent();
      }
      return false;
    }
    return this.input.reportValidity();
  }
  /** Sets a custom validation message. Pass an empty string to restore validity. */
  setCustomValidity(message2) {
    this.input.setCustomValidity(message2);
    this.formControlController.updateValidity();
  }
  render() {
    const gridHandleX = this.saturation;
    const gridHandleY = 100 - this.brightness;
    const swatches = Array.isArray(this.swatches) ? this.swatches : this.swatches.split(";").filter((color) => color.trim() !== "");
    const colorPicker = x`
      <div
        part="base"
        class=${e7({
      "color-picker": true,
      "color-picker--inline": this.inline,
      "color-picker--disabled": this.disabled,
      "color-picker--focused": this.hasFocus
    })}
        aria-disabled=${this.disabled ? "true" : "false"}
        aria-labelledby="label"
        tabindex=${this.inline ? "0" : "-1"}
      >
        ${this.inline ? x`
              <sl-visually-hidden id="label">
                <slot name="label">${this.label}</slot>
              </sl-visually-hidden>
            ` : null}

        <div
          part="grid"
          class="color-picker__grid"
          style=${o7({ backgroundColor: this.getHexString(this.hue, 100, 100) })}
          @pointerdown=${this.handleGridDrag}
          @touchmove=${this.handleTouchMove}
        >
          <span
            part="grid-handle"
            class=${e7({
      "color-picker__grid-handle": true,
      "color-picker__grid-handle--dragging": this.isDraggingGridHandle
    })}
            style=${o7({
      top: `${gridHandleY}%`,
      left: `${gridHandleX}%`,
      backgroundColor: this.getHexString(this.hue, this.saturation, this.brightness, this.alpha)
    })}
            role="application"
            aria-label="HSV"
            tabindex=${o5(this.disabled ? void 0 : "0")}
            @keydown=${this.handleGridKeyDown}
          ></span>
        </div>

        <div class="color-picker__controls">
          <div class="color-picker__sliders">
            <div
              part="slider hue-slider"
              class="color-picker__hue color-picker__slider"
              @pointerdown=${this.handleHueDrag}
              @touchmove=${this.handleTouchMove}
            >
              <span
                part="slider-handle hue-slider-handle"
                class="color-picker__slider-handle"
                style=${o7({
      left: `${this.hue === 0 ? 0 : 100 / (360 / this.hue)}%`
    })}
                role="slider"
                aria-label="hue"
                aria-orientation="horizontal"
                aria-valuemin="0"
                aria-valuemax="360"
                aria-valuenow=${`${Math.round(this.hue)}`}
                tabindex=${o5(this.disabled ? void 0 : "0")}
                @keydown=${this.handleHueKeyDown}
              ></span>
            </div>

            ${this.opacity ? x`
                  <div
                    part="slider opacity-slider"
                    class="color-picker__alpha color-picker__slider color-picker__transparent-bg"
                    @pointerdown="${this.handleAlphaDrag}"
                    @touchmove=${this.handleTouchMove}
                  >
                    <div
                      class="color-picker__alpha-gradient"
                      style=${o7({
      backgroundImage: `linear-gradient(
                          to right,
                          ${this.getHexString(this.hue, this.saturation, this.brightness, 0)} 0%,
                          ${this.getHexString(this.hue, this.saturation, this.brightness, 100)} 100%
                        )`
    })}
                    ></div>
                    <span
                      part="slider-handle opacity-slider-handle"
                      class="color-picker__slider-handle"
                      style=${o7({
      left: `${this.alpha}%`
    })}
                      role="slider"
                      aria-label="alpha"
                      aria-orientation="horizontal"
                      aria-valuemin="0"
                      aria-valuemax="100"
                      aria-valuenow=${Math.round(this.alpha)}
                      tabindex=${o5(this.disabled ? void 0 : "0")}
                      @keydown=${this.handleAlphaKeyDown}
                    ></span>
                  </div>
                ` : ""}
          </div>

          <button
            type="button"
            part="preview"
            class="color-picker__preview color-picker__transparent-bg"
            aria-label=${this.localize.term("copy")}
            style=${o7({
      "--preview-color": this.getHexString(this.hue, this.saturation, this.brightness, this.alpha)
    })}
            @click=${this.handleCopy}
          ></button>
        </div>

        <div class="color-picker__user-input" aria-live="polite">
          <sl-input
            part="input"
            type="text"
            name=${this.name}
            autocomplete="off"
            autocorrect="off"
            autocapitalize="off"
            spellcheck="false"
            value=${this.isEmpty ? "" : this.inputValue}
            ?required=${this.required}
            ?disabled=${this.disabled}
            aria-label=${this.localize.term("currentValue")}
            @keydown=${this.handleInputKeyDown}
            @sl-change=${this.handleInputChange}
            @sl-input=${this.handleInputInput}
            @sl-invalid=${this.handleInputInvalid}
            @sl-blur=${this.stopNestedEventPropagation}
            @sl-focus=${this.stopNestedEventPropagation}
          ></sl-input>

          <sl-button-group>
            ${!this.noFormatToggle ? x`
                  <sl-button
                    part="format-button"
                    aria-label=${this.localize.term("toggleColorFormat")}
                    exportparts="
                      base:format-button__base,
                      prefix:format-button__prefix,
                      label:format-button__label,
                      suffix:format-button__suffix,
                      caret:format-button__caret
                    "
                    @click=${this.handleFormatToggle}
                    @sl-blur=${this.stopNestedEventPropagation}
                    @sl-focus=${this.stopNestedEventPropagation}
                  >
                    ${this.setLetterCase(this.format)}
                  </sl-button>
                ` : ""}
            ${hasEyeDropper ? x`
                  <sl-button
                    part="eye-dropper-button"
                    exportparts="
                      base:eye-dropper-button__base,
                      prefix:eye-dropper-button__prefix,
                      label:eye-dropper-button__label,
                      suffix:eye-dropper-button__suffix,
                      caret:eye-dropper-button__caret
                    "
                    @click=${this.handleEyeDropper}
                    @sl-blur=${this.stopNestedEventPropagation}
                    @sl-focus=${this.stopNestedEventPropagation}
                  >
                    <sl-icon
                      library="system"
                      name="eyedropper"
                      label=${this.localize.term("selectAColorFromTheScreen")}
                    ></sl-icon>
                  </sl-button>
                ` : ""}
          </sl-button-group>
        </div>

        ${swatches.length > 0 ? x`
              <div part="swatches" class="color-picker__swatches">
                ${swatches.map((swatch) => {
      const parsedColor = this.parseColor(swatch);
      if (!parsedColor) {
        console.error(`Unable to parse swatch color: "${swatch}"`, this);
        return "";
      }
      return x`
                    <div
                      part="swatch"
                      class="color-picker__swatch color-picker__transparent-bg"
                      tabindex=${o5(this.disabled ? void 0 : "0")}
                      role="button"
                      aria-label=${swatch}
                      @click=${() => this.selectSwatch(swatch)}
                      @keydown=${(event) => !this.disabled && event.key === "Enter" && this.setColor(parsedColor.hexa)}
                    >
                      <div
                        class="color-picker__swatch-color"
                        style=${o7({ backgroundColor: parsedColor.hexa })}
                      ></div>
                    </div>
                  `;
    })}
              </div>
            ` : ""}
      </div>
    `;
    if (this.inline) {
      return colorPicker;
    }
    return x`
      <sl-dropdown
        class="color-dropdown"
        aria-disabled=${this.disabled ? "true" : "false"}
        .containingElement=${this}
        ?disabled=${this.disabled}
        ?hoist=${this.hoist}
        @sl-after-hide=${this.handleAfterHide}
      >
        <button
          part="trigger"
          slot="trigger"
          class=${e7({
      "color-dropdown__trigger": true,
      "color-dropdown__trigger--disabled": this.disabled,
      "color-dropdown__trigger--small": this.size === "small",
      "color-dropdown__trigger--medium": this.size === "medium",
      "color-dropdown__trigger--large": this.size === "large",
      "color-dropdown__trigger--empty": this.isEmpty,
      "color-dropdown__trigger--focused": this.hasFocus,
      "color-picker__transparent-bg": true
    })}
          style=${o7({
      color: this.getHexString(this.hue, this.saturation, this.brightness, this.alpha)
    })}
          type="button"
        >
          <sl-visually-hidden>
            <slot name="label">${this.label}</slot>
          </sl-visually-hidden>
        </button>
        ${colorPicker}
      </sl-dropdown>
    `;
  }
};
SlColorPicker.styles = [component_styles_default, color_picker_styles_default];
SlColorPicker.dependencies = {
  "sl-button-group": SlButtonGroup,
  "sl-button": SlButton,
  "sl-dropdown": SlDropdown,
  "sl-icon": SlIcon,
  "sl-input": SlInput,
  "sl-visually-hidden": SlVisuallyHidden
};
__decorateClass([
  e5('[part~="base"]')
], SlColorPicker.prototype, "base", 2);
__decorateClass([
  e5('[part~="input"]')
], SlColorPicker.prototype, "input", 2);
__decorateClass([
  e5(".color-dropdown")
], SlColorPicker.prototype, "dropdown", 2);
__decorateClass([
  e5('[part~="preview"]')
], SlColorPicker.prototype, "previewButton", 2);
__decorateClass([
  e5('[part~="trigger"]')
], SlColorPicker.prototype, "trigger", 2);
__decorateClass([
  r6()
], SlColorPicker.prototype, "hasFocus", 2);
__decorateClass([
  r6()
], SlColorPicker.prototype, "isDraggingGridHandle", 2);
__decorateClass([
  r6()
], SlColorPicker.prototype, "isEmpty", 2);
__decorateClass([
  r6()
], SlColorPicker.prototype, "inputValue", 2);
__decorateClass([
  r6()
], SlColorPicker.prototype, "hue", 2);
__decorateClass([
  r6()
], SlColorPicker.prototype, "saturation", 2);
__decorateClass([
  r6()
], SlColorPicker.prototype, "brightness", 2);
__decorateClass([
  r6()
], SlColorPicker.prototype, "alpha", 2);
__decorateClass([
  n4()
], SlColorPicker.prototype, "value", 2);
__decorateClass([
  defaultValue()
], SlColorPicker.prototype, "defaultValue", 2);
__decorateClass([
  n4()
], SlColorPicker.prototype, "label", 2);
__decorateClass([
  n4()
], SlColorPicker.prototype, "format", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlColorPicker.prototype, "inline", 2);
__decorateClass([
  n4({ reflect: true })
], SlColorPicker.prototype, "size", 2);
__decorateClass([
  n4({ attribute: "no-format-toggle", type: Boolean })
], SlColorPicker.prototype, "noFormatToggle", 2);
__decorateClass([
  n4()
], SlColorPicker.prototype, "name", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlColorPicker.prototype, "disabled", 2);
__decorateClass([
  n4({ type: Boolean })
], SlColorPicker.prototype, "hoist", 2);
__decorateClass([
  n4({ type: Boolean })
], SlColorPicker.prototype, "opacity", 2);
__decorateClass([
  n4({ type: Boolean })
], SlColorPicker.prototype, "uppercase", 2);
__decorateClass([
  n4()
], SlColorPicker.prototype, "swatches", 2);
__decorateClass([
  n4({ reflect: true })
], SlColorPicker.prototype, "form", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlColorPicker.prototype, "required", 2);
__decorateClass([
  t3({ passive: false })
], SlColorPicker.prototype, "handleTouchMove", 1);
__decorateClass([
  watch("format", { waitUntilFirstUpdate: true })
], SlColorPicker.prototype, "handleFormatChange", 1);
__decorateClass([
  watch("opacity", { waitUntilFirstUpdate: true })
], SlColorPicker.prototype, "handleOpacityChange", 1);
__decorateClass([
  watch("value")
], SlColorPicker.prototype, "handleValueChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.NUFLB75Y.js
SlColorPicker.define("sl-color-picker");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.A5D6FTFY.js
var card_styles_default = i`
  :host {
    --border-color: var(--sl-color-neutral-200);
    --border-radius: var(--sl-border-radius-medium);
    --border-width: 1px;
    --padding: var(--sl-spacing-large);

    display: inline-block;
  }

  .card {
    display: flex;
    flex-direction: column;
    background-color: var(--sl-panel-background-color);
    box-shadow: var(--sl-shadow-x-small);
    border: solid var(--border-width) var(--border-color);
    border-radius: var(--border-radius);
  }

  .card__image {
    display: flex;
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
    margin: calc(-1 * var(--border-width));
    overflow: hidden;
  }

  .card__image::slotted(img) {
    display: block;
    width: 100%;
  }

  .card:not(.card--has-image) .card__image {
    display: none;
  }

  .card__header {
    display: block;
    border-bottom: solid var(--border-width) var(--border-color);
    padding: calc(var(--padding) / 2) var(--padding);
  }

  .card:not(.card--has-header) .card__header {
    display: none;
  }

  .card:not(.card--has-image) .card__header {
    border-top-left-radius: var(--border-radius);
    border-top-right-radius: var(--border-radius);
  }

  .card__body {
    display: block;
    padding: var(--padding);
  }

  .card--has-footer .card__footer {
    display: block;
    border-top: solid var(--border-width) var(--border-color);
    padding: var(--padding);
  }

  .card:not(.card--has-footer) .card__footer {
    display: none;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.X2VUYVGD.js
var SlCard = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "footer", "header", "image");
  }
  render() {
    return x`
      <div
        part="base"
        class=${e7({
      card: true,
      "card--has-footer": this.hasSlotController.test("footer"),
      "card--has-image": this.hasSlotController.test("image"),
      "card--has-header": this.hasSlotController.test("header")
    })}
      >
        <slot name="image" part="image" class="card__image"></slot>
        <slot name="header" part="header" class="card__header"></slot>
        <slot part="body" class="card__body"></slot>
        <slot name="footer" part="footer" class="card__footer"></slot>
      </div>
    `;
  }
};
SlCard.styles = [component_styles_default, card_styles_default];

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.S6RDAMK3.js
SlCard.define("sl-card");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.F4VGSDIW.js
var AutoplayController = class {
  constructor(host, tickCallback) {
    this.timerId = 0;
    this.activeInteractions = 0;
    this.paused = false;
    this.stopped = true;
    this.pause = () => {
      if (!this.activeInteractions++) {
        this.paused = true;
        this.host.requestUpdate();
      }
    };
    this.resume = () => {
      if (!--this.activeInteractions) {
        this.paused = false;
        this.host.requestUpdate();
      }
    };
    host.addController(this);
    this.host = host;
    this.tickCallback = tickCallback;
  }
  hostConnected() {
    this.host.addEventListener("mouseenter", this.pause);
    this.host.addEventListener("mouseleave", this.resume);
    this.host.addEventListener("focusin", this.pause);
    this.host.addEventListener("focusout", this.resume);
    this.host.addEventListener("touchstart", this.pause, { passive: true });
    this.host.addEventListener("touchend", this.resume);
  }
  hostDisconnected() {
    this.stop();
    this.host.removeEventListener("mouseenter", this.pause);
    this.host.removeEventListener("mouseleave", this.resume);
    this.host.removeEventListener("focusin", this.pause);
    this.host.removeEventListener("focusout", this.resume);
    this.host.removeEventListener("touchstart", this.pause);
    this.host.removeEventListener("touchend", this.resume);
  }
  start(interval) {
    this.stop();
    this.stopped = false;
    this.timerId = window.setInterval(() => {
      if (!this.paused) {
        this.tickCallback();
      }
    }, interval);
  }
  stop() {
    clearInterval(this.timerId);
    this.stopped = true;
    this.host.requestUpdate();
  }
};

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.BMOWACWC.js
var carousel_styles_default = i`
  :host {
    --slide-gap: var(--sl-spacing-medium, 1rem);
    --aspect-ratio: 16 / 9;
    --scroll-hint: 0px;

    display: flex;
  }

  .carousel {
    display: grid;
    grid-template-columns: min-content 1fr min-content;
    grid-template-rows: 1fr min-content;
    grid-template-areas:
      '. slides .'
      '. pagination .';
    gap: var(--sl-spacing-medium);
    align-items: center;
    min-height: 100%;
    min-width: 100%;
    position: relative;
  }

  .carousel__pagination {
    grid-area: pagination;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--sl-spacing-small);
  }

  .carousel__slides {
    grid-area: slides;

    display: grid;
    height: 100%;
    width: 100%;
    align-items: center;
    justify-items: center;
    overflow: auto;
    overscroll-behavior-x: contain;
    scrollbar-width: none;
    aspect-ratio: calc(var(--aspect-ratio) * var(--slides-per-page));
    border-radius: var(--sl-border-radius-small);

    --slide-size: calc((100% - (var(--slides-per-page) - 1) * var(--slide-gap)) / var(--slides-per-page));
  }

  @media (prefers-reduced-motion) {
    :where(.carousel__slides) {
      scroll-behavior: auto;
    }
  }

  .carousel__slides--horizontal {
    grid-auto-flow: column;
    grid-auto-columns: var(--slide-size);
    grid-auto-rows: 100%;
    column-gap: var(--slide-gap);
    scroll-snap-type: x mandatory;
    scroll-padding-inline: var(--scroll-hint);
    padding-inline: var(--scroll-hint);
    overflow-y: hidden;
  }

  .carousel__slides--vertical {
    grid-auto-flow: row;
    grid-auto-columns: 100%;
    grid-auto-rows: var(--slide-size);
    row-gap: var(--slide-gap);
    scroll-snap-type: y mandatory;
    scroll-padding-block: var(--scroll-hint);
    padding-block: var(--scroll-hint);
    overflow-x: hidden;
  }

  .carousel__slides--dragging {
  }

  :host([vertical]) ::slotted(sl-carousel-item) {
    height: 100%;
  }

  .carousel__slides::-webkit-scrollbar {
    display: none;
  }

  .carousel__navigation {
    grid-area: navigation;
    display: contents;
    font-size: var(--sl-font-size-x-large);
  }

  .carousel__navigation-button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-small);
    font-size: inherit;
    color: var(--sl-color-neutral-600);
    padding: var(--sl-spacing-x-small);
    cursor: pointer;
    transition: var(--sl-transition-medium) color;
    appearance: none;
  }

  .carousel__navigation-button--disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .carousel__navigation-button--disabled::part(base) {
    pointer-events: none;
  }

  .carousel__navigation-button--previous {
    grid-column: 1;
    grid-row: 1;
  }

  .carousel__navigation-button--next {
    grid-column: 3;
    grid-row: 1;
  }

  .carousel__pagination-item {
    display: block;
    cursor: pointer;
    background: none;
    border: 0;
    border-radius: var(--sl-border-radius-circle);
    width: var(--sl-spacing-small);
    height: var(--sl-spacing-small);
    background-color: var(--sl-color-neutral-300);
    padding: 0;
    margin: 0;
  }

  .carousel__pagination-item--active {
    background-color: var(--sl-color-neutral-700);
    transform: scale(1.2);
  }

  /* Focus styles */
  .carousel__slides:focus-visible,
  .carousel__navigation-button:focus-visible,
  .carousel__pagination-item:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }
`;

// node_modules/lit-html/directives/map.js
function* o11(o13, f5) {
  if (void 0 !== o13) {
    let i9 = 0;
    for (const t6 of o13) yield f5(t6, i9++);
  }
}

// node_modules/lit-html/directives/range.js
function* o12(o13, t6, e12 = 1) {
  const i9 = void 0 === t6 ? 0 : o13;
  t6 ??= o13;
  for (let o14 = i9; e12 > 0 ? o14 < t6 : t6 < o14; o14 += e12) yield o14;
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.WIPJVEWE.js
var SlCarousel = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.loop = false;
    this.navigation = false;
    this.pagination = false;
    this.autoplay = false;
    this.autoplayInterval = 3e3;
    this.slidesPerPage = 1;
    this.slidesPerMove = 1;
    this.orientation = "horizontal";
    this.mouseDragging = false;
    this.activeSlide = 0;
    this.scrolling = false;
    this.dragging = false;
    this.autoplayController = new AutoplayController(this, () => this.next());
    this.dragStartPosition = [-1, -1];
    this.localize = new LocalizeController2(this);
    this.pendingSlideChange = false;
    this.handleMouseDrag = (event) => {
      if (!this.dragging) {
        this.scrollContainer.style.setProperty("scroll-snap-type", "none");
        this.dragging = true;
        this.dragStartPosition = [event.clientX, event.clientY];
      }
      this.scrollContainer.scrollBy({
        left: -event.movementX,
        top: -event.movementY,
        behavior: "instant"
      });
    };
    this.handleMouseDragEnd = () => {
      const scrollContainer = this.scrollContainer;
      document.removeEventListener("pointermove", this.handleMouseDrag, { capture: true });
      const startLeft = scrollContainer.scrollLeft;
      const startTop = scrollContainer.scrollTop;
      scrollContainer.style.removeProperty("scroll-snap-type");
      scrollContainer.style.setProperty("overflow", "hidden");
      const finalLeft = scrollContainer.scrollLeft;
      const finalTop = scrollContainer.scrollTop;
      scrollContainer.style.removeProperty("overflow");
      scrollContainer.style.setProperty("scroll-snap-type", "none");
      scrollContainer.scrollTo({ left: startLeft, top: startTop, behavior: "instant" });
      requestAnimationFrame(async () => {
        if (startLeft !== finalLeft || startTop !== finalTop) {
          scrollContainer.scrollTo({
            left: finalLeft,
            top: finalTop,
            behavior: prefersReducedMotion() ? "auto" : "smooth"
          });
          await waitForEvent(scrollContainer, "scrollend");
        }
        scrollContainer.style.removeProperty("scroll-snap-type");
        this.dragging = false;
        this.dragStartPosition = [-1, -1];
        this.handleScrollEnd();
      });
    };
    this.handleSlotChange = (mutations) => {
      const needsInitialization = mutations.some(
        (mutation) => [...mutation.addedNodes, ...mutation.removedNodes].some(
          (el) => this.isCarouselItem(el) && !el.hasAttribute("data-clone")
        )
      );
      if (needsInitialization) {
        this.initializeSlides();
      }
      this.requestUpdate();
    };
  }
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "region");
    this.setAttribute("aria-label", this.localize.term("carousel"));
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    (_a = this.mutationObserver) == null ? void 0 : _a.disconnect();
  }
  firstUpdated() {
    this.initializeSlides();
    this.mutationObserver = new MutationObserver(this.handleSlotChange);
    this.mutationObserver.observe(this, {
      childList: true,
      subtree: true
    });
  }
  willUpdate(changedProperties) {
    if (changedProperties.has("slidesPerMove") || changedProperties.has("slidesPerPage")) {
      this.slidesPerMove = Math.min(this.slidesPerMove, this.slidesPerPage);
    }
  }
  getPageCount() {
    const slidesCount = this.getSlides().length;
    const { slidesPerPage, slidesPerMove, loop } = this;
    const pages = loop ? slidesCount / slidesPerMove : (slidesCount - slidesPerPage) / slidesPerMove + 1;
    return Math.ceil(pages);
  }
  getCurrentPage() {
    return Math.ceil(this.activeSlide / this.slidesPerMove);
  }
  canScrollNext() {
    return this.loop || this.getCurrentPage() < this.getPageCount() - 1;
  }
  canScrollPrev() {
    return this.loop || this.getCurrentPage() > 0;
  }
  /** @internal Gets all carousel items. */
  getSlides({ excludeClones = true } = {}) {
    return [...this.children].filter(
      (el) => this.isCarouselItem(el) && (!excludeClones || !el.hasAttribute("data-clone"))
    );
  }
  handleClick(event) {
    if (this.dragging && this.dragStartPosition[0] > 0 && this.dragStartPosition[1] > 0) {
      const deltaX = Math.abs(this.dragStartPosition[0] - event.clientX);
      const deltaY = Math.abs(this.dragStartPosition[1] - event.clientY);
      const delta = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
      if (delta >= 10) {
        event.preventDefault();
      }
    }
  }
  handleKeyDown(event) {
    if (["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
      const target = event.target;
      const isRtl = this.localize.dir() === "rtl";
      const isFocusInPagination = target.closest('[part~="pagination-item"]') !== null;
      const isNext = event.key === "ArrowDown" || !isRtl && event.key === "ArrowRight" || isRtl && event.key === "ArrowLeft";
      const isPrevious = event.key === "ArrowUp" || !isRtl && event.key === "ArrowLeft" || isRtl && event.key === "ArrowRight";
      event.preventDefault();
      if (isPrevious) {
        this.previous();
      }
      if (isNext) {
        this.next();
      }
      if (event.key === "Home") {
        this.goToSlide(0);
      }
      if (event.key === "End") {
        this.goToSlide(this.getSlides().length - 1);
      }
      if (isFocusInPagination) {
        this.updateComplete.then(() => {
          var _a;
          const activePaginationItem = (_a = this.shadowRoot) == null ? void 0 : _a.querySelector(
            '[part~="pagination-item--active"]'
          );
          if (activePaginationItem) {
            activePaginationItem.focus();
          }
        });
      }
    }
  }
  handleMouseDragStart(event) {
    const canDrag = this.mouseDragging && event.button === 0;
    if (canDrag) {
      event.preventDefault();
      document.addEventListener("pointermove", this.handleMouseDrag, { capture: true, passive: true });
      document.addEventListener("pointerup", this.handleMouseDragEnd, { capture: true, once: true });
    }
  }
  handleScroll() {
    this.scrolling = true;
    if (!this.pendingSlideChange) {
      this.synchronizeSlides();
    }
  }
  /** @internal Synchronizes the slides with the IntersectionObserver API. */
  synchronizeSlides() {
    const io = new IntersectionObserver(
      (entries) => {
        io.disconnect();
        for (const entry of entries) {
          const slide = entry.target;
          slide.toggleAttribute("inert", !entry.isIntersecting);
          slide.classList.toggle("--in-view", entry.isIntersecting);
          slide.setAttribute("aria-hidden", entry.isIntersecting ? "false" : "true");
        }
        const firstIntersecting = entries.find((entry) => entry.isIntersecting);
        if (!firstIntersecting) {
          return;
        }
        const slidesWithClones = this.getSlides({ excludeClones: false });
        const slidesCount = this.getSlides().length;
        const slideIndex = slidesWithClones.indexOf(firstIntersecting.target);
        const normalizedIndex = this.loop ? slideIndex - this.slidesPerPage : slideIndex;
        this.activeSlide = (Math.ceil(normalizedIndex / this.slidesPerMove) * this.slidesPerMove + slidesCount) % slidesCount;
        if (!this.scrolling) {
          if (this.loop && firstIntersecting.target.hasAttribute("data-clone")) {
            const clonePosition = Number(firstIntersecting.target.getAttribute("data-clone"));
            this.goToSlide(clonePosition, "instant");
          }
        }
      },
      {
        root: this.scrollContainer,
        threshold: 0.6
      }
    );
    this.getSlides({ excludeClones: false }).forEach((slide) => {
      io.observe(slide);
    });
  }
  handleScrollEnd() {
    if (!this.scrolling || this.dragging) return;
    this.scrolling = false;
    this.pendingSlideChange = false;
    this.synchronizeSlides();
  }
  isCarouselItem(node) {
    return node instanceof Element && node.tagName.toLowerCase() === "sl-carousel-item";
  }
  initializeSlides() {
    this.getSlides({ excludeClones: false }).forEach((slide, index) => {
      slide.classList.remove("--in-view");
      slide.classList.remove("--is-active");
      slide.setAttribute("aria-label", this.localize.term("slideNum", index + 1));
      if (slide.hasAttribute("data-clone")) {
        slide.remove();
      }
    });
    this.updateSlidesSnap();
    if (this.loop) {
      this.createClones();
    }
    this.goToSlide(this.activeSlide, "auto");
    this.synchronizeSlides();
  }
  createClones() {
    const slides = this.getSlides();
    const slidesPerPage = this.slidesPerPage;
    const lastSlides = slides.slice(-slidesPerPage);
    const firstSlides = slides.slice(0, slidesPerPage);
    lastSlides.reverse().forEach((slide, i9) => {
      const clone2 = slide.cloneNode(true);
      clone2.setAttribute("data-clone", String(slides.length - i9 - 1));
      this.prepend(clone2);
    });
    firstSlides.forEach((slide, i9) => {
      const clone2 = slide.cloneNode(true);
      clone2.setAttribute("data-clone", String(i9));
      this.append(clone2);
    });
  }
  handleSlideChange() {
    const slides = this.getSlides();
    slides.forEach((slide, i9) => {
      slide.classList.toggle("--is-active", i9 === this.activeSlide);
    });
    if (this.hasUpdated) {
      this.emit("sl-slide-change", {
        detail: {
          index: this.activeSlide,
          slide: slides[this.activeSlide]
        }
      });
    }
  }
  updateSlidesSnap() {
    const slides = this.getSlides();
    const slidesPerMove = this.slidesPerMove;
    slides.forEach((slide, i9) => {
      const shouldSnap = (i9 + slidesPerMove) % slidesPerMove === 0;
      if (shouldSnap) {
        slide.style.removeProperty("scroll-snap-align");
      } else {
        slide.style.setProperty("scroll-snap-align", "none");
      }
    });
  }
  handleAutoplayChange() {
    this.autoplayController.stop();
    if (this.autoplay) {
      this.autoplayController.start(this.autoplayInterval);
    }
  }
  /**
   * Move the carousel backward by `slides-per-move` slides.
   *
   * @param behavior - The behavior used for scrolling.
   */
  previous(behavior = "smooth") {
    this.goToSlide(this.activeSlide - this.slidesPerMove, behavior);
  }
  /**
   * Move the carousel forward by `slides-per-move` slides.
   *
   * @param behavior - The behavior used for scrolling.
   */
  next(behavior = "smooth") {
    this.goToSlide(this.activeSlide + this.slidesPerMove, behavior);
  }
  /**
   * Scrolls the carousel to the slide specified by `index`.
   *
   * @param index - The slide index.
   * @param behavior - The behavior used for scrolling.
   */
  goToSlide(index, behavior = "smooth") {
    const { slidesPerPage, loop } = this;
    const slides = this.getSlides();
    const slidesWithClones = this.getSlides({ excludeClones: false });
    if (!slides.length) {
      return;
    }
    const newActiveSlide = loop ? (index + slides.length) % slides.length : clamp2(index, 0, slides.length - slidesPerPage);
    this.activeSlide = newActiveSlide;
    const isRtl = this.localize.dir() === "rtl";
    const nextSlideIndex = clamp2(
      index + (loop ? slidesPerPage : 0) + (isRtl ? slidesPerPage - 1 : 0),
      0,
      slidesWithClones.length - 1
    );
    const nextSlide = slidesWithClones[nextSlideIndex];
    this.scrollToSlide(nextSlide, prefersReducedMotion() ? "auto" : behavior);
  }
  scrollToSlide(slide, behavior = "smooth") {
    this.pendingSlideChange = true;
    window.requestAnimationFrame(() => {
      if (!this.scrollContainer) {
        return;
      }
      const scrollContainer = this.scrollContainer;
      const scrollContainerRect = scrollContainer.getBoundingClientRect();
      const nextSlideRect = slide.getBoundingClientRect();
      const nextLeft = nextSlideRect.left - scrollContainerRect.left;
      const nextTop = nextSlideRect.top - scrollContainerRect.top;
      if (nextLeft || nextTop) {
        this.pendingSlideChange = true;
        scrollContainer.scrollTo({
          left: nextLeft + scrollContainer.scrollLeft,
          top: nextTop + scrollContainer.scrollTop,
          behavior
        });
      } else {
        this.pendingSlideChange = false;
      }
    });
  }
  render() {
    const { slidesPerMove, scrolling } = this;
    const pagesCount = this.getPageCount();
    const currentPage = this.getCurrentPage();
    const prevEnabled = this.canScrollPrev();
    const nextEnabled = this.canScrollNext();
    const isLtr = this.localize.dir() === "ltr";
    return x`
      <div part="base" class="carousel">
        <div
          id="scroll-container"
          part="scroll-container"
          class="${e7({
      carousel__slides: true,
      "carousel__slides--horizontal": this.orientation === "horizontal",
      "carousel__slides--vertical": this.orientation === "vertical",
      "carousel__slides--dragging": this.dragging
    })}"
          style="--slides-per-page: ${this.slidesPerPage};"
          aria-busy="${scrolling ? "true" : "false"}"
          aria-atomic="true"
          tabindex="0"
          @keydown=${this.handleKeyDown}
          @mousedown="${this.handleMouseDragStart}"
          @scroll="${this.handleScroll}"
          @scrollend=${this.handleScrollEnd}
          @click=${this.handleClick}
        >
          <slot></slot>
        </div>

        ${this.navigation ? x`
              <div part="navigation" class="carousel__navigation">
                <button
                  part="navigation-button navigation-button--previous"
                  class="${e7({
      "carousel__navigation-button": true,
      "carousel__navigation-button--previous": true,
      "carousel__navigation-button--disabled": !prevEnabled
    })}"
                  aria-label="${this.localize.term("previousSlide")}"
                  aria-controls="scroll-container"
                  aria-disabled="${prevEnabled ? "false" : "true"}"
                  @click=${prevEnabled ? () => this.previous() : null}
                >
                  <slot name="previous-icon">
                    <sl-icon library="system" name="${isLtr ? "chevron-left" : "chevron-right"}"></sl-icon>
                  </slot>
                </button>

                <button
                  part="navigation-button navigation-button--next"
                  class=${e7({
      "carousel__navigation-button": true,
      "carousel__navigation-button--next": true,
      "carousel__navigation-button--disabled": !nextEnabled
    })}
                  aria-label="${this.localize.term("nextSlide")}"
                  aria-controls="scroll-container"
                  aria-disabled="${nextEnabled ? "false" : "true"}"
                  @click=${nextEnabled ? () => this.next() : null}
                >
                  <slot name="next-icon">
                    <sl-icon library="system" name="${isLtr ? "chevron-right" : "chevron-left"}"></sl-icon>
                  </slot>
                </button>
              </div>
            ` : ""}
        ${this.pagination ? x`
              <div part="pagination" role="tablist" class="carousel__pagination" aria-controls="scroll-container">
                ${o11(o12(pagesCount), (index) => {
      const isActive = index === currentPage;
      return x`
                    <button
                      part="pagination-item ${isActive ? "pagination-item--active" : ""}"
                      class="${e7({
        "carousel__pagination-item": true,
        "carousel__pagination-item--active": isActive
      })}"
                      role="tab"
                      aria-selected="${isActive ? "true" : "false"}"
                      aria-label="${this.localize.term("goToSlide", index + 1, pagesCount)}"
                      tabindex=${isActive ? "0" : "-1"}
                      @click=${() => this.goToSlide(index * slidesPerMove)}
                      @keydown=${this.handleKeyDown}
                    ></button>
                  `;
    })}
              </div>
            ` : ""}
      </div>
    `;
  }
};
SlCarousel.styles = [component_styles_default, carousel_styles_default];
SlCarousel.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlCarousel.prototype, "loop", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlCarousel.prototype, "navigation", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlCarousel.prototype, "pagination", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlCarousel.prototype, "autoplay", 2);
__decorateClass([
  n4({ type: Number, attribute: "autoplay-interval" })
], SlCarousel.prototype, "autoplayInterval", 2);
__decorateClass([
  n4({ type: Number, attribute: "slides-per-page" })
], SlCarousel.prototype, "slidesPerPage", 2);
__decorateClass([
  n4({ type: Number, attribute: "slides-per-move" })
], SlCarousel.prototype, "slidesPerMove", 2);
__decorateClass([
  n4()
], SlCarousel.prototype, "orientation", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true, attribute: "mouse-dragging" })
], SlCarousel.prototype, "mouseDragging", 2);
__decorateClass([
  e5(".carousel__slides")
], SlCarousel.prototype, "scrollContainer", 2);
__decorateClass([
  e5(".carousel__pagination")
], SlCarousel.prototype, "paginationContainer", 2);
__decorateClass([
  r6()
], SlCarousel.prototype, "activeSlide", 2);
__decorateClass([
  r6()
], SlCarousel.prototype, "scrolling", 2);
__decorateClass([
  r6()
], SlCarousel.prototype, "dragging", 2);
__decorateClass([
  t3({ passive: true })
], SlCarousel.prototype, "handleScroll", 1);
__decorateClass([
  watch("loop", { waitUntilFirstUpdate: true }),
  watch("slidesPerPage", { waitUntilFirstUpdate: true })
], SlCarousel.prototype, "initializeSlides", 1);
__decorateClass([
  watch("activeSlide")
], SlCarousel.prototype, "handleSlideChange", 1);
__decorateClass([
  watch("slidesPerMove")
], SlCarousel.prototype, "updateSlidesSnap", 1);
__decorateClass([
  watch("autoplay")
], SlCarousel.prototype, "handleAutoplayChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.76OSFHWG.js
SlCarousel.define("sl-carousel");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.OQXPL73S.js
var debounce = (fn, delay) => {
  let timerId = 0;
  return function(...args) {
    window.clearTimeout(timerId);
    timerId = window.setTimeout(() => {
      fn.call(this, ...args);
    }, delay);
  };
};
var decorate = (proto, method, decorateFn) => {
  const superFn = proto[method];
  proto[method] = function(...args) {
    superFn.call(this, ...args);
    decorateFn.call(this, superFn, ...args);
  };
};
var isSupported = "onscrollend" in window;
if (!isSupported) {
  const pointers = /* @__PURE__ */ new Set();
  const scrollHandlers = /* @__PURE__ */ new WeakMap();
  const handlePointerDown = (event) => {
    for (const touch of event.changedTouches) {
      pointers.add(touch.identifier);
    }
  };
  const handlePointerUp = (event) => {
    for (const touch of event.changedTouches) {
      pointers.delete(touch.identifier);
    }
  };
  document.addEventListener("touchstart", handlePointerDown, true);
  document.addEventListener("touchend", handlePointerUp, true);
  document.addEventListener("touchcancel", handlePointerUp, true);
  decorate(EventTarget.prototype, "addEventListener", function(addEventListener, type) {
    if (type !== "scrollend") return;
    const handleScrollEnd = debounce(() => {
      if (!pointers.size) {
        this.dispatchEvent(new Event("scrollend"));
      } else {
        handleScrollEnd();
      }
    }, 100);
    addEventListener.call(this, "scroll", handleScrollEnd, { passive: true });
    scrollHandlers.set(this, handleScrollEnd);
  });
  decorate(EventTarget.prototype, "removeEventListener", function(removeEventListener, type) {
    if (type !== "scrollend") return;
    const scrollHandler = scrollHandlers.get(this);
    if (scrollHandler) {
      removeEventListener.call(this, "scroll", scrollHandler, { passive: true });
    }
  });
}

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.NQ44LUGM.js
var carousel_item_styles_default = i`
  :host {
    --aspect-ratio: inherit;

    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
    width: 100%;
    max-height: 100%;
    aspect-ratio: var(--aspect-ratio);
    scroll-snap-align: start;
    scroll-snap-stop: always;
  }

  ::slotted(img) {
    width: 100% !important;
    height: 100% !important;
    object-fit: cover;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XHATQV4E.js
var SlCarouselItem = class extends ShoelaceElement {
  connectedCallback() {
    super.connectedCallback();
    this.setAttribute("role", "group");
  }
  render() {
    return x` <slot></slot> `;
  }
};
SlCarouselItem.styles = [component_styles_default, carousel_item_styles_default];

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.MMOFD7KV.js
SlCarouselItem.define("sl-carousel-item");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.KJWYNLDZ.js
SlButton.define("sl-button");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.2JXY7HQL.js
SlButtonGroup.define("sl-button-group");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.P4NYDBZP.js
var breadcrumb_styles_default = i`
  .breadcrumb {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.GCGUZYX3.js
var SlBreadcrumb = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.localize = new LocalizeController2(this);
    this.separatorDir = this.localize.dir();
    this.label = "";
  }
  // Generates a clone of the separator element to use for each breadcrumb item
  getSeparator() {
    const separator = this.separatorSlot.assignedElements({ flatten: true })[0];
    const clone2 = separator.cloneNode(true);
    [clone2, ...clone2.querySelectorAll("[id]")].forEach((el) => el.removeAttribute("id"));
    clone2.setAttribute("data-default", "");
    clone2.slot = "separator";
    return clone2;
  }
  handleSlotChange() {
    const items = [...this.defaultSlot.assignedElements({ flatten: true })].filter(
      (item) => item.tagName.toLowerCase() === "sl-breadcrumb-item"
    );
    items.forEach((item, index) => {
      const separator = item.querySelector('[slot="separator"]');
      if (separator === null) {
        item.append(this.getSeparator());
      } else if (separator.hasAttribute("data-default")) {
        separator.replaceWith(this.getSeparator());
      } else {
      }
      if (index === items.length - 1) {
        item.setAttribute("aria-current", "page");
      } else {
        item.removeAttribute("aria-current");
      }
    });
  }
  render() {
    if (this.separatorDir !== this.localize.dir()) {
      this.separatorDir = this.localize.dir();
      this.updateComplete.then(() => this.handleSlotChange());
    }
    return x`
      <nav part="base" class="breadcrumb" aria-label=${this.label}>
        <slot @slotchange=${this.handleSlotChange}></slot>
      </nav>

      <span hidden aria-hidden="true">
        <slot name="separator">
          <sl-icon name=${this.localize.dir() === "rtl" ? "chevron-left" : "chevron-right"} library="system"></sl-icon>
        </slot>
      </span>
    `;
  }
};
SlBreadcrumb.styles = [component_styles_default, breadcrumb_styles_default];
SlBreadcrumb.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e5("slot")
], SlBreadcrumb.prototype, "defaultSlot", 2);
__decorateClass([
  e5('slot[name="separator"]')
], SlBreadcrumb.prototype, "separatorSlot", 2);
__decorateClass([
  n4()
], SlBreadcrumb.prototype, "label", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.QCTBZZ7G.js
SlBreadcrumb.define("sl-breadcrumb");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.WQC6OWUE.js
var badge_styles_default = i`
  :host {
    display: inline-flex;
  }

  .badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: max(12px, 0.75em);
    font-weight: var(--sl-font-weight-semibold);
    letter-spacing: var(--sl-letter-spacing-normal);
    line-height: 1;
    border-radius: var(--sl-border-radius-small);
    border: solid 1px var(--sl-color-neutral-0);
    white-space: nowrap;
    padding: 0.35em 0.6em;
    user-select: none;
    -webkit-user-select: none;
    cursor: inherit;
  }

  /* Variant modifiers */
  .badge--primary {
    background-color: var(--sl-color-primary-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--success {
    background-color: var(--sl-color-success-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--neutral {
    background-color: var(--sl-color-neutral-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--warning {
    background-color: var(--sl-color-warning-600);
    color: var(--sl-color-neutral-0);
  }

  .badge--danger {
    background-color: var(--sl-color-danger-600);
    color: var(--sl-color-neutral-0);
  }

  /* Pill modifier */
  .badge--pill {
    border-radius: var(--sl-border-radius-pill);
  }

  /* Pulse modifier */
  .badge--pulse {
    animation: pulse 1.5s infinite;
  }

  .badge--pulse.badge--primary {
    --pulse-color: var(--sl-color-primary-600);
  }

  .badge--pulse.badge--success {
    --pulse-color: var(--sl-color-success-600);
  }

  .badge--pulse.badge--neutral {
    --pulse-color: var(--sl-color-neutral-600);
  }

  .badge--pulse.badge--warning {
    --pulse-color: var(--sl-color-warning-600);
  }

  .badge--pulse.badge--danger {
    --pulse-color: var(--sl-color-danger-600);
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 var(--pulse-color);
    }
    70% {
      box-shadow: 0 0 0 0.5rem transparent;
    }
    100% {
      box-shadow: 0 0 0 0 transparent;
    }
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XUX6RZ47.js
var SlBadge = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.variant = "primary";
    this.pill = false;
    this.pulse = false;
  }
  render() {
    return x`
      <span
        part="base"
        class=${e7({
      badge: true,
      "badge--primary": this.variant === "primary",
      "badge--success": this.variant === "success",
      "badge--neutral": this.variant === "neutral",
      "badge--warning": this.variant === "warning",
      "badge--danger": this.variant === "danger",
      "badge--pill": this.pill,
      "badge--pulse": this.pulse
    })}
        role="status"
      >
        <slot></slot>
      </span>
    `;
  }
};
SlBadge.styles = [component_styles_default, badge_styles_default];
__decorateClass([
  n4({ reflect: true })
], SlBadge.prototype, "variant", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlBadge.prototype, "pill", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlBadge.prototype, "pulse", 2);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.DAU34HDS.js
SlBadge.define("sl-badge");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.Q5P7Y2HU.js
var breadcrumb_item_styles_default = i`
  :host {
    display: inline-flex;
  }

  .breadcrumb-item {
    display: inline-flex;
    align-items: center;
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-semibold);
    color: var(--sl-color-neutral-600);
    line-height: var(--sl-line-height-normal);
    white-space: nowrap;
  }

  .breadcrumb-item__label {
    display: inline-block;
    font-family: inherit;
    font-size: inherit;
    font-weight: inherit;
    line-height: inherit;
    text-decoration: none;
    color: inherit;
    background: none;
    border: none;
    border-radius: var(--sl-border-radius-medium);
    padding: 0;
    margin: 0;
    cursor: pointer;
    transition: var(--sl-transition-fast) --color;
  }

  :host(:not(:last-of-type)) .breadcrumb-item__label {
    color: var(--sl-color-primary-600);
  }

  :host(:not(:last-of-type)) .breadcrumb-item__label:hover {
    color: var(--sl-color-primary-500);
  }

  :host(:not(:last-of-type)) .breadcrumb-item__label:active {
    color: var(--sl-color-primary-600);
  }

  .breadcrumb-item__label:focus {
    outline: none;
  }

  .breadcrumb-item__label:focus-visible {
    outline: var(--sl-focus-ring);
    outline-offset: var(--sl-focus-ring-offset);
  }

  .breadcrumb-item__prefix,
  .breadcrumb-item__suffix {
    display: none;
    flex: 0 0 auto;
    display: flex;
    align-items: center;
  }

  .breadcrumb-item--has-prefix .breadcrumb-item__prefix {
    display: inline-flex;
    margin-inline-end: var(--sl-spacing-x-small);
  }

  .breadcrumb-item--has-suffix .breadcrumb-item__suffix {
    display: inline-flex;
    margin-inline-start: var(--sl-spacing-x-small);
  }

  :host(:last-of-type) .breadcrumb-item__separator {
    display: none;
  }

  .breadcrumb-item__separator {
    display: inline-flex;
    align-items: center;
    margin: 0 var(--sl-spacing-x-small);
    user-select: none;
    -webkit-user-select: none;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.GB4LDF6D.js
var SlBreadcrumbItem = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "prefix", "suffix");
    this.renderType = "button";
    this.rel = "noreferrer noopener";
  }
  setRenderType() {
    const hasDropdown = this.defaultSlot.assignedElements({ flatten: true }).filter((i9) => i9.tagName.toLowerCase() === "sl-dropdown").length > 0;
    if (this.href) {
      this.renderType = "link";
      return;
    }
    if (hasDropdown) {
      this.renderType = "dropdown";
      return;
    }
    this.renderType = "button";
  }
  hrefChanged() {
    this.setRenderType();
  }
  handleSlotChange() {
    this.setRenderType();
  }
  render() {
    return x`
      <div
        part="base"
        class=${e7({
      "breadcrumb-item": true,
      "breadcrumb-item--has-prefix": this.hasSlotController.test("prefix"),
      "breadcrumb-item--has-suffix": this.hasSlotController.test("suffix")
    })}
      >
        <span part="prefix" class="breadcrumb-item__prefix">
          <slot name="prefix"></slot>
        </span>

        ${this.renderType === "link" ? x`
              <a
                part="label"
                class="breadcrumb-item__label breadcrumb-item__label--link"
                href="${this.href}"
                target="${o5(this.target ? this.target : void 0)}"
                rel=${o5(this.target ? this.rel : void 0)}
              >
                <slot @slotchange=${this.handleSlotChange}></slot>
              </a>
            ` : ""}
        ${this.renderType === "button" ? x`
              <button part="label" type="button" class="breadcrumb-item__label breadcrumb-item__label--button">
                <slot @slotchange=${this.handleSlotChange}></slot>
              </button>
            ` : ""}
        ${this.renderType === "dropdown" ? x`
              <div part="label" class="breadcrumb-item__label breadcrumb-item__label--drop-down">
                <slot @slotchange=${this.handleSlotChange}></slot>
              </div>
            ` : ""}

        <span part="suffix" class="breadcrumb-item__suffix">
          <slot name="suffix"></slot>
        </span>

        <span part="separator" class="breadcrumb-item__separator" aria-hidden="true">
          <slot name="separator"></slot>
        </span>
      </div>
    `;
  }
};
SlBreadcrumbItem.styles = [component_styles_default, breadcrumb_item_styles_default];
__decorateClass([
  e5("slot:not([name])")
], SlBreadcrumbItem.prototype, "defaultSlot", 2);
__decorateClass([
  r6()
], SlBreadcrumbItem.prototype, "renderType", 2);
__decorateClass([
  n4()
], SlBreadcrumbItem.prototype, "href", 2);
__decorateClass([
  n4()
], SlBreadcrumbItem.prototype, "target", 2);
__decorateClass([
  n4()
], SlBreadcrumbItem.prototype, "rel", 2);
__decorateClass([
  watch("href", { waitUntilFirstUpdate: true })
], SlBreadcrumbItem.prototype, "hrefChanged", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.ESN5H7RI.js
SlBreadcrumbItem.define("sl-breadcrumb-item");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.XVVDUPMB.js
var animation_styles_default = i`
  :host {
    display: contents;
  }
`;

// node_modules/@shoelace-style/animations/dist/index.js
var dist_exports = {};
__export(dist_exports, {
  backInDown: () => backInDown,
  backInLeft: () => backInLeft,
  backInRight: () => backInRight,
  backInUp: () => backInUp,
  backOutDown: () => backOutDown,
  backOutLeft: () => backOutLeft,
  backOutRight: () => backOutRight,
  backOutUp: () => backOutUp,
  bounce: () => bounce,
  bounceIn: () => bounceIn,
  bounceInDown: () => bounceInDown,
  bounceInLeft: () => bounceInLeft,
  bounceInRight: () => bounceInRight,
  bounceInUp: () => bounceInUp,
  bounceOut: () => bounceOut,
  bounceOutDown: () => bounceOutDown,
  bounceOutLeft: () => bounceOutLeft,
  bounceOutRight: () => bounceOutRight,
  bounceOutUp: () => bounceOutUp,
  easings: () => easings,
  fadeIn: () => fadeIn,
  fadeInBottomLeft: () => fadeInBottomLeft,
  fadeInBottomRight: () => fadeInBottomRight,
  fadeInDown: () => fadeInDown,
  fadeInDownBig: () => fadeInDownBig,
  fadeInLeft: () => fadeInLeft,
  fadeInLeftBig: () => fadeInLeftBig,
  fadeInRight: () => fadeInRight,
  fadeInRightBig: () => fadeInRightBig,
  fadeInTopLeft: () => fadeInTopLeft,
  fadeInTopRight: () => fadeInTopRight,
  fadeInUp: () => fadeInUp,
  fadeInUpBig: () => fadeInUpBig,
  fadeOut: () => fadeOut,
  fadeOutBottomLeft: () => fadeOutBottomLeft,
  fadeOutBottomRight: () => fadeOutBottomRight,
  fadeOutDown: () => fadeOutDown,
  fadeOutDownBig: () => fadeOutDownBig,
  fadeOutLeft: () => fadeOutLeft,
  fadeOutLeftBig: () => fadeOutLeftBig,
  fadeOutRight: () => fadeOutRight,
  fadeOutRightBig: () => fadeOutRightBig,
  fadeOutTopLeft: () => fadeOutTopLeft,
  fadeOutTopRight: () => fadeOutTopRight,
  fadeOutUp: () => fadeOutUp,
  fadeOutUpBig: () => fadeOutUpBig,
  flash: () => flash,
  flip: () => flip3,
  flipInX: () => flipInX,
  flipInY: () => flipInY,
  flipOutX: () => flipOutX,
  flipOutY: () => flipOutY,
  headShake: () => headShake,
  heartBeat: () => heartBeat,
  hinge: () => hinge,
  jackInTheBox: () => jackInTheBox,
  jello: () => jello,
  lightSpeedInLeft: () => lightSpeedInLeft,
  lightSpeedInRight: () => lightSpeedInRight,
  lightSpeedOutLeft: () => lightSpeedOutLeft,
  lightSpeedOutRight: () => lightSpeedOutRight,
  pulse: () => pulse,
  rollIn: () => rollIn,
  rollOut: () => rollOut,
  rotateIn: () => rotateIn,
  rotateInDownLeft: () => rotateInDownLeft,
  rotateInDownRight: () => rotateInDownRight,
  rotateInUpLeft: () => rotateInUpLeft,
  rotateInUpRight: () => rotateInUpRight,
  rotateOut: () => rotateOut,
  rotateOutDownLeft: () => rotateOutDownLeft,
  rotateOutDownRight: () => rotateOutDownRight,
  rotateOutUpLeft: () => rotateOutUpLeft,
  rotateOutUpRight: () => rotateOutUpRight,
  rubberBand: () => rubberBand,
  shake: () => shake,
  shakeX: () => shakeX,
  shakeY: () => shakeY,
  slideInDown: () => slideInDown,
  slideInLeft: () => slideInLeft,
  slideInRight: () => slideInRight,
  slideInUp: () => slideInUp,
  slideOutDown: () => slideOutDown,
  slideOutLeft: () => slideOutLeft,
  slideOutRight: () => slideOutRight,
  slideOutUp: () => slideOutUp,
  swing: () => swing,
  tada: () => tada,
  wobble: () => wobble,
  zoomIn: () => zoomIn,
  zoomInDown: () => zoomInDown,
  zoomInLeft: () => zoomInLeft,
  zoomInRight: () => zoomInRight,
  zoomInUp: () => zoomInUp,
  zoomOut: () => zoomOut,
  zoomOutDown: () => zoomOutDown,
  zoomOutLeft: () => zoomOutLeft,
  zoomOutRight: () => zoomOutRight,
  zoomOutUp: () => zoomOutUp
});

// node_modules/@shoelace-style/animations/dist/attention_seekers/bounce.js
var bounce = [
  { offset: 0, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)", transform: "translate3d(0, 0, 0)" },
  { offset: 0.2, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)", transform: "translate3d(0, 0, 0)" },
  { offset: 0.4, easing: "cubic-bezier(0.755, 0.05, 0.855, 0.06)", transform: "translate3d(0, -30px, 0) scaleY(1.1)" },
  { offset: 0.43, easing: "cubic-bezier(0.755, 0.05, 0.855, 0.06)", transform: "translate3d(0, -30px, 0) scaleY(1.1)" },
  { offset: 0.53, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)", transform: "translate3d(0, 0, 0)" },
  { offset: 0.7, easing: "cubic-bezier(0.755, 0.05, 0.855, 0.06)", transform: "translate3d(0, -15px, 0) scaleY(1.05)" },
  {
    offset: 0.8,
    "transition-timing-function": "cubic-bezier(0.215, 0.61, 0.355, 1)",
    transform: "translate3d(0, 0, 0) scaleY(0.95)"
  },
  { offset: 0.9, transform: "translate3d(0, -4px, 0) scaleY(1.02)" },
  { offset: 1, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/flash.js
var flash = [
  { offset: 0, opacity: "1" },
  { offset: 0.25, opacity: "0" },
  { offset: 0.5, opacity: "1" },
  { offset: 0.75, opacity: "0" },
  { offset: 1, opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/headShake.js
var headShake = [
  { offset: 0, transform: "translateX(0)" },
  { offset: 0.065, transform: "translateX(-6px) rotateY(-9deg)" },
  { offset: 0.185, transform: "translateX(5px) rotateY(7deg)" },
  { offset: 0.315, transform: "translateX(-3px) rotateY(-5deg)" },
  { offset: 0.435, transform: "translateX(2px) rotateY(3deg)" },
  { offset: 0.5, transform: "translateX(0)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/heartBeat.js
var heartBeat = [
  { offset: 0, transform: "scale(1)" },
  { offset: 0.14, transform: "scale(1.3)" },
  { offset: 0.28, transform: "scale(1)" },
  { offset: 0.42, transform: "scale(1.3)" },
  { offset: 0.7, transform: "scale(1)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/jello.js
var jello = [
  { offset: 0, transform: "translate3d(0, 0, 0)" },
  { offset: 0.111, transform: "translate3d(0, 0, 0)" },
  { offset: 0.222, transform: "skewX(-12.5deg) skewY(-12.5deg)" },
  { offset: 0.33299999999999996, transform: "skewX(6.25deg) skewY(6.25deg)" },
  { offset: 0.444, transform: "skewX(-3.125deg) skewY(-3.125deg)" },
  { offset: 0.555, transform: "skewX(1.5625deg) skewY(1.5625deg)" },
  { offset: 0.6659999999999999, transform: "skewX(-0.78125deg) skewY(-0.78125deg)" },
  { offset: 0.777, transform: "skewX(0.390625deg) skewY(0.390625deg)" },
  { offset: 0.888, transform: "skewX(-0.1953125deg) skewY(-0.1953125deg)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/pulse.js
var pulse = [
  { offset: 0, transform: "scale3d(1, 1, 1)" },
  { offset: 0.5, transform: "scale3d(1.05, 1.05, 1.05)" },
  { offset: 1, transform: "scale3d(1, 1, 1)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/rubberBand.js
var rubberBand = [
  { offset: 0, transform: "scale3d(1, 1, 1)" },
  { offset: 0.3, transform: "scale3d(1.25, 0.75, 1)" },
  { offset: 0.4, transform: "scale3d(0.75, 1.25, 1)" },
  { offset: 0.5, transform: "scale3d(1.15, 0.85, 1)" },
  { offset: 0.65, transform: "scale3d(0.95, 1.05, 1)" },
  { offset: 0.75, transform: "scale3d(1.05, 0.95, 1)" },
  { offset: 1, transform: "scale3d(1, 1, 1)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/shake.js
var shake = [
  { offset: 0, transform: "translate3d(0, 0, 0)" },
  { offset: 0.1, transform: "translate3d(-10px, 0, 0)" },
  { offset: 0.2, transform: "translate3d(10px, 0, 0)" },
  { offset: 0.3, transform: "translate3d(-10px, 0, 0)" },
  { offset: 0.4, transform: "translate3d(10px, 0, 0)" },
  { offset: 0.5, transform: "translate3d(-10px, 0, 0)" },
  { offset: 0.6, transform: "translate3d(10px, 0, 0)" },
  { offset: 0.7, transform: "translate3d(-10px, 0, 0)" },
  { offset: 0.8, transform: "translate3d(10px, 0, 0)" },
  { offset: 0.9, transform: "translate3d(-10px, 0, 0)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/shakeX.js
var shakeX = [
  { offset: 0, transform: "translate3d(0, 0, 0)" },
  { offset: 0.1, transform: "translate3d(-10px, 0, 0)" },
  { offset: 0.2, transform: "translate3d(10px, 0, 0)" },
  { offset: 0.3, transform: "translate3d(-10px, 0, 0)" },
  { offset: 0.4, transform: "translate3d(10px, 0, 0)" },
  { offset: 0.5, transform: "translate3d(-10px, 0, 0)" },
  { offset: 0.6, transform: "translate3d(10px, 0, 0)" },
  { offset: 0.7, transform: "translate3d(-10px, 0, 0)" },
  { offset: 0.8, transform: "translate3d(10px, 0, 0)" },
  { offset: 0.9, transform: "translate3d(-10px, 0, 0)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/shakeY.js
var shakeY = [
  { offset: 0, transform: "translate3d(0, 0, 0)" },
  { offset: 0.1, transform: "translate3d(0, -10px, 0)" },
  { offset: 0.2, transform: "translate3d(0, 10px, 0)" },
  { offset: 0.3, transform: "translate3d(0, -10px, 0)" },
  { offset: 0.4, transform: "translate3d(0, 10px, 0)" },
  { offset: 0.5, transform: "translate3d(0, -10px, 0)" },
  { offset: 0.6, transform: "translate3d(0, 10px, 0)" },
  { offset: 0.7, transform: "translate3d(0, -10px, 0)" },
  { offset: 0.8, transform: "translate3d(0, 10px, 0)" },
  { offset: 0.9, transform: "translate3d(0, -10px, 0)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/swing.js
var swing = [
  { offset: 0.2, transform: "rotate3d(0, 0, 1, 15deg)" },
  { offset: 0.4, transform: "rotate3d(0, 0, 1, -10deg)" },
  { offset: 0.6, transform: "rotate3d(0, 0, 1, 5deg)" },
  { offset: 0.8, transform: "rotate3d(0, 0, 1, -5deg)" },
  { offset: 1, transform: "rotate3d(0, 0, 1, 0deg)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/tada.js
var tada = [
  { offset: 0, transform: "scale3d(1, 1, 1)" },
  { offset: 0.1, transform: "scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg)" },
  { offset: 0.2, transform: "scale3d(0.9, 0.9, 0.9) rotate3d(0, 0, 1, -3deg)" },
  { offset: 0.3, transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)" },
  { offset: 0.4, transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)" },
  { offset: 0.5, transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)" },
  { offset: 0.6, transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)" },
  { offset: 0.7, transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)" },
  { offset: 0.8, transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, -3deg)" },
  { offset: 0.9, transform: "scale3d(1.1, 1.1, 1.1) rotate3d(0, 0, 1, 3deg)" },
  { offset: 1, transform: "scale3d(1, 1, 1)" }
];

// node_modules/@shoelace-style/animations/dist/attention_seekers/wobble.js
var wobble = [
  { offset: 0, transform: "translate3d(0, 0, 0)" },
  { offset: 0.15, transform: "translate3d(-25%, 0, 0) rotate3d(0, 0, 1, -5deg)" },
  { offset: 0.3, transform: "translate3d(20%, 0, 0) rotate3d(0, 0, 1, 3deg)" },
  { offset: 0.45, transform: "translate3d(-15%, 0, 0) rotate3d(0, 0, 1, -3deg)" },
  { offset: 0.6, transform: "translate3d(10%, 0, 0) rotate3d(0, 0, 1, 2deg)" },
  { offset: 0.75, transform: "translate3d(-5%, 0, 0) rotate3d(0, 0, 1, -1deg)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/back_entrances/backInDown.js
var backInDown = [
  { offset: 0, transform: "translateY(-1200px) scale(0.7)", opacity: "0.7" },
  { offset: 0.8, transform: "translateY(0px) scale(0.7)", opacity: "0.7" },
  { offset: 1, transform: "scale(1)", opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/back_entrances/backInLeft.js
var backInLeft = [
  { offset: 0, transform: "translateX(-2000px) scale(0.7)", opacity: "0.7" },
  { offset: 0.8, transform: "translateX(0px) scale(0.7)", opacity: "0.7" },
  { offset: 1, transform: "scale(1)", opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/back_entrances/backInRight.js
var backInRight = [
  { offset: 0, transform: "translateX(2000px) scale(0.7)", opacity: "0.7" },
  { offset: 0.8, transform: "translateX(0px) scale(0.7)", opacity: "0.7" },
  { offset: 1, transform: "scale(1)", opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/back_entrances/backInUp.js
var backInUp = [
  { offset: 0, transform: "translateY(1200px) scale(0.7)", opacity: "0.7" },
  { offset: 0.8, transform: "translateY(0px) scale(0.7)", opacity: "0.7" },
  { offset: 1, transform: "scale(1)", opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/back_exits/backOutDown.js
var backOutDown = [
  { offset: 0, transform: "scale(1)", opacity: "1" },
  { offset: 0.2, transform: "translateY(0px) scale(0.7)", opacity: "0.7" },
  { offset: 1, transform: "translateY(700px) scale(0.7)", opacity: "0.7" }
];

// node_modules/@shoelace-style/animations/dist/back_exits/backOutLeft.js
var backOutLeft = [
  { offset: 0, transform: "scale(1)", opacity: "1" },
  { offset: 0.2, transform: "translateX(0px) scale(0.7)", opacity: "0.7" },
  { offset: 1, transform: "translateX(-2000px) scale(0.7)", opacity: "0.7" }
];

// node_modules/@shoelace-style/animations/dist/back_exits/backOutRight.js
var backOutRight = [
  { offset: 0, transform: "scale(1)", opacity: "1" },
  { offset: 0.2, transform: "translateX(0px) scale(0.7)", opacity: "0.7" },
  { offset: 1, transform: "translateX(2000px) scale(0.7)", opacity: "0.7" }
];

// node_modules/@shoelace-style/animations/dist/back_exits/backOutUp.js
var backOutUp = [
  { offset: 0, transform: "scale(1)", opacity: "1" },
  { offset: 0.2, transform: "translateY(0px) scale(0.7)", opacity: "0.7" },
  { offset: 1, transform: "translateY(-700px) scale(0.7)", opacity: "0.7" }
];

// node_modules/@shoelace-style/animations/dist/bouncing_entrances/bounceIn.js
var bounceIn = [
  { offset: 0, opacity: "0", transform: "scale3d(0.3, 0.3, 0.3)" },
  { offset: 0, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.2, transform: "scale3d(1.1, 1.1, 1.1)" },
  { offset: 0.2, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.4, transform: "scale3d(0.9, 0.9, 0.9)" },
  { offset: 0.4, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.6, opacity: "1", transform: "scale3d(1.03, 1.03, 1.03)" },
  { offset: 0.6, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.8, transform: "scale3d(0.97, 0.97, 0.97)" },
  { offset: 0.8, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 1, opacity: "1", transform: "scale3d(1, 1, 1)" },
  { offset: 1, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" }
];

// node_modules/@shoelace-style/animations/dist/bouncing_entrances/bounceInDown.js
var bounceInDown = [
  { offset: 0, opacity: "0", transform: "translate3d(0, -3000px, 0) scaleY(3)" },
  { offset: 0, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.6, opacity: "1", transform: "translate3d(0, 25px, 0) scaleY(0.9)" },
  { offset: 0.6, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.75, transform: "translate3d(0, -10px, 0) scaleY(0.95)" },
  { offset: 0.75, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.9, transform: "translate3d(0, 5px, 0) scaleY(0.985)" },
  { offset: 0.9, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" },
  { offset: 1, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" }
];

// node_modules/@shoelace-style/animations/dist/bouncing_entrances/bounceInLeft.js
var bounceInLeft = [
  { offset: 0, opacity: "0", transform: "translate3d(-3000px, 0, 0) scaleX(3)" },
  { offset: 0, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.6, opacity: "1", transform: "translate3d(25px, 0, 0) scaleX(1)" },
  { offset: 0.6, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.75, transform: "translate3d(-10px, 0, 0) scaleX(0.98)" },
  { offset: 0.75, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.9, transform: "translate3d(5px, 0, 0) scaleX(0.995)" },
  { offset: 0.9, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" },
  { offset: 1, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" }
];

// node_modules/@shoelace-style/animations/dist/bouncing_entrances/bounceInRight.js
var bounceInRight = [
  { offset: 0, opacity: "0", transform: "translate3d(3000px, 0, 0) scaleX(3)" },
  { offset: 0, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.6, opacity: "1", transform: "translate3d(-25px, 0, 0) scaleX(1)" },
  { offset: 0.6, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.75, transform: "translate3d(10px, 0, 0) scaleX(0.98)" },
  { offset: 0.75, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.9, transform: "translate3d(-5px, 0, 0) scaleX(0.995)" },
  { offset: 0.9, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" },
  { offset: 1, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" }
];

// node_modules/@shoelace-style/animations/dist/bouncing_entrances/bounceInUp.js
var bounceInUp = [
  { offset: 0, opacity: "0", transform: "translate3d(0, 3000px, 0) scaleY(5)" },
  { offset: 0, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.6, opacity: "1", transform: "translate3d(0, -20px, 0) scaleY(0.9)" },
  { offset: 0.6, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.75, transform: "translate3d(0, 10px, 0) scaleY(0.95)" },
  { offset: 0.75, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 0.9, transform: "translate3d(0, -5px, 0) scaleY(0.985)" },
  { offset: 0.9, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" },
  { offset: 1, easing: "cubic-bezier(0.215, 0.61, 0.355, 1)" }
];

// node_modules/@shoelace-style/animations/dist/bouncing_exits/bounceOut.js
var bounceOut = [
  { offset: 0.2, transform: "scale3d(0.9, 0.9, 0.9)" },
  { offset: 0.5, opacity: "1", transform: "scale3d(1.1, 1.1, 1.1)" },
  { offset: 0.55, opacity: "1", transform: "scale3d(1.1, 1.1, 1.1)" },
  { offset: 1, opacity: "0", transform: "scale3d(0.3, 0.3, 0.3)" }
];

// node_modules/@shoelace-style/animations/dist/bouncing_exits/bounceOutDown.js
var bounceOutDown = [
  { offset: 0.2, transform: "translate3d(0, 10px, 0) scaleY(0.985)" },
  { offset: 0.4, opacity: "1", transform: "translate3d(0, -20px, 0) scaleY(0.9)" },
  { offset: 0.45, opacity: "1", transform: "translate3d(0, -20px, 0) scaleY(0.9)" },
  { offset: 1, opacity: "0", transform: "translate3d(0, 2000px, 0) scaleY(3)" }
];

// node_modules/@shoelace-style/animations/dist/bouncing_exits/bounceOutLeft.js
var bounceOutLeft = [
  { offset: 0.2, opacity: "1", transform: "translate3d(20px, 0, 0) scaleX(0.9)" },
  { offset: 1, opacity: "0", transform: "translate3d(-2000px, 0, 0) scaleX(2)" }
];

// node_modules/@shoelace-style/animations/dist/bouncing_exits/bounceOutRight.js
var bounceOutRight = [
  { offset: 0.2, opacity: "1", transform: "translate3d(-20px, 0, 0) scaleX(0.9)" },
  { offset: 1, opacity: "0", transform: "translate3d(2000px, 0, 0) scaleX(2)" }
];

// node_modules/@shoelace-style/animations/dist/bouncing_exits/bounceOutUp.js
var bounceOutUp = [
  { offset: 0.2, transform: "translate3d(0, -10px, 0) scaleY(0.985)" },
  { offset: 0.4, opacity: "1", transform: "translate3d(0, 20px, 0) scaleY(0.9)" },
  { offset: 0.45, opacity: "1", transform: "translate3d(0, 20px, 0) scaleY(0.9)" },
  { offset: 1, opacity: "0", transform: "translate3d(0, -2000px, 0) scaleY(3)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeIn.js
var fadeIn = [
  { offset: 0, opacity: "0" },
  { offset: 1, opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInBottomLeft.js
var fadeInBottomLeft = [
  { offset: 0, opacity: "0", transform: "translate3d(-100%, 100%, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInBottomRight.js
var fadeInBottomRight = [
  { offset: 0, opacity: "0", transform: "translate3d(100%, 100%, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInDown.js
var fadeInDown = [
  { offset: 0, opacity: "0", transform: "translate3d(0, -100%, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInDownBig.js
var fadeInDownBig = [
  { offset: 0, opacity: "0", transform: "translate3d(0, -2000px, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInLeft.js
var fadeInLeft = [
  { offset: 0, opacity: "0", transform: "translate3d(-100%, 0, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInLeftBig.js
var fadeInLeftBig = [
  { offset: 0, opacity: "0", transform: "translate3d(-2000px, 0, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInRight.js
var fadeInRight = [
  { offset: 0, opacity: "0", transform: "translate3d(100%, 0, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInRightBig.js
var fadeInRightBig = [
  { offset: 0, opacity: "0", transform: "translate3d(2000px, 0, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInTopLeft.js
var fadeInTopLeft = [
  { offset: 0, opacity: "0", transform: "translate3d(-100%, -100%, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInTopRight.js
var fadeInTopRight = [
  { offset: 0, opacity: "0", transform: "translate3d(100%, -100%, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInUp.js
var fadeInUp = [
  { offset: 0, opacity: "0", transform: "translate3d(0, 100%, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_entrances/fadeInUpBig.js
var fadeInUpBig = [
  { offset: 0, opacity: "0", transform: "translate3d(0, 2000px, 0)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOut.js
var fadeOut = [
  { offset: 0, opacity: "1" },
  { offset: 1, opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutBottomLeft.js
var fadeOutBottomLeft = [
  { offset: 0, opacity: "1", transform: "translate3d(0, 0, 0)" },
  { offset: 1, opacity: "0", transform: "translate3d(-100%, 100%, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutBottomRight.js
var fadeOutBottomRight = [
  { offset: 0, opacity: "1", transform: "translate3d(0, 0, 0)" },
  { offset: 1, opacity: "0", transform: "translate3d(100%, 100%, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutDown.js
var fadeOutDown = [
  { offset: 0, opacity: "1" },
  { offset: 1, opacity: "0", transform: "translate3d(0, 100%, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutDownBig.js
var fadeOutDownBig = [
  { offset: 0, opacity: "1" },
  { offset: 1, opacity: "0", transform: "translate3d(0, 2000px, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutLeft.js
var fadeOutLeft = [
  { offset: 0, opacity: "1" },
  { offset: 1, opacity: "0", transform: "translate3d(-100%, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutLeftBig.js
var fadeOutLeftBig = [
  { offset: 0, opacity: "1" },
  { offset: 1, opacity: "0", transform: "translate3d(-2000px, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutRight.js
var fadeOutRight = [
  { offset: 0, opacity: "1" },
  { offset: 1, opacity: "0", transform: "translate3d(100%, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutRightBig.js
var fadeOutRightBig = [
  { offset: 0, opacity: "1" },
  { offset: 1, opacity: "0", transform: "translate3d(2000px, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutTopLeft.js
var fadeOutTopLeft = [
  { offset: 0, opacity: "1", transform: "translate3d(0, 0, 0)" },
  { offset: 1, opacity: "0", transform: "translate3d(-100%, -100%, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutTopRight.js
var fadeOutTopRight = [
  { offset: 0, opacity: "1", transform: "translate3d(0, 0, 0)" },
  { offset: 1, opacity: "0", transform: "translate3d(100%, -100%, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutUp.js
var fadeOutUp = [
  { offset: 0, opacity: "1" },
  { offset: 1, opacity: "0", transform: "translate3d(0, -100%, 0)" }
];

// node_modules/@shoelace-style/animations/dist/fading_exits/fadeOutUpBig.js
var fadeOutUpBig = [
  { offset: 0, opacity: "1" },
  { offset: 1, opacity: "0", transform: "translate3d(0, -2000px, 0)" }
];

// node_modules/@shoelace-style/animations/dist/flippers/flip.js
var flip3 = [
  {
    offset: 0,
    transform: "perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, -360deg)",
    easing: "ease-out"
  },
  {
    offset: 0.4,
    transform: "perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)\n      rotate3d(0, 1, 0, -190deg)",
    easing: "ease-out"
  },
  {
    offset: 0.5,
    transform: "perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 150px)\n      rotate3d(0, 1, 0, -170deg)",
    easing: "ease-in"
  },
  {
    offset: 0.8,
    transform: "perspective(400px) scale3d(0.95, 0.95, 0.95) translate3d(0, 0, 0)\n      rotate3d(0, 1, 0, 0deg)",
    easing: "ease-in"
  },
  {
    offset: 1,
    transform: "perspective(400px) scale3d(1, 1, 1) translate3d(0, 0, 0) rotate3d(0, 1, 0, 0deg)",
    easing: "ease-in"
  }
];

// node_modules/@shoelace-style/animations/dist/flippers/flipInX.js
var flipInX = [
  { offset: 0, transform: "perspective(400px) rotate3d(1, 0, 0, 90deg)", easing: "ease-in", opacity: "0" },
  { offset: 0.4, transform: "perspective(400px) rotate3d(1, 0, 0, -20deg)", easing: "ease-in" },
  { offset: 0.6, transform: "perspective(400px) rotate3d(1, 0, 0, 10deg)", opacity: "1" },
  { offset: 0.8, transform: "perspective(400px) rotate3d(1, 0, 0, -5deg)" },
  { offset: 1, transform: "perspective(400px)" }
];

// node_modules/@shoelace-style/animations/dist/flippers/flipInY.js
var flipInY = [
  { offset: 0, transform: "perspective(400px) rotate3d(0, 1, 0, 90deg)", easing: "ease-in", opacity: "0" },
  { offset: 0.4, transform: "perspective(400px) rotate3d(0, 1, 0, -20deg)", easing: "ease-in" },
  { offset: 0.6, transform: "perspective(400px) rotate3d(0, 1, 0, 10deg)", opacity: "1" },
  { offset: 0.8, transform: "perspective(400px) rotate3d(0, 1, 0, -5deg)" },
  { offset: 1, transform: "perspective(400px)" }
];

// node_modules/@shoelace-style/animations/dist/flippers/flipOutX.js
var flipOutX = [
  { offset: 0, transform: "perspective(400px)" },
  { offset: 0.3, transform: "perspective(400px) rotate3d(1, 0, 0, -20deg)", opacity: "1" },
  { offset: 1, transform: "perspective(400px) rotate3d(1, 0, 0, 90deg)", opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/flippers/flipOutY.js
var flipOutY = [
  { offset: 0, transform: "perspective(400px)" },
  { offset: 0.3, transform: "perspective(400px) rotate3d(0, 1, 0, -15deg)", opacity: "1" },
  { offset: 1, transform: "perspective(400px) rotate3d(0, 1, 0, 90deg)", opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/lightspeed/lightSpeedInLeft.js
var lightSpeedInLeft = [
  { offset: 0, transform: "translate3d(-100%, 0, 0) skewX(30deg)", opacity: "0" },
  { offset: 0.6, transform: "skewX(-20deg)", opacity: "1" },
  { offset: 0.8, transform: "skewX(5deg)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/lightspeed/lightSpeedInRight.js
var lightSpeedInRight = [
  { offset: 0, transform: "translate3d(100%, 0, 0) skewX(-30deg)", opacity: "0" },
  { offset: 0.6, transform: "skewX(20deg)", opacity: "1" },
  { offset: 0.8, transform: "skewX(-5deg)" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/lightspeed/lightSpeedOutLeft.js
var lightSpeedOutLeft = [
  { offset: 0, opacity: "1" },
  { offset: 1, transform: "translate3d(-100%, 0, 0) skewX(-30deg)", opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/lightspeed/lightSpeedOutRight.js
var lightSpeedOutRight = [
  { offset: 0, opacity: "1" },
  { offset: 1, transform: "translate3d(100%, 0, 0) skewX(30deg)", opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/rotating_entrances/rotateIn.js
var rotateIn = [
  { offset: 0, transform: "rotate3d(0, 0, 1, -200deg)", opacity: "0" },
  { offset: 1, transform: "translate3d(0, 0, 0)", opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/rotating_entrances/rotateInDownLeft.js
var rotateInDownLeft = [
  { offset: 0, transform: "rotate3d(0, 0, 1, -45deg)", opacity: "0" },
  { offset: 1, transform: "translate3d(0, 0, 0)", opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/rotating_entrances/rotateInDownRight.js
var rotateInDownRight = [
  { offset: 0, transform: "rotate3d(0, 0, 1, 45deg)", opacity: "0" },
  { offset: 1, transform: "translate3d(0, 0, 0)", opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/rotating_entrances/rotateInUpLeft.js
var rotateInUpLeft = [
  { offset: 0, transform: "rotate3d(0, 0, 1, 45deg)", opacity: "0" },
  { offset: 1, transform: "translate3d(0, 0, 0)", opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/rotating_entrances/rotateInUpRight.js
var rotateInUpRight = [
  { offset: 0, transform: "rotate3d(0, 0, 1, -90deg)", opacity: "0" },
  { offset: 1, transform: "translate3d(0, 0, 0)", opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/rotating_exits/rotateOut.js
var rotateOut = [
  { offset: 0, opacity: "1" },
  { offset: 1, transform: "rotate3d(0, 0, 1, 200deg)", opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/rotating_exits/rotateOutDownLeft.js
var rotateOutDownLeft = [
  { offset: 0, opacity: "1" },
  { offset: 1, transform: "rotate3d(0, 0, 1, 45deg)", opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/rotating_exits/rotateOutDownRight.js
var rotateOutDownRight = [
  { offset: 0, opacity: "1" },
  { offset: 1, transform: "rotate3d(0, 0, 1, -45deg)", opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/rotating_exits/rotateOutUpLeft.js
var rotateOutUpLeft = [
  { offset: 0, opacity: "1" },
  { offset: 1, transform: "rotate3d(0, 0, 1, -45deg)", opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/rotating_exits/rotateOutUpRight.js
var rotateOutUpRight = [
  { offset: 0, opacity: "1" },
  { offset: 1, transform: "rotate3d(0, 0, 1, 90deg)", opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/sliding_entrances/slideInDown.js
var slideInDown = [
  { offset: 0, transform: "translate3d(0, -100%, 0)", visibility: "visible" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/sliding_entrances/slideInLeft.js
var slideInLeft = [
  { offset: 0, transform: "translate3d(-100%, 0, 0)", visibility: "visible" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/sliding_entrances/slideInRight.js
var slideInRight = [
  { offset: 0, transform: "translate3d(100%, 0, 0)", visibility: "visible" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/sliding_entrances/slideInUp.js
var slideInUp = [
  { offset: 0, transform: "translate3d(0, 100%, 0)", visibility: "visible" },
  { offset: 1, transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/sliding_exits/slideOutDown.js
var slideOutDown = [
  { offset: 0, transform: "translate3d(0, 0, 0)" },
  { offset: 1, visibility: "hidden", transform: "translate3d(0, 100%, 0)" }
];

// node_modules/@shoelace-style/animations/dist/sliding_exits/slideOutLeft.js
var slideOutLeft = [
  { offset: 0, transform: "translate3d(0, 0, 0)" },
  { offset: 1, visibility: "hidden", transform: "translate3d(-100%, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/sliding_exits/slideOutRight.js
var slideOutRight = [
  { offset: 0, transform: "translate3d(0, 0, 0)" },
  { offset: 1, visibility: "hidden", transform: "translate3d(100%, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/sliding_exits/slideOutUp.js
var slideOutUp = [
  { offset: 0, transform: "translate3d(0, 0, 0)" },
  { offset: 1, visibility: "hidden", transform: "translate3d(0, -100%, 0)" }
];

// node_modules/@shoelace-style/animations/dist/specials/hinge.js
var hinge = [
  { offset: 0, easing: "ease-in-out" },
  { offset: 0.2, transform: "rotate3d(0, 0, 1, 80deg)", easing: "ease-in-out" },
  { offset: 0.4, transform: "rotate3d(0, 0, 1, 60deg)", easing: "ease-in-out", opacity: "1" },
  { offset: 0.6, transform: "rotate3d(0, 0, 1, 80deg)", easing: "ease-in-out" },
  { offset: 0.8, transform: "rotate3d(0, 0, 1, 60deg)", easing: "ease-in-out", opacity: "1" },
  { offset: 1, transform: "translate3d(0, 700px, 0)", opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/specials/jackInTheBox.js
var jackInTheBox = [
  { offset: 0, opacity: "0", transform: "scale(0.1) rotate(30deg)", "transform-origin": "center bottom" },
  { offset: 0.5, transform: "rotate(-10deg)" },
  { offset: 0.7, transform: "rotate(3deg)" },
  { offset: 1, opacity: "1", transform: "scale(1)" }
];

// node_modules/@shoelace-style/animations/dist/specials/rollIn.js
var rollIn = [
  { offset: 0, opacity: "0", transform: "translate3d(-100%, 0, 0) rotate3d(0, 0, 1, -120deg)" },
  { offset: 1, opacity: "1", transform: "translate3d(0, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/specials/rollOut.js
var rollOut = [
  { offset: 0, opacity: "1" },
  { offset: 1, opacity: "0", transform: "translate3d(100%, 0, 0) rotate3d(0, 0, 1, 120deg)" }
];

// node_modules/@shoelace-style/animations/dist/zooming_entrances/zoomIn.js
var zoomIn = [
  { offset: 0, opacity: "0", transform: "scale3d(0.3, 0.3, 0.3)" },
  { offset: 0.5, opacity: "1" }
];

// node_modules/@shoelace-style/animations/dist/zooming_entrances/zoomInDown.js
var zoomInDown = [
  {
    offset: 0,
    opacity: "0",
    transform: "scale3d(0.1, 0.1, 0.1) translate3d(0, -1000px, 0)",
    easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
  },
  {
    offset: 0.6,
    opacity: "1",
    transform: "scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0)",
    easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
  }
];

// node_modules/@shoelace-style/animations/dist/zooming_entrances/zoomInLeft.js
var zoomInLeft = [
  {
    offset: 0,
    opacity: "0",
    transform: "scale3d(0.1, 0.1, 0.1) translate3d(-1000px, 0, 0)",
    easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
  },
  {
    offset: 0.6,
    opacity: "1",
    transform: "scale3d(0.475, 0.475, 0.475) translate3d(10px, 0, 0)",
    easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
  }
];

// node_modules/@shoelace-style/animations/dist/zooming_entrances/zoomInRight.js
var zoomInRight = [
  {
    offset: 0,
    opacity: "0",
    transform: "scale3d(0.1, 0.1, 0.1) translate3d(1000px, 0, 0)",
    easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
  },
  {
    offset: 0.6,
    opacity: "1",
    transform: "scale3d(0.475, 0.475, 0.475) translate3d(-10px, 0, 0)",
    easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
  }
];

// node_modules/@shoelace-style/animations/dist/zooming_entrances/zoomInUp.js
var zoomInUp = [
  {
    offset: 0,
    opacity: "0",
    transform: "scale3d(0.1, 0.1, 0.1) translate3d(0, 1000px, 0)",
    easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
  },
  {
    offset: 0.6,
    opacity: "1",
    transform: "scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0)",
    easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
  }
];

// node_modules/@shoelace-style/animations/dist/zooming_exits/zoomOut.js
var zoomOut = [
  { offset: 0, opacity: "1" },
  { offset: 0.5, opacity: "0", transform: "scale3d(0.3, 0.3, 0.3)" },
  { offset: 1, opacity: "0" }
];

// node_modules/@shoelace-style/animations/dist/zooming_exits/zoomOutDown.js
var zoomOutDown = [
  {
    offset: 0.4,
    opacity: "1",
    transform: "scale3d(0.475, 0.475, 0.475) translate3d(0, -60px, 0)",
    easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
  },
  {
    offset: 1,
    opacity: "0",
    transform: "scale3d(0.1, 0.1, 0.1) translate3d(0, 2000px, 0)",
    easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
  }
];

// node_modules/@shoelace-style/animations/dist/zooming_exits/zoomOutLeft.js
var zoomOutLeft = [
  { offset: 0.4, opacity: "1", transform: "scale3d(0.475, 0.475, 0.475) translate3d(42px, 0, 0)" },
  { offset: 1, opacity: "0", transform: "scale(0.1) translate3d(-2000px, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/zooming_exits/zoomOutRight.js
var zoomOutRight = [
  { offset: 0.4, opacity: "1", transform: "scale3d(0.475, 0.475, 0.475) translate3d(-42px, 0, 0)" },
  { offset: 1, opacity: "0", transform: "scale(0.1) translate3d(2000px, 0, 0)" }
];

// node_modules/@shoelace-style/animations/dist/zooming_exits/zoomOutUp.js
var zoomOutUp = [
  {
    offset: 0.4,
    opacity: "1",
    transform: "scale3d(0.475, 0.475, 0.475) translate3d(0, 60px, 0)",
    easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
  },
  {
    offset: 1,
    opacity: "0",
    transform: "scale3d(0.1, 0.1, 0.1) translate3d(0, -2000px, 0)",
    easing: "cubic-bezier(0.175, 0.885, 0.32, 1)"
  }
];

// node_modules/@shoelace-style/animations/dist/easings/easings.js
var easings = {
  linear: "linear",
  ease: "ease",
  easeIn: "ease-in",
  easeOut: "ease-out",
  easeInOut: "ease-in-out",
  easeInSine: "cubic-bezier(0.47, 0, 0.745, 0.715)",
  easeOutSine: "cubic-bezier(0.39, 0.575, 0.565, 1)",
  easeInOutSine: "cubic-bezier(0.445, 0.05, 0.55, 0.95)",
  easeInQuad: "cubic-bezier(0.55, 0.085, 0.68, 0.53)",
  easeOutQuad: "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
  easeInOutQuad: "cubic-bezier(0.455, 0.03, 0.515, 0.955)",
  easeInCubic: "cubic-bezier(0.55, 0.055, 0.675, 0.19)",
  easeOutCubic: "cubic-bezier(0.215, 0.61, 0.355, 1)",
  easeInOutCubic: "cubic-bezier(0.645, 0.045, 0.355, 1)",
  easeInQuart: "cubic-bezier(0.895, 0.03, 0.685, 0.22)",
  easeOutQuart: "cubic-bezier(0.165, 0.84, 0.44, 1)",
  easeInOutQuart: "cubic-bezier(0.77, 0, 0.175, 1)",
  easeInQuint: "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
  easeOutQuint: "cubic-bezier(0.23, 1, 0.32, 1)",
  easeInOutQuint: "cubic-bezier(0.86, 0, 0.07, 1)",
  easeInExpo: "cubic-bezier(0.95, 0.05, 0.795, 0.035)",
  easeOutExpo: "cubic-bezier(0.19, 1, 0.22, 1)",
  easeInOutExpo: "cubic-bezier(1, 0, 0, 1)",
  easeInCirc: "cubic-bezier(0.6, 0.04, 0.98, 0.335)",
  easeOutCirc: "cubic-bezier(0.075, 0.82, 0.165, 1)",
  easeInOutCirc: "cubic-bezier(0.785, 0.135, 0.15, 0.86)",
  easeInBack: "cubic-bezier(0.6, -0.28, 0.735, 0.045)",
  easeOutBack: "cubic-bezier(0.175, 0.885, 0.32, 1.275)",
  easeInOutBack: "cubic-bezier(0.68, -0.55, 0.265, 1.55)"
};

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.HETQRWW5.js
var SlAnimation = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasStarted = false;
    this.name = "none";
    this.play = false;
    this.delay = 0;
    this.direction = "normal";
    this.duration = 1e3;
    this.easing = "linear";
    this.endDelay = 0;
    this.fill = "auto";
    this.iterations = Infinity;
    this.iterationStart = 0;
    this.playbackRate = 1;
    this.handleAnimationFinish = () => {
      this.play = false;
      this.hasStarted = false;
      this.emit("sl-finish");
    };
    this.handleAnimationCancel = () => {
      this.play = false;
      this.hasStarted = false;
      this.emit("sl-cancel");
    };
  }
  /** Gets and sets the current animation time. */
  get currentTime() {
    var _a, _b;
    return (_b = (_a = this.animation) == null ? void 0 : _a.currentTime) != null ? _b : 0;
  }
  set currentTime(time) {
    if (this.animation) {
      this.animation.currentTime = time;
    }
  }
  connectedCallback() {
    super.connectedCallback();
    this.createAnimation();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.destroyAnimation();
  }
  handleSlotChange() {
    this.destroyAnimation();
    this.createAnimation();
  }
  async createAnimation() {
    var _a, _b;
    const easing = (_a = dist_exports.easings[this.easing]) != null ? _a : this.easing;
    const keyframes = (_b = this.keyframes) != null ? _b : dist_exports[this.name];
    const slot = await this.defaultSlot;
    const element = slot.assignedElements()[0];
    if (!element || !keyframes) {
      return false;
    }
    this.destroyAnimation();
    this.animation = element.animate(keyframes, {
      delay: this.delay,
      direction: this.direction,
      duration: this.duration,
      easing,
      endDelay: this.endDelay,
      fill: this.fill,
      iterationStart: this.iterationStart,
      iterations: this.iterations
    });
    this.animation.playbackRate = this.playbackRate;
    this.animation.addEventListener("cancel", this.handleAnimationCancel);
    this.animation.addEventListener("finish", this.handleAnimationFinish);
    if (this.play) {
      this.hasStarted = true;
      this.emit("sl-start");
    } else {
      this.animation.pause();
    }
    return true;
  }
  destroyAnimation() {
    if (this.animation) {
      this.animation.cancel();
      this.animation.removeEventListener("cancel", this.handleAnimationCancel);
      this.animation.removeEventListener("finish", this.handleAnimationFinish);
      this.hasStarted = false;
    }
  }
  handleAnimationChange() {
    if (!this.hasUpdated) {
      return;
    }
    this.createAnimation();
  }
  handlePlayChange() {
    if (this.animation) {
      if (this.play && !this.hasStarted) {
        this.hasStarted = true;
        this.emit("sl-start");
      }
      if (this.play) {
        this.animation.play();
      } else {
        this.animation.pause();
      }
      return true;
    }
    return false;
  }
  handlePlaybackRateChange() {
    if (this.animation) {
      this.animation.playbackRate = this.playbackRate;
    }
  }
  /** Clears all keyframe effects caused by this animation and aborts its playback. */
  cancel() {
    var _a;
    (_a = this.animation) == null ? void 0 : _a.cancel();
  }
  /** Sets the playback time to the end of the animation corresponding to the current playback direction. */
  finish() {
    var _a;
    (_a = this.animation) == null ? void 0 : _a.finish();
  }
  render() {
    return x` <slot @slotchange=${this.handleSlotChange}></slot> `;
  }
};
SlAnimation.styles = [component_styles_default, animation_styles_default];
__decorateClass([
  r7("slot")
], SlAnimation.prototype, "defaultSlot", 2);
__decorateClass([
  n4()
], SlAnimation.prototype, "name", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlAnimation.prototype, "play", 2);
__decorateClass([
  n4({ type: Number })
], SlAnimation.prototype, "delay", 2);
__decorateClass([
  n4()
], SlAnimation.prototype, "direction", 2);
__decorateClass([
  n4({ type: Number })
], SlAnimation.prototype, "duration", 2);
__decorateClass([
  n4()
], SlAnimation.prototype, "easing", 2);
__decorateClass([
  n4({ attribute: "end-delay", type: Number })
], SlAnimation.prototype, "endDelay", 2);
__decorateClass([
  n4()
], SlAnimation.prototype, "fill", 2);
__decorateClass([
  n4({ type: Number })
], SlAnimation.prototype, "iterations", 2);
__decorateClass([
  n4({ attribute: "iteration-start", type: Number })
], SlAnimation.prototype, "iterationStart", 2);
__decorateClass([
  n4({ attribute: false })
], SlAnimation.prototype, "keyframes", 2);
__decorateClass([
  n4({ attribute: "playback-rate", type: Number })
], SlAnimation.prototype, "playbackRate", 2);
__decorateClass([
  watch([
    "name",
    "delay",
    "direction",
    "duration",
    "easing",
    "endDelay",
    "fill",
    "iterations",
    "iterationsStart",
    "keyframes"
  ])
], SlAnimation.prototype, "handleAnimationChange", 1);
__decorateClass([
  watch("play")
], SlAnimation.prototype, "handlePlayChange", 1);
__decorateClass([
  watch("playbackRate")
], SlAnimation.prototype, "handlePlaybackRateChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.JNYTWHJZ.js
SlAnimation.define("sl-animation");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.K35GSB4N.js
var avatar_styles_default = i`
  :host {
    display: inline-block;

    --size: 3rem;
  }

  .avatar {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    position: relative;
    width: var(--size);
    height: var(--size);
    background-color: var(--sl-color-neutral-400);
    font-family: var(--sl-font-sans);
    font-size: calc(var(--size) * 0.5);
    font-weight: var(--sl-font-weight-normal);
    color: var(--sl-color-neutral-0);
    user-select: none;
    -webkit-user-select: none;
    vertical-align: middle;
  }

  .avatar--circle,
  .avatar--circle .avatar__image {
    border-radius: var(--sl-border-radius-circle);
  }

  .avatar--rounded,
  .avatar--rounded .avatar__image {
    border-radius: var(--sl-border-radius-medium);
  }

  .avatar--square {
    border-radius: 0;
  }

  .avatar__icon {
    display: flex;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .avatar__initials {
    line-height: 1;
    text-transform: uppercase;
  }

  .avatar__image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    overflow: hidden;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FJR4DWNT.js
var SlAvatar = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasError = false;
    this.image = "";
    this.label = "";
    this.initials = "";
    this.loading = "eager";
    this.shape = "circle";
  }
  handleImageChange() {
    this.hasError = false;
  }
  handleImageLoadError() {
    this.hasError = true;
    this.emit("sl-error");
  }
  render() {
    const avatarWithImage = x`
      <img
        part="image"
        class="avatar__image"
        src="${this.image}"
        loading="${this.loading}"
        alt=""
        @error="${this.handleImageLoadError}"
      />
    `;
    let avatarWithoutImage = x``;
    if (this.initials) {
      avatarWithoutImage = x`<div part="initials" class="avatar__initials">${this.initials}</div>`;
    } else {
      avatarWithoutImage = x`
        <div part="icon" class="avatar__icon" aria-hidden="true">
          <slot name="icon">
            <sl-icon name="person-fill" library="system"></sl-icon>
          </slot>
        </div>
      `;
    }
    return x`
      <div
        part="base"
        class=${e7({
      avatar: true,
      "avatar--circle": this.shape === "circle",
      "avatar--rounded": this.shape === "rounded",
      "avatar--square": this.shape === "square"
    })}
        role="img"
        aria-label=${this.label}
      >
        ${this.image && !this.hasError ? avatarWithImage : avatarWithoutImage}
      </div>
    `;
  }
};
SlAvatar.styles = [component_styles_default, avatar_styles_default];
SlAvatar.dependencies = {
  "sl-icon": SlIcon
};
__decorateClass([
  r6()
], SlAvatar.prototype, "hasError", 2);
__decorateClass([
  n4()
], SlAvatar.prototype, "image", 2);
__decorateClass([
  n4()
], SlAvatar.prototype, "label", 2);
__decorateClass([
  n4()
], SlAvatar.prototype, "initials", 2);
__decorateClass([
  n4()
], SlAvatar.prototype, "loading", 2);
__decorateClass([
  n4({ reflect: true })
], SlAvatar.prototype, "shape", 2);
__decorateClass([
  watch("image")
], SlAvatar.prototype, "handleImageChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.AXM6YCRZ.js
SlAvatar.define("sl-avatar");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.62HVOPEB.js
var alert_styles_default = i`
  :host {
    display: contents;

    /* For better DX, we'll reset the margin here so the base part can inherit it */
    margin: 0;
  }

  .alert {
    position: relative;
    display: flex;
    align-items: stretch;
    background-color: var(--sl-panel-background-color);
    border: solid var(--sl-panel-border-width) var(--sl-panel-border-color);
    border-top-width: calc(var(--sl-panel-border-width) * 3);
    border-radius: var(--sl-border-radius-medium);
    font-family: var(--sl-font-sans);
    font-size: var(--sl-font-size-small);
    font-weight: var(--sl-font-weight-normal);
    line-height: 1.6;
    color: var(--sl-color-neutral-700);
    margin: inherit;
    overflow: hidden;
  }

  .alert:not(.alert--has-icon) .alert__icon,
  .alert:not(.alert--closable) .alert__close-button {
    display: none;
  }

  .alert__icon {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-large);
    padding-inline-start: var(--sl-spacing-large);
  }

  .alert--has-countdown {
    border-bottom: none;
  }

  .alert--primary {
    border-top-color: var(--sl-color-primary-600);
  }

  .alert--primary .alert__icon {
    color: var(--sl-color-primary-600);
  }

  .alert--success {
    border-top-color: var(--sl-color-success-600);
  }

  .alert--success .alert__icon {
    color: var(--sl-color-success-600);
  }

  .alert--neutral {
    border-top-color: var(--sl-color-neutral-600);
  }

  .alert--neutral .alert__icon {
    color: var(--sl-color-neutral-600);
  }

  .alert--warning {
    border-top-color: var(--sl-color-warning-600);
  }

  .alert--warning .alert__icon {
    color: var(--sl-color-warning-600);
  }

  .alert--danger {
    border-top-color: var(--sl-color-danger-600);
  }

  .alert--danger .alert__icon {
    color: var(--sl-color-danger-600);
  }

  .alert__message {
    flex: 1 1 auto;
    display: block;
    padding: var(--sl-spacing-large);
    overflow: hidden;
  }

  .alert__close-button {
    flex: 0 0 auto;
    display: flex;
    align-items: center;
    font-size: var(--sl-font-size-medium);
    padding-inline-end: var(--sl-spacing-medium);
  }

  .alert__countdown {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: calc(var(--sl-panel-border-width) * 3);
    background-color: var(--sl-panel-border-color);
    display: flex;
  }

  .alert__countdown--ltr {
    justify-content: flex-end;
  }

  .alert__countdown .alert__countdown-elapsed {
    height: 100%;
    width: 0;
  }

  .alert--primary .alert__countdown-elapsed {
    background-color: var(--sl-color-primary-600);
  }

  .alert--success .alert__countdown-elapsed {
    background-color: var(--sl-color-success-600);
  }

  .alert--neutral .alert__countdown-elapsed {
    background-color: var(--sl-color-neutral-600);
  }

  .alert--warning .alert__countdown-elapsed {
    background-color: var(--sl-color-warning-600);
  }

  .alert--danger .alert__countdown-elapsed {
    background-color: var(--sl-color-danger-600);
  }

  .alert__timer {
    display: none;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.QI2PUKCF.js
var toastStack = Object.assign(document.createElement("div"), { className: "sl-toast-stack" });
var SlAlert = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.hasSlotController = new HasSlotController(this, "icon", "suffix");
    this.localize = new LocalizeController2(this);
    this.open = false;
    this.closable = false;
    this.variant = "primary";
    this.duration = Infinity;
    this.remainingTime = this.duration;
  }
  firstUpdated() {
    this.base.hidden = !this.open;
  }
  restartAutoHide() {
    this.handleCountdownChange();
    clearTimeout(this.autoHideTimeout);
    clearInterval(this.remainingTimeInterval);
    if (this.open && this.duration < Infinity) {
      this.autoHideTimeout = window.setTimeout(() => this.hide(), this.duration);
      this.remainingTime = this.duration;
      this.remainingTimeInterval = window.setInterval(() => {
        this.remainingTime -= 100;
      }, 100);
    }
  }
  pauseAutoHide() {
    var _a;
    (_a = this.countdownAnimation) == null ? void 0 : _a.pause();
    clearTimeout(this.autoHideTimeout);
    clearInterval(this.remainingTimeInterval);
  }
  resumeAutoHide() {
    var _a;
    if (this.duration < Infinity) {
      this.autoHideTimeout = window.setTimeout(() => this.hide(), this.remainingTime);
      this.remainingTimeInterval = window.setInterval(() => {
        this.remainingTime -= 100;
      }, 100);
      (_a = this.countdownAnimation) == null ? void 0 : _a.play();
    }
  }
  handleCountdownChange() {
    if (this.open && this.duration < Infinity && this.countdown) {
      const { countdownElement } = this;
      const start = "100%";
      const end = "0";
      this.countdownAnimation = countdownElement.animate([{ width: start }, { width: end }], {
        duration: this.duration,
        easing: "linear"
      });
    }
  }
  handleCloseClick() {
    this.hide();
  }
  async handleOpenChange() {
    if (this.open) {
      this.emit("sl-show");
      if (this.duration < Infinity) {
        this.restartAutoHide();
      }
      await stopAnimations(this.base);
      this.base.hidden = false;
      const { keyframes, options } = getAnimation(this, "alert.show", { dir: this.localize.dir() });
      await animateTo(this.base, keyframes, options);
      this.emit("sl-after-show");
    } else {
      this.emit("sl-hide");
      clearTimeout(this.autoHideTimeout);
      clearInterval(this.remainingTimeInterval);
      await stopAnimations(this.base);
      const { keyframes, options } = getAnimation(this, "alert.hide", { dir: this.localize.dir() });
      await animateTo(this.base, keyframes, options);
      this.base.hidden = true;
      this.emit("sl-after-hide");
    }
  }
  handleDurationChange() {
    this.restartAutoHide();
  }
  /** Shows the alert. */
  async show() {
    if (this.open) {
      return void 0;
    }
    this.open = true;
    return waitForEvent(this, "sl-after-show");
  }
  /** Hides the alert */
  async hide() {
    if (!this.open) {
      return void 0;
    }
    this.open = false;
    return waitForEvent(this, "sl-after-hide");
  }
  /**
   * Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when
   * dismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by
   * calling this method again. The returned promise will resolve after the alert is hidden.
   */
  async toast() {
    return new Promise((resolve) => {
      this.handleCountdownChange();
      if (toastStack.parentElement === null) {
        document.body.append(toastStack);
      }
      toastStack.appendChild(this);
      requestAnimationFrame(() => {
        this.clientWidth;
        this.show();
      });
      this.addEventListener(
        "sl-after-hide",
        () => {
          toastStack.removeChild(this);
          resolve();
          if (toastStack.querySelector("sl-alert") === null) {
            toastStack.remove();
          }
        },
        { once: true }
      );
    });
  }
  render() {
    return x`
      <div
        part="base"
        class=${e7({
      alert: true,
      "alert--open": this.open,
      "alert--closable": this.closable,
      "alert--has-countdown": !!this.countdown,
      "alert--has-icon": this.hasSlotController.test("icon"),
      "alert--primary": this.variant === "primary",
      "alert--success": this.variant === "success",
      "alert--neutral": this.variant === "neutral",
      "alert--warning": this.variant === "warning",
      "alert--danger": this.variant === "danger"
    })}
        role="alert"
        aria-hidden=${this.open ? "false" : "true"}
        @mouseenter=${this.pauseAutoHide}
        @mouseleave=${this.resumeAutoHide}
      >
        <div part="icon" class="alert__icon">
          <slot name="icon"></slot>
        </div>

        <div part="message" class="alert__message" aria-live="polite">
          <slot></slot>
        </div>

        ${this.closable ? x`
              <sl-icon-button
                part="close-button"
                exportparts="base:close-button__base"
                class="alert__close-button"
                name="x-lg"
                library="system"
                label=${this.localize.term("close")}
                @click=${this.handleCloseClick}
              ></sl-icon-button>
            ` : ""}

        <div role="timer" class="alert__timer">${this.remainingTime}</div>

        ${this.countdown ? x`
              <div
                class=${e7({
      alert__countdown: true,
      "alert__countdown--ltr": this.countdown === "ltr"
    })}
              >
                <div class="alert__countdown-elapsed"></div>
              </div>
            ` : ""}
      </div>
    `;
  }
};
SlAlert.styles = [component_styles_default, alert_styles_default];
SlAlert.dependencies = { "sl-icon-button": SlIconButton };
__decorateClass([
  e5('[part~="base"]')
], SlAlert.prototype, "base", 2);
__decorateClass([
  e5(".alert__countdown-elapsed")
], SlAlert.prototype, "countdownElement", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlAlert.prototype, "open", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlAlert.prototype, "closable", 2);
__decorateClass([
  n4({ reflect: true })
], SlAlert.prototype, "variant", 2);
__decorateClass([
  n4({ type: Number })
], SlAlert.prototype, "duration", 2);
__decorateClass([
  n4({ type: String, reflect: true })
], SlAlert.prototype, "countdown", 2);
__decorateClass([
  r6()
], SlAlert.prototype, "remainingTime", 2);
__decorateClass([
  watch("open", { waitUntilFirstUpdate: true })
], SlAlert.prototype, "handleOpenChange", 1);
__decorateClass([
  watch("duration")
], SlAlert.prototype, "handleDurationChange", 1);
setDefaultAnimation("alert.show", {
  keyframes: [
    { opacity: 0, scale: 0.8 },
    { opacity: 1, scale: 1 }
  ],
  options: { duration: 250, easing: "ease" }
});
setDefaultAnimation("alert.hide", {
  keyframes: [
    { opacity: 1, scale: 1 },
    { opacity: 0, scale: 0.8 }
  ],
  options: { duration: 250, easing: "ease" }
});

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.OV3FWA7A.js
SlAlert.define("sl-alert");

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.M3A4TKTU.js
var animated_image_styles_default = i`
  :host {
    --control-box-size: 3rem;
    --icon-size: calc(var(--control-box-size) * 0.625);

    display: inline-flex;
    position: relative;
    cursor: pointer;
  }

  img {
    display: block;
    width: 100%;
    height: 100%;
  }

  img[aria-hidden='true'] {
    display: none;
  }

  .animated-image__control-box {
    display: flex;
    position: absolute;
    align-items: center;
    justify-content: center;
    top: calc(50% - var(--control-box-size) / 2);
    right: calc(50% - var(--control-box-size) / 2);
    width: var(--control-box-size);
    height: var(--control-box-size);
    font-size: var(--icon-size);
    background: none;
    border: solid 2px currentColor;
    background-color: rgb(0 0 0 /50%);
    border-radius: var(--sl-border-radius-circle);
    color: white;
    pointer-events: none;
    transition: var(--sl-transition-fast) opacity;
  }

  :host([play]:hover) .animated-image__control-box {
    opacity: 1;
  }

  :host([play]:not(:hover)) .animated-image__control-box {
    opacity: 0;
  }

  :host([play]) slot[name='play-icon'],
  :host(:not([play])) slot[name='pause-icon'] {
    display: none;
  }
`;

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.FVK4ULZ5.js
var SlAnimatedImage = class extends ShoelaceElement {
  constructor() {
    super(...arguments);
    this.isLoaded = false;
  }
  handleClick() {
    this.play = !this.play;
  }
  handleLoad() {
    const canvas = document.createElement("canvas");
    const { width, height } = this.animatedImage;
    canvas.width = width;
    canvas.height = height;
    canvas.getContext("2d").drawImage(this.animatedImage, 0, 0, width, height);
    this.frozenFrame = canvas.toDataURL("image/gif");
    if (!this.isLoaded) {
      this.emit("sl-load");
      this.isLoaded = true;
    }
  }
  handleError() {
    this.emit("sl-error");
  }
  handlePlayChange() {
    if (this.play) {
      this.animatedImage.src = "";
      this.animatedImage.src = this.src;
    }
  }
  handleSrcChange() {
    this.isLoaded = false;
  }
  render() {
    return x`
      <div class="animated-image">
        <img
          class="animated-image__animated"
          src=${this.src}
          alt=${this.alt}
          crossorigin="anonymous"
          aria-hidden=${this.play ? "false" : "true"}
          @click=${this.handleClick}
          @load=${this.handleLoad}
          @error=${this.handleError}
        />

        ${this.isLoaded ? x`
              <img
                class="animated-image__frozen"
                src=${this.frozenFrame}
                alt=${this.alt}
                aria-hidden=${this.play ? "true" : "false"}
                @click=${this.handleClick}
              />

              <div part="control-box" class="animated-image__control-box">
                <slot name="play-icon"><sl-icon name="play-fill" library="system"></sl-icon></slot>
                <slot name="pause-icon"><sl-icon name="pause-fill" library="system"></sl-icon></slot>
              </div>
            ` : ""}
      </div>
    `;
  }
};
SlAnimatedImage.styles = [component_styles_default, animated_image_styles_default];
SlAnimatedImage.dependencies = { "sl-icon": SlIcon };
__decorateClass([
  e5(".animated-image__animated")
], SlAnimatedImage.prototype, "animatedImage", 2);
__decorateClass([
  r6()
], SlAnimatedImage.prototype, "frozenFrame", 2);
__decorateClass([
  r6()
], SlAnimatedImage.prototype, "isLoaded", 2);
__decorateClass([
  n4()
], SlAnimatedImage.prototype, "src", 2);
__decorateClass([
  n4()
], SlAnimatedImage.prototype, "alt", 2);
__decorateClass([
  n4({ type: Boolean, reflect: true })
], SlAnimatedImage.prototype, "play", 2);
__decorateClass([
  watch("play", { waitUntilFirstUpdate: true })
], SlAnimatedImage.prototype, "handlePlayChange", 1);
__decorateClass([
  watch("src")
], SlAnimatedImage.prototype, "handleSrcChange", 1);

// node_modules/@shoelace-style/shoelace/dist/chunks/chunk.RJUO2BMU.js
SlAnimatedImage.define("sl-animated-image");

// src/el/root.js
var import_lit113 = __toESM(require_lib(), 1);

// node_modules/nanostores/task/index.js
var tasks = 0;
var resolves = [];
function startTask() {
  tasks += 1;
  return () => {
    tasks -= 1;
    if (tasks === 0) {
      let prevResolves = resolves;
      resolves = [];
      for (let i9 of prevResolves) i9();
    }
  };
}
function task(cb) {
  let endTask = startTask();
  let promise = cb().finally(endTask);
  promise.t = true;
  return promise;
}

// node_modules/nanostores/clean-stores/index.js
var clean = Symbol("clean");

// node_modules/nanostores/atom/index.js
var listenerQueue = [];
var lqIndex = 0;
var QUEUE_ITEMS_PER_LISTENER = 4;
var epoch = 0;
var atom = (initialValue) => {
  let listeners = [];
  let $atom = {
    get() {
      if (!$atom.lc) {
        $atom.listen(() => {
        })();
      }
      return $atom.value;
    },
    lc: 0,
    listen(listener) {
      $atom.lc = listeners.push(listener);
      return () => {
        for (let i9 = lqIndex + QUEUE_ITEMS_PER_LISTENER; i9 < listenerQueue.length; ) {
          if (listenerQueue[i9] === listener) {
            listenerQueue.splice(i9, QUEUE_ITEMS_PER_LISTENER);
          } else {
            i9 += QUEUE_ITEMS_PER_LISTENER;
          }
        }
        let index = listeners.indexOf(listener);
        if (~index) {
          listeners.splice(index, 1);
          if (!--$atom.lc) $atom.off();
        }
      };
    },
    notify(oldValue, changedKey) {
      epoch++;
      let runListenerQueue = !listenerQueue.length;
      for (let listener of listeners) {
        listenerQueue.push(
          listener,
          $atom.value,
          oldValue,
          changedKey
        );
      }
      if (runListenerQueue) {
        for (lqIndex = 0; lqIndex < listenerQueue.length; lqIndex += QUEUE_ITEMS_PER_LISTENER) {
          listenerQueue[lqIndex](
            listenerQueue[lqIndex + 1],
            listenerQueue[lqIndex + 2],
            listenerQueue[lqIndex + 3]
          );
        }
        listenerQueue.length = 0;
      }
    },
    /* It will be called on last listener unsubscribing.
       We will redefine it in onMount and onStop. */
    off() {
    },
    set(newValue) {
      let oldValue = $atom.value;
      if (oldValue !== newValue) {
        $atom.value = newValue;
        $atom.notify(oldValue);
      }
    },
    subscribe(listener) {
      let unbind = $atom.listen(listener);
      listener($atom.value);
      return unbind;
    },
    value: initialValue
  };
  if (true) {
    $atom[clean] = () => {
      listeners = [];
      $atom.lc = 0;
      $atom.off();
    };
  }
  return $atom;
};

// node_modules/nanostores/lifecycle/index.js
var MOUNT = 5;
var UNMOUNT = 6;
var REVERT_MUTATION = 10;
var on = (object, listener, eventKey, mutateStore) => {
  object.events = object.events || {};
  if (!object.events[eventKey + REVERT_MUTATION]) {
    object.events[eventKey + REVERT_MUTATION] = mutateStore((eventProps) => {
      object.events[eventKey].reduceRight((event, l5) => (l5(event), event), {
        shared: {},
        ...eventProps
      });
    });
  }
  object.events[eventKey] = object.events[eventKey] || [];
  object.events[eventKey].push(listener);
  return () => {
    let currentListeners = object.events[eventKey];
    let index = currentListeners.indexOf(listener);
    currentListeners.splice(index, 1);
    if (!currentListeners.length) {
      delete object.events[eventKey];
      object.events[eventKey + REVERT_MUTATION]();
      delete object.events[eventKey + REVERT_MUTATION];
    }
  };
};
var STORE_UNMOUNT_DELAY = 1e3;
var onMount = ($store, initialize) => {
  let listener = (payload) => {
    let destroy = initialize(payload);
    if (destroy) $store.events[UNMOUNT].push(destroy);
  };
  return on($store, listener, MOUNT, (runListeners) => {
    let originListen = $store.listen;
    $store.listen = (...args) => {
      if (!$store.lc && !$store.active) {
        $store.active = true;
        runListeners();
      }
      return originListen(...args);
    };
    let originOff = $store.off;
    $store.events[UNMOUNT] = [];
    $store.off = () => {
      originOff();
      setTimeout(() => {
        if ($store.active && !$store.lc) {
          $store.active = false;
          for (let destroy of $store.events[UNMOUNT]) destroy();
          $store.events[UNMOUNT] = [];
        }
      }, STORE_UNMOUNT_DELAY);
    };
    if (true) {
      let originClean = $store[clean];
      $store[clean] = () => {
        for (let destroy of $store.events[UNMOUNT]) destroy();
        $store.events[UNMOUNT] = [];
        $store.active = false;
        originClean();
      };
    }
    return () => {
      $store.listen = originListen;
      $store.off = originOff;
    };
  });
};

// src/lib/oauth-client.js
var import_oauth_client_browser = __toESM(require_dist15(), 1);
var oauthClient;
async function setupClient() {
  const metadataURL = is_prod_default ? "/client-metadata.json" : "/dev-client-metadata.json";
  const r10 = await fetch(metadataURL);
  if (!r10.ok) {
    console.error(`Failed to fetch own metadata, all is broken: ${r10.statusText}.`);
    return;
  }
  const clientMetadata = await r10.json();
  oauthClient = new import_oauth_client_browser.BrowserOAuthClient({
    clientMetadata,
    handleResolver: "https://bsky.social"
  });
}

// src/lib/agent.js
var import_api = __toESM(require_dist20(), 1);
var agent;
async function setupAgent(session) {
  agent = new import_api.Agent(session);
}

// src/store/identity.js
var $loginLoading = atom(true);
var $loginError = atom(false);
var $isLoggedIn = atom(false);
onMount($isLoggedIn, () => {
  task(async () => {
    $loginError.set(null);
    $loginLoading.set(true);
    await setupClient();
    const result = await oauthClient.init();
    $loginLoading.set(false);
    oauthClient.addEventListener("deleted", logout);
    if (result?.session) {
      $isLoggedIn.set(true);
      await setupAgent(result.session);
      const profile = await agent.getProfile({ actor: agent.accountDid });
      console.warn(`Profile:`, profile);
    } else {
      $isLoggedIn.set(false);
    }
  });
});
function logout() {
  $loginLoading.set(false);
  $isLoggedIn.set(false);
  $loginError.set(null);
}

// node_modules/@nanostores/router/index.js
function createRouter(routes, opts = {}) {
  let router = atom();
  router.routes = Object.keys(routes).map((name2) => {
    let pattern = routes[name2];
    if (typeof pattern !== "string") {
      return [name2, ...[pattern].flat()];
    }
    pattern = pattern.replace(/\/$/g, "") || "/";
    let regexp = pattern.replace(/[\s!#$()+,.:<=?[\\\]^{|}]/g, "\\$&").replace(/\/\\:(\w+)\\\?/g, "(?:/(?<$1>(?<=/)[^/]+))?").replace(/\/\\:(\w+)/g, "/(?<$1>[^/]+)");
    return [name2, RegExp("^" + regexp + "$", "i"), null, pattern];
  });
  let prev;
  let parse2 = (href) => {
    let url = new URL(href.replace(/#$/, ""), "http://a");
    let cache = url.pathname + url.search + url.hash;
    if (prev === cache) return false;
    prev = cache;
    let path = opts.search ? url.pathname + url.search : url.pathname;
    path = path.replace(/\/($|\?)/, "$1") || "/";
    for (let [route, regexp, callback] of router.routes) {
      let match = path.match(regexp);
      if (match) {
        return {
          hash: url.hash,
          params: callback ? callback(...match.slice(1)) : Object.keys({ ...match.groups }).reduce((params, key) => {
            params[key] = match.groups[key] ? decodeURIComponent(match.groups[key]) : "";
            return params;
          }, {}),
          path,
          route,
          search: Object.fromEntries(url.searchParams)
        };
      }
    }
  };
  let click = (event) => {
    let link = event.target.closest("a");
    if (link && event.button === 0 && // Left mouse button
    link.target !== "_blank" && // Not for new tab
    link.origin === location.origin && // Not external link
    link.rel !== "external" && // Not external link
    link.target !== "_self" && // Now manually disabled
    !link.download && // Not download link
    !event.altKey && // Not download link by user
    !event.metaKey && // Not open in new tab by user
    !event.ctrlKey && // Not open in new tab by user
    !event.shiftKey && // Not open in new window by user
    !event.defaultPrevented) {
      event.preventDefault();
      let hashChanged = location.hash !== link.hash;
      router.open(link.href);
      if (hashChanged) {
        location.hash = link.hash;
        if (link.hash === "" || link.hash === "#") {
          window.dispatchEvent(new HashChangeEvent("hashchange"));
        }
      }
    }
  };
  let set = router.set;
  if (true) {
    delete router.set;
  }
  let change = () => {
    let page = parse2(location.href);
    if (page !== false) set(page);
  };
  if (typeof window !== "undefined" && typeof location !== "undefined") {
    onMount(router, () => {
      let page = parse2(location.href);
      if (page !== false) set(page);
      if (opts.links !== false) document.body.addEventListener("click", click);
      window.addEventListener("popstate", change);
      window.addEventListener("hashchange", change);
      return () => {
        prev = void 0;
        document.body.removeEventListener("click", click);
        window.removeEventListener("popstate", change);
        window.removeEventListener("hashchange", change);
      };
    });
  } else {
    set(parse2("/"));
  }
  router.open = (path, redirect) => {
    let page = parse2(path);
    if (page !== false) {
      if (typeof history !== "undefined") {
        if (redirect) {
          history.replaceState(null, null, path);
        } else {
          history.pushState(null, null, path);
        }
      }
      set(page);
    }
  };
  return router;
}
function getPagePath(router, name2, params, search) {
  if (typeof name2 === "object") {
    search = params;
    params = name2.params;
    name2 = name2.route;
  }
  let route = router.routes.find((i9) => i9[0] === name2);
  if (true) {
    if (!route[3]) throw new Error("RegExp routes are not supported");
  }
  let path = route[3].replace(/\/:\w+\?/g, (i9) => {
    let param = params && params[i9.slice(2, -1)];
    if (param) {
      return "/" + encodeURIComponent(param);
    } else {
      return "";
    }
  }).replace(/\/:\w+/g, (i9) => "/" + encodeURIComponent(params[i9.slice(2)]));
  if (search) {
    let postfix = "" + new URLSearchParams(search);
    if (postfix) return path + "?" + postfix;
  }
  return path;
}
function redirectPage(router, name2, params, search) {
  router.open(getPagePath(router, name2, params, search), true);
}

// src/store/router.js
var $router = createRouter(
  {
    home: "/",
    login: "/login",
    tos: "/tos",
    policy: "/policy"
  },
  {
    notFound: "/404"
  }
);
$isLoggedIn.subscribe((val) => {
  if (!val) return redirectPage($router, "login");
  return redirectPage($router, "home");
});

// src/el/root.js
var VibrantRoot = class extends r4 {
  #router = new import_lit113.StoreController(this, $router);
  static styles = [
    i`
      :host {
        display: block;
      }
      .login, .loading {
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
      }
    `
    // buttons,
  ];
  render() {
    const route = this.#router.value.route;
    console.warn(`route`, route);
    if (route === "login") return x`<div class="login">login…<v-login></v-login></div>`;
    if (route === "tos") return x`<div>tos</div>`;
    if (route === "policy") return x`<div>policy</div>`;
    if (route === "home") return x`<div class="home">
      home
    </div>`;
    return x`<v-404></v-404>`;
  }
};
customElements.define("v-root", VibrantRoot);

// src/el/404.js
var Vibrant404 = class extends r4 {
  static styles = i`
    :host {
      display: block;
      color: var(--sl-color-danger-500);
      text-align: center;
      padding: 1.5rem 1rem 1rem 1rem;
    }
  `;
  render() {
    return x`<p>
      Not all those who wander are lost, but it looks like <em>you</em> are.
    </p>`;
  }
};
customElements.define("v-404", Vibrant404);

// src/el/loading.js
var VibrantLoading = class extends r4 {
  static styles = i`
    :host {
      display: block;
      width: 100%;
      height: 100%;
      --pulse-fill: var(--royal-purple);
    }
    div {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
    }
    span {
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      max-width: 6rem;
      margin-top: 3rem;
      margin-bottom: 3rem;
    }
    span::before, span::after {
      content: "";
      position: absolute;
      border-radius: 50%;
      animation: pulsOut 1.8s ease-in-out infinite;
      filter: drop-shadow(0 0 1rem rgba(255, 255, 255, 0.75));
    }
    span::before {
      width: 100%;
      padding-bottom: 100%;
      box-shadow: inset 0 0 0 1rem var(--pulse-fill);
      animation-name: pulsIn;
    }
    span::after {
      width: calc(100% - 2rem);
      padding-bottom: calc(100% - 2rem);
      box-shadow: 0 0 0 0 var(--pulse-fill);
    }
    @keyframes pulsIn {
      0% {
        box-shadow: inset 0 0 0 1rem var(--pulse-fill);
        opacity: 1;
      }
      50%, 100% {
        box-shadow: inset 0 0 0 0 var(--pulse-fill);
        opacity: 0;
      }
    }
    @keyframes pulsOut {
      0%, 50% {
        box-shadow: 0 0 0 0 var(--pulse-fill);
        opacity: 0;
      }
      100% {
        box-shadow: 0 0 0 1rem var(--pulse-fill);
        opacity: 1;
      }
    }
  `;
  render() {
    return x`<div><span></span></div>`;
  }
};
customElements.define("v-loading", VibrantLoading);

// site/vibrant.js
if (is_prod_default && window.location.search === "?dev") window.location = `https://vibrant.bast/${window.location.hash}`;
/*! Bundled license information:

@lit/reactive-element/css-tag.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/reactive-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/lit-html.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-element/lit-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/is-server.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/custom-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/property.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/state.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/event-options.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/base.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/query.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/query-all.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/query-async.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/query-assigned-elements.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/query-assigned-nodes.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directive.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/class-map.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directive-helpers.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/if-defined.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/live.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/when.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/static.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/style-map.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/unsafe-html.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/async-directive.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/ref.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/map.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directives/range.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=vibrant.min.js.map
